import{aV as e,aY as l,bZ as t,b_ as a,b$ as n,c0 as o,aR as s,c1 as i,c2 as r,c3 as u,c4 as c,c5 as d,c6 as p,c7 as v,c8 as b,c9 as m,ca as h,cb as f,cc as g,cd as y,ce as x,cf as C,a$ as S,bX as O,bk as L,b1 as k,N as w,ar as I,aA as E,x as T,bo as B,aI as M,X as V,b2 as z,Y as F,r as D,aJ as P,bb as A,cg as j,d as _,b7 as q,S as W,o as K,h as $,w as R,e as H,n as N,a as G,a8 as Q,c as U,bq as X,ch as Y,aa as Z,F as J,B as ee,t as le,G as te,a5 as ae,ac as ne,Z as oe,K as se,L as ie,az as re,b3 as ue,ag as ce,aL as de,bG as pe,q as ve,al as be,a9 as me,_ as he,E as fe,b6 as ge,R as ye,W as xe,b4 as Ce,ci as Se,cj as Oe,ae as Le,aG as ke,$ as we,aF as Ie,bj as Ee,aH as Te,ck as Be,A as Me,ao as Ve,g as ze,i as Fe,C as De,bf as Pe,bv as Ae,aK as je,cl as _e}from"./index-ec301f65.js";import{U as qe,C as We}from"./event-5568c9d8.js";import{a as Ke,u as $e}from"./use-form-common-props-12176987.js";import{u as Re,a as He}from"./use-form-item-f00b3d1a.js";import{E as Ne,a as Ge,b as Qe}from"./el-popper-12ece89c.js";import{i as Ue,E as Xe}from"./el-input-4221e35d.js";import{E as Ye,t as Ze}from"./el-tag-107729d4.js";import{u as Je}from"./el-button-2b7f8e7c.js";import{s as el}from"./scroll-62cdab63.js";import{d as ll}from"./debounce-ca847a1b.js";import{i as tl}from"./validator-bd939a12.js";function al(e,l){for(var t=-1,a=null==e?0:e.length;++t<a;)if(l(e[t],t,e))return!0;return!1}var nl=1,ol=2;function sl(t,a,n,o,s,i){var r=n&nl,u=t.length,c=a.length;if(u!=c&&!(r&&c>u))return!1;var d=i.get(t),p=i.get(a);if(d&&p)return d==a&&p==t;var v=-1,b=!0,m=n&ol?new e:void 0;for(i.set(t,a),i.set(a,t);++v<u;){var h=t[v],f=a[v];if(o)var g=r?o(f,h,v,a,t,i):o(h,f,v,t,a,i);if(void 0!==g){if(g)continue;b=!1;break}if(m){if(!al(a,(function(e,t){if(!l(m,t)&&(h===e||s(h,e,n,o,i)))return m.push(t)}))){b=!1;break}}else if(h!==f&&!s(h,f,n,o,i)){b=!1;break}}return i.delete(t),i.delete(a),b}function il(e){var l=-1,t=Array(e.size);return e.forEach((function(e,a){t[++l]=[a,e]})),t}function rl(e){var l=-1,t=Array(e.size);return e.forEach((function(e){t[++l]=e})),t}var ul=1,cl=2,dl="[object Boolean]",pl="[object Date]",vl="[object Error]",bl="[object Map]",ml="[object Number]",hl="[object RegExp]",fl="[object Set]",gl="[object String]",yl="[object Symbol]",xl="[object ArrayBuffer]",Cl="[object DataView]",Sl=t?t.prototype:void 0,Ol=Sl?Sl.valueOf:void 0;var Ll=1,kl=Object.prototype.hasOwnProperty;var wl=1,Il="[object Arguments]",El="[object Array]",Tl="[object Object]",Bl=Object.prototype.hasOwnProperty;function Ml(e,l,t,d,p,v){var b=s(e),m=s(l),h=b?El:i(e),f=m?El:i(l),g=(h=h==Il?Tl:h)==Tl,y=(f=f==Il?Tl:f)==Tl,x=h==f;if(x&&r(e)){if(!r(l))return!1;b=!0,g=!1}if(x&&!g)return v||(v=new u),b||c(e)?sl(e,l,t,d,p,v):function(e,l,t,o,s,i,r){switch(t){case Cl:if(e.byteLength!=l.byteLength||e.byteOffset!=l.byteOffset)return!1;e=e.buffer,l=l.buffer;case xl:return!(e.byteLength!=l.byteLength||!i(new n(e),new n(l)));case dl:case pl:case ml:return a(+e,+l);case vl:return e.name==l.name&&e.message==l.message;case hl:case gl:return e==l+"";case bl:var u=il;case fl:var c=o&ul;if(u||(u=rl),e.size!=l.size&&!c)return!1;var d=r.get(e);if(d)return d==l;o|=cl,r.set(e,l);var p=sl(u(e),u(l),o,s,i,r);return r.delete(e),p;case yl:if(Ol)return Ol.call(e)==Ol.call(l)}return!1}(e,l,h,t,d,p,v);if(!(t&wl)){var C=g&&Bl.call(e,"__wrapped__"),S=y&&Bl.call(l,"__wrapped__");if(C||S){var O=C?e.value():e,L=S?l.value():l;return v||(v=new u),p(O,L,t,d,v)}}return!!x&&(v||(v=new u),function(e,l,t,a,n,s){var i=t&Ll,r=o(e),u=r.length;if(u!=o(l).length&&!i)return!1;for(var c=u;c--;){var d=r[c];if(!(i?d in l:kl.call(l,d)))return!1}var p=s.get(e),v=s.get(l);if(p&&v)return p==l&&v==e;var b=!0;s.set(e,l),s.set(l,e);for(var m=i;++c<u;){var h=e[d=r[c]],f=l[d];if(a)var g=i?a(f,h,d,l,e,s):a(h,f,d,e,l,s);if(!(void 0===g?h===f||n(h,f,t,a,s):g)){b=!1;break}m||(m="constructor"==d)}if(b&&!m){var y=e.constructor,x=l.constructor;y==x||!("constructor"in e)||!("constructor"in l)||"function"==typeof y&&y instanceof y&&"function"==typeof x&&x instanceof x||(b=!1)}return s.delete(e),s.delete(l),b}(e,l,t,d,p,v))}function Vl(e,l,t,a,n){return e===l||(null==e||null==l||!d(e)&&!d(l)?e!=e&&l!=l:Ml(e,l,t,a,Vl,n))}function zl(e,l){return null!=e&&l in Object(e)}function Fl(e,l){return null!=e&&function(e,l,t){for(var a=-1,n=(l=p(l,e)).length,o=!1;++a<n;){var i=v(l[a]);if(!(o=null!=e&&t(e,i)))break;e=e[i]}return o||++a!=n?o:!!(n=null==e?0:e.length)&&b(n)&&m(i,n)&&(s(e)||h(e))}(e,l,zl)}function Dl(e,l){return Vl(e,l)}function Pl(e,l){return function(e,l,t){for(var a=-1,n=l.length,o={};++a<n;){var s=l[a],i=f(e,s);t(i,s)&&g(o,p(s,e),i)}return o}(e,l,(function(l,t){return Fl(e,t)}))}const Al=y((function(e,l){return null==e?{}:Pl(e,l)})),jl=(e="")=>e.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d"),_l=e=>x(e),ql=new Map;let Wl;function Kl(e,l){let t=[];return Array.isArray(l.arg)?t=l.arg:O(l.arg)&&t.push(l.arg),function(a,n){const o=l.instance.popperRef,s=a.target,i=null==n?void 0:n.target,r=!l||!l.instance,u=!s||!i,c=e.contains(s)||e.contains(i),d=e===s,p=t.length&&t.some((e=>null==e?void 0:e.contains(s)))||t.length&&t.includes(i),v=o&&(o.contains(s)||o.contains(i));r||u||c||d||p||v||l.value(a,n)}}S&&(document.addEventListener("mousedown",(e=>Wl=e)),document.addEventListener("mouseup",(e=>{for(const l of ql.values())for(const{documentHandler:t}of l)t(e,Wl)})));const $l={beforeMount(e,l){ql.has(e)||ql.set(e,[]),ql.get(e).push({documentHandler:Kl(e,l),bindingFn:l.value})},updated(e,l){ql.has(e)||ql.set(e,[]);const t=ql.get(e),a=t.findIndex((e=>e.bindingFn===l.oldValue)),n={documentHandler:Kl(e,l),bindingFn:l.value};a>=0?t.splice(a,1,n):t.push(n)},unmounted(e){ql.delete(e)}},Rl={modelValue:{type:[Number,String,Boolean],default:void 0},label:{type:[String,Boolean,Number,Object]},indeterminate:Boolean,disabled:Boolean,checked:Boolean,name:{type:String,default:void 0},trueLabel:{type:[String,Number],default:void 0},falseLabel:{type:[String,Number],default:void 0},id:{type:String,default:void 0},controls:{type:String,default:void 0},border:Boolean,size:L,tabindex:[String,Number],validateEvent:{type:Boolean,default:!0}},Hl={[qe]:e=>k(e)||w(e)||I(e),change:e=>k(e)||w(e)||I(e)},Nl=Symbol("checkboxGroupContextKey"),Gl=(e,{model:l,isLimitExceeded:t,hasOwnLabel:a,isDisabled:n,isLabeledByFormItem:o})=>{const s=E(Nl,void 0),{formItem:i}=Re(),{emit:r}=M();function u(l){var t,a;return l===e.trueLabel||!0===l?null==(t=e.trueLabel)||t:null!=(a=e.falseLabel)&&a}const c=T((()=>(null==s?void 0:s.validateEvent)||e.validateEvent));return V((()=>e.modelValue),(()=>{c.value&&(null==i||i.validate("change").catch((e=>z())))})),{handleChange:function(e){if(t.value)return;const l=e.target;r("change",u(l.checked),e)},onClickRoot:async function(s){if(!t.value&&!a.value&&!n.value&&o.value){s.composedPath().some((e=>"LABEL"===e.tagName))||(l.value=u([!1,e.falseLabel].includes(l.value)),await F(),function(e,l){r("change",u(e),l)}(l.value,s))}}}},Ql=(e,l)=>{const{formItem:t}=Re(),{model:a,isGroup:n,isLimitExceeded:o}=(e=>{const l=D(!1),{emit:t}=M(),a=E(Nl,void 0),n=T((()=>!1===B(a))),o=D(!1);return{model:T({get(){var t,o;return n.value?null==(t=null==a?void 0:a.modelValue)?void 0:t.value:null!=(o=e.modelValue)?o:l.value},set(e){var s,i;n.value&&P(e)?(o.value=void 0!==(null==(s=null==a?void 0:a.max)?void 0:s.value)&&e.length>(null==a?void 0:a.max.value),!1===o.value&&(null==(i=null==a?void 0:a.changeEvent)||i.call(a,e))):(t(qe,e),l.value=e)}}),isGroup:n,isLimitExceeded:o}})(e),{isFocused:s,isChecked:i,checkboxButtonSize:r,checkboxSize:u,hasOwnLabel:c}=((e,l,{model:t})=>{const a=E(Nl,void 0),n=D(!1),o=T((()=>{const l=t.value;return I(l)?l:P(l)?A(e.label)?l.map(j).some((l=>Dl(l,e.label))):l.map(j).includes(e.label):null!=l?l===e.trueLabel:!!l}));return{checkboxButtonSize:$e(T((()=>{var e;return null==(e=null==a?void 0:a.size)?void 0:e.value})),{prop:!0}),isChecked:o,isFocused:n,checkboxSize:$e(T((()=>{var e;return null==(e=null==a?void 0:a.size)?void 0:e.value}))),hasOwnLabel:T((()=>!(!l.default&&!e.label)))}})(e,l,{model:a}),{isDisabled:d}=(({model:e,isChecked:l})=>{const t=E(Nl,void 0),a=T((()=>{var a,n;const o=null==(a=null==t?void 0:t.max)?void 0:a.value,s=null==(n=null==t?void 0:t.min)?void 0:n.value;return!B(o)&&e.value.length>=o&&!l.value||!B(s)&&e.value.length<=s&&l.value}));return{isDisabled:Ke(T((()=>(null==t?void 0:t.disabled.value)||a.value))),isLimitDisabled:a}})({model:a,isChecked:i}),{inputId:p,isLabeledByFormItem:v}=He(e,{formItemContext:t,disableIdGeneration:c,disableIdManagement:n}),{handleChange:b,onClickRoot:m}=Gl(e,{model:a,isLimitExceeded:o,hasOwnLabel:c,isDisabled:d,isLabeledByFormItem:v});return((e,{model:l})=>{e.checked&&(P(l.value)&&!l.value.includes(e.label)?l.value.push(e.label):l.value=e.trueLabel||!0)})(e,{model:a}),{inputId:p,isLabeledByFormItem:v,isChecked:i,isDisabled:d,isFocused:s,checkboxButtonSize:r,checkboxSize:u,hasOwnLabel:c,model:a,handleChange:b,onClickRoot:m}},Ul=["tabindex","role","aria-checked"],Xl=["id","aria-hidden","name","tabindex","disabled","true-value","false-value"],Yl=["id","aria-hidden","disabled","value","name","tabindex"],Zl=_({name:"ElCheckbox"});var Jl=ne(_({...Zl,props:Rl,emits:Hl,setup(e){const l=e,t=q(),{inputId:a,isLabeledByFormItem:n,isChecked:o,isDisabled:s,isFocused:i,checkboxSize:r,hasOwnLabel:u,model:c,handleChange:d,onClickRoot:p}=Ql(l,t),v=W("checkbox"),b=T((()=>[v.b(),v.m(r.value),v.is("disabled",s.value),v.is("bordered",l.border),v.is("checked",o.value)])),m=T((()=>[v.e("input"),v.is("disabled",s.value),v.is("checked",o.value),v.is("indeterminate",l.indeterminate),v.is("focus",i.value)]));return(e,l)=>(K(),$(ae(!G(u)&&G(n)?"span":"label"),{class:N(G(b)),"aria-controls":e.indeterminate?e.controls:null,onClick:G(p)},{default:R((()=>[H("span",{class:N(G(m)),tabindex:e.indeterminate?0:void 0,role:e.indeterminate?"checkbox":void 0,"aria-checked":e.indeterminate?"mixed":void 0},[e.trueLabel||e.falseLabel?Q((K(),U("input",{key:0,id:G(a),"onUpdate:modelValue":l[0]||(l[0]=e=>X(c)?c.value=e:null),class:N(G(v).e("original")),type:"checkbox","aria-hidden":e.indeterminate?"true":"false",name:e.name,tabindex:e.tabindex,disabled:G(s),"true-value":e.trueLabel,"false-value":e.falseLabel,onChange:l[1]||(l[1]=(...e)=>G(d)&&G(d)(...e)),onFocus:l[2]||(l[2]=e=>i.value=!0),onBlur:l[3]||(l[3]=e=>i.value=!1)},null,42,Xl)),[[Y,G(c)]]):Q((K(),U("input",{key:1,id:G(a),"onUpdate:modelValue":l[4]||(l[4]=e=>X(c)?c.value=e:null),class:N(G(v).e("original")),type:"checkbox","aria-hidden":e.indeterminate?"true":"false",disabled:G(s),value:e.label,name:e.name,tabindex:e.tabindex,onChange:l[5]||(l[5]=(...e)=>G(d)&&G(d)(...e)),onFocus:l[6]||(l[6]=e=>i.value=!0),onBlur:l[7]||(l[7]=e=>i.value=!1)},null,42,Yl)),[[Y,G(c)]]),H("span",{class:N(G(v).e("inner"))},null,2)],10,Ul),G(u)?(K(),U("span",{key:0,class:N(G(v).e("label"))},[Z(e.$slots,"default"),e.$slots.default?te("v-if",!0):(K(),U(J,{key:0},[ee(le(e.label),1)],64))],2)):te("v-if",!0)])),_:3},8,["class","aria-controls","onClick"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox.vue"]]);const et=["name","tabindex","disabled","true-value","false-value"],lt=["name","tabindex","disabled","value"],tt=_({name:"ElCheckboxButton"});var at=ne(_({...tt,props:Rl,emits:Hl,setup(e){const l=e,t=q(),{isFocused:a,isChecked:n,isDisabled:o,checkboxButtonSize:s,model:i,handleChange:r}=Ql(l,t),u=E(Nl,void 0),c=W("checkbox"),d=T((()=>{var e,l,t,a;const n=null!=(l=null==(e=null==u?void 0:u.fill)?void 0:e.value)?l:"";return{backgroundColor:n,borderColor:n,color:null!=(a=null==(t=null==u?void 0:u.textColor)?void 0:t.value)?a:"",boxShadow:n?`-1px 0 0 0 ${n}`:void 0}})),p=T((()=>[c.b("button"),c.bm("button",s.value),c.is("disabled",o.value),c.is("checked",n.value),c.is("focus",a.value)]));return(e,l)=>(K(),U("label",{class:N(G(p))},[e.trueLabel||e.falseLabel?Q((K(),U("input",{key:0,"onUpdate:modelValue":l[0]||(l[0]=e=>X(i)?i.value=e:null),class:N(G(c).be("button","original")),type:"checkbox",name:e.name,tabindex:e.tabindex,disabled:G(o),"true-value":e.trueLabel,"false-value":e.falseLabel,onChange:l[1]||(l[1]=(...e)=>G(r)&&G(r)(...e)),onFocus:l[2]||(l[2]=e=>a.value=!0),onBlur:l[3]||(l[3]=e=>a.value=!1)},null,42,et)),[[Y,G(i)]]):Q((K(),U("input",{key:1,"onUpdate:modelValue":l[4]||(l[4]=e=>X(i)?i.value=e:null),class:N(G(c).be("button","original")),type:"checkbox",name:e.name,tabindex:e.tabindex,disabled:G(o),value:e.label,onChange:l[5]||(l[5]=(...e)=>G(r)&&G(r)(...e)),onFocus:l[6]||(l[6]=e=>a.value=!0),onBlur:l[7]||(l[7]=e=>a.value=!1)},null,42,lt)),[[Y,G(i)]]),e.$slots.default||e.label?(K(),U("span",{key:2,class:N(G(c).be("button","inner")),style:oe(G(n)?G(d):void 0)},[Z(e.$slots,"default",{},(()=>[ee(le(e.label),1)]))],6)):te("v-if",!0)],2))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-button.vue"]]);const nt=se({modelValue:{type:ie(Array),default:()=>[]},disabled:Boolean,min:Number,max:Number,size:L,label:String,fill:String,textColor:String,tag:{type:String,default:"div"},validateEvent:{type:Boolean,default:!0}}),ot={[qe]:e=>P(e),change:e=>P(e)},st=_({name:"ElCheckboxGroup"});var it=ne(_({...st,props:nt,emits:ot,setup(e,{emit:l}){const t=e,a=W("checkbox"),{formItem:n}=Re(),{inputId:o,isLabeledByFormItem:s}=He(t,{formItemContext:n}),i=async e=>{l(qe,e),await F(),l("change",e)},r=T({get:()=>t.modelValue,set(e){i(e)}});return re(Nl,{...Al(ue(t),["size","min","max","disabled","validateEvent","fill","textColor"]),modelValue:r,changeEvent:i}),V((()=>t.modelValue),(()=>{t.validateEvent&&(null==n||n.validate("change").catch((e=>z())))})),(e,l)=>{var t;return K(),$(ae(e.tag),{id:G(o),class:N(G(a).b("group")),role:"group","aria-label":G(s)?void 0:e.label||"checkbox-group","aria-labelledby":G(s)?null==(t=G(n))?void 0:t.labelId:void 0},{default:R((()=>[Z(e.$slots,"default")])),_:3},8,["id","class","aria-label","aria-labelledby"])}}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-group.vue"]]);const rt=ce(Jl,{CheckboxButton:at,CheckboxGroup:it}),ut=de(at),ct=de(it),dt=Symbol("ElSelectGroup"),pt=Symbol("ElSelect");var vt=ne(_({name:"ElOption",componentName:"ElOption",props:{value:{required:!0,type:[String,Number,Boolean,Object]},label:[String,Number],created:Boolean,disabled:{type:Boolean,default:!1}},setup(e){const l=W("select"),t=ve({index:-1,groupDisabled:!1,visible:!0,hitState:!1,hover:!1}),{currentLabel:a,itemSelected:n,isDisabled:o,select:s,hoverItem:i}=function(e,l){const t=E(pt),a=E(dt,{disabled:!1}),n=T((()=>"[object object]"===Object.prototype.toString.call(e.value).toLowerCase())),o=T((()=>t.props.multiple?d(t.props.modelValue,e.value):p(e.value,t.props.modelValue))),s=T((()=>{if(t.props.multiple){const e=t.props.modelValue||[];return!o.value&&e.length>=t.props.multipleLimit&&t.props.multipleLimit>0}return!1})),i=T((()=>e.label||(n.value?"":e.value))),r=T((()=>e.value||e.label||"")),u=T((()=>e.disabled||l.groupDisabled||s.value)),c=M(),d=(e=[],l)=>{if(n.value){const a=t.props.valueKey;return e&&e.some((e=>j(pe(e,a))===pe(l,a)))}return e&&e.includes(l)},p=(e,l)=>{if(n.value){const{valueKey:a}=t.props;return pe(e,a)===pe(l,a)}return e===l};V((()=>i.value),(()=>{e.created||t.props.remote||t.setSelected()})),V((()=>e.value),((l,a)=>{const{remote:n,valueKey:o}=t.props;if(Object.is(l,a)||(t.onOptionDestroy(a,c.proxy),t.onOptionCreate(c.proxy)),!e.created&&!n){if(o&&"object"==typeof l&&"object"==typeof a&&l[o]===a[o])return;t.setSelected()}})),V((()=>a.disabled),(()=>{l.groupDisabled=a.disabled}),{immediate:!0});const{queryChange:v}=j(t);return V(v,(a=>{const{query:n}=G(a),o=new RegExp(jl(n),"i");l.visible=o.test(i.value)||e.created,l.visible||t.filteredOptionsCount--}),{immediate:!0}),{select:t,currentLabel:i,currentValue:r,itemSelected:o,isDisabled:u,hoverItem:()=>{e.disabled||a.disabled||(t.hoverIndex=t.optionsArray.indexOf(c.proxy))}}}(e,t),{visible:r,hover:u}=ue(t),c=M().proxy;return s.onOptionCreate(c),be((()=>{const e=c.value,{selected:l}=s,t=(s.props.multiple?l:[l]).some((e=>e.value===c.value));F((()=>{s.cachedOptions.get(e)!==c||t||s.cachedOptions.delete(e)})),s.onOptionDestroy(e,c)})),{ns:l,currentLabel:a,itemSelected:n,isDisabled:o,select:s,hoverItem:i,visible:r,hover:u,selectOptionClick:function(){!0!==e.disabled&&!0!==t.groupDisabled&&s.handleOptionSelect(c,!0)},states:t}}}),[["render",function(e,l,t,a,n,o){return Q((K(),U("li",{class:N([e.ns.be("dropdown","item"),e.ns.is("disabled",e.isDisabled),{selected:e.itemSelected,hover:e.hover}]),onMouseenter:l[0]||(l[0]=(...l)=>e.hoverItem&&e.hoverItem(...l)),onClick:l[1]||(l[1]=he(((...l)=>e.selectOptionClick&&e.selectOptionClick(...l)),["stop"]))},[Z(e.$slots,"default",{},(()=>[H("span",null,le(e.currentLabel),1)]))],34)),[[me,e.visible]])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/select/src/option.vue"]]);var bt=ne(_({name:"ElSelectDropdown",componentName:"ElSelectDropdown",setup(){const e=E(pt),l=W("select"),t=T((()=>e.props.popperClass)),a=T((()=>e.props.multiple)),n=T((()=>e.props.fitInputWidth)),o=D("");function s(){var l;o.value=`${null==(l=e.selectWrapper)?void 0:l.offsetWidth}px`}return fe((()=>{s(),ge(e.selectWrapper,s)})),{ns:l,minWidth:o,popperClass:t,isMultiple:a,isFitInputWidth:n}}}),[["render",function(e,l,t,a,n,o){return K(),U("div",{class:N([e.ns.b("dropdown"),e.ns.is("multiple",e.isMultiple),e.popperClass]),style:oe({[e.isFitInputWidth?"width":"minWidth"]:e.minWidth})},[Z(e.$slots,"default")],6)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/select/src/select-dropdown.vue"]]);const mt=(e,l,t)=>{const{t:a}=ye(),n=W("select");Je({from:"suffixTransition",replacement:"override style scheme",version:"2.3.0",scope:"props",ref:"https://element-plus.org/en-US/component/select.html#select-attributes"},T((()=>!1===e.suffixTransition)));const o=D(null),s=D(null),i=D(null),r=D(null),u=D(null),c=D(null),d=D(null),p=D(-1),v=xe({query:""}),b=xe(""),m=D([]);let h=0;const{form:f,formItem:g}=Re(),y=T((()=>!e.filterable||e.multiple||!l.visible)),x=T((()=>e.disabled||(null==f?void 0:f.disabled))),O=T((()=>{const t=e.multiple?Array.isArray(e.modelValue)&&e.modelValue.length>0:void 0!==e.modelValue&&null!==e.modelValue&&""!==e.modelValue;return e.clearable&&!x.value&&l.inputHovering&&t})),L=T((()=>e.remote&&e.filterable&&!e.remoteShowSuffix?"":e.suffixIcon)),I=T((()=>n.is("reverse",L.value&&l.visible&&e.suffixTransition))),E=T((()=>e.remote?300:0)),B=T((()=>e.loading?e.loadingText||a("el.select.loading"):(!e.remote||""!==l.query||0!==l.options.size)&&(e.filterable&&l.query&&l.options.size>0&&0===l.filteredOptionsCount?e.noMatchText||a("el.select.noMatch"):0===l.options.size?e.noDataText||a("el.select.noData"):null))),M=T((()=>{const e=Array.from(l.options.values()),t=[];return m.value.forEach((l=>{const a=e.findIndex((e=>e.currentLabel===l));a>-1&&t.push(e[a])})),t.length?t:e})),P=T((()=>Array.from(l.cachedOptions.values()))),_=T((()=>{const t=M.value.filter((e=>!e.created)).some((e=>e.currentLabel===l.query));return e.filterable&&e.allowCreate&&""!==l.query&&!t})),q=$e(),K=T((()=>["small"].includes(q.value)?"small":"default")),$=T({get:()=>l.visible&&!1!==B.value,set(e){l.visible=e}});V([()=>x.value,()=>q.value,()=>null==f?void 0:f.size],(()=>{F((()=>{R()}))})),V((()=>e.placeholder),(e=>{l.cachedPlaceHolder=l.currentPlaceholder=e})),V((()=>e.modelValue),((t,a)=>{e.multiple&&(R(),t&&t.length>0||s.value&&""!==l.query?l.currentPlaceholder="":l.currentPlaceholder=l.cachedPlaceHolder,e.filterable&&!e.reserveKeyword&&(l.query="",H(l.query))),Q(),e.filterable&&!e.multiple&&(l.inputLength=20),!Dl(t,a)&&e.validateEvent&&(null==g||g.validate("change").catch((e=>z())))}),{flush:"post",deep:!0}),V((()=>l.visible),(a=>{var n,o,u,c,d;a?(null==(o=null==(n=r.value)?void 0:n.updatePopper)||o.call(n),e.filterable&&(l.filteredOptionsCount=l.optionsCount,l.query=e.remote?"":l.selectedLabel,null==(c=null==(u=i.value)?void 0:u.focus)||c.call(u),e.multiple?null==(d=s.value)||d.focus():l.selectedLabel&&(l.currentPlaceholder=`${l.selectedLabel}`,l.selectedLabel=""),H(l.query),e.multiple||e.remote||(v.value.query="",Se(v),Se(b)))):(e.filterable&&(Ce(e.filterMethod)&&e.filterMethod(""),Ce(e.remoteMethod)&&e.remoteMethod("")),s.value&&s.value.blur(),l.query="",l.previousQuery=null,l.selectedLabel="",l.inputLength=20,l.menuVisibleOnFocus=!1,X(),F((()=>{s.value&&""===s.value.value&&0===l.selected.length&&(l.currentPlaceholder=l.cachedPlaceHolder)})),e.multiple||(l.selected&&(e.filterable&&e.allowCreate&&l.createdSelected&&l.createdLabel?l.selectedLabel=l.createdLabel:l.selectedLabel=l.selected.currentLabel,e.filterable&&(l.query=l.selectedLabel)),e.filterable&&(l.currentPlaceholder=l.cachedPlaceHolder))),t.emit("visible-change",a)})),V((()=>l.options.entries()),(()=>{var t,a,n;if(!S)return;null==(a=null==(t=r.value)?void 0:t.updatePopper)||a.call(t),e.multiple&&R();const o=(null==(n=c.value)?void 0:n.querySelectorAll("input"))||[];Array.from(o).includes(document.activeElement)||Q(),e.defaultFirstOption&&(e.filterable||e.remote)&&l.filteredOptionsCount&&G()}),{flush:"post"}),V((()=>l.hoverIndex),(e=>{w(e)&&e>-1?p.value=M.value[e]||{}:p.value={},M.value.forEach((e=>{e.hover=p.value===e}))}));const R=()=>{F((()=>{var e,t;if(!o.value)return;const a=o.value.$el.querySelector("input");h=h||(a.clientHeight>0?a.clientHeight+2:0);const n=u.value,s=(i=q.value||(null==f?void 0:f.size),C[i||"default"]);var i;const c=s===h||h<=0?s:h;!(null===a.offsetParent)&&(a.style.height=(0===l.selected.length?c:Math.max(n?n.clientHeight+(n.clientHeight>c?6:0):0,c))-2+"px"),l.tagInMultiLine=Number.parseFloat(a.style.height)>=c,l.visible&&!1!==B.value&&(null==(t=null==(e=r.value)?void 0:e.updatePopper)||t.call(e))}))},H=async t=>{l.previousQuery===t||l.isOnComposition||(null!==l.previousQuery||!Ce(e.filterMethod)&&!Ce(e.remoteMethod)?(l.previousQuery=t,F((()=>{var e,t;l.visible&&(null==(t=null==(e=r.value)?void 0:e.updatePopper)||t.call(e))})),l.hoverIndex=-1,e.multiple&&e.filterable&&F((()=>{const t=15*s.value.value.length+20;l.inputLength=e.collapseTags?Math.min(50,t):t,N(),R()})),e.remote&&Ce(e.remoteMethod)?(l.hoverIndex=-1,e.remoteMethod(t)):Ce(e.filterMethod)?(e.filterMethod(t),Se(b)):(l.filteredOptionsCount=l.optionsCount,v.value.query=t,Se(v),Se(b)),e.defaultFirstOption&&(e.filterable||e.remote)&&l.filteredOptionsCount&&(await F(),G())):l.previousQuery=t)},N=()=>{""!==l.currentPlaceholder&&(l.currentPlaceholder=s.value.value?"":l.cachedPlaceHolder)},G=()=>{const e=M.value.filter((e=>e.visible&&!e.disabled&&!e.states.groupDisabled)),t=e.find((e=>e.created)),a=e[0];l.hoverIndex=ae(M.value,t||a)},Q=()=>{var t;if(!e.multiple){const a=U(e.modelValue);return(null==(t=a.props)?void 0:t.created)?(l.createdLabel=a.props.value,l.createdSelected=!0):l.createdSelected=!1,l.selectedLabel=a.currentLabel,l.selected=a,void(e.filterable&&(l.query=l.selectedLabel))}l.selectedLabel="";const a=[];Array.isArray(e.modelValue)&&e.modelValue.forEach((e=>{a.push(U(e))})),l.selected=a,F((()=>{R()}))},U=t=>{let a;const n="object"===Oe(t).toLowerCase(),o="null"===Oe(t).toLowerCase(),s="undefined"===Oe(t).toLowerCase();for(let r=l.cachedOptions.size-1;r>=0;r--){const l=P.value[r];if(n?pe(l.value,e.valueKey)===pe(t,e.valueKey):l.value===t){a={value:t,currentLabel:l.currentLabel,isDisabled:l.isDisabled};break}}if(a)return a;const i={value:t,currentLabel:n?t.label:o||s?"":t};return e.multiple&&(i.hitState=!1),i},X=()=>{setTimeout((()=>{const t=e.valueKey;e.multiple?l.selected.length>0?l.hoverIndex=Math.min.apply(null,l.selected.map((e=>M.value.findIndex((l=>pe(l,t)===pe(e,t)))))):l.hoverIndex=-1:l.hoverIndex=M.value.findIndex((e=>re(e)===re(l.selected)))}),300)},Y=()=>{var e;l.inputWidth=null==(e=o.value)?void 0:e.$el.offsetWidth},Z=ll((()=>{e.filterable&&l.query!==l.selectedLabel&&(l.query=l.selectedLabel,H(l.query))}),E.value),J=ll((e=>{H(e.target.value)}),E.value),ee=l=>{Dl(e.modelValue,l)||t.emit(We,l)},le=a=>{a.stopPropagation();const n=e.multiple?[]:"";if(!k(n))for(const e of l.selected)e.isDisabled&&n.push(e.value);t.emit(qe,n),ee(n),l.hoverIndex=-1,l.visible=!1,t.emit("clear")},te=(a,n)=>{var o;if(e.multiple){const n=(e.modelValue||[]).slice(),i=ae(n,a.value);i>-1?n.splice(i,1):(e.multipleLimit<=0||n.length<e.multipleLimit)&&n.push(a.value),t.emit(qe,n),ee(n),a.created&&(l.query="",H(""),l.inputLength=20),e.filterable&&(null==(o=s.value)||o.focus())}else t.emit(qe,a.value),ee(a.value),l.visible=!1;l.isSilentBlur=n,ne(),l.visible||F((()=>{oe(a)}))},ae=(l=[],t)=>{if(!A(t))return l.indexOf(t);const a=e.valueKey;let n=-1;return l.some(((e,l)=>j(pe(e,a))===pe(t,a)&&(n=l,!0))),n},ne=()=>{l.softFocus=!0;const e=s.value||o.value;e&&(null==e||e.focus())},oe=e=>{var l,t,a,o,s;const i=Array.isArray(e)?e[0]:e;let u=null;if(null==i?void 0:i.value){const e=M.value.filter((e=>e.value===i.value));e.length>0&&(u=e[0].$el)}if(r.value&&u){const e=null==(o=null==(a=null==(t=null==(l=r.value)?void 0:l.popperRef)?void 0:t.contentRef)?void 0:a.querySelector)?void 0:o.call(a,`.${n.be("dropdown","wrap")}`);e&&el(e,u)}null==(s=d.value)||s.handleScroll()},se=e=>{if(!Array.isArray(l.selected))return;const t=l.selected[l.selected.length-1];return t?!0===e||!1===e?(t.hitState=e,e):(t.hitState=!t.hitState,t.hitState):void 0},ie=e=>{var t;e&&!l.mouseEnter||x.value||(l.menuVisibleOnFocus?l.menuVisibleOnFocus=!1:r.value&&r.value.isFocusInsideContent()||(l.visible=!l.visible),l.visible&&(null==(t=s.value||o.value)||t.focus()))},re=l=>A(l.value)?pe(l.value,e.valueKey):l.value,ue=T((()=>M.value.filter((e=>e.visible)).every((e=>e.disabled)))),ce=T((()=>l.selected.slice(0,e.maxCollapseTags))),de=T((()=>l.selected.slice(e.maxCollapseTags))),ve=e=>{if(l.visible){if(0!==l.options.size&&0!==l.filteredOptionsCount&&!l.isOnComposition&&!ue.value){"next"===e?(l.hoverIndex++,l.hoverIndex===l.options.size&&(l.hoverIndex=0)):"prev"===e&&(l.hoverIndex--,l.hoverIndex<0&&(l.hoverIndex=l.options.size-1));const t=M.value[l.hoverIndex];!0!==t.disabled&&!0!==t.states.groupDisabled&&t.visible||ve(e),F((()=>oe(p.value)))}}else l.visible=!0};return{optionList:m,optionsArray:M,selectSize:q,handleResize:()=>{var l,t;Y(),null==(t=null==(l=r.value)?void 0:l.updatePopper)||t.call(l),e.multiple&&R()},debouncedOnInputChange:Z,debouncedQueryChange:J,deletePrevTag:a=>{if(a.target.value.length<=0&&!se()){const l=e.modelValue.slice();l.pop(),t.emit(qe,l),ee(l)}1===a.target.value.length&&0===e.modelValue.length&&(l.currentPlaceholder=l.cachedPlaceHolder)},deleteTag:(a,n)=>{const o=l.selected.indexOf(n);if(o>-1&&!x.value){const l=e.modelValue.slice();l.splice(o,1),t.emit(qe,l),ee(l),t.emit("remove-tag",n.value)}a.stopPropagation()},deleteSelected:le,handleOptionSelect:te,scrollToOption:oe,readonly:y,resetInputHeight:R,showClose:O,iconComponent:L,iconReverse:I,showNewOption:_,collapseTagSize:K,setSelected:Q,managePlaceholder:N,selectDisabled:x,emptyText:B,toggleLastOptionHitState:se,resetInputState:e=>{e.code!==Le.backspace&&se(!1),l.inputLength=15*s.value.value.length+20,R()},handleComposition:e=>{const t=e.target.value;if("compositionend"===e.type)l.isOnComposition=!1,F((()=>H(t)));else{const e=t[t.length-1]||"";l.isOnComposition=!Ue(e)}},onOptionCreate:e=>{l.optionsCount++,l.filteredOptionsCount++,l.options.set(e.value,e),l.cachedOptions.set(e.value,e)},onOptionDestroy:(e,t)=>{l.options.get(e)===t&&(l.optionsCount--,l.filteredOptionsCount--,l.options.delete(e))},handleMenuEnter:()=>{F((()=>oe(l.selected)))},handleFocus:a=>{l.softFocus?l.softFocus=!1:((e.automaticDropdown||e.filterable)&&(e.filterable&&!l.visible&&(l.menuVisibleOnFocus=!0),l.visible=!0),t.emit("focus",a))},blur:()=>{var e,t,a;l.visible=!1,null==(e=o.value)||e.blur(),null==(a=null==(t=i.value)?void 0:t.blur)||a.call(t)},handleBlur:e=>{F((()=>{l.isSilentBlur?l.isSilentBlur=!1:t.emit("blur",e)})),l.softFocus=!1},handleClearClick:e=>{le(e)},handleClose:()=>{l.visible=!1},handleKeydownEscape:e=>{l.visible&&(e.preventDefault(),e.stopPropagation(),l.visible=!1)},toggleMenu:ie,selectOption:()=>{l.visible?M.value[l.hoverIndex]&&te(M.value[l.hoverIndex],void 0):ie()},getValueKey:re,navigateOptions:ve,dropMenuVisible:$,queryChange:v,groupQueryChange:b,showTagList:ce,collapseTagList:de,reference:o,input:s,iOSInput:i,tooltipRef:r,tags:u,selectWrapper:c,scrollbar:d,handleMouseEnter:()=>{l.mouseEnter=!0},handleMouseLeave:()=>{l.mouseEnter=!1}}};var ht=_({name:"ElOptions",emits:["update-options"],setup(e,{slots:l,emit:t}){let a=[];return()=>{var e,n;const o=null==(e=l.default)?void 0:e.call(l),s=[];return o.length&&function e(l){Array.isArray(l)&&l.forEach((l=>{var t,a,n,o;const i=null==(t=(null==l?void 0:l.type)||{})?void 0:t.name;"ElOptionGroup"===i?e(k(l.children)||Array.isArray(l.children)||!Ce(null==(a=l.children)?void 0:a.default)?l.children:null==(n=l.children)?void 0:n.default()):"ElOption"===i?s.push(null==(o=l.props)?void 0:o.label):Array.isArray(l.children)&&e(l.children)}))}(null==(n=o[0])?void 0:n.children),function(e,l){if(e.length!==l.length)return!1;for(const[t]of e.entries())if(e[t]!=l[t])return!1;return!0}(s,a)||(a=s,t("update-options",s)),o}}});const ft="ElSelect",gt=_({name:ft,componentName:ft,components:{ElInput:Xe,ElSelectMenu:bt,ElOption:vt,ElOptions:ht,ElTag:Ye,ElScrollbar:ke,ElTooltip:Ne,ElIcon:we},directives:{ClickOutside:$l},props:{name:String,id:String,modelValue:{type:[Array,String,Number,Boolean,Object],default:void 0},autocomplete:{type:String,default:"off"},automaticDropdown:Boolean,size:{type:String,validator:tl},effect:{type:String,default:"light"},disabled:Boolean,clearable:Boolean,filterable:Boolean,allowCreate:Boolean,loading:Boolean,popperClass:{type:String,default:""},popperOptions:{type:Object,default:()=>({})},remote:Boolean,loadingText:String,noMatchText:String,noDataText:String,remoteMethod:Function,filterMethod:Function,multiple:Boolean,multipleLimit:{type:Number,default:0},placeholder:{type:String},defaultFirstOption:Boolean,reserveKeyword:{type:Boolean,default:!0},valueKey:{type:String,default:"value"},collapseTags:Boolean,collapseTagsTooltip:{type:Boolean,default:!1},maxCollapseTags:{type:Number,default:1},teleported:Ge.teleported,persistent:{type:Boolean,default:!0},clearIcon:{type:Ie,default:Ee},fitInputWidth:{type:Boolean,default:!1},suffixIcon:{type:Ie,default:Te},tagType:{...Ze.type,default:"info"},validateEvent:{type:Boolean,default:!0},remoteShowSuffix:{type:Boolean,default:!1},suffixTransition:{type:Boolean,default:!0},placement:{type:String,values:Qe,default:"bottom-start"}},emits:[qe,We,"remove-tag","clear","visible-change","focus","blur"],setup(e,l){const t=W("select"),a=W("input"),{t:n}=ye(),o=function(e){const{t:l}=ye();return ve({options:new Map,cachedOptions:new Map,createdLabel:null,createdSelected:!1,selected:e.multiple?[]:{},inputLength:20,inputWidth:0,optionsCount:0,filteredOptionsCount:0,visible:!1,softFocus:!1,selectedLabel:"",hoverIndex:-1,query:"",previousQuery:null,inputHovering:!1,cachedPlaceHolder:"",currentPlaceholder:l("el.select.placeholder"),menuVisibleOnFocus:!1,isOnComposition:!1,isSilentBlur:!1,prefixWidth:11,tagInMultiLine:!1,mouseEnter:!1})}(e),{optionList:s,optionsArray:i,selectSize:r,readonly:u,handleResize:c,collapseTagSize:d,debouncedOnInputChange:p,debouncedQueryChange:v,deletePrevTag:b,deleteTag:m,deleteSelected:h,handleOptionSelect:f,scrollToOption:g,setSelected:y,resetInputHeight:x,managePlaceholder:C,showClose:S,selectDisabled:O,iconComponent:L,iconReverse:k,showNewOption:w,emptyText:I,toggleLastOptionHitState:E,resetInputState:B,handleComposition:M,onOptionCreate:V,onOptionDestroy:z,handleMenuEnter:D,handleFocus:P,blur:A,handleBlur:j,handleClearClick:_,handleClose:q,handleKeydownEscape:K,toggleMenu:$,selectOption:R,getValueKey:H,navigateOptions:N,dropMenuVisible:Q,reference:U,input:X,iOSInput:Y,tooltipRef:Z,tags:J,selectWrapper:ee,scrollbar:le,queryChange:te,groupQueryChange:ae,handleMouseEnter:ne,handleMouseLeave:oe,showTagList:se,collapseTagList:ie}=mt(e,o,l),{focus:ce}=(de=U,{focus:()=>{var e,l;null==(l=null==(e=de.value)?void 0:e.focus)||l.call(e)}});var de;const{inputWidth:pe,selected:be,inputLength:me,filteredOptionsCount:he,visible:xe,softFocus:Ce,selectedLabel:Se,hoverIndex:Oe,query:Le,inputHovering:ke,currentPlaceholder:we,menuVisibleOnFocus:Ie,isOnComposition:Ee,isSilentBlur:Te,options:Me,cachedOptions:Ve,optionsCount:ze,prefixWidth:Fe,tagInMultiLine:De}=ue(o),Pe=T((()=>{const l=[t.b()],a=G(r);return a&&l.push(t.m(a)),e.disabled&&l.push(t.m("disabled")),l})),Ae=T((()=>({maxWidth:G(pe)-32+"px",width:"100%"}))),je=T((()=>({maxWidth:`${G(pe)>123?G(pe)-123:G(pe)-75}px`})));re(pt,ve({props:e,options:Me,optionsArray:i,cachedOptions:Ve,optionsCount:ze,filteredOptionsCount:he,hoverIndex:Oe,handleOptionSelect:f,onOptionCreate:V,onOptionDestroy:z,selectWrapper:ee,selected:be,setSelected:y,queryChange:te,groupQueryChange:ae})),fe((()=>{o.cachedPlaceHolder=we.value=e.placeholder||(()=>n("el.select.placeholder")),e.multiple&&Array.isArray(e.modelValue)&&e.modelValue.length>0&&(we.value=""),ge(ee,c),e.remote&&e.multiple&&x(),F((()=>{const e=U.value&&U.value.$el;if(e&&(pe.value=e.getBoundingClientRect().width,l.slots.prefix)){const l=e.querySelector(`.${a.e("prefix")}`);Fe.value=Math.max(l.getBoundingClientRect().width+5,30)}})),y()})),e.multiple&&!Array.isArray(e.modelValue)&&l.emit(qe,[]),!e.multiple&&Array.isArray(e.modelValue)&&l.emit(qe,"");const _e=T((()=>{var e,l;return null==(l=null==(e=Z.value)?void 0:e.popperRef)?void 0:l.contentRef}));return{isIOS:Be,onOptionsRendered:e=>{s.value=e},tagInMultiLine:De,prefixWidth:Fe,selectSize:r,readonly:u,handleResize:c,collapseTagSize:d,debouncedOnInputChange:p,debouncedQueryChange:v,deletePrevTag:b,deleteTag:m,deleteSelected:h,handleOptionSelect:f,scrollToOption:g,inputWidth:pe,selected:be,inputLength:me,filteredOptionsCount:he,visible:xe,softFocus:Ce,selectedLabel:Se,hoverIndex:Oe,query:Le,inputHovering:ke,currentPlaceholder:we,menuVisibleOnFocus:Ie,isOnComposition:Ee,isSilentBlur:Te,options:Me,resetInputHeight:x,managePlaceholder:C,showClose:S,selectDisabled:O,iconComponent:L,iconReverse:k,showNewOption:w,emptyText:I,toggleLastOptionHitState:E,resetInputState:B,handleComposition:M,handleMenuEnter:D,handleFocus:P,blur:A,handleBlur:j,handleClearClick:_,handleClose:q,handleKeydownEscape:K,toggleMenu:$,selectOption:R,getValueKey:H,navigateOptions:N,dropMenuVisible:Q,focus:ce,reference:U,input:X,iOSInput:Y,tooltipRef:Z,popperPaneRef:_e,tags:J,selectWrapper:ee,scrollbar:le,wrapperKls:Pe,selectTagsStyle:Ae,nsSelect:t,tagTextStyle:je,handleMouseEnter:ne,handleMouseLeave:oe,showTagList:se,collapseTagList:ie}}}),yt=["disabled","autocomplete"],xt=["disabled"],Ct={style:{height:"100%",display:"flex","justify-content":"center","align-items":"center"}};var St=ne(gt,[["render",function(e,l,t,a,n,o){const s=Me("el-tag"),i=Me("el-tooltip"),r=Me("el-icon"),u=Me("el-input"),c=Me("el-option"),d=Me("el-options"),p=Me("el-scrollbar"),v=Me("el-select-menu"),b=Ve("click-outside");return Q((K(),U("div",{ref:"selectWrapper",class:N(e.wrapperKls),onMouseenter:l[21]||(l[21]=(...l)=>e.handleMouseEnter&&e.handleMouseEnter(...l)),onMouseleave:l[22]||(l[22]=(...l)=>e.handleMouseLeave&&e.handleMouseLeave(...l)),onClick:l[23]||(l[23]=he(((...l)=>e.toggleMenu&&e.toggleMenu(...l)),["stop"]))},[ze(i,{ref:"tooltipRef",visible:e.dropMenuVisible,placement:e.placement,teleported:e.teleported,"popper-class":[e.nsSelect.e("popper"),e.popperClass],"popper-options":e.popperOptions,"fallback-placements":["bottom-start","top-start","right","left"],effect:e.effect,pure:"",trigger:"click",transition:`${e.nsSelect.namespace.value}-zoom-in-top`,"stop-popper-mouse-event":!1,"gpu-acceleration":!1,persistent:e.persistent,onShow:e.handleMenuEnter},{default:R((()=>[H("div",{class:"select-trigger",onMouseenter:l[19]||(l[19]=l=>e.inputHovering=!0),onMouseleave:l[20]||(l[20]=l=>e.inputHovering=!1)},[e.multiple?(K(),U("div",{key:0,ref:"tags",class:N([e.nsSelect.e("tags"),e.nsSelect.is("disabled",e.selectDisabled)]),style:oe(e.selectTagsStyle)},[e.collapseTags&&e.selected.length?(K(),$(Fe,{key:0,onAfterLeave:e.resetInputHeight},{default:R((()=>[H("span",{class:N([e.nsSelect.b("tags-wrapper"),{"has-prefix":e.prefixWidth&&e.selected.length}])},[(K(!0),U(J,null,De(e.showTagList,(l=>(K(),$(s,{key:e.getValueKey(l),closable:!e.selectDisabled&&!l.isDisabled,size:e.collapseTagSize,hit:l.hitState,type:e.tagType,"disable-transitions":"",onClose:t=>e.deleteTag(t,l)},{default:R((()=>[H("span",{class:N(e.nsSelect.e("tags-text")),style:oe(e.tagTextStyle)},le(l.currentLabel),7)])),_:2},1032,["closable","size","hit","type","onClose"])))),128)),e.selected.length>e.maxCollapseTags?(K(),$(s,{key:0,closable:!1,size:e.collapseTagSize,type:e.tagType,"disable-transitions":""},{default:R((()=>[e.collapseTagsTooltip?(K(),$(i,{key:0,disabled:e.dropMenuVisible,"fallback-placements":["bottom","top","right","left"],effect:e.effect,placement:"bottom",teleported:e.teleported},{default:R((()=>[H("span",{class:N(e.nsSelect.e("tags-text"))},"+ "+le(e.selected.length-e.maxCollapseTags),3)])),content:R((()=>[H("div",{class:N(e.nsSelect.e("collapse-tags"))},[(K(!0),U(J,null,De(e.collapseTagList,(l=>(K(),U("div",{key:e.getValueKey(l),class:N(e.nsSelect.e("collapse-tag"))},[ze(s,{class:"in-tooltip",closable:!e.selectDisabled&&!l.isDisabled,size:e.collapseTagSize,hit:l.hitState,type:e.tagType,"disable-transitions":"",style:{margin:"2px"},onClose:t=>e.deleteTag(t,l)},{default:R((()=>[H("span",{class:N(e.nsSelect.e("tags-text")),style:oe({maxWidth:e.inputWidth-75+"px"})},le(l.currentLabel),7)])),_:2},1032,["closable","size","hit","type","onClose"])],2)))),128))],2)])),_:1},8,["disabled","effect","teleported"])):(K(),U("span",{key:1,class:N(e.nsSelect.e("tags-text"))},"+ "+le(e.selected.length-e.maxCollapseTags),3))])),_:1},8,["size","type"])):te("v-if",!0)],2)])),_:1},8,["onAfterLeave"])):te("v-if",!0),e.collapseTags?te("v-if",!0):(K(),$(Fe,{key:1,onAfterLeave:e.resetInputHeight},{default:R((()=>[H("span",{class:N([e.nsSelect.b("tags-wrapper"),{"has-prefix":e.prefixWidth&&e.selected.length}])},[(K(!0),U(J,null,De(e.selected,(l=>(K(),$(s,{key:e.getValueKey(l),closable:!e.selectDisabled&&!l.isDisabled,size:e.collapseTagSize,hit:l.hitState,type:e.tagType,"disable-transitions":"",onClose:t=>e.deleteTag(t,l)},{default:R((()=>[H("span",{class:N(e.nsSelect.e("tags-text")),style:oe({maxWidth:e.inputWidth-75+"px"})},le(l.currentLabel),7)])),_:2},1032,["closable","size","hit","type","onClose"])))),128))],2)])),_:1},8,["onAfterLeave"])),e.filterable?Q((K(),U("input",{key:2,ref:"input","onUpdate:modelValue":l[0]||(l[0]=l=>e.query=l),type:"text",class:N([e.nsSelect.e("input"),e.nsSelect.is(e.selectSize),e.nsSelect.is("disabled",e.selectDisabled)]),disabled:e.selectDisabled,autocomplete:e.autocomplete,style:oe({marginLeft:e.prefixWidth&&!e.selected.length||e.tagInMultiLine?`${e.prefixWidth}px`:"",flexGrow:1,width:e.inputLength/(e.inputWidth-32)+"%",maxWidth:e.inputWidth-42+"px"}),onFocus:l[1]||(l[1]=(...l)=>e.handleFocus&&e.handleFocus(...l)),onBlur:l[2]||(l[2]=(...l)=>e.handleBlur&&e.handleBlur(...l)),onKeyup:l[3]||(l[3]=(...l)=>e.managePlaceholder&&e.managePlaceholder(...l)),onKeydown:[l[4]||(l[4]=(...l)=>e.resetInputState&&e.resetInputState(...l)),l[5]||(l[5]=Pe(he((l=>e.navigateOptions("next")),["prevent"]),["down"])),l[6]||(l[6]=Pe(he((l=>e.navigateOptions("prev")),["prevent"]),["up"])),l[7]||(l[7]=Pe(((...l)=>e.handleKeydownEscape&&e.handleKeydownEscape(...l)),["esc"])),l[8]||(l[8]=Pe(he(((...l)=>e.selectOption&&e.selectOption(...l)),["stop","prevent"]),["enter"])),l[9]||(l[9]=Pe(((...l)=>e.deletePrevTag&&e.deletePrevTag(...l)),["delete"])),l[10]||(l[10]=Pe((l=>e.visible=!1),["tab"]))],onCompositionstart:l[11]||(l[11]=(...l)=>e.handleComposition&&e.handleComposition(...l)),onCompositionupdate:l[12]||(l[12]=(...l)=>e.handleComposition&&e.handleComposition(...l)),onCompositionend:l[13]||(l[13]=(...l)=>e.handleComposition&&e.handleComposition(...l)),onInput:l[14]||(l[14]=(...l)=>e.debouncedQueryChange&&e.debouncedQueryChange(...l))},null,46,yt)),[[Ae,e.query]]):te("v-if",!0)],6)):te("v-if",!0),te(" fix: https://github.com/element-plus/element-plus/issues/11415 "),e.isIOS&&!e.multiple&&e.filterable&&e.readonly?(K(),U("input",{key:1,ref:"iOSInput",class:N([e.nsSelect.e("input"),e.nsSelect.is(e.selectSize),e.nsSelect.em("input","iOS")]),disabled:e.selectDisabled,type:"text"},null,10,xt)):te("v-if",!0),ze(u,{id:e.id,ref:"reference",modelValue:e.selectedLabel,"onUpdate:modelValue":l[15]||(l[15]=l=>e.selectedLabel=l),type:"text",placeholder:"function"==typeof e.currentPlaceholder?e.currentPlaceholder():e.currentPlaceholder,name:e.name,autocomplete:e.autocomplete,size:e.selectSize,disabled:e.selectDisabled,readonly:e.readonly,"validate-event":!1,class:N([e.nsSelect.is("focus",e.visible)]),tabindex:e.multiple&&e.filterable?-1:void 0,onFocus:e.handleFocus,onBlur:e.handleBlur,onInput:e.debouncedOnInputChange,onPaste:e.debouncedOnInputChange,onCompositionstart:e.handleComposition,onCompositionupdate:e.handleComposition,onCompositionend:e.handleComposition,onKeydown:[l[16]||(l[16]=Pe(he((l=>e.navigateOptions("next")),["stop","prevent"]),["down"])),l[17]||(l[17]=Pe(he((l=>e.navigateOptions("prev")),["stop","prevent"]),["up"])),Pe(he(e.selectOption,["stop","prevent"]),["enter"]),Pe(e.handleKeydownEscape,["esc"]),l[18]||(l[18]=Pe((l=>e.visible=!1),["tab"]))]},je({suffix:R((()=>[e.iconComponent&&!e.showClose?(K(),$(r,{key:0,class:N([e.nsSelect.e("caret"),e.nsSelect.e("icon"),e.iconReverse])},{default:R((()=>[(K(),$(ae(e.iconComponent)))])),_:1},8,["class"])):te("v-if",!0),e.showClose&&e.clearIcon?(K(),$(r,{key:1,class:N([e.nsSelect.e("caret"),e.nsSelect.e("icon")]),onClick:e.handleClearClick},{default:R((()=>[(K(),$(ae(e.clearIcon)))])),_:1},8,["class","onClick"])):te("v-if",!0)])),_:2},[e.$slots.prefix?{name:"prefix",fn:R((()=>[H("div",Ct,[Z(e.$slots,"prefix")])]))}:void 0]),1032,["id","modelValue","placeholder","name","autocomplete","size","disabled","readonly","class","tabindex","onFocus","onBlur","onInput","onPaste","onCompositionstart","onCompositionupdate","onCompositionend","onKeydown"])],32)])),content:R((()=>[ze(v,null,{default:R((()=>[Q(ze(p,{ref:"scrollbar",tag:"ul","wrap-class":e.nsSelect.be("dropdown","wrap"),"view-class":e.nsSelect.be("dropdown","list"),class:N([e.nsSelect.is("empty",!e.allowCreate&&Boolean(e.query)&&0===e.filteredOptionsCount)])},{default:R((()=>[e.showNewOption?(K(),$(c,{key:0,value:e.query,created:!0},null,8,["value"])):te("v-if",!0),ze(d,{onUpdateOptions:e.onOptionsRendered},{default:R((()=>[Z(e.$slots,"default")])),_:3},8,["onUpdateOptions"])])),_:3},8,["wrap-class","view-class","class"]),[[me,e.options.size>0&&!e.loading]]),e.emptyText&&(!e.allowCreate||e.loading||e.allowCreate&&0===e.options.size)?(K(),U(J,{key:0},[e.$slots.empty?Z(e.$slots,"empty",{key:0}):(K(),U("p",{key:1,class:N(e.nsSelect.be("dropdown","empty"))},le(e.emptyText),3))],64)):te("v-if",!0)])),_:3})])),_:3},8,["visible","placement","teleported","popper-class","popper-options","effect","transition","persistent","onShow"])],34)),[[b,e.handleClose,e.popperPaneRef]])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/select/src/select.vue"]]);var Ot=ne(_({name:"ElOptionGroup",componentName:"ElOptionGroup",props:{label:String,disabled:{type:Boolean,default:!1}},setup(e){const l=W("select"),t=D(!0),a=M(),n=D([]);re(dt,ve({...ue(e)}));const o=E(pt);fe((()=>{n.value=s(a.subTree)}));const s=e=>{const l=[];return Array.isArray(e.children)&&e.children.forEach((e=>{var t;e.type&&"ElOption"===e.type.name&&e.component&&e.component.proxy?l.push(e.component.proxy):(null==(t=e.children)?void 0:t.length)&&l.push(...s(e))})),l},{groupQueryChange:i}=j(o);return V(i,(()=>{t.value=n.value.some((e=>!0===e.visible))}),{flush:"post"}),{visible:t,ns:l}}}),[["render",function(e,l,t,a,n,o){return Q((K(),U("ul",{class:N(e.ns.be("group","wrap"))},[H("li",{class:N(e.ns.be("group","title"))},le(e.label),3),H("li",null,[H("ul",{class:N(e.ns.b("group"))},[Z(e.$slots,"default")],2)])],2)),[[me,e.visible]])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/select/src/option-group.vue"]]);const Lt=ce(St,{Option:vt,OptionGroup:Ot}),kt=de(vt),wt=de(Ot),It=(e,l="default",t)=>{if(!e||!Reflect.has(e,l))return null;if(!_e(e[l]))return console.error(`${l} is not a function!`),null;const a=e[l];return a?a(t):null};export{$l as C,rt as E,Lt as a,ct as b,_l as c,wt as d,jl as e,kt as f,It as g,ut as h,Dl as i,Vl as j,Fl as k,rl as s};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
