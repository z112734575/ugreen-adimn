import{K as e,d as t,S as s,x as a,az as u,o as l,h as r,w as n,aa as p,n as o,a as c,Z as f,a5 as d,ac as g,ag as m,L as i,M as b,aA as y,N as h,bb as $}from"./index-ec301f65.js";const j=Symbol("rowContextKey"),N=e({tag:{type:String,default:"div"},gutter:{type:Number,default:0},justify:{type:String,values:["start","center","end","space-around","space-between","space-evenly"],default:"start"},align:{type:String,values:["top","middle","bottom"],default:"top"}}),v=t({name:"ElRow"});const x=m(g(t({...v,props:N,setup(e){const t=e,g=s("row"),m=a((()=>t.gutter));u(j,{gutter:m});const i=a((()=>{const e={};return t.gutter?(e.marginRight=e.marginLeft=`-${t.gutter/2}px`,e):e})),b=a((()=>[g.b(),g.is(`justify-${t.justify}`,"start"!==t.justify),g.is(`align-${t.align}`,"top"!==t.align)]));return(e,t)=>(l(),r(d(e.tag),{class:o(c(b)),style:f(c(i))},{default:n((()=>[p(e.$slots,"default")])),_:3},8,["class","style"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/row/src/row.vue"]])),w=e({tag:{type:String,default:"div"},span:{type:Number,default:24},offset:{type:Number,default:0},pull:{type:Number,default:0},push:{type:Number,default:0},xs:{type:i([Number,Object]),default:()=>b({})},sm:{type:i([Number,Object]),default:()=>b({})},md:{type:i([Number,Object]),default:()=>b({})},lg:{type:i([Number,Object]),default:()=>b({})},xl:{type:i([Number,Object]),default:()=>b({})}}),E=t({name:"ElCol"});const O=m(g(t({...E,props:w,setup(e){const t=e,{gutter:u}=y(j,{gutter:a((()=>0))}),g=s("col"),m=a((()=>{const e={};return u.value&&(e.paddingLeft=e.paddingRight=u.value/2+"px"),e})),i=a((()=>{const e=[];["span","offset","pull","push"].forEach((s=>{const a=t[s];h(a)&&("span"===s?e.push(g.b(`${t[s]}`)):a>0&&e.push(g.b(`${s}-${t[s]}`)))}));return["xs","sm","md","lg","xl"].forEach((s=>{h(t[s])?e.push(g.b(`${s}-${t[s]}`)):$(t[s])&&Object.entries(t[s]).forEach((([t,a])=>{e.push("span"!==t?g.b(`${s}-${t}-${a}`):g.b(`${s}-${a}`))}))})),u.value&&e.push(g.is("guttered")),[g.b(),e]}));return(e,t)=>(l(),r(d(e.tag),{class:o(c(i)),style:f(c(m))},{default:n((()=>[p(e.$slots,"default")])),_:3},8,["class","style"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/col/src/col.vue"]]));export{O as E,x as a};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
