import{ac as e,d as o,aa as n,r as t,az as l,aA as r,E as a,a as i,al as s,K as u,L as d,ae as c,x as p,aB as m,aC as f,X as v,ad as g,A as b,o as w,h,w as I,g as y,aD as E,aE as _,Y as C,aF as k,aG as T,$ as F,aH as S,aI as R,S as x,R as L,au as O,aJ as B,c as D,aK as $,ai as M,n as K,G as P,e as N,a5 as A,_ as G,F as z,Z as j,ag as H,aL as V,b as J,j as Y,aM as U,aN as W,aO as q,v as Q,aP as X,ah as Z,aQ as ee,C as oe,B as ne,t as te}from"./index-ec301f65.js";import{E as le}from"./el-switch-b64fd925.js";import{u as re}from"./useIcon-d2f39163.js";import{_ as ae}from"./_plugin-vue_export-helper-1b428a4d.js";import{E as ie}from"./el-button-2b7f8e7c.js";import{c as se,u as ue,a as de,E as ce,O as pe,w as me,F as fe}from"./el-popper-12ece89c.js";import{u as ve}from"./constants-4fd7b236.js";import{u as ge}from"./use-form-common-props-12176987.js";import{c as be}from"./refs-e3109932.js";var we=e(o({inheritAttrs:!1}),[["render",function(e,o,t,l,r,a){return n(e.$slots,"default")}],["__file","/home/runner/work/element-plus/element-plus/packages/components/collection/src/collection.vue"]]);var he=e(o({name:"ElCollectionItem",inheritAttrs:!1}),[["render",function(e,o,t,l,r,a){return n(e.$slots,"default")}],["__file","/home/runner/work/element-plus/element-plus/packages/components/collection/src/collection-item.vue"]]);const Ie="data-el-collection-item",ye=e=>{const o=`El${e}Collection`,n=`${o}Item`,u=Symbol(o),d=Symbol(n),c={...we,name:o,setup(){const e=t(null),o=new Map;l(u,{itemMap:o,getItems:()=>{const n=i(e);if(!n)return[];const t=Array.from(n.querySelectorAll(`[${Ie}]`));return[...o.values()].sort(((e,o)=>t.indexOf(e.ref)-t.indexOf(o.ref)))},collectionRef:e})}},p={...he,name:n,setup(e,{attrs:o}){const n=t(null),c=r(u,void 0);l(d,{collectionItemRef:n}),a((()=>{const e=i(n);e&&c.itemMap.set(e,{ref:e,...o})})),s((()=>{const e=i(n);c.itemMap.delete(e)}))}};return{COLLECTION_INJECTION_KEY:u,COLLECTION_ITEM_INJECTION_KEY:d,ElCollection:c,ElCollectionItem:p}},Ee=u({style:{type:d([String,Array,Object])},currentTabId:{type:d(String)},defaultCurrentTabId:String,loop:Boolean,dir:{type:String,values:["ltr","rtl"],default:"ltr"},orientation:{type:d(String)},onBlur:Function,onFocus:Function,onMousedown:Function}),{ElCollection:_e,ElCollectionItem:Ce,COLLECTION_INJECTION_KEY:ke,COLLECTION_ITEM_INJECTION_KEY:Te}=ye("RovingFocusGroup"),Fe=Symbol("elRovingFocusGroup"),Se=Symbol("elRovingFocusGroupItem"),Re={ArrowLeft:"prev",ArrowUp:"prev",ArrowRight:"next",ArrowDown:"next",PageUp:"first",Home:"first",PageDown:"last",End:"last"},xe=(e,o,n)=>{const t=((e,o)=>{if("rtl"!==o)return e;switch(e){case c.right:return c.left;case c.left:return c.right;default:return e}})(e.key,n);if(!("vertical"===o&&[c.left,c.right].includes(t)||"horizontal"===o&&[c.up,c.down].includes(t)))return Re[t]},Le=e=>{const{activeElement:o}=document;for(const n of e){if(n===o)return;if(n.focus(),o!==document.activeElement)return}},Oe="currentTabIdChange",Be="rovingFocusGroup.entryFocus",De={bubbles:!1,cancelable:!0},$e=o({name:"ElRovingFocusGroupImpl",inheritAttrs:!1,props:Ee,emits:[Oe,"entryFocus"],setup(e,{emit:o}){var n;const a=t(null!=(n=e.currentTabId||e.defaultCurrentTabId)?n:null),s=t(!1),u=t(!1),d=t(null),{getItems:c}=r(ke,void 0),b=p((()=>[{outline:"none"},e.style])),w=se((o=>{var n;null==(n=e.onMousedown)||n.call(e,o)}),(()=>{u.value=!0})),h=se((o=>{var n;null==(n=e.onFocus)||n.call(e,o)}),(e=>{const o=!i(u),{target:n,currentTarget:t}=e;if(n===t&&o&&!i(s)){const e=new Event(Be,De);if(null==t||t.dispatchEvent(e),!e.defaultPrevented){const e=c().filter((e=>e.focusable)),o=[e.find((e=>e.active)),e.find((e=>e.id===i(a))),...e].filter(Boolean).map((e=>e.ref));Le(o)}}u.value=!1})),I=se((o=>{var n;null==(n=e.onBlur)||n.call(e,o)}),(()=>{s.value=!1}));l(Fe,{currentTabbedId:m(a),loop:f(e,"loop"),tabIndex:p((()=>i(s)?-1:0)),rovingFocusGroupRef:d,rovingFocusGroupRootStyle:b,orientation:f(e,"orientation"),dir:f(e,"dir"),onItemFocus:e=>{o(Oe,e)},onItemShiftTab:()=>{s.value=!0},onBlur:I,onFocus:h,onMousedown:w}),v((()=>e.currentTabId),(e=>{a.value=null!=e?e:null})),g(d,Be,((...e)=>{o("entryFocus",...e)}))}});var Me=e(o({name:"ElRovingFocusGroup",components:{ElFocusGroupCollection:_e,ElRovingFocusGroupImpl:e($e,[["render",function(e,o,t,l,r,a){return n(e.$slots,"default")}],["__file","/home/runner/work/element-plus/element-plus/packages/components/roving-focus-group/src/roving-focus-group-impl.vue"]])}}),[["render",function(e,o,t,l,r,a){const i=b("el-roving-focus-group-impl"),s=b("el-focus-group-collection");return w(),h(s,null,{default:I((()=>[y(i,E(_(e.$attrs)),{default:I((()=>[n(e.$slots,"default")])),_:3},16)])),_:3})}],["__file","/home/runner/work/element-plus/element-plus/packages/components/roving-focus-group/src/roving-focus-group.vue"]]);var Ke=e(o({components:{ElRovingFocusCollectionItem:Ce},props:{focusable:{type:Boolean,default:!0},active:{type:Boolean,default:!1}},emits:["mousedown","focus","keydown"],setup(e,{emit:o}){const{currentTabbedId:n,loop:a,onItemFocus:s,onItemShiftTab:u}=r(Fe,void 0),{getItems:d}=r(ke,void 0),m=ve(),f=t(null),v=se((e=>{o("mousedown",e)}),(o=>{e.focusable?s(i(m)):o.preventDefault()})),g=se((e=>{o("focus",e)}),(()=>{s(i(m))})),b=se((e=>{o("keydown",e)}),(e=>{const{key:o,shiftKey:n,target:t,currentTarget:l}=e;if(o===c.tab&&n)return void u();if(t!==l)return;const r=xe(e);if(r){e.preventDefault();let o=d().filter((e=>e.focusable)).map((e=>e.ref));switch(r){case"last":o.reverse();break;case"prev":case"next":{"prev"===r&&o.reverse();const e=o.indexOf(l);o=a.value?(s=e+1,(i=o).map(((e,o)=>i[(o+s)%i.length]))):o.slice(e+1);break}}C((()=>{Le(o)}))}var i,s})),w=p((()=>n.value===i(m)));return l(Se,{rovingFocusGroupItemRef:f,tabIndex:p((()=>i(w)?0:-1)),handleMousedown:v,handleFocus:g,handleKeydown:b}),{id:m,handleKeydown:b,handleFocus:g,handleMousedown:v}}}),[["render",function(e,o,t,l,r,a){const i=b("el-roving-focus-collection-item");return w(),h(i,{id:e.id,focusable:e.focusable,active:e.active},{default:I((()=>[n(e.$slots,"default")])),_:3},8,["id","focusable","active"])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/roving-focus-group/src/roving-focus-item.vue"]]);const Pe=u({trigger:ue.trigger,effect:{...de.effect,default:"light"},type:{type:d(String)},placement:{type:d(String),default:"bottom"},popperOptions:{type:d(Object),default:()=>({})},id:String,size:{type:String,default:""},splitButton:Boolean,hideOnClick:{type:Boolean,default:!0},loop:{type:Boolean,default:!0},showTimeout:{type:Number,default:150},hideTimeout:{type:Number,default:150},tabindex:{type:d([Number,String]),default:0},maxHeight:{type:d([Number,String]),default:""},popperClass:{type:String,default:""},disabled:{type:Boolean,default:!1},role:{type:String,default:"menu"},buttonProps:{type:d(Object)},teleported:de.teleported}),Ne=u({command:{type:[Object,String,Number],default:()=>({})},disabled:Boolean,divided:Boolean,textValue:String,icon:{type:k}}),Ae=u({onKeydown:{type:d(Function)}}),Ge=[c.down,c.pageDown,c.home],ze=[c.up,c.pageUp,c.end],je=[...Ge,...ze],{ElCollection:He,ElCollectionItem:Ve,COLLECTION_INJECTION_KEY:Je,COLLECTION_ITEM_INJECTION_KEY:Ye}=ye("Dropdown"),Ue=Symbol("elDropdown"),{ButtonGroup:We}=ie;var qe=e(o({name:"ElDropdown",components:{ElButton:ie,ElButtonGroup:We,ElScrollbar:T,ElDropdownCollection:He,ElTooltip:ce,ElRovingFocusGroup:Me,ElOnlyChild:pe,ElIcon:F,ArrowDown:S},props:Pe,emits:["visible-change","click","command"],setup(e,{emit:o}){const n=R(),r=x("dropdown"),{t:a}=L(),u=t(),d=t(),m=t(null),g=t(null),b=t(null),w=t(null),h=t(!1),I=[c.enter,c.space,c.down],y=p((()=>({maxHeight:O(e.maxHeight)}))),E=p((()=>[r.m(T.value)])),_=ve().value,C=p((()=>e.id||_));function k(){var e;null==(e=m.value)||e.onClose()}v([u,f(e,"trigger")],(([e,o],[n])=>{var t,l,r;const a=B(o)?o:[o];(null==(t=null==n?void 0:n.$el)?void 0:t.removeEventListener)&&n.$el.removeEventListener("pointerenter",F),(null==(l=null==e?void 0:e.$el)?void 0:l.removeEventListener)&&e.$el.removeEventListener("pointerenter",F),(null==(r=null==e?void 0:e.$el)?void 0:r.addEventListener)&&a.includes("hover")&&e.$el.addEventListener("pointerenter",F)}),{immediate:!0}),s((()=>{var e,o;(null==(o=null==(e=u.value)?void 0:e.$el)?void 0:o.removeEventListener)&&u.value.$el.removeEventListener("pointerenter",F)}));const T=ge();function F(){var e,o;null==(o=null==(e=u.value)?void 0:e.$el)||o.focus()}l(Ue,{contentRef:g,role:p((()=>e.role)),triggerId:C,isUsingKeyboard:h,onItemEnter:function(){},onItemLeave:function(){const e=i(g);null==e||e.focus(),w.value=null}}),l("elDropdown",{instance:n,dropdownSize:T,handleClick:function(){k()},commandHandler:function(...e){o("command",...e)},trigger:f(e,"trigger"),hideOnClick:f(e,"hideOnClick")});return{t:a,ns:r,scrollbar:b,wrapStyle:y,dropdownTriggerKls:E,dropdownSize:T,triggerId:C,triggerKeys:I,currentTabId:w,handleCurrentTabIdChange:function(e){w.value=e},handlerMainButtonClick:e=>{o("click",e)},handleEntryFocus:function(e){h.value||(e.preventDefault(),e.stopImmediatePropagation())},handleClose:k,handleOpen:function(){var e;null==(e=m.value)||e.onOpen()},handleBeforeShowTooltip:function(){o("visible-change",!0)},handleShowTooltip:function(e){"keydown"===(null==e?void 0:e.type)&&g.value.focus()},handleBeforeHideTooltip:function(){o("visible-change",!1)},onFocusAfterTrapped:e=>{var o,n;e.preventDefault(),null==(n=null==(o=g.value)?void 0:o.focus)||n.call(o,{preventScroll:!0})},popperRef:m,contentRef:g,triggeringElementRef:u,referenceElementRef:d}}}),[["render",function(e,o,t,l,r,a){var i;const s=b("el-dropdown-collection"),u=b("el-roving-focus-group"),d=b("el-scrollbar"),c=b("el-only-child"),p=b("el-tooltip"),m=b("el-button"),f=b("arrow-down"),v=b("el-icon"),g=b("el-button-group");return w(),D("div",{class:K([e.ns.b(),e.ns.is("disabled",e.disabled)])},[y(p,{ref:"popperRef",role:e.role,effect:e.effect,"fallback-placements":["bottom","top"],"popper-options":e.popperOptions,"gpu-acceleration":!1,"hide-after":"hover"===e.trigger?e.hideTimeout:0,"manual-mode":!0,placement:e.placement,"popper-class":[e.ns.e("popper"),e.popperClass],"reference-element":null==(i=e.referenceElementRef)?void 0:i.$el,trigger:e.trigger,"trigger-keys":e.triggerKeys,"trigger-target-el":e.contentRef,"show-after":"hover"===e.trigger?e.showTimeout:0,"stop-popper-mouse-event":!1,"virtual-ref":e.triggeringElementRef,"virtual-triggering":e.splitButton,disabled:e.disabled,transition:`${e.ns.namespace.value}-zoom-in-top`,teleported:e.teleported,pure:"",persistent:"",onBeforeShow:e.handleBeforeShowTooltip,onShow:e.handleShowTooltip,onBeforeHide:e.handleBeforeHideTooltip},$({content:I((()=>[y(d,{ref:"scrollbar","wrap-style":e.wrapStyle,tag:"div","view-class":e.ns.e("list")},{default:I((()=>[y(u,{loop:e.loop,"current-tab-id":e.currentTabId,orientation:"horizontal",onCurrentTabIdChange:e.handleCurrentTabIdChange,onEntryFocus:e.handleEntryFocus},{default:I((()=>[y(s,null,{default:I((()=>[n(e.$slots,"dropdown")])),_:3})])),_:3},8,["loop","current-tab-id","onCurrentTabIdChange","onEntryFocus"])])),_:3},8,["wrap-style","view-class"])])),_:2},[e.splitButton?void 0:{name:"default",fn:I((()=>[y(c,{id:e.triggerId,ref:"triggeringElementRef",role:"button",tabindex:e.tabindex},{default:I((()=>[n(e.$slots,"default")])),_:3},8,["id","tabindex"])]))}]),1032,["role","effect","popper-options","hide-after","placement","popper-class","reference-element","trigger","trigger-keys","trigger-target-el","show-after","virtual-ref","virtual-triggering","disabled","transition","teleported","onBeforeShow","onShow","onBeforeHide"]),e.splitButton?(w(),h(g,{key:0},{default:I((()=>[y(m,M({ref:"referenceElementRef"},e.buttonProps,{size:e.dropdownSize,type:e.type,disabled:e.disabled,tabindex:e.tabindex,onClick:e.handlerMainButtonClick}),{default:I((()=>[n(e.$slots,"default")])),_:3},16,["size","type","disabled","tabindex","onClick"]),y(m,M({id:e.triggerId,ref:"triggeringElementRef"},e.buttonProps,{role:"button",size:e.dropdownSize,type:e.type,class:e.ns.e("caret-button"),disabled:e.disabled,tabindex:e.tabindex,"aria-label":e.t("el.dropdown.toggleDropdown")}),{default:I((()=>[y(v,{class:K(e.ns.e("icon"))},{default:I((()=>[y(f)])),_:1},8,["class"])])),_:1},16,["id","size","type","class","disabled","tabindex","aria-label"])])),_:3})):P("v-if",!0)],2)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown.vue"]]);const Qe=o({name:"DropdownItemImpl",components:{ElIcon:F},props:Ne,emits:["pointermove","pointerleave","click","clickimpl"],setup(e,{emit:o}){const n=x("dropdown"),{role:t}=r(Ue,void 0),{collectionItemRef:l}=r(Ye,void 0),{collectionItemRef:a}=r(Te,void 0),{rovingFocusGroupItemRef:i,tabIndex:s,handleFocus:u,handleKeydown:d,handleMousedown:m}=r(Se,void 0),f=be(l,a,i),v=p((()=>"menu"===t.value?"menuitem":"navigation"===t.value?"link":"button")),g=se((e=>{const{code:n}=e;if(n===c.enter||n===c.space)return e.preventDefault(),e.stopImmediatePropagation(),o("clickimpl",e),!0}),d);return{ns:n,itemRef:f,dataset:{[Ie]:""},role:v,tabIndex:s,handleFocus:u,handleKeydown:g,handleMousedown:m}}}),Xe=["aria-disabled","tabindex","role"];const Ze=()=>{const e=r("elDropdown",{}),o=p((()=>null==e?void 0:e.dropdownSize));return{elDropdown:e,_elDropdownSize:o}};var eo=e(o({name:"ElDropdownItem",components:{ElDropdownCollectionItem:Ve,ElRovingFocusItem:Ke,ElDropdownItemImpl:e(Qe,[["render",function(e,o,t,l,r,a){const i=b("el-icon");return w(),D(z,null,[e.divided?(w(),D("li",M({key:0,role:"separator",class:e.ns.bem("menu","item","divided")},e.$attrs),null,16)):P("v-if",!0),N("li",M({ref:e.itemRef},{...e.dataset,...e.$attrs},{"aria-disabled":e.disabled,class:[e.ns.be("menu","item"),e.ns.is("disabled",e.disabled)],tabindex:e.tabIndex,role:e.role,onClick:o[0]||(o[0]=o=>e.$emit("clickimpl",o)),onFocus:o[1]||(o[1]=(...o)=>e.handleFocus&&e.handleFocus(...o)),onKeydown:o[2]||(o[2]=G(((...o)=>e.handleKeydown&&e.handleKeydown(...o)),["self"])),onMousedown:o[3]||(o[3]=(...o)=>e.handleMousedown&&e.handleMousedown(...o)),onPointermove:o[4]||(o[4]=o=>e.$emit("pointermove",o)),onPointerleave:o[5]||(o[5]=o=>e.$emit("pointerleave",o))}),[e.icon?(w(),h(i,{key:0},{default:I((()=>[(w(),h(A(e.icon)))])),_:1})):P("v-if",!0),n(e.$slots,"default")],16,Xe)],64)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown-item-impl.vue"]])},inheritAttrs:!1,props:Ne,emits:["pointermove","pointerleave","click"],setup(e,{emit:o,attrs:n}){const{elDropdown:l}=Ze(),a=R(),s=t(null),u=p((()=>{var e,o;return null!=(o=null==(e=i(s))?void 0:e.textContent)?o:""})),{onItemEnter:d,onItemLeave:c}=r(Ue,void 0),m=se((e=>(o("pointermove",e),e.defaultPrevented)),me((o=>{if(e.disabled)return void c(o);const n=o.currentTarget;n===document.activeElement||n.contains(document.activeElement)||(d(o),o.defaultPrevented||null==n||n.focus())}))),f=se((e=>(o("pointerleave",e),e.defaultPrevented)),me((e=>{c(e)})));return{handleClick:se((n=>{if(!e.disabled)return o("click",n),"keydown"!==n.type&&n.defaultPrevented}),(o=>{var n,t,r;e.disabled?o.stopImmediatePropagation():((null==(n=null==l?void 0:l.hideOnClick)?void 0:n.value)&&(null==(t=l.handleClick)||t.call(l)),null==(r=l.commandHandler)||r.call(l,e.command,a,o))})),handlePointerMove:m,handlePointerLeave:f,textContent:u,propsAndAttrs:p((()=>({...e,...n})))}}}),[["render",function(e,o,t,l,r,a){var i;const s=b("el-dropdown-item-impl"),u=b("el-roving-focus-item"),d=b("el-dropdown-collection-item");return w(),h(d,{disabled:e.disabled,"text-value":null!=(i=e.textValue)?i:e.textContent},{default:I((()=>[y(u,{focusable:!e.disabled},{default:I((()=>[y(s,M(e.propsAndAttrs,{onPointerleave:e.handlePointerLeave,onPointermove:e.handlePointerMove,onClickimpl:e.handleClick}),{default:I((()=>[n(e.$slots,"default")])),_:3},16,["onPointerleave","onPointermove","onClickimpl"])])),_:3},8,["focusable"])])),_:3},8,["disabled","text-value"])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown-item.vue"]]);const oo=o({name:"ElDropdownMenu",props:Ae,setup(e){const o=x("dropdown"),{_elDropdownSize:n}=Ze(),t=n.value,{focusTrapRef:l,onKeydown:a}=r(fe,void 0),{contentRef:s,role:u,triggerId:d}=r(Ue,void 0),{collectionRef:m,getItems:f}=r(Je,void 0),{rovingFocusGroupRef:v,rovingFocusGroupRootStyle:g,tabIndex:b,onBlur:w,onFocus:h,onMousedown:I}=r(Fe,void 0),{collectionRef:y}=r(ke,void 0),E=p((()=>[o.b("menu"),o.bm("menu",null==t?void 0:t.value)])),_=be(s,m,l,v,y),C=se((o=>{var n;null==(n=e.onKeydown)||n.call(e,o)}),(e=>{const{currentTarget:o,code:n,target:t}=e;if(o.contains(t),c.tab===n&&e.stopImmediatePropagation(),e.preventDefault(),t!==i(s))return;if(!je.includes(n))return;const l=f().filter((e=>!e.disabled)).map((e=>e.ref));ze.includes(n)&&l.reverse(),Le(l)}));return{size:t,rovingFocusGroupRootStyle:g,tabIndex:b,dropdownKls:E,role:u,triggerId:d,dropdownListWrapperRef:_,handleKeydown:e=>{C(e),a(e)},onBlur:w,onFocus:h,onMousedown:I}}}),no=["role","aria-labelledby"];var to=e(oo,[["render",function(e,o,t,l,r,a){return w(),D("ul",{ref:e.dropdownListWrapperRef,class:K(e.dropdownKls),style:j(e.rovingFocusGroupRootStyle),tabindex:-1,role:e.role,"aria-labelledby":e.triggerId,onBlur:o[0]||(o[0]=(...o)=>e.onBlur&&e.onBlur(...o)),onFocus:o[1]||(o[1]=(...o)=>e.onFocus&&e.onFocus(...o)),onKeydown:o[2]||(o[2]=G(((...o)=>e.handleKeydown&&e.handleKeydown(...o)),["self"])),onMousedown:o[3]||(o[3]=G(((...o)=>e.onMousedown&&e.onMousedown(...o)),["self"]))},[n(e.$slots,"default")],46,no)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown-menu.vue"]]);const lo=H(qe,{DropdownItem:eo,DropdownMenu:to}),ro=V(eo),ao=V(to),io=ae(o({__name:"ThemeSwitch",setup(e){const{getPrefixCls:o}=Y(),n=o("theme-switch"),l=re({icon:"emojione-monotone:sun",color:"#fde047"}),r=re({icon:"emojione-monotone:crescent-moon",color:"#fde047"}),a=J(),s=t(a.getIsDark),u="var(--el-color-black)",d=e=>{a.setIsDark(e)};return(e,o)=>(w(),h(i(le),{class:K(i(n)),modelValue:s.value,"onUpdate:modelValue":o[0]||(o[0]=e=>s.value=e),"inline-prompt":"","border-color":u,"inactive-color":u,"active-color":u,"active-icon":i(l),"inactive-icon":i(r),onChange:d},null,8,["class","modelValue","active-icon","inactive-icon"]))}}),[["__scopeId","data-v-e70fc6a8"]]),so=()=>({changeLocale:async e=>{const o=U.global,n=await W(Object.assign({"../../locales/en.ts":()=>q((()=>import("./en-15e06783.js")),[]),"../../locales/zh-CN.ts":()=>q((()=>import("./zh-CN-a0496ff7.js")),[])}),`../../locales/${e}.ts`);o.setLocaleMessage(e,n.default),(e=>{const o=Q();"legacy"===U.mode?U.global.locale=e:U.global.locale.value=e,o.setCurrentLocale({lang:e}),X(e)})(e)}}),uo=o({__name:"LocaleDropdown",props:{color:Z.string.def("")},setup(e){const{getPrefixCls:o}=Y(),n=o("locale-dropdown"),t=ee(),l=p((()=>t.getLocaleMap)),r=p((()=>t.getCurrentLocale)),a=e=>{if(e===i(r).lang)return;window.location.reload(),t.setCurrentLocale({lang:e});const{changeLocale:o}=so();o(e)};return(o,t)=>{const r=b("Icon");return w(),h(i(lo),{class:K(i(n)),trigger:"click",onCommand:a},{dropdown:I((()=>[y(i(ao),null,{default:I((()=>[(w(!0),D(z,null,oe(i(l),(e=>(w(),h(i(ro),{key:e.lang,command:e.lang},{default:I((()=>[ne(te(e.name),1)])),_:2},1032,["command"])))),128))])),_:1})])),default:I((()=>[y(r,{size:18,icon:"ion:language-sharp",class:K(["cursor-pointer",o.$attrs.class]),color:e.color},null,8,["class","color"])])),_:1},8,["class"])}}});export{ao as E,io as T,uo as _,ro as a,lo as b};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
