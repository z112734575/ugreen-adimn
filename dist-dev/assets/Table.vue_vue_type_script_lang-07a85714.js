import{J as e,cv as t,c9 as l,b_ as n,aZ as a,c3 as r,cw as o,cx as s,c7 as i,bG as u,cb as d,cy as c,aR as p,cz as h,cA as f,cB as v,c2 as m,c4 as g,a_ as b,cC as y,cD as w,cE as x,cF as C,ca as S,cG as E,cH as k,cI as N,aT as R,K as A,aF as O,d as L,R as M,x as z,o as P,c as H,t as T,h as W,w as F,a5 as $,a as I,$ as B,ac as j,aA as _,L as K,M as D,b0 as V,S as q,r as Y,X,g as G,F as U,C as J,n as Q,e as Z,aw as ee,G as te,bz as le,cJ as ne,bA as ae,bf as re,aI as oe,az as se,b2 as ie,I as ue,N as de,a1 as ce,a2 as pe,ag as he,bw as fe,av as ve,ar as me,aJ as ge,bb as be,b3 as ye,Y as we,bq as xe,a$ as Ce,aG as Se,aH as Ee,bn as ke,A as Ne,ao as Re,B as Ae,a8 as Oe,bS as Le,E as Me,b5 as ze,cm as Pe,cK as He,by as Te,cL as We,U as Fe,ct as $e,ad as Ie,b6 as Be,bk as je,aa as _e,Z as Ke,a9 as De,b9 as Ve,be as qe,bV as Ye,al as Xe,b1 as Ge,aL as Ue,ah as Je,ai as Qe,s as Ze}from"./index-ec301f65.js";import{j as et,k as tt,i as lt,f as nt,a as at,E as rt,C as ot,g as st}from"./tsxHelper-baf264ad.js";import"./el-tag-107729d4.js";import{d as it,y as ut,E as dt}from"./el-popper-12ece89c.js";import{E as ct}from"./el-input-4221e35d.js";import{d as pt}from"./debounce-ca847a1b.js";import{u as ht}from"./use-form-common-props-12176987.js";var ft=1,vt=2;function mt(t){return t==t&&!e(t)}function gt(e,t){return function(l){return null!=l&&(l[e]===t&&(void 0!==t||e in Object(l)))}}function bt(e){var t=function(e){for(var t=o(e),l=t.length;l--;){var n=t[l],a=e[n];t[l]=[n,a,mt(a)]}return t}(e);return 1==t.length&&t[0][2]?gt(t[0][0],t[0][1]):function(l){return l===e||function(e,t,l,n){var a=l.length,o=a,s=!n;if(null==e)return!o;for(e=Object(e);a--;){var i=l[a];if(s&&i[2]?i[1]!==e[i[0]]:!(i[0]in e))return!1}for(;++a<o;){var u=(i=l[a])[0],d=e[u],c=i[1];if(s&&i[2]){if(void 0===d&&!(u in e))return!1}else{var p=new r;if(n)var h=n(d,c,u,e,t,p);if(!(void 0===h?et(c,d,ft|vt,n,p):h))return!1}}return!0}(l,e,t)}}var yt,wt=1,xt=2;function Ct(e){return s(e)?(t=i(e),function(e){return null==e?void 0:e[t]}):function(e){return function(t){return d(t,e)}}(e);var t}function St(e){return"function"==typeof e?e:null==e?c:"object"==typeof e?p(e)?(t=e[0],l=e[1],s(t)&&mt(l)?gt(i(t),l):function(e){var n=u(e,t);return void 0===n&&n===l?tt(e,t):et(l,n,wt|xt)}):bt(e):Ct(e);var t,l}const Et=function(e,t,l){for(var n=-1,a=Object(e),r=l(e),o=r.length;o--;){var s=r[yt?o:++n];if(!1===t(a[s],s,a))break}return e};var kt=function(e,l){return function(n,a){if(null==n)return n;if(!t(n))return e(n,a);for(var r=n.length,o=l?r:-1,s=Object(n);(l?o--:++o<r)&&!1!==a(s[o],o,s););return n}}((function(e,t){return e&&Et(e,t,o)}));const Nt=kt;function Rt(e,t,l){(void 0!==l&&!n(e[t],l)||void 0===l&&!(t in e))&&h(e,t,l)}function At(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}function Ot(t,l,n,a,r,o,s){var i=At(t,n),u=At(l,n),d=s.get(u);if(d)Rt(t,n,d);else{var c,h=o?o(i,u,n+"",t,l,s):void 0,N=void 0===h;if(N){var R=p(u),A=!R&&m(u),O=!R&&!A&&g(u);h=u,R||A||O?p(i)?h=i:b(i)?h=y(i):A?(N=!1,h=w(u,!0)):O?(N=!1,h=x(u,!0)):h=[]:C(u)||S(u)?(h=i,S(i)?h=f(c=i,v(c)):e(i)&&!E(i)||(h=k(u))):N=!1}N&&(s.set(u,h),r(h,u,a,o,s),s.delete(u)),Rt(t,n,h)}}function Lt(t,l,n,a,o){t!==l&&Et(l,(function(s,i){if(o||(o=new r),e(s))Ot(t,l,i,n,Lt,a,o);else{var u=a?a(At(t,i),s,i+"",t,l,o):void 0;void 0===u&&(u=s),Rt(t,i,u)}}),v)}function Mt(e,l){var n=-1,a=t(e)?Array(e.length):[];return Nt(e,(function(e,t,r){a[++n]=l(e,t,r)})),a}function zt(e,t){return R(function(e,t){return(p(e)?N:Mt)(e,St(t))}(e,t),1)}var Pt;const Ht=(Pt=function(e,t,l){Lt(e,t,l)},a((function(a,r){var o=-1,s=r.length,i=s>1?r[s-1]:void 0,u=s>2?r[2]:void 0;for(i=Pt.length>3&&"function"==typeof i?(s--,i):void 0,u&&function(a,r,o){if(!e(o))return!1;var s=typeof r;return!!("number"==s?t(o)&&l(r,o.length):"string"==s&&r in o)&&n(o[r],a)}(r[0],r[1],u)&&(i=s<3?void 0:i,s=1),a=Object(a);++o<s;){var d=r[o];d&&Pt(a,d,o,i)}return a})));var Tt,Wt,Ft,$t,It,Bt,jt,_t,Kt,Dt,Vt,qt,Yt,Xt,Gt,Ut=!1;function Jt(){if(!Ut){Ut=!0;var e=navigator.userAgent,t=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(e),l=/(Mac OS X)|(Windows)|(Linux)/.exec(e);if(qt=/\b(iPhone|iP[ao]d)/.exec(e),Yt=/\b(iP[ao]d)/.exec(e),Dt=/Android/i.exec(e),Xt=/FBAN\/\w+;/i.exec(e),Gt=/Mobile/i.exec(e),Vt=!!/Win64/.exec(e),t){(Tt=t[1]?parseFloat(t[1]):t[5]?parseFloat(t[5]):NaN)&&document&&document.documentMode&&(Tt=document.documentMode);var n=/(?:Trident\/(\d+.\d+))/.exec(e);Bt=n?parseFloat(n[1])+4:Tt,Wt=t[2]?parseFloat(t[2]):NaN,Ft=t[3]?parseFloat(t[3]):NaN,($t=t[4]?parseFloat(t[4]):NaN)?(t=/(?:Chrome\/(\d+\.\d+))/.exec(e),It=t&&t[1]?parseFloat(t[1]):NaN):It=NaN}else Tt=Wt=Ft=It=$t=NaN;if(l){if(l[1]){var a=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(e);jt=!a||parseFloat(a[1].replace("_","."))}else jt=!1;_t=!!l[2],Kt=!!l[3]}else jt=_t=Kt=!1}}var Qt,Zt={ie:function(){return Jt()||Tt},ieCompatibilityMode:function(){return Jt()||Bt>Tt},ie64:function(){return Zt.ie()&&Vt},firefox:function(){return Jt()||Wt},opera:function(){return Jt()||Ft},webkit:function(){return Jt()||$t},safari:function(){return Zt.webkit()},chrome:function(){return Jt()||It},windows:function(){return Jt()||_t},osx:function(){return Jt()||jt},linux:function(){return Jt()||Kt},iphone:function(){return Jt()||qt},mobile:function(){return Jt()||qt||Yt||Dt||Gt},nativeApp:function(){return Jt()||Xt},android:function(){return Jt()||Dt},ipad:function(){return Jt()||Yt}},el=Zt,tl=!!(typeof window<"u"&&window.document&&window.document.createElement),ll={canUseDOM:tl,canUseWorkers:typeof Worker<"u",canUseEventListeners:tl&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:tl&&!!window.screen,isInWorker:!tl};ll.canUseDOM&&(Qt=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("",""));var nl=function(e,t){if(!ll.canUseDOM||t&&!("addEventListener"in document))return!1;var l="on"+e,n=l in document;if(!n){var a=document.createElement("div");a.setAttribute(l,"return;"),n="function"==typeof a[l]}return!n&&Qt&&"wheel"===e&&(n=document.implementation.hasFeature("Events.wheel","3.0")),n};function al(e){var t=0,l=0,n=0,a=0;return"detail"in e&&(l=e.detail),"wheelDelta"in e&&(l=-e.wheelDelta/120),"wheelDeltaY"in e&&(l=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=l,l=0),n=10*t,a=10*l,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(n=e.deltaX),(n||a)&&e.deltaMode&&(1==e.deltaMode?(n*=40,a*=40):(n*=800,a*=800)),n&&!t&&(t=n<1?-1:1),a&&!l&&(l=a<1?-1:1),{spinX:t,spinY:l,pixelX:n,pixelY:a}}al.getEventType=function(){return el.firefox()?"DOMMouseScroll":nl("wheel")?"wheel":"mousewheel"};var rl=al;
/**
* Checks if an event is supported in the current execution environment.
*
* NOTE: This will not work correctly for non-generic events such as `change`,
* `reset`, `load`, `error`, and `select`.
*
* Borrows from Modernizr.
*
* @param {string} eventNameSuffix Event name, e.g. "click".
* @param {?boolean} capture Check if the capture phase is supported.
* @return {boolean} True if the event is supported.
* @internal
* @license Modernizr 3.0.0pre (Custom Build) | MIT
*/const ol={beforeMount(e,t){!function(e,t){if(e&&e.addEventListener){const l=function(e){const l=rl(e);t&&Reflect.apply(t,this,[e,l])};e.addEventListener("wheel",l,{passive:!0})}}(e,t.value)}},sl=Symbol("elPaginationKey"),il=A({disabled:Boolean,currentPage:{type:Number,default:1},prevText:{type:String},prevIcon:{type:O}}),ul={click:e=>e instanceof MouseEvent},dl=["disabled","aria-label","aria-disabled"],cl={key:0},pl=L({name:"ElPaginationPrev"});var hl=j(L({...pl,props:il,emits:ul,setup(e){const t=e,{t:l}=M(),n=z((()=>t.disabled||t.currentPage<=1));return(e,t)=>(P(),H("button",{type:"button",class:"btn-prev",disabled:I(n),"aria-label":e.prevText||I(l)("el.pagination.prev"),"aria-disabled":I(n),onClick:t[0]||(t[0]=t=>e.$emit("click",t))},[e.prevText?(P(),H("span",cl,T(e.prevText),1)):(P(),W(I(B),{key:1},{default:F((()=>[(P(),W($(e.prevIcon)))])),_:1}))],8,dl))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/prev.vue"]]);const fl=A({disabled:Boolean,currentPage:{type:Number,default:1},pageCount:{type:Number,default:50},nextText:{type:String},nextIcon:{type:O}}),vl=["disabled","aria-label","aria-disabled"],ml={key:0},gl=L({name:"ElPaginationNext"});var bl=j(L({...gl,props:fl,emits:["click"],setup(e){const t=e,{t:l}=M(),n=z((()=>t.disabled||t.currentPage===t.pageCount||0===t.pageCount));return(e,t)=>(P(),H("button",{type:"button",class:"btn-next",disabled:I(n),"aria-label":e.nextText||I(l)("el.pagination.next"),"aria-disabled":I(n),onClick:t[0]||(t[0]=t=>e.$emit("click",t))},[e.nextText?(P(),H("span",ml,T(e.nextText),1)):(P(),W(I(B),{key:1},{default:F((()=>[(P(),W($(e.nextIcon)))])),_:1}))],8,vl))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/next.vue"]]);const yl=()=>_(sl,{}),wl=A({pageSize:{type:Number,required:!0},pageSizes:{type:K(Array),default:()=>D([10,20,30,40,50,100])},popperClass:{type:String},disabled:Boolean,size:{type:String,values:V}}),xl=L({name:"ElPaginationSizes"});var Cl=j(L({...xl,props:wl,emits:["page-size-change"],setup(e,{emit:t}){const l=e,{t:n}=M(),a=q("pagination"),r=yl(),o=Y(l.pageSize);X((()=>l.pageSizes),((e,n)=>{if(!lt(e,n)&&Array.isArray(e)){const n=e.includes(l.pageSize)?l.pageSize:l.pageSizes[0];t("page-size-change",n)}})),X((()=>l.pageSize),(e=>{o.value=e}));const s=z((()=>l.pageSizes));function i(e){var t;e!==o.value&&(o.value=e,null==(t=r.handleSizeChange)||t.call(r,Number(e)))}return(e,t)=>(P(),H("span",{class:Q(I(a).e("sizes"))},[G(I(at),{"model-value":o.value,disabled:e.disabled,"popper-class":e.popperClass,size:e.size,"validate-event":!1,onChange:i},{default:F((()=>[(P(!0),H(U,null,J(I(s),(e=>(P(),W(I(nt),{key:e,value:e,label:e+I(n)("el.pagination.pagesize")},null,8,["value","label"])))),128))])),_:1},8,["model-value","disabled","popper-class","size"])],2))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/sizes.vue"]]);const Sl=A({size:{type:String,values:V}}),El=["disabled"],kl=L({name:"ElPaginationJumper"});var Nl=j(L({...kl,props:Sl,setup(e){const{t:t}=M(),l=q("pagination"),{pageCount:n,disabled:a,currentPage:r,changeEvent:o}=yl(),s=Y(),i=z((()=>{var e;return null!=(e=s.value)?e:null==r?void 0:r.value}));function u(e){s.value=e?+e:""}function d(e){e=Math.trunc(+e),null==o||o(e),s.value=void 0}return(e,r)=>(P(),H("span",{class:Q(I(l).e("jump")),disabled:I(a)},[Z("span",{class:Q([I(l).e("goto")])},T(I(t)("el.pagination.goto")),3),G(I(ct),{size:e.size,class:Q([I(l).e("editor"),I(l).is("in-pagination")]),min:1,max:I(n),disabled:I(a),"model-value":I(i),"validate-event":!1,label:I(t)("el.pagination.page"),type:"number","onUpdate:modelValue":u,onChange:d},null,8,["size","class","max","disabled","model-value","label"]),Z("span",{class:Q([I(l).e("classifier")])},T(I(t)("el.pagination.pageClassifier")),3)],10,El))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/jumper.vue"]]);const Rl=A({total:{type:Number,default:1e3}}),Al=["disabled"],Ol=L({name:"ElPaginationTotal"});var Ll=j(L({...Ol,props:Rl,setup(e){const{t:t}=M(),l=q("pagination"),{disabled:n}=yl();return(e,a)=>(P(),H("span",{class:Q(I(l).e("total")),disabled:I(n)},T(I(t)("el.pagination.total",{total:e.total})),11,Al))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/total.vue"]]);const Ml=A({currentPage:{type:Number,default:1},pageCount:{type:Number,required:!0},pagerCount:{type:Number,default:7},disabled:Boolean}),zl=["onKeyup"],Pl=["aria-current","aria-label","tabindex"],Hl=["tabindex","aria-label"],Tl=["aria-current","aria-label","tabindex"],Wl=["tabindex","aria-label"],Fl=["aria-current","aria-label","tabindex"],$l=L({name:"ElPaginationPager"});var Il=j(L({...$l,props:Ml,emits:["change"],setup(e,{emit:t}){const l=e,n=q("pager"),a=q("icon"),{t:r}=M(),o=Y(!1),s=Y(!1),i=Y(!1),u=Y(!1),d=Y(!1),c=Y(!1),p=z((()=>{const e=l.pagerCount,t=(e-1)/2,n=Number(l.currentPage),a=Number(l.pageCount);let r=!1,o=!1;a>e&&(n>e-t&&(r=!0),n<a-t&&(o=!0));const s=[];if(r&&!o){for(let t=a-(e-2);t<a;t++)s.push(t)}else if(!r&&o)for(let l=2;l<e;l++)s.push(l);else if(r&&o){const t=Math.floor(e/2)-1;for(let e=n-t;e<=n+t;e++)s.push(e)}else for(let l=2;l<a;l++)s.push(l);return s})),h=z((()=>l.disabled?-1:0));function f(e=!1){l.disabled||(e?i.value=!0:u.value=!0)}function v(e=!1){e?d.value=!0:c.value=!0}function m(e){const n=e.target;if("li"===n.tagName.toLowerCase()&&Array.from(n.classList).includes("number")){const e=Number(n.textContent);e!==l.currentPage&&t("change",e)}else"li"===n.tagName.toLowerCase()&&Array.from(n.classList).includes("more")&&g(e)}function g(e){const n=e.target;if("ul"===n.tagName.toLowerCase()||l.disabled)return;let a=Number(n.textContent);const r=l.pageCount,o=l.currentPage,s=l.pagerCount-2;n.className.includes("more")&&(n.className.includes("quickprev")?a=o-s:n.className.includes("quicknext")&&(a=o+s)),Number.isNaN(+a)||(a<1&&(a=1),a>r&&(a=r)),a!==o&&t("change",a)}return ee((()=>{const e=(l.pagerCount-1)/2;o.value=!1,s.value=!1,l.pageCount>l.pagerCount&&(l.currentPage>l.pagerCount-e&&(o.value=!0),l.currentPage<l.pageCount-e&&(s.value=!0))})),(e,t)=>(P(),H("ul",{class:Q(I(n).b()),onClick:g,onKeyup:re(m,["enter"])},[e.pageCount>0?(P(),H("li",{key:0,class:Q([[I(n).is("active",1===e.currentPage),I(n).is("disabled",e.disabled)],"number"]),"aria-current":1===e.currentPage,"aria-label":I(r)("el.pagination.currentPage",{pager:1}),tabindex:I(h)}," 1 ",10,Pl)):te("v-if",!0),o.value?(P(),H("li",{key:1,class:Q(["more","btn-quickprev",I(a).b(),I(n).is("disabled",e.disabled)]),tabindex:I(h),"aria-label":I(r)("el.pagination.prevPages",{pager:e.pagerCount-2}),onMouseenter:t[0]||(t[0]=e=>f(!0)),onMouseleave:t[1]||(t[1]=e=>i.value=!1),onFocus:t[2]||(t[2]=e=>v(!0)),onBlur:t[3]||(t[3]=e=>d.value=!1)},[!i.value&&!d.value||e.disabled?(P(),W(I(ne),{key:1})):(P(),W(I(le),{key:0}))],42,Hl)):te("v-if",!0),(P(!0),H(U,null,J(I(p),(t=>(P(),H("li",{key:t,class:Q([[I(n).is("active",e.currentPage===t),I(n).is("disabled",e.disabled)],"number"]),"aria-current":e.currentPage===t,"aria-label":I(r)("el.pagination.currentPage",{pager:t}),tabindex:I(h)},T(t),11,Tl)))),128)),s.value?(P(),H("li",{key:2,class:Q(["more","btn-quicknext",I(a).b(),I(n).is("disabled",e.disabled)]),tabindex:I(h),"aria-label":I(r)("el.pagination.nextPages",{pager:e.pagerCount-2}),onMouseenter:t[4]||(t[4]=e=>f()),onMouseleave:t[5]||(t[5]=e=>u.value=!1),onFocus:t[6]||(t[6]=e=>v()),onBlur:t[7]||(t[7]=e=>c.value=!1)},[!u.value&&!c.value||e.disabled?(P(),W(I(ne),{key:1})):(P(),W(I(ae),{key:0}))],42,Wl)):te("v-if",!0),e.pageCount>1?(P(),H("li",{key:3,class:Q([[I(n).is("active",e.currentPage===e.pageCount),I(n).is("disabled",e.disabled)],"number"]),"aria-current":e.currentPage===e.pageCount,"aria-label":I(r)("el.pagination.currentPage",{pager:e.pageCount}),tabindex:I(h)},T(e.pageCount),11,Fl)):te("v-if",!0)],42,zl))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/pager.vue"]]);const Bl=e=>"number"!=typeof e,jl=A({total:Number,pageSize:Number,defaultPageSize:Number,currentPage:Number,defaultCurrentPage:Number,pageCount:Number,pagerCount:{type:Number,validator:e=>de(e)&&Math.trunc(e)===e&&e>4&&e<22&&e%2==1,default:7},layout:{type:String,default:["prev","pager","next","jumper","->","total"].join(", ")},pageSizes:{type:K(Array),default:()=>D([10,20,30,40,50,100])},popperClass:{type:String,default:""},prevText:{type:String,default:""},prevIcon:{type:O,default:()=>ce},nextText:{type:String,default:""},nextIcon:{type:O,default:()=>pe},small:Boolean,background:Boolean,disabled:Boolean,hideOnSinglePage:Boolean}),_l="ElPagination";const Kl=he(L({name:_l,props:jl,emits:{"update:current-page":e=>de(e),"update:page-size":e=>de(e),"size-change":e=>de(e),"current-change":e=>de(e),"prev-click":e=>de(e),"next-click":e=>de(e)},setup(e,{emit:t,slots:l}){const{t:n}=M(),a=q("pagination"),r=oe().vnode.props||{},o="onUpdate:currentPage"in r||"onUpdate:current-page"in r||"onCurrentChange"in r,s="onUpdate:pageSize"in r||"onUpdate:page-size"in r||"onSizeChange"in r,i=z((()=>{if(Bl(e.total)&&Bl(e.pageCount))return!1;if(!Bl(e.currentPage)&&!o)return!1;if(e.layout.includes("sizes"))if(Bl(e.pageCount)){if(!Bl(e.total)&&!Bl(e.pageSize)&&!s)return!1}else if(!s)return!1;return!0})),u=Y(Bl(e.defaultPageSize)?10:e.defaultPageSize),d=Y(Bl(e.defaultCurrentPage)?1:e.defaultCurrentPage),c=z({get:()=>Bl(e.pageSize)?u.value:e.pageSize,set(l){Bl(e.pageSize)&&(u.value=l),s&&(t("update:page-size",l),t("size-change",l))}}),p=z((()=>{let t=0;return Bl(e.pageCount)?Bl(e.total)||(t=Math.max(1,Math.ceil(e.total/c.value))):t=e.pageCount,t})),h=z({get:()=>Bl(e.currentPage)?d.value:e.currentPage,set(l){let n=l;l<1?n=1:l>p.value&&(n=p.value),Bl(e.currentPage)&&(d.value=n),o&&(t("update:current-page",n),t("current-change",n))}});function f(e){h.value=e}function v(){e.disabled||(h.value-=1,t("prev-click",h.value))}function m(){e.disabled||(h.value+=1,t("next-click",h.value))}function g(e,t){e&&(e.props||(e.props={}),e.props.class=[e.props.class,t].join(" "))}return X(p,(e=>{h.value>e&&(h.value=e)})),se(sl,{pageCount:p,disabled:z((()=>e.disabled)),currentPage:h,changeEvent:f,handleSizeChange:function(e){c.value=e;const t=p.value;h.value>t&&(h.value=t)}}),()=>{var t,r;if(!i.value)return ie(_l,n("el.pagination.deprecationWarning")),null;if(!e.layout)return null;if(e.hideOnSinglePage&&p.value<=1)return null;const o=[],s=[],u=ue("div",{class:a.e("rightwrapper")},s),d={prev:ue(hl,{disabled:e.disabled,currentPage:h.value,prevText:e.prevText,prevIcon:e.prevIcon,onClick:v}),jumper:ue(Nl,{size:e.small?"small":"default"}),pager:ue(Il,{currentPage:h.value,pageCount:p.value,pagerCount:e.pagerCount,onChange:f,disabled:e.disabled}),next:ue(bl,{disabled:e.disabled,currentPage:h.value,pageCount:p.value,nextText:e.nextText,nextIcon:e.nextIcon,onClick:m}),sizes:ue(Cl,{pageSize:c.value,pageSizes:e.pageSizes,popperClass:e.popperClass,disabled:e.disabled,size:e.small?"small":"default"}),slot:null!=(r=null==(t=null==l?void 0:l.default)?void 0:t.call(l))?r:null,total:ue(Ll,{total:Bl(e.total)?0:e.total})},b=e.layout.split(",").map((e=>e.trim()));let y=!1;return b.forEach((e=>{"->"!==e?y?s.push(d[e]):o.push(d[e]):y=!0})),g(o[0],a.is("first")),g(o[o.length-1],a.is("last")),y&&s.length>0&&(g(s[0],a.is("first")),g(s[s.length-1],a.is("last")),o.push(u)),ue("div",{class:[a.b(),a.is("background",e.background),{[a.m("small")]:e.small}]},o)}}}));
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var Dl=/["'&<>]/,Vl=function(e){var t,l=""+e,n=Dl.exec(l);if(!n)return l;var a="",r=0,o=0;for(r=n.index;r<l.length;r++){switch(l.charCodeAt(r)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#39;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}o!==r&&(a+=l.substring(o,r)),o=r+1,a+=t}return o!==r?a+l.substring(o,r):a};const ql=function(e){var t;return null==(t=e.target)?void 0:t.closest("td")},Yl=function(e,t,l,n,a){if(!t&&!n&&(!a||Array.isArray(a)&&!a.length))return e;l="string"==typeof l?"descending"===l?-1:1:l&&l<0?-1:1;const r=n?null:function(l,n){return a?(Array.isArray(a)||(a=[a]),a.map((t=>"string"==typeof t?u(l,t):t(l,n,e)))):("$key"!==t&&be(l)&&"$value"in l&&(l=l.$value),[be(l)?u(l,t):l])};return e.map(((e,t)=>({value:e,index:t,key:r?r(e,t):null}))).sort(((e,t)=>{let a=function(e,t){if(n)return n(e.value,t.value);for(let l=0,n=e.key.length;l<n;l++){if(e.key[l]<t.key[l])return-1;if(e.key[l]>t.key[l])return 1}return 0}(e,t);return a||(a=e.index-t.index),a*+l})).map((e=>e.value))},Xl=function(e,t){let l=null;return e.columns.forEach((e=>{e.id===t&&(l=e)})),l},Gl=function(e,t){let l=null;for(let n=0;n<e.columns.length;n++){const a=e.columns[n];if(a.columnKey===t){l=a;break}}return l||ve("ElTable",`No column matching with column-key: ${t}`),l},Ul=function(e,t,l){const n=(t.className||"").match(new RegExp(`${l}-table_[^\\s]+`,"gm"));return n?Xl(e,n[0]):null},Jl=(e,t)=>{if(!e)throw new Error("Row is required when get row identity");if("string"==typeof t){if(!t.includes("."))return`${e[t]}`;const l=t.split(".");let n=e;for(const e of l)n=n[e];return`${n}`}if("function"==typeof t)return t.call(null,e)},Ql=function(e,t){const l={};return(e||[]).forEach(((e,n)=>{l[Jl(e,t)]={row:e,index:n}})),l};function Zl(e){return""===e||void 0!==e&&(e=Number.parseInt(e,10),Number.isNaN(e)&&(e="")),e}function en(e){return""===e||void 0!==e&&(e=Zl(e),Number.isNaN(e)&&(e=80)),e}function tn(e,t,l){let n=!1;const a=e.indexOf(t),r=-1!==a,o=o=>{"add"===o?e.push(t):e.splice(a,1),n=!0,ge(t.children)&&t.children.forEach((t=>{tn(e,t,null!=l?l:!r)}))};return me(l)?l&&!r?o("add"):!l&&r&&o("remove"):o(r?"remove":"add"),n}function ln(e,t,l="children",n="hasChildren"){const a=e=>!(Array.isArray(e)&&e.length);function r(e,o,s){t(e,o,s),o.forEach((e=>{if(e[n])return void t(e,null,s+1);const o=e[l];a(o)||r(e,o,s+1)}))}e.forEach((e=>{if(e[n])return void t(e,null,0);const o=e[l];a(o)||r(e,o,0)}))}let nn;function an(e){return e.children?zt(e.children,an):[e]}function rn(e,t){return e+t.colSpan}const on=(e,t,l,n)=>{let a=0,r=e;const o=l.states.columns.value;if(n){const t=an(n[e]);a=o.slice(0,o.indexOf(t[0])).reduce(rn,0),r=a+t.reduce(rn,0)-1}else a=e;let s;switch(t){case"left":r<l.states.fixedLeafColumnsLength.value&&(s="left");break;case"right":a>=o.length-l.states.rightFixedLeafColumnsLength.value&&(s="right");break;default:r<l.states.fixedLeafColumnsLength.value?s="left":a>=o.length-l.states.rightFixedLeafColumnsLength.value&&(s="right")}return s?{direction:s,start:a,after:r}:{}},sn=(e,t,l,n,a,r=0)=>{const o=[],{direction:s,start:i,after:u}=on(t,l,n,a);if(s){const t="left"===s;o.push(`${e}-fixed-column--${s}`),t&&u+r===n.states.fixedLeafColumnsLength.value-1?o.push("is-last-column"):t||i-r!=n.states.columns.value.length-n.states.rightFixedLeafColumnsLength.value||o.push("is-first-column")}return o};function un(e,t){return e+(null===t.realWidth||Number.isNaN(t.realWidth)?Number(t.width):t.realWidth)}const dn=(e,t,l,n)=>{const{direction:a,start:r=0,after:o=0}=on(e,t,l,n);if(!a)return;const s={},i="left"===a,u=l.states.columns.value;return i?s.left=u.slice(0,r).reduce(un,0):s.right=u.slice(o+1).reverse().reduce(un,0),s},cn=(e,t)=>{e&&(Number.isNaN(e[t])||(e[t]=`${e[t]}px`))};const pn=(e,t)=>{const l=t.sortingColumn;return l&&"string"!=typeof l.sortable?Yl(e,t.sortProp,t.sortOrder,l.sortMethod,l.sortBy):e},hn=e=>{const t=[];return e.forEach((e=>{e.children?t.push.apply(t,hn(e.children)):t.push(e)})),t};function fn(){var e;const t=oe(),{size:l}=ye(null==(e=t.proxy)?void 0:e.$props),n=Y(null),a=Y([]),r=Y([]),o=Y(!1),s=Y([]),i=Y([]),u=Y([]),d=Y([]),c=Y([]),p=Y([]),h=Y([]),f=Y([]),v=Y(0),m=Y(0),g=Y(0),b=Y(!1),y=Y([]),w=Y(!1),x=Y(!1),C=Y(null),S=Y({}),E=Y(null),k=Y(null),N=Y(null),R=Y(null),A=Y(null);X(a,(()=>t.state&&M(!1)),{deep:!0});const O=e=>{var t;null==(t=e.children)||t.forEach((t=>{t.fixed=e.fixed,O(t)}))},L=()=>{s.value.forEach((e=>{O(e)})),d.value=s.value.filter((e=>!0===e.fixed||"left"===e.fixed)),c.value=s.value.filter((e=>"right"===e.fixed)),d.value.length>0&&s.value[0]&&"selection"===s.value[0].type&&!s.value[0].fixed&&(s.value[0].fixed=!0,d.value.unshift(s.value[0]));const e=s.value.filter((e=>!e.fixed));i.value=[].concat(d.value).concat(e).concat(c.value);const t=hn(e),l=hn(d.value),n=hn(c.value);v.value=t.length,m.value=l.length,g.value=n.length,u.value=[].concat(l).concat(t).concat(n),o.value=d.value.length>0||c.value.length>0},M=(e,l=!1)=>{e&&L(),l?t.state.doLayout():t.state.debouncedUpdateLayout()},P=e=>{var l;if(!t||!t.store)return 0;const{treeData:n}=t.store.states;let a=0;const r=null==(l=n.value[e])?void 0:l.children;return r&&(a+=r.length,r.forEach((e=>{a+=P(e)}))),a},H=(e,t,l)=>{k.value&&k.value!==e&&(k.value.order=null),k.value=e,N.value=t,R.value=l},T=()=>{let e=I(r);Object.keys(S.value).forEach((t=>{const l=S.value[t];if(!l||0===l.length)return;const n=Xl({columns:u.value},t);n&&n.filterMethod&&(e=e.filter((e=>l.some((t=>n.filterMethod.call(null,t,e,n))))))})),E.value=e},W=()=>{a.value=pn(E.value,{sortingColumn:k.value,sortProp:N.value,sortOrder:R.value})},{setExpandRowKeys:F,toggleRowExpansion:$,updateExpandRows:B,states:j,isRowExpanded:_}=function(e){const t=oe(),l=Y(!1),n=Y([]);return{updateExpandRows:()=>{const t=e.data.value||[],a=e.rowKey.value;if(l.value)n.value=t.slice();else if(a){const e=Ql(n.value,a);n.value=t.reduce(((t,l)=>{const n=Jl(l,a);return e[n]&&t.push(l),t}),[])}else n.value=[]},toggleRowExpansion:(e,l)=>{tn(n.value,e,l)&&t.emit("expand-change",e,n.value.slice())},setExpandRowKeys:l=>{t.store.assertRowKey();const a=e.data.value||[],r=e.rowKey.value,o=Ql(a,r);n.value=l.reduce(((e,t)=>{const l=o[t];return l&&e.push(l.row),e}),[])},isRowExpanded:t=>{const l=e.rowKey.value;return l?!!Ql(n.value,l)[Jl(t,l)]:n.value.includes(t)},states:{expandRows:n,defaultExpandAll:l}}}({data:a,rowKey:n}),{updateTreeExpandKeys:K,toggleTreeExpansion:D,updateTreeData:V,loadOrToggle:q,states:G}=function(e){const t=Y([]),l=Y({}),n=Y(16),a=Y(!1),r=Y({}),o=Y("hasChildren"),s=Y("children"),i=oe(),u=z((()=>{if(!e.rowKey.value)return{};const t=e.data.value||[];return c(t)})),d=z((()=>{const t=e.rowKey.value,l=Object.keys(r.value),n={};return l.length?(l.forEach((e=>{if(r.value[e].length){const l={children:[]};r.value[e].forEach((e=>{const a=Jl(e,t);l.children.push(a),e[o.value]&&!n[a]&&(n[a]={children:[]})})),n[e]=l}})),n):n})),c=t=>{const l=e.rowKey.value,n={};return ln(t,((e,t,r)=>{const o=Jl(e,l);Array.isArray(t)?n[o]={children:t.map((e=>Jl(e,l))),level:r}:a.value&&(n[o]={children:[],lazy:!0,level:r})}),s.value,o.value),n},p=(e=!1,n=(e=>null==(e=i.store)?void 0:e.states.defaultExpandAll.value)())=>{var r;const o=u.value,s=d.value,c=Object.keys(o),p={};if(c.length){const r=I(l),i=[],u=(l,a)=>{if(e)return t.value?n||t.value.includes(a):!(!n&&!(null==l?void 0:l.expanded));{const e=n||t.value&&t.value.includes(a);return!(!(null==l?void 0:l.expanded)&&!e)}};c.forEach((e=>{const t=r[e],l={...o[e]};if(l.expanded=u(t,e),l.lazy){const{loaded:n=!1,loading:a=!1}=t||{};l.loaded=!!n,l.loading=!!a,i.push(e)}p[e]=l}));const d=Object.keys(s);a.value&&d.length&&i.length&&d.forEach((e=>{const t=r[e],l=s[e].children;if(i.includes(e)){if(0!==p[e].children.length)throw new Error("[ElTable]children must be an empty array.");p[e].children=l}else{const{loaded:n=!1,loading:a=!1}=t||{};p[e]={lazy:!0,loaded:!!n,loading:!!a,expanded:u(t,e),children:l,level:""}}}))}l.value=p,null==(r=i.store)||r.updateTableScrollY()};X((()=>t.value),(()=>{p(!0)})),X((()=>u.value),(()=>{p()})),X((()=>d.value),(()=>{p()}));const h=(t,n)=>{i.store.assertRowKey();const a=e.rowKey.value,r=Jl(t,a),o=r&&l.value[r];if(r&&o&&"expanded"in o){const e=o.expanded;n=void 0===n?!o.expanded:n,l.value[r].expanded=n,e!==n&&i.emit("expand-change",t,n),i.store.updateTableScrollY()}},f=(e,t,n)=>{const{load:a}=i.props;a&&!l.value[t].loaded&&(l.value[t].loading=!0,a(e,n,(n=>{if(!Array.isArray(n))throw new TypeError("[ElTable] data must be an array");l.value[t].loading=!1,l.value[t].loaded=!0,l.value[t].expanded=!0,n.length&&(r.value[t]=n),i.emit("expand-change",e,!0)})))};return{loadData:f,loadOrToggle:t=>{i.store.assertRowKey();const n=e.rowKey.value,r=Jl(t,n),o=l.value[r];a.value&&o&&"loaded"in o&&!o.loaded?f(t,r,o):h(t,void 0)},toggleTreeExpansion:h,updateTreeExpandKeys:e=>{t.value=e,p()},updateTreeData:p,normalize:c,states:{expandRowKeys:t,treeData:l,indent:n,lazy:a,lazyTreeNodeMap:r,lazyColumnIdentifier:o,childrenColumnName:s}}}({data:a,rowKey:n}),{updateCurrentRowData:U,updateCurrentRow:J,setCurrentRowKey:Q,states:Z}=function(e){const t=oe(),l=Y(null),n=Y(null),a=()=>{l.value=null},r=l=>{const{data:a,rowKey:r}=e;let o=null;r.value&&(o=(I(a)||[]).find((e=>Jl(e,r.value)===l))),n.value=o,t.emit("current-change",n.value,null)};return{setCurrentRowKey:e=>{t.store.assertRowKey(),l.value=e,r(e)},restoreCurrentRowKey:a,setCurrentRowByKey:r,updateCurrentRow:e=>{const l=n.value;if(e&&e!==l)return n.value=e,void t.emit("current-change",n.value,l);!e&&l&&(n.value=null,t.emit("current-change",null,l))},updateCurrentRowData:()=>{const o=e.rowKey.value,s=e.data.value||[],i=n.value;if(!s.includes(i)&&i){if(o){const e=Jl(i,o);r(e)}else n.value=null;null===n.value&&t.emit("current-change",null,i)}else l.value&&(r(l.value),a())},states:{_currentRowKey:l,currentRow:n}}}({data:a,rowKey:n});return{assertRowKey:()=>{if(!n.value)throw new Error("[ElTable] prop row-key is required")},updateColumns:L,scheduleLayout:M,isSelected:e=>y.value.includes(e),clearSelection:()=>{b.value=!1;y.value.length&&(y.value=[],t.emit("selection-change",[]))},cleanSelection:()=>{let e;if(n.value){e=[];const t=Ql(y.value,n.value),l=Ql(a.value,n.value);for(const n in t)fe(t,n)&&!l[n]&&e.push(t[n].row)}else e=y.value.filter((e=>!a.value.includes(e)));if(e.length){const l=y.value.filter((t=>!e.includes(t)));y.value=l,t.emit("selection-change",l.slice())}},getSelectionRows:()=>(y.value||[]).slice(),toggleRowSelection:(e,l=undefined,n=!0)=>{if(tn(y.value,e,l)){const l=(y.value||[]).slice();n&&t.emit("select",l,e),t.emit("selection-change",l)}},_toggleAllSelection:()=>{var e,l;const n=x.value?!b.value:!(b.value||y.value.length);b.value=n;let r=!1,o=0;const s=null==(l=null==(e=null==t?void 0:t.store)?void 0:e.states)?void 0:l.rowKey.value;a.value.forEach(((e,t)=>{const l=t+o;C.value?C.value.call(null,e,l)&&tn(y.value,e,n)&&(r=!0):tn(y.value,e,n)&&(r=!0),o+=P(Jl(e,s))})),r&&t.emit("selection-change",y.value?y.value.slice():[]),t.emit("select-all",y.value)},toggleAllSelection:null,updateSelectionByRowKey:()=>{const e=Ql(y.value,n.value);a.value.forEach((t=>{const l=Jl(t,n.value),a=e[l];a&&(y.value[a.index]=t)}))},updateAllSelected:()=>{var e,l,r;if(0===(null==(e=a.value)?void 0:e.length))return void(b.value=!1);let o;n.value&&(o=Ql(y.value,n.value));let s=!0,i=0,u=0;for(let c=0,p=(a.value||[]).length;c<p;c++){const e=null==(r=null==(l=null==t?void 0:t.store)?void 0:l.states)?void 0:r.rowKey.value,p=c+u,h=a.value[c],f=C.value&&C.value.call(null,h,p);if(d=h,o?o[Jl(d,n.value)]:y.value.includes(d))i++;else if(!C.value||f){s=!1;break}u+=P(Jl(h,e))}var d;0===i&&(s=!1),b.value=s},updateFilters:(e,t)=>{Array.isArray(e)||(e=[e]);const l={};return e.forEach((e=>{S.value[e.id]=t,l[e.columnKey||e.id]=t})),l},updateCurrentRow:J,updateSort:H,execFilter:T,execSort:W,execQuery:(e=undefined)=>{e&&e.filter||T(),W()},clearFilter:e=>{const{tableHeaderRef:l}=t.refs;if(!l)return;const n=Object.assign({},l.filterPanels),a=Object.keys(n);if(a.length)if("string"==typeof e&&(e=[e]),Array.isArray(e)){const l=e.map((e=>Gl({columns:u.value},e)));a.forEach((e=>{const t=l.find((t=>t.id===e));t&&(t.filteredValue=[])})),t.store.commit("filterChange",{column:l,values:[],silent:!0,multi:!0})}else a.forEach((e=>{const t=u.value.find((t=>t.id===e));t&&(t.filteredValue=[])})),S.value={},t.store.commit("filterChange",{column:{},values:[],silent:!0})},clearSort:()=>{k.value&&(H(null,null,null),t.store.commit("changeSortCondition",{silent:!0}))},toggleRowExpansion:$,setExpandRowKeysAdapter:e=>{F(e),K(e)},setCurrentRowKey:Q,toggleRowExpansionAdapter:(e,t)=>{u.value.some((({type:e})=>"expand"===e))?$(e,t):D(e,t)},isRowExpanded:_,updateExpandRows:B,updateCurrentRowData:U,loadOrToggle:q,updateTreeData:V,states:{tableSize:l,rowKey:n,data:a,_data:r,isComplex:o,_columns:s,originColumns:i,columns:u,fixedColumns:d,rightFixedColumns:c,leafColumns:p,fixedLeafColumns:h,rightFixedLeafColumns:f,updateOrderFns:[],leafColumnsLength:v,fixedLeafColumnsLength:m,rightFixedLeafColumnsLength:g,isAllSelected:b,selection:y,reserveSelection:w,selectOnIndeterminate:x,selectable:C,filters:S,filteredData:E,sortingColumn:k,sortProp:N,sortOrder:R,hoverRow:A,...j,...G,...Z}}}function vn(e,t){return e.map((e=>{var l;return e.id===t.id?t:((null==(l=e.children)?void 0:l.length)&&(e.children=vn(e.children,t)),e)}))}function mn(e){e.forEach((e=>{var t,l;e.no=null==(t=e.getColumnIndex)?void 0:t.call(e),(null==(l=e.children)?void 0:l.length)&&mn(e.children)})),e.sort(((e,t)=>e.no-t.no))}const gn={rowKey:"rowKey",defaultExpandAll:"defaultExpandAll",selectOnIndeterminate:"selectOnIndeterminate",indent:"indent",lazy:"lazy",data:"data","treeProps.hasChildren":{key:"lazyColumnIdentifier",default:"hasChildren"},"treeProps.children":{key:"childrenColumnName",default:"children"}};function bn(e,t){if(!e)throw new Error("Table is required.");const l=function(){const e=oe(),t=fn();return{ns:q("table"),...t,mutations:{setData(t,l){const n=I(t._data)!==l;t.data.value=l,t._data.value=l,e.store.execQuery(),e.store.updateCurrentRowData(),e.store.updateExpandRows(),e.store.updateTreeData(e.store.states.defaultExpandAll.value),I(t.reserveSelection)?(e.store.assertRowKey(),e.store.updateSelectionByRowKey()):n?e.store.clearSelection():e.store.cleanSelection(),e.store.updateAllSelected(),e.$ready&&e.store.scheduleLayout()},insertColumn(t,l,n,a){const r=I(t._columns);let o=[];n?(n&&!n.children&&(n.children=[]),n.children.push(l),o=vn(r,n)):(r.push(l),o=r),mn(o),t._columns.value=o,t.updateOrderFns.push(a),"selection"===l.type&&(t.selectable.value=l.selectable,t.reserveSelection.value=l.reserveSelection),e.$ready&&(e.store.updateColumns(),e.store.scheduleLayout())},updateColumnOrder(t,l){var n;(null==(n=l.getColumnIndex)?void 0:n.call(l))!==l.no&&(mn(t._columns.value),e.$ready&&e.store.updateColumns())},removeColumn(t,l,n,a){const r=I(t._columns)||[];if(n)n.children.splice(n.children.findIndex((e=>e.id===l.id)),1),we((()=>{var e;0===(null==(e=n.children)?void 0:e.length)&&delete n.children})),t._columns.value=vn(r,n);else{const e=r.indexOf(l);e>-1&&(r.splice(e,1),t._columns.value=r)}const o=t.updateOrderFns.indexOf(a);o>-1&&t.updateOrderFns.splice(o,1),e.$ready&&(e.store.updateColumns(),e.store.scheduleLayout())},sort(t,l){const{prop:n,order:a,init:r}=l;if(n){const l=I(t.columns).find((e=>e.property===n));l&&(l.order=a,e.store.updateSort(l,n,a),e.store.commit("changeSortCondition",{init:r}))}},changeSortCondition(t,l){const{sortingColumn:n,sortProp:a,sortOrder:r}=t,o=I(n),s=I(a),i=I(r);null===i&&(t.sortingColumn.value=null,t.sortProp.value=null),e.store.execQuery({filter:!0}),l&&(l.silent||l.init)||e.emit("sort-change",{column:o,prop:s,order:i}),e.store.updateTableScrollY()},filterChange(t,l){const{column:n,values:a,silent:r}=l,o=e.store.updateFilters(n,a);e.store.execQuery(),r||e.emit("filter-change",o),e.store.updateTableScrollY()},toggleAllSelection(){e.store.toggleAllSelection()},rowSelectedChanged(t,l){e.store.toggleRowSelection(l),e.store.updateAllSelected()},setHoverRow(e,t){e.hoverRow.value=t},setCurrentRow(t,l){e.store.updateCurrentRow(l)}},commit:function(t,...l){const n=e.store.mutations;if(!n[t])throw new Error(`Action not found: ${t}`);n[t].apply(e,[e.store.states].concat(l))},updateTableScrollY:function(){we((()=>e.layout.updateScrollY.apply(e.layout)))}}}();return l.toggleAllSelection=pt(l._toggleAllSelection,10),Object.keys(gn).forEach((e=>{yn(wn(t,e),e,l)})),function(e,t){Object.keys(gn).forEach((l=>{X((()=>wn(t,l)),(t=>{yn(t,l,e)}))}))}(l,t),l}function yn(e,t,l){let n=e,a=gn[t];"object"==typeof gn[t]&&(a=a.key,n=n||gn[t].default),l.states[a].value=n}function wn(e,t){if(t.includes(".")){const l=t.split(".");let n=e;return l.forEach((e=>{n=n[e]})),n}return e[t]}class xn{constructor(e){this.observers=[],this.table=null,this.store=null,this.columns=[],this.fit=!0,this.showHeader=!0,this.height=Y(null),this.scrollX=Y(!1),this.scrollY=Y(!1),this.bodyWidth=Y(null),this.fixedWidth=Y(null),this.rightFixedWidth=Y(null),this.gutterWidth=0;for(const t in e)fe(e,t)&&(xe(this[t])?this[t].value=e[t]:this[t]=e[t]);if(!this.table)throw new Error("Table is required for Table Layout");if(!this.store)throw new Error("Store is required for Table Layout")}updateScrollY(){if(null===this.height.value)return!1;const e=this.table.refs.scrollBarRef;if(this.table.vnode.el&&(null==e?void 0:e.wrapRef)){let t=!0;const l=this.scrollY.value;return t=e.wrapRef.scrollHeight>e.wrapRef.clientHeight,this.scrollY.value=t,l!==t}return!1}setHeight(e,t="height"){if(!Ce)return;const l=this.table.vnode.el;var n;if(e="number"==typeof(n=e)?n:"string"==typeof n?/^\d+(?:px)?$/.test(n)?Number.parseInt(n,10):n:null,this.height.value=Number(e),!l&&(e||0===e))return we((()=>this.setHeight(e,t)));"number"==typeof e?(l.style[t]=`${e}px`,this.updateElsHeight()):"string"==typeof e&&(l.style[t]=e,this.updateElsHeight())}setMaxHeight(e){this.setHeight(e,"max-height")}getFlattenColumns(){const e=[];return this.table.store.states.columns.value.forEach((t=>{t.isColumnGroup?e.push.apply(e,t.columns):e.push(t)})),e}updateElsHeight(){this.updateScrollY(),this.notifyObservers("scrollable")}headerDisplayNone(e){if(!e)return!0;let t=e;for(;"DIV"!==t.tagName;){if("none"===getComputedStyle(t).display)return!0;t=t.parentElement}return!1}updateColumnsWidth(){if(!Ce)return;const e=this.fit,t=this.table.vnode.el.clientWidth;let l=0;const n=this.getFlattenColumns(),a=n.filter((e=>"number"!=typeof e.width));if(n.forEach((e=>{"number"==typeof e.width&&e.realWidth&&(e.realWidth=null)})),a.length>0&&e){if(n.forEach((e=>{l+=Number(e.width||e.minWidth||80)})),l<=t){this.scrollX.value=!1;const e=t-l;if(1===a.length)a[0].realWidth=Number(a[0].minWidth||80)+e;else{const t=e/a.reduce(((e,t)=>e+Number(t.minWidth||80)),0);let l=0;a.forEach(((e,n)=>{if(0===n)return;const a=Math.floor(Number(e.minWidth||80)*t);l+=a,e.realWidth=Number(e.minWidth||80)+a})),a[0].realWidth=Number(a[0].minWidth||80)+e-l}}else this.scrollX.value=!0,a.forEach((e=>{e.realWidth=Number(e.minWidth)}));this.bodyWidth.value=Math.max(l,t),this.table.state.resizeState.value.width=this.bodyWidth.value}else n.forEach((e=>{e.width||e.minWidth?e.realWidth=Number(e.width||e.minWidth):e.realWidth=80,l+=e.realWidth})),this.scrollX.value=l>t,this.bodyWidth.value=l;const r=this.store.states.fixedColumns.value;if(r.length>0){let e=0;r.forEach((t=>{e+=Number(t.realWidth||t.width)})),this.fixedWidth.value=e}const o=this.store.states.rightFixedColumns.value;if(o.length>0){let e=0;o.forEach((t=>{e+=Number(t.realWidth||t.width)})),this.rightFixedWidth.value=e}this.notifyObservers("columns")}addObserver(e){this.observers.push(e)}removeObserver(e){const t=this.observers.indexOf(e);-1!==t&&this.observers.splice(t,1)}notifyObservers(e){this.observers.forEach((t=>{var l,n;switch(e){case"columns":null==(l=t.state)||l.onColumnsChange(this);break;case"scrollable":null==(n=t.state)||n.onScrollableChange(this);break;default:throw new Error(`Table Layout don't have event ${e}.`)}}))}}const{CheckboxGroup:Cn}=rt,Sn=L({name:"ElTableFilterPanel",components:{ElCheckbox:rt,ElCheckboxGroup:Cn,ElScrollbar:Se,ElTooltip:dt,ElIcon:B,ArrowDown:Ee,ArrowUp:ke},directives:{ClickOutside:ot},props:{placement:{type:String,default:"bottom-start"},store:{type:Object},column:{type:Object},upDataColumn:{type:Function}},setup(e){const t=oe(),{t:l}=M(),n=q("table-filter"),a=null==t?void 0:t.parent;a.filterPanels.value[e.column.id]||(a.filterPanels.value[e.column.id]=t);const r=Y(!1),o=Y(null),s=z((()=>e.column&&e.column.filters)),i=z({get:()=>{var t;return((null==(t=e.column)?void 0:t.filteredValue)||[])[0]},set:e=>{u.value&&(null!=e?u.value.splice(0,1,e):u.value.splice(0,1))}}),u=z({get:()=>e.column&&e.column.filteredValue||[],set(t){e.column&&e.upDataColumn("filteredValue",t)}}),d=z((()=>!e.column||e.column.filterMultiple)),c=()=>{r.value=!1},p=t=>{e.store.commit("filterChange",{column:e.column,values:t}),e.store.updateAllSelected()};X(r,(t=>{e.column&&e.upDataColumn("filterOpened",t)}),{immediate:!0});const h=z((()=>{var e,t;return null==(t=null==(e=o.value)?void 0:e.popperRef)?void 0:t.contentRef}));return{tooltipVisible:r,multiple:d,filteredValue:u,filterValue:i,filters:s,handleConfirm:()=>{p(u.value),c()},handleReset:()=>{u.value=[],p(u.value),c()},handleSelect:e=>{i.value=e,p(null!=e?u.value:[]),c()},isActive:e=>e.value===i.value,t:l,ns:n,showFilterPanel:e=>{e.stopPropagation(),r.value=!r.value},hideFilterPanel:()=>{r.value=!1},popperPaneRef:h,tooltip:o}}}),En={key:0},kn=["disabled"],Nn=["label","onClick"];var Rn=j(Sn,[["render",function(e,t,l,n,a,r){const o=Ne("el-checkbox"),s=Ne("el-checkbox-group"),i=Ne("el-scrollbar"),u=Ne("arrow-up"),d=Ne("arrow-down"),c=Ne("el-icon"),p=Ne("el-tooltip"),h=Re("click-outside");return P(),W(p,{ref:"tooltip",visible:e.tooltipVisible,offset:0,placement:e.placement,"show-arrow":!1,"stop-popper-mouse-event":!1,teleported:"",effect:"light",pure:"","popper-class":e.ns.b(),persistent:""},{content:F((()=>[e.multiple?(P(),H("div",En,[Z("div",{class:Q(e.ns.e("content"))},[G(i,{"wrap-class":e.ns.e("wrap")},{default:F((()=>[G(s,{modelValue:e.filteredValue,"onUpdate:modelValue":t[0]||(t[0]=t=>e.filteredValue=t),class:Q(e.ns.e("checkbox-group"))},{default:F((()=>[(P(!0),H(U,null,J(e.filters,(e=>(P(),W(o,{key:e.value,label:e.value},{default:F((()=>[Ae(T(e.text),1)])),_:2},1032,["label"])))),128))])),_:1},8,["modelValue","class"])])),_:1},8,["wrap-class"])],2),Z("div",{class:Q(e.ns.e("bottom"))},[Z("button",{class:Q({[e.ns.is("disabled")]:0===e.filteredValue.length}),disabled:0===e.filteredValue.length,type:"button",onClick:t[1]||(t[1]=(...t)=>e.handleConfirm&&e.handleConfirm(...t))},T(e.t("el.table.confirmFilter")),11,kn),Z("button",{type:"button",onClick:t[2]||(t[2]=(...t)=>e.handleReset&&e.handleReset(...t))},T(e.t("el.table.resetFilter")),1)],2)])):(P(),H("ul",{key:1,class:Q(e.ns.e("list"))},[Z("li",{class:Q([e.ns.e("list-item"),{[e.ns.is("active")]:void 0===e.filterValue||null===e.filterValue}]),onClick:t[3]||(t[3]=t=>e.handleSelect(null))},T(e.t("el.table.clearFilter")),3),(P(!0),H(U,null,J(e.filters,(t=>(P(),H("li",{key:t.value,class:Q([e.ns.e("list-item"),e.ns.is("active",e.isActive(t))]),label:t.value,onClick:l=>e.handleSelect(t.value)},T(t.text),11,Nn)))),128))],2))])),default:F((()=>[Oe((P(),H("span",{class:Q([`${e.ns.namespace.value}-table__column-filter-trigger`,`${e.ns.namespace.value}-none-outline`]),onClick:t[4]||(t[4]=(...t)=>e.showFilterPanel&&e.showFilterPanel(...t))},[G(c,null,{default:F((()=>[e.column.filterOpened?(P(),W(u,{key:0})):(P(),W(d,{key:1}))])),_:1})],2)),[[h,e.hideFilterPanel,e.popperPaneRef]])])),_:1},8,["visible","placement","popper-class"])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/table/src/filter-panel.vue"]]);function An(e){const t=oe();Le((()=>{l.value.addObserver(t)})),Me((()=>{n(l.value),a(l.value)})),ze((()=>{n(l.value),a(l.value)})),Pe((()=>{l.value.removeObserver(t)}));const l=z((()=>{const t=e.layout;if(!t)throw new Error("Can not find table layout.");return t})),n=t=>{var l;const n=(null==(l=e.vnode.el)?void 0:l.querySelectorAll("colgroup > col"))||[];if(!n.length)return;const a=t.getFlattenColumns(),r={};a.forEach((e=>{r[e.id]=e}));for(let e=0,o=n.length;e<o;e++){const t=n[e],l=t.getAttribute("name"),a=r[l];a&&t.setAttribute("width",a.realWidth||a.width)}},a=t=>{var l,n;const a=(null==(l=e.vnode.el)?void 0:l.querySelectorAll("colgroup > col[name=gutter]"))||[];for(let e=0,o=a.length;e<o;e++){a[e].setAttribute("width",t.scrollY.value?t.gutterWidth:"0")}const r=(null==(n=e.vnode.el)?void 0:n.querySelectorAll("th.gutter"))||[];for(let e=0,o=r.length;e<o;e++){const l=r[e];l.style.width=t.scrollY.value?`${t.gutterWidth}px`:"0",l.style.display=t.scrollY.value?"":"none"}};return{tableLayout:l.value,onColumnsChange:n,onScrollableChange:a}}const On=Symbol("ElTable");const Ln=e=>{const t=[];return e.forEach((e=>{e.children?(t.push(e),t.push.apply(t,Ln(e.children))):t.push(e)})),t};function Mn(e){const t=_(On),l=z((()=>(e=>{let t=1;const l=(e,n)=>{if(n&&(e.level=n.level+1,t<e.level&&(t=e.level)),e.children){let t=0;e.children.forEach((n=>{l(n,e),t+=n.colSpan})),e.colSpan=t}else e.colSpan=1};e.forEach((e=>{e.level=1,l(e,void 0)}));const n=[];for(let a=0;a<t;a++)n.push([]);return Ln(e).forEach((e=>{e.children?(e.rowSpan=1,e.children.forEach((e=>e.isSubColumn=!0))):e.rowSpan=t-e.level+1,n[e.level-1].push(e)})),n})(e.store.states.originColumns.value)));return{isGroup:z((()=>{const e=l.value.length>1;return e&&t&&(t.state.isGroup.value=!0),e})),toggleAllSelection:e=>{e.stopPropagation(),null==t||t.store.commit("toggleAllSelection")},columnRows:l}}var zn=L({name:"ElTableHeader",components:{ElCheckbox:rt},props:{fixed:{type:String,default:""},store:{required:!0,type:Object},border:Boolean,defaultSort:{type:Object,default:()=>({prop:"",order:""})}},setup(e,{emit:t}){const l=oe(),n=_(On),a=q("table"),r=Y({}),{onColumnsChange:o,onScrollableChange:s}=An(n);Me((async()=>{await we(),await we();const{prop:t,order:l}=e.defaultSort;null==n||n.store.commit("sort",{prop:t,order:l,init:!0})}));const{handleHeaderClick:i,handleHeaderContextMenu:u,handleMouseDown:d,handleMouseMove:c,handleMouseOut:p,handleSortClick:h,handleFilterClick:f}=function(e,t){const l=oe(),n=_(On),a=e=>{e.stopPropagation()},r=Y(null),o=Y(!1),s=Y({}),i=(t,l,a)=>{var r;t.stopPropagation();const o=l.order===a?null:a||(({order:e,sortOrders:t})=>{if(""===e)return t[0];const l=t.indexOf(e||null);return t[l>t.length-2?0:l+1]})(l),s=null==(r=t.target)?void 0:r.closest("th");if(s&&Te(s,"noclick"))return void We(s,"noclick");if(!l.sortable)return;const i=e.store.states;let u,d=i.sortProp.value;const c=i.sortingColumn.value;(c!==l||c===l&&null===c.order)&&(c&&(c.order=null),i.sortingColumn.value=l,d=l.property),u=l.order=o||null,i.sortProp.value=d,i.sortOrder.value=u,null==n||n.store.commit("changeSortCondition")};return{handleHeaderClick:(e,t)=>{!t.filters&&t.sortable?i(e,t,!1):t.filterable&&!t.sortable&&a(e),null==n||n.emit("header-click",t,e)},handleHeaderContextMenu:(e,t)=>{null==n||n.emit("header-contextmenu",t,e)},handleMouseDown:(a,i)=>{if(Ce&&!(i.children&&i.children.length>0)&&r.value&&e.border){o.value=!0;const u=n;t("set-drag-visible",!0);const d=(null==u?void 0:u.vnode.el).getBoundingClientRect().left,c=l.vnode.el.querySelector(`th.${i.id}`),p=c.getBoundingClientRect(),h=p.left-d+30;He(c,"noclick"),s.value={startMouseLeft:a.clientX,startLeft:p.right-d,startColumnLeft:p.left-d,tableLeft:d};const f=null==u?void 0:u.refs.resizeProxy;f.style.left=`${s.value.startLeft}px`,document.onselectstart=function(){return!1},document.ondragstart=function(){return!1};const v=e=>{const t=e.clientX-s.value.startMouseLeft,l=s.value.startLeft+t;f.style.left=`${Math.max(h,l)}px`},m=()=>{if(o.value){const{startColumnLeft:l,startLeft:n}=s.value,d=Number.parseInt(f.style.left,10)-l;i.width=i.realWidth=d,null==u||u.emit("header-dragend",i.width,n-l,i,a),requestAnimationFrame((()=>{e.store.scheduleLayout(!1,!0)})),document.body.style.cursor="",o.value=!1,r.value=null,s.value={},t("set-drag-visible",!1)}document.removeEventListener("mousemove",v),document.removeEventListener("mouseup",m),document.onselectstart=null,document.ondragstart=null,setTimeout((()=>{We(c,"noclick")}),0)};document.addEventListener("mousemove",v),document.addEventListener("mouseup",m)}},handleMouseMove:(t,l)=>{var n;if(l.children&&l.children.length>0)return;const a=null==(n=t.target)?void 0:n.closest("th");if(l&&l.resizable&&!o.value&&e.border){const e=a.getBoundingClientRect(),n=document.body.style;e.width>12&&e.right-t.pageX<8?(n.cursor="col-resize",Te(a,"is-sortable")&&(a.style.cursor="col-resize"),r.value=l):o.value||(n.cursor="",Te(a,"is-sortable")&&(a.style.cursor="pointer"),r.value=null)}},handleMouseOut:()=>{Ce&&(document.body.style.cursor="")},handleSortClick:i,handleFilterClick:a}}(e,t),{getHeaderRowStyle:v,getHeaderRowClass:m,getHeaderCellStyle:g,getHeaderCellClass:b}=function(e){const t=_(On),l=q("table");return{getHeaderRowStyle:e=>{const l=null==t?void 0:t.props.headerRowStyle;return"function"==typeof l?l.call(null,{rowIndex:e}):l},getHeaderRowClass:e=>{const l=[],n=null==t?void 0:t.props.headerRowClassName;return"string"==typeof n?l.push(n):"function"==typeof n&&l.push(n.call(null,{rowIndex:e})),l.join(" ")},getHeaderCellStyle:(l,n,a,r)=>{var o;let s=null!=(o=null==t?void 0:t.props.headerCellStyle)?o:{};"function"==typeof s&&(s=s.call(null,{rowIndex:l,columnIndex:n,row:a,column:r}));const i=dn(n,r.fixed,e.store,a);return cn(i,"left"),cn(i,"right"),Object.assign({},s,i)},getHeaderCellClass:(n,a,r,o)=>{const s=sn(l.b(),a,o.fixed,e.store,r),i=[o.id,o.order,o.headerAlign,o.className,o.labelClassName,...s];o.children||i.push("is-leaf"),o.sortable&&i.push("is-sortable");const u=null==t?void 0:t.props.headerCellClassName;return"string"==typeof u?i.push(u):"function"==typeof u&&i.push(u.call(null,{rowIndex:n,columnIndex:a,row:r,column:o})),i.push(l.e("cell")),i.filter((e=>Boolean(e))).join(" ")}}}(e),{isGroup:y,toggleAllSelection:w,columnRows:x}=Mn(e);return l.state={onColumnsChange:o,onScrollableChange:s},l.filterPanels=r,{ns:a,filterPanels:r,onColumnsChange:o,onScrollableChange:s,columnRows:x,getHeaderRowClass:m,getHeaderRowStyle:v,getHeaderCellClass:b,getHeaderCellStyle:g,handleHeaderClick:i,handleHeaderContextMenu:u,handleMouseDown:d,handleMouseMove:c,handleMouseOut:p,handleSortClick:h,handleFilterClick:f,isGroup:y,toggleAllSelection:w}},render(){const{ns:e,isGroup:t,columnRows:l,getHeaderCellStyle:n,getHeaderCellClass:a,getHeaderRowClass:r,getHeaderRowStyle:o,handleHeaderClick:s,handleHeaderContextMenu:i,handleMouseDown:u,handleMouseMove:d,handleSortClick:c,handleMouseOut:p,store:h,$parent:f}=this;let v=1;return ue("thead",{class:{[e.is("group")]:t}},l.map(((e,t)=>ue("tr",{class:r(t),key:t,style:o(t)},e.map(((l,r)=>(l.rowSpan>v&&(v=l.rowSpan),ue("th",{class:a(t,r,e,l),colspan:l.colSpan,key:`${l.id}-thead`,rowspan:l.rowSpan,style:n(t,r,e,l),onClick:e=>s(e,l),onContextmenu:e=>i(e,l),onMousedown:e=>u(e,l),onMousemove:e=>d(e,l),onMouseout:p},[ue("div",{class:["cell",l.filteredValue&&l.filteredValue.length>0?"highlight":""]},[l.renderHeader?l.renderHeader({column:l,$index:r,store:h,_self:f}):l.label,l.sortable&&ue("span",{onClick:e=>c(e,l),class:"caret-wrapper"},[ue("i",{onClick:e=>c(e,l,"ascending"),class:"sort-caret ascending"}),ue("i",{onClick:e=>c(e,l,"descending"),class:"sort-caret descending"})]),l.filterable&&ue(Rn,{store:h,placement:l.filterPlacement||"bottom-start",column:l,upDataColumn:(e,t)=>{l[e]=t}})])]))))))))}});function Pn(e){const t=_(On),l=Y(""),n=Y(ue("div")),{nextZIndex:a}=Fe(),r=(l,n,a)=>{var r;const o=t,s=ql(l);let i;const u=null==(r=null==o?void 0:o.vnode.el)?void 0:r.dataset.prefix;s&&(i=Ul({columns:e.store.states.columns.value},s,u),i&&(null==o||o.emit(`cell-${a}`,n,i,s,l))),null==o||o.emit(`row-${a}`,n,i,l)};return{handleDoubleClick:(e,t)=>{r(e,t,"dblclick")},handleClick:(t,l)=>{e.store.commit("setCurrentRow",l),r(t,l,"click")},handleContextMenu:(e,t)=>{r(e,t,"contextmenu")},handleMouseEnter:pt((t=>{e.store.commit("setHoverRow",t)}),30),handleMouseLeave:pt((()=>{e.store.commit("setHoverRow",null)}),30),handleCellMouseEnter:(l,n,r)=>{var o;const s=t,i=ql(l),u=null==(o=null==s?void 0:s.vnode.el)?void 0:o.dataset.prefix;if(i){const t=Ul({columns:e.store.states.columns.value},i,u),a=s.hoverState={cell:i,column:t,row:n};null==s||s.emit("cell-mouse-enter",a.row,a.column,a.cell,l)}if(!r)return;const d=l.target.querySelector(".cell");if(!Te(d,`${u}-tooltip`)||!d.childNodes.length)return;const c=document.createRange();c.setStart(d,0),c.setEnd(d,d.childNodes.length);(Math.round(c.getBoundingClientRect().width)+((Number.parseInt($e(d,"paddingLeft"),10)||0)+(Number.parseInt($e(d,"paddingRight"),10)||0))>d.offsetWidth||d.scrollWidth>d.offsetWidth)&&function(e,t,l,n,a){a=Ht({enterable:!0,showArrow:!0},a);const r=null==e?void 0:e.dataset.prefix,o=null==e?void 0:e.querySelector(`.${r}-scrollbar__wrap`);function s(){i&&i.update()}null==nn||nn(),nn=()=>{try{i&&i.destroy(),c&&(null==e||e.removeChild(c)),t.removeEventListener("mouseenter",u),t.removeEventListener("mouseleave",d),null==o||o.removeEventListener("scroll",nn),nn=void 0}catch(l){}};let i=null,u=s,d=nn;a.enterable&&({onOpen:u,onClose:d}=it({showAfter:a.showAfter,hideAfter:a.hideAfter,open:s,close:nn}));const c=function(){const t="light"===a.effect,o=document.createElement("div");return o.className=[`${r}-popper`,t?"is-light":"is-dark",a.popperClass||""].join(" "),l=Vl(l),o.innerHTML=l,o.style.zIndex=String(n()),null==e||e.appendChild(o),o}();c.onmouseenter=u,c.onmouseleave=d;const p=[];if(a.offset&&p.push({name:"offset",options:{offset:[0,a.offset]}}),a.showArrow){const e=c.appendChild(function(){const e=document.createElement("div");return e.className=`${r}-popper__arrow`,e}());p.push({name:"arrow",options:{element:e,padding:10}})}const h=a.popperOptions||{};i=ut(t,c,{placement:a.placement||"top",strategy:"fixed",...h,modifiers:h.modifiers?p.concat(h.modifiers):p}),t.addEventListener("mouseenter",u),t.addEventListener("mouseleave",d),null==o||o.addEventListener("scroll",nn)}(null==t?void 0:t.refs.tableWrapper,i,i.innerText||i.textContent,a,r)},handleCellMouseLeave:e=>{if(!ql(e))return;const l=null==t?void 0:t.hoverState;null==t||t.emit("cell-mouse-leave",null==l?void 0:l.row,null==l?void 0:l.column,null==l?void 0:l.cell,e)},tooltipContent:l,tooltipTrigger:n}}function Hn(e){const t=_(On),l=q("table"),{handleDoubleClick:n,handleClick:a,handleContextMenu:r,handleMouseEnter:o,handleMouseLeave:s,handleCellMouseEnter:i,handleCellMouseLeave:u,tooltipContent:d,tooltipTrigger:c}=Pn(e),{getRowStyle:p,getRowClass:h,getCellStyle:f,getCellClass:v,getSpan:m,getColspanRealWidth:g}=function(e){const t=_(On),l=q("table");return{getRowStyle:(e,l)=>{const n=null==t?void 0:t.props.rowStyle;return"function"==typeof n?n.call(null,{row:e,rowIndex:l}):n||null},getRowClass:(n,a)=>{const r=[l.e("row")];(null==t?void 0:t.props.highlightCurrentRow)&&n===e.store.states.currentRow.value&&r.push("current-row"),e.stripe&&a%2==1&&r.push(l.em("row","striped"));const o=null==t?void 0:t.props.rowClassName;return"string"==typeof o?r.push(o):"function"==typeof o&&r.push(o.call(null,{row:n,rowIndex:a})),r},getCellStyle:(l,n,a,r)=>{const o=null==t?void 0:t.props.cellStyle;let s=null!=o?o:{};"function"==typeof o&&(s=o.call(null,{rowIndex:l,columnIndex:n,row:a,column:r}));const i=dn(n,null==e?void 0:e.fixed,e.store);return cn(i,"left"),cn(i,"right"),Object.assign({},s,i)},getCellClass:(n,a,r,o,s)=>{const i=sn(l.b(),a,null==e?void 0:e.fixed,e.store,void 0,s),u=[o.id,o.align,o.className,...i],d=null==t?void 0:t.props.cellClassName;return"string"==typeof d?u.push(d):"function"==typeof d&&u.push(d.call(null,{rowIndex:n,columnIndex:a,row:r,column:o})),u.push(l.e("cell")),u.filter((e=>Boolean(e))).join(" ")},getSpan:(e,l,n,a)=>{let r=1,o=1;const s=null==t?void 0:t.props.spanMethod;if("function"==typeof s){const t=s({row:e,column:l,rowIndex:n,columnIndex:a});Array.isArray(t)?(r=t[0],o=t[1]):"object"==typeof t&&(r=t.rowspan,o=t.colspan)}return{rowspan:r,colspan:o}},getColspanRealWidth:(e,t,l)=>{if(t<1)return e[l].realWidth;const n=e.map((({realWidth:e,width:t})=>e||t)).slice(l,l+t);return Number(n.reduce(((e,t)=>Number(e)+Number(t)),-1))}}}(e),b=z((()=>e.store.states.columns.value.findIndex((({type:e})=>"default"===e)))),y=(e,l)=>{const n=t.props.rowKey;return n?Jl(e,n):l},w=(d,c,w,C=!1)=>{const{tooltipEffect:S,tooltipOptions:E,store:k}=e,{indent:N,columns:R}=k.states,A=h(d,c);let O=!0;w&&(A.push(l.em("row",`level-${w.level}`)),O=w.display);return ue("tr",{style:[O?null:{display:"none"},p(d,c)],class:A,key:y(d,c),onDblclick:e=>n(e,d),onClick:e=>a(e,d),onContextmenu:e=>r(e,d),onMouseenter:()=>o(c),onMouseleave:s},R.value.map(((l,n)=>{const{rowspan:a,colspan:r}=m(d,l,c,n);if(!a||!r)return null;const o={...l};o.realWidth=g(R.value,r,n);const s={store:e.store,_self:e.context||t,column:o,row:d,$index:c,cellIndex:n,expanded:C};n===b.value&&w&&(s.treeNode={indent:w.level*N.value,level:w.level},"boolean"==typeof w.expanded&&(s.treeNode.expanded=w.expanded,"loading"in w&&(s.treeNode.loading=w.loading),"noLazyChildren"in w&&(s.treeNode.noLazyChildren=w.noLazyChildren)));const p=`${c},${n}`,h=o.columnKey||o.rawColumnKey||"",y=x(n,l,s),k=l.showOverflowTooltip&&Ht({effect:S},E,l.showOverflowTooltip);return ue("td",{style:f(c,n,d,l),class:v(c,n,d,l,r-1),key:`${h}${p}`,rowspan:a,colspan:r,onMouseenter:e=>i(e,d,k),onMouseleave:u},[y])})))},x=(e,t,l)=>t.renderCell(l);return{wrappedRowRender:(n,a)=>{const r=e.store,{isRowExpanded:o,assertRowKey:s}=r,{treeData:i,lazyTreeNodeMap:u,childrenColumnName:d,rowKey:c}=r.states,p=r.states.columns.value;if(p.some((({type:e})=>"expand"===e))){const e=o(n),s=w(n,a,void 0,e),i=t.renderExpanded;return e?i?[[s,ue("tr",{key:`expanded-row__${s.key}`},[ue("td",{colspan:p.length,class:`${l.e("cell")} ${l.e("expanded-cell")}`},[i({row:n,$index:a,store:r,expanded:e})])])]]:(console.error("[Element Error]renderExpanded is required."),s):[[s]]}if(Object.keys(i.value).length){s();const e=Jl(n,c.value);let t=i.value[e],l=null;t&&(l={expanded:t.expanded,level:t.level,display:!0},"boolean"==typeof t.lazy&&("boolean"==typeof t.loaded&&t.loaded&&(l.noLazyChildren=!(t.children&&t.children.length)),l.loading=t.loading));const r=[w(n,a,l)];if(t){let l=0;const o=(e,n)=>{e&&e.length&&n&&e.forEach((e=>{const s={display:n.display&&n.expanded,level:n.level+1,expanded:!1,noLazyChildren:!1,loading:!1},p=Jl(e,c.value);if(null==p)throw new Error("For nested data item, row-key is required.");if(t={...i.value[p]},t&&(s.expanded=t.expanded,t.level=t.level||s.level,t.display=!(!t.expanded||!s.display),"boolean"==typeof t.lazy&&("boolean"==typeof t.loaded&&t.loaded&&(s.noLazyChildren=!(t.children&&t.children.length)),s.loading=t.loading)),l++,r.push(w(e,a+l,s)),t){const l=u.value[p]||e[d.value];o(l,t)}}))};t.display=!0;const s=u.value[e]||n[d.value];o(s,t)}return r}return w(n,a,void 0)},tooltipContent:d,tooltipTrigger:c}}var Tn=L({name:"ElTableBody",props:{store:{required:!0,type:Object},stripe:Boolean,tooltipEffect:String,tooltipOptions:{type:Object},context:{default:()=>({}),type:Object},rowClassName:[String,Function],rowStyle:[Object,Function],fixed:{type:String,default:""},highlight:Boolean},setup(e){const t=oe(),l=_(On),n=q("table"),{wrappedRowRender:a,tooltipContent:r,tooltipTrigger:o}=Hn(e),{onColumnsChange:s,onScrollableChange:i}=An(l);return X(e.store.states.hoverRow,((l,a)=>{if(!e.store.states.isComplex.value||!Ce)return;let r=window.requestAnimationFrame;r||(r=e=>window.setTimeout(e,16)),r((()=>{const e=null==t?void 0:t.vnode.el,r=Array.from((null==e?void 0:e.children)||[]).filter((e=>null==e?void 0:e.classList.contains(`${n.e("row")}`))),o=r[a],s=r[l];o&&We(o,"hover-row"),s&&He(s,"hover-row")}))})),Pe((()=>{var e;null==(e=nn)||e()})),{ns:n,onColumnsChange:s,onScrollableChange:i,wrappedRowRender:a,tooltipContent:r,tooltipTrigger:o}},render(){const{wrappedRowRender:e,store:t}=this,l=t.states.data.value||[];return ue("tbody",{},[l.reduce(((t,l)=>t.concat(e(l,t.length))),[])])}});function Wn(e){const t="auto"===e.tableLayout;let l=e.columns||[];t&&l.every((e=>void 0===e.width))&&(l=[]);return ue("colgroup",{},l.map((l=>ue("col",(l=>{const n={key:`${e.tableLayout}_${l.id}`,style:{},name:void 0};return t?n.style={width:`${l.width}px`}:n.name=l.id,n})(l)))))}function Fn(e){const{columns:t}=function(){const e=_(On),t=null==e?void 0:e.store;return{leftFixedLeafCount:z((()=>t.states.fixedLeafColumnsLength.value)),rightFixedLeafCount:z((()=>t.states.rightFixedColumns.value.length)),columnsCount:z((()=>t.states.columns.value.length)),leftFixedCount:z((()=>t.states.fixedColumns.value.length)),rightFixedCount:z((()=>t.states.rightFixedColumns.value.length)),columns:t.states.columns}}(),l=q("table");return{getCellClasses:(t,n)=>{const a=t[n],r=[l.e("cell"),a.id,a.align,a.labelClassName,...sn(l.b(),n,a.fixed,e.store)];return a.className&&r.push(a.className),a.children||r.push(l.is("leaf")),r},getCellStyles:(t,l)=>{const n=dn(l,t.fixed,e.store);return cn(n,"left"),cn(n,"right"),n},columns:t}}Wn.props=["columns","tableLayout"];var $n=L({name:"ElTableFooter",props:{fixed:{type:String,default:""},store:{required:!0,type:Object},summaryMethod:Function,sumText:String,border:Boolean,defaultSort:{type:Object,default:()=>({prop:"",order:""})}},setup(e){const{getCellClasses:t,getCellStyles:l,columns:n}=Fn(e);return{ns:q("table"),getCellClasses:t,getCellStyles:l,columns:n}},render(){const{columns:e,getCellStyles:t,getCellClasses:l,summaryMethod:n,sumText:a,ns:r}=this,o=this.store.states.data.value;let s=[];return n?s=n({columns:e,data:o}):e.forEach(((e,t)=>{if(0===t)return void(s[t]=a);const l=o.map((t=>Number(t[e.property]))),n=[];let r=!0;l.forEach((e=>{if(!Number.isNaN(+e)){r=!1;const t=`${e}`.split(".")[1];n.push(t?t.length:0)}}));const i=Math.max.apply(null,n);s[t]=r?"":l.reduce(((e,t)=>{const l=Number(t);return Number.isNaN(+l)?e:Number.parseFloat((e+t).toFixed(Math.min(i,20)))}),0)})),ue("table",{class:r.e("footer"),cellspacing:"0",cellpadding:"0",border:"0"},[Wn({columns:e}),ue("tbody",[ue("tr",{},[...e.map(((n,a)=>ue("td",{key:a,colspan:n.colSpan,rowspan:n.rowSpan,class:l(e,a),style:t(n,a)},[ue("div",{class:["cell",n.labelClassName]},[s[a]])])))])])])}});function In(e,t,l,n){const a=Y(!1),r=Y(null),o=Y(!1),s=Y({width:null,height:null,headerHeight:null}),i=Y(!1),u=Y(),d=Y(0),c=Y(0),p=Y(0),h=Y(0);ee((()=>{t.setHeight(e.height)})),ee((()=>{t.setMaxHeight(e.maxHeight)})),X((()=>[e.currentRowKey,l.states.rowKey]),(([e,t])=>{I(t)&&I(e)&&l.setCurrentRowKey(`${e}`)}),{immediate:!0}),X((()=>e.data),(e=>{n.store.commit("setData",e)}),{immediate:!0,deep:!0}),ee((()=>{e.expandRowKeys&&l.setExpandRowKeysAdapter(e.expandRowKeys)}));const f=z((()=>e.height||e.maxHeight||l.states.fixedColumns.value.length>0||l.states.rightFixedColumns.value.length>0)),v=z((()=>({width:t.bodyWidth.value?`${t.bodyWidth.value}px`:""}))),m=()=>{f.value&&t.updateElsHeight(),t.updateColumnsWidth(),requestAnimationFrame(b)};Me((async()=>{await we(),l.updateColumns(),y(),requestAnimationFrame(m);const t=n.vnode.el,a=n.refs.headerWrapper;e.flexible&&t&&t.parentElement&&(t.parentElement.style.minWidth="0"),s.value={width:u.value=t.offsetWidth,height:t.offsetHeight,headerHeight:e.showHeader&&a?a.offsetHeight:null},l.states.columns.value.forEach((e=>{e.filteredValue&&e.filteredValue.length&&n.store.commit("filterChange",{column:e,values:e.filteredValue,silent:!0})})),n.$ready=!0}));const g=e=>{const{tableWrapper:l}=n.refs;((e,l)=>{if(!e)return;const n=Array.from(e.classList).filter((e=>!e.startsWith("is-scrolling-")));n.push(t.scrollX.value?l:"is-scrolling-none"),e.className=n.join(" ")})(l,e)},b=function(){if(!n.refs.scrollBarRef)return;if(!t.scrollX.value){const e="is-scrolling-none";return void((e=>{const{tableWrapper:t}=n.refs;return!(!t||!t.classList.contains(e))})(e)||g(e))}const e=n.refs.scrollBarRef.wrapRef;if(!e)return;const{scrollLeft:l,offsetWidth:a,scrollWidth:r}=e,{headerWrapper:o,footerWrapper:s}=n.refs;o&&(o.scrollLeft=l),s&&(s.scrollLeft=l);g(l>=r-a-1?"is-scrolling-right":0===l?"is-scrolling-left":"is-scrolling-middle")},y=()=>{n.refs.scrollBarRef&&(n.refs.scrollBarRef.wrapRef&&Ie(n.refs.scrollBarRef.wrapRef,"scroll",b,{passive:!0}),e.fit?Be(n.vnode.el,w):Ie(window,"resize",w),Be(n.refs.bodyWrapper,(()=>{var e,t;w(),null==(t=null==(e=n.refs)?void 0:e.scrollBarRef)||t.update()})))},w=()=>{var t,l,a;const r=n.vnode.el;if(!n.$ready||!r)return;let o=!1;const{width:i,height:v,headerHeight:g}=s.value,b=u.value=r.offsetWidth;i!==b&&(o=!0);const y=r.offsetHeight;(e.height||f.value)&&v!==y&&(o=!0);const w="fixed"===e.tableLayout?n.refs.headerWrapper:null==(t=n.refs.tableHeaderRef)?void 0:t.$el;e.showHeader&&(null==w?void 0:w.offsetHeight)!==g&&(o=!0),d.value=(null==(l=n.refs.tableWrapper)?void 0:l.scrollHeight)||0,p.value=(null==w?void 0:w.scrollHeight)||0,h.value=(null==(a=n.refs.footerWrapper)?void 0:a.offsetHeight)||0,c.value=d.value-p.value-h.value,o&&(s.value={width:b,height:y,headerHeight:e.showHeader&&(null==w?void 0:w.offsetHeight)||0},m())},x=ht(),C=z((()=>{const{bodyWidth:e,scrollY:l,gutterWidth:n}=t;return e.value?e.value-(l.value?n:0)+"px":""})),S=z((()=>e.maxHeight?"fixed":e.tableLayout)),E=z((()=>{if(e.data&&e.data.length)return null;let t="100%";e.height&&c.value&&(t=`${c.value}px`);const l=u.value;return{width:l?`${l}px`:"",height:t}})),k=z((()=>e.height?{height:Number.isNaN(Number(e.height))?e.height:`${e.height}px`}:e.maxHeight?{maxHeight:Number.isNaN(Number(e.maxHeight))?e.maxHeight:`${e.maxHeight}px`}:{})),N=z((()=>{if(e.height)return{height:"100%"};if(e.maxHeight){if(Number.isNaN(Number(e.maxHeight)))return{maxHeight:`calc(${e.maxHeight} - ${p.value+h.value}px)`};{const t=e.maxHeight;if(d.value>=Number(t))return{maxHeight:d.value-p.value-h.value+"px"}}}return{}}));return{isHidden:a,renderExpanded:r,setDragVisible:e=>{o.value=e},isGroup:i,handleMouseLeave:()=>{n.store.commit("setHoverRow",null),n.hoverState&&(n.hoverState=null)},handleHeaderFooterMousewheel:(e,t)=>{const{pixelX:l,pixelY:a}=t;Math.abs(l)>=Math.abs(a)&&(n.refs.bodyWrapper.scrollLeft+=t.pixelX/5)},tableSize:x,emptyBlockStyle:E,handleFixedMousewheel:(e,t)=>{const l=n.refs.bodyWrapper;if(Math.abs(t.spinY)>0){const n=l.scrollTop;t.pixelY<0&&0!==n&&e.preventDefault(),t.pixelY>0&&l.scrollHeight-l.clientHeight>n&&e.preventDefault(),l.scrollTop+=Math.ceil(t.pixelY/5)}else l.scrollLeft+=Math.ceil(t.pixelX/5)},resizeProxyVisible:o,bodyWidth:C,resizeState:s,doLayout:m,tableBodyStyles:v,tableLayout:S,scrollbarViewStyle:{display:"inline-block",verticalAlign:"middle"},tableInnerStyle:k,scrollbarStyle:N}}function Bn(e){const t=Y();Me((()=>{(()=>{const l=e.vnode.el.querySelector(".hidden-columns"),n=e.store.states.updateOrderFns;t.value=new MutationObserver((()=>{n.forEach((e=>e()))})),t.value.observe(l,{childList:!0,subtree:!0})})()})),Pe((()=>{var e;null==(e=t.value)||e.disconnect()}))}var jn={data:{type:Array,default:()=>[]},size:je,width:[String,Number],height:[String,Number],maxHeight:[String,Number],fit:{type:Boolean,default:!0},stripe:Boolean,border:Boolean,rowKey:[String,Function],showHeader:{type:Boolean,default:!0},showSummary:Boolean,sumText:String,summaryMethod:Function,rowClassName:[String,Function],rowStyle:[Object,Function],cellClassName:[String,Function],cellStyle:[Object,Function],headerRowClassName:[String,Function],headerRowStyle:[Object,Function],headerCellClassName:[String,Function],headerCellStyle:[Object,Function],highlightCurrentRow:Boolean,currentRowKey:[String,Number],emptyText:String,expandRowKeys:Array,defaultExpandAll:Boolean,defaultSort:Object,tooltipEffect:String,tooltipOptions:Object,spanMethod:Function,selectOnIndeterminate:{type:Boolean,default:!0},indent:{type:Number,default:16},treeProps:{type:Object,default:()=>({hasChildren:"hasChildren",children:"children"})},lazy:Boolean,load:Function,style:{type:Object,default:()=>({})},className:{type:String,default:""},tableLayout:{type:String,default:"fixed"},scrollbarAlwaysOn:{type:Boolean,default:!1},flexible:Boolean};let _n=1;const Kn=L({name:"ElTable",directives:{Mousewheel:ol},components:{TableHeader:zn,TableBody:Tn,TableFooter:$n,ElScrollbar:Se,hColgroup:Wn},props:jn,emits:["select","select-all","selection-change","cell-mouse-enter","cell-mouse-leave","cell-contextmenu","cell-click","cell-dblclick","row-click","row-contextmenu","row-dblclick","header-click","header-contextmenu","sort-change","filter-change","current-change","header-dragend","expand-change"],setup(e){const{t:t}=M(),l=q("table"),n=oe();se(On,n);const a=bn(n,e);n.store=a;const r=new xn({store:n.store,table:n,fit:e.fit,showHeader:e.showHeader});n.layout=r;const o=z((()=>0===(a.states.data.value||[]).length)),{setCurrentRow:s,getSelectionRows:i,toggleRowSelection:u,clearSelection:d,clearFilter:c,toggleAllSelection:p,toggleRowExpansion:h,clearSort:f,sort:v}=function(e){return{setCurrentRow:t=>{e.commit("setCurrentRow",t)},getSelectionRows:()=>e.getSelectionRows(),toggleRowSelection:(t,l)=>{e.toggleRowSelection(t,l,!1),e.updateAllSelected()},clearSelection:()=>{e.clearSelection()},clearFilter:t=>{e.clearFilter(t)},toggleAllSelection:()=>{e.commit("toggleAllSelection")},toggleRowExpansion:(t,l)=>{e.toggleRowExpansionAdapter(t,l)},clearSort:()=>{e.clearSort()},sort:(t,l)=>{e.commit("sort",{prop:t,order:l})}}}(a),{isHidden:m,renderExpanded:g,setDragVisible:b,isGroup:y,handleMouseLeave:w,handleHeaderFooterMousewheel:x,tableSize:C,emptyBlockStyle:S,handleFixedMousewheel:E,resizeProxyVisible:k,bodyWidth:N,resizeState:R,doLayout:A,tableBodyStyles:O,tableLayout:L,scrollbarViewStyle:P,tableInnerStyle:H,scrollbarStyle:T}=In(e,r,a,n),{scrollBarRef:W,scrollTo:F,setScrollLeft:$,setScrollTop:I}=(()=>{const e=Y(),t=(t,l)=>{const n=e.value;n&&de(l)&&["Top","Left"].includes(t)&&n[`setScroll${t}`](l)};return{scrollBarRef:e,scrollTo:(t,l)=>{const n=e.value;n&&n.scrollTo(t,l)},setScrollTop:e=>t("Top",e),setScrollLeft:e=>t("Left",e)}})(),B=pt(A,50),j=`${l.namespace.value}-table_${_n++}`;n.tableId=j,n.state={isGroup:y,resizeState:R,doLayout:A,debouncedUpdateLayout:B};const _=z((()=>e.sumText||t("el.table.sumText"))),K=z((()=>e.emptyText||t("el.table.emptyText")));return Bn(n),{ns:l,layout:r,store:a,handleHeaderFooterMousewheel:x,handleMouseLeave:w,tableId:j,tableSize:C,isHidden:m,isEmpty:o,renderExpanded:g,resizeProxyVisible:k,resizeState:R,isGroup:y,bodyWidth:N,tableBodyStyles:O,emptyBlockStyle:S,debouncedUpdateLayout:B,handleFixedMousewheel:E,setCurrentRow:s,getSelectionRows:i,toggleRowSelection:u,clearSelection:d,clearFilter:c,toggleAllSelection:p,toggleRowExpansion:h,clearSort:f,doLayout:A,sort:v,t:t,setDragVisible:b,context:n,computedSumText:_,computedEmptyText:K,tableLayout:L,scrollbarViewStyle:P,tableInnerStyle:H,scrollbarStyle:T,scrollBarRef:W,scrollTo:F,setScrollLeft:$,setScrollTop:I}}}),Dn=["data-prefix"],Vn={ref:"hiddenColumns",class:"hidden-columns"};var qn=j(Kn,[["render",function(e,t,l,n,a,r){const o=Ne("hColgroup"),s=Ne("table-header"),i=Ne("table-body"),u=Ne("el-scrollbar"),d=Ne("table-footer"),c=Re("mousewheel");return P(),H("div",{ref:"tableWrapper",class:Q([{[e.ns.m("fit")]:e.fit,[e.ns.m("striped")]:e.stripe,[e.ns.m("border")]:e.border||e.isGroup,[e.ns.m("hidden")]:e.isHidden,[e.ns.m("group")]:e.isGroup,[e.ns.m("fluid-height")]:e.maxHeight,[e.ns.m("scrollable-x")]:e.layout.scrollX.value,[e.ns.m("scrollable-y")]:e.layout.scrollY.value,[e.ns.m("enable-row-hover")]:!e.store.states.isComplex.value,[e.ns.m("enable-row-transition")]:0!==(e.store.states.data.value||[]).length&&(e.store.states.data.value||[]).length<100,"has-footer":e.showSummary},e.ns.m(e.tableSize),e.className,e.ns.b(),e.ns.m(`layout-${e.tableLayout}`)]),style:Ke(e.style),"data-prefix":e.ns.namespace.value,onMouseleave:t[0]||(t[0]=(...t)=>e.handleMouseLeave&&e.handleMouseLeave(...t))},[Z("div",{class:Q(e.ns.e("inner-wrapper")),style:Ke(e.tableInnerStyle)},[Z("div",Vn,[_e(e.$slots,"default")],512),e.showHeader&&"fixed"===e.tableLayout?Oe((P(),H("div",{key:0,ref:"headerWrapper",class:Q(e.ns.e("header-wrapper"))},[Z("table",{ref:"tableHeader",class:Q(e.ns.e("header")),style:Ke(e.tableBodyStyles),border:"0",cellpadding:"0",cellspacing:"0"},[G(o,{columns:e.store.states.columns.value,"table-layout":e.tableLayout},null,8,["columns","table-layout"]),G(s,{ref:"tableHeaderRef",border:e.border,"default-sort":e.defaultSort,store:e.store,onSetDragVisible:e.setDragVisible},null,8,["border","default-sort","store","onSetDragVisible"])],6)],2)),[[c,e.handleHeaderFooterMousewheel]]):te("v-if",!0),Z("div",{ref:"bodyWrapper",class:Q(e.ns.e("body-wrapper"))},[G(u,{ref:"scrollBarRef","view-style":e.scrollbarViewStyle,"wrap-style":e.scrollbarStyle,always:e.scrollbarAlwaysOn},{default:F((()=>[Z("table",{ref:"tableBody",class:Q(e.ns.e("body")),cellspacing:"0",cellpadding:"0",border:"0",style:Ke({width:e.bodyWidth,tableLayout:e.tableLayout})},[G(o,{columns:e.store.states.columns.value,"table-layout":e.tableLayout},null,8,["columns","table-layout"]),e.showHeader&&"auto"===e.tableLayout?(P(),W(s,{key:0,ref:"tableHeaderRef",border:e.border,"default-sort":e.defaultSort,store:e.store,onSetDragVisible:e.setDragVisible},null,8,["border","default-sort","store","onSetDragVisible"])):te("v-if",!0),G(i,{context:e.context,highlight:e.highlightCurrentRow,"row-class-name":e.rowClassName,"tooltip-effect":e.tooltipEffect,"tooltip-options":e.tooltipOptions,"row-style":e.rowStyle,store:e.store,stripe:e.stripe},null,8,["context","highlight","row-class-name","tooltip-effect","tooltip-options","row-style","store","stripe"])],6),e.isEmpty?(P(),H("div",{key:0,ref:"emptyBlock",style:Ke(e.emptyBlockStyle),class:Q(e.ns.e("empty-block"))},[Z("span",{class:Q(e.ns.e("empty-text"))},[_e(e.$slots,"empty",{},(()=>[Ae(T(e.computedEmptyText),1)]))],2)],6)):te("v-if",!0),e.$slots.append?(P(),H("div",{key:1,ref:"appendWrapper",class:Q(e.ns.e("append-wrapper"))},[_e(e.$slots,"append")],2)):te("v-if",!0)])),_:3},8,["view-style","wrap-style","always"])],2),e.showSummary?Oe((P(),H("div",{key:1,ref:"footerWrapper",class:Q(e.ns.e("footer-wrapper"))},[G(d,{border:e.border,"default-sort":e.defaultSort,store:e.store,style:Ke(e.tableBodyStyles),"sum-text":e.computedSumText,"summary-method":e.summaryMethod},null,8,["border","default-sort","store","style","sum-text","summary-method"])],2)),[[De,!e.isEmpty],[c,e.handleHeaderFooterMousewheel]]):te("v-if",!0),e.border||e.isGroup?(P(),H("div",{key:2,class:Q(e.ns.e("border-left-patch"))},null,2)):te("v-if",!0)],6),Oe(Z("div",{ref:"resizeProxy",class:Q(e.ns.e("column-resize-proxy"))},null,2),[[De,e.resizeProxyVisible]])],46,Dn)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/table/src/table.vue"]]);const Yn={selection:"table-column--selection",expand:"table__expand-column"},Xn={default:{order:""},selection:{width:48,minWidth:48,realWidth:48,order:""},expand:{width:48,minWidth:48,realWidth:48,order:""},index:{width:48,minWidth:48,realWidth:48,order:""}},Gn={selection:{renderHeader:({store:e})=>ue(rt,{disabled:e.states.data.value&&0===e.states.data.value.length,size:e.states.tableSize.value,indeterminate:e.states.selection.value.length>0&&!e.states.isAllSelected.value,"onUpdate:modelValue":e.toggleAllSelection,modelValue:e.states.isAllSelected.value}),renderCell:({row:e,column:t,store:l,$index:n})=>ue(rt,{disabled:!!t.selectable&&!t.selectable.call(null,e,n),size:l.states.tableSize.value,onChange:()=>{l.commit("rowSelectedChanged",e)},onClick:e=>e.stopPropagation(),modelValue:l.isSelected(e)}),sortable:!1,resizable:!1},index:{renderHeader:({column:e})=>e.label||"#",renderCell({column:e,$index:t}){let l=t+1;const n=e.index;return"number"==typeof n?l=t+n:"function"==typeof n&&(l=n(t)),ue("div",{},[l])},sortable:!1},expand:{renderHeader:({column:e})=>e.label||"",renderCell({row:e,store:t,expanded:l}){const{ns:n}=t,a=[n.e("expand-icon")];l&&a.push(n.em("expand-icon","expanded"));return ue("div",{class:a,onClick:function(l){l.stopPropagation(),t.toggleRowExpansion(e)}},{default:()=>[ue(B,null,{default:()=>[ue(pe)]})]})},sortable:!1,resizable:!1}};function Un({row:e,column:t,$index:l}){var n;const a=t.property,r=a&&Ve(e,a).value;return t&&t.formatter?t.formatter(e,t,r,l):(null==(n=null==r?void 0:r.toString)?void 0:n.call(r))||""}function Jn(e,t){return e.reduce(((e,t)=>(e[t]=t,e)),t)}function Qn(e,t,l){const n=oe(),a=Y(""),r=Y(!1),o=Y(),s=Y(),i=q("table");ee((()=>{o.value=e.align?`is-${e.align}`:null,o.value})),ee((()=>{s.value=e.headerAlign?`is-${e.headerAlign}`:o.value,s.value}));const u=z((()=>{let e=n.vnode.vParent||n.parent;for(;e&&!e.tableId&&!e.columnId;)e=e.vnode.vParent||e.parent;return e})),d=z((()=>{const{store:e}=n.parent;if(!e)return!1;const{treeData:t}=e.states,l=t.value;return l&&Object.keys(l).length>0})),c=Y(Zl(e.width)),p=Y(en(e.minWidth));return{columnId:a,realAlign:o,isSubColumn:r,realHeaderAlign:s,columnOrTableParent:u,setColumnWidth:e=>(c.value&&(e.width=c.value),p.value&&(e.minWidth=p.value),!c.value&&p.value&&(e.width=void 0),e.minWidth||(e.minWidth=80),e.realWidth=Number(void 0===e.width?e.minWidth:e.width),e),setColumnForcedProps:e=>{const t=e.type,l=Gn[t]||{};Object.keys(l).forEach((t=>{const n=l[t];"className"!==t&&void 0!==n&&(e[t]=n)}));const n=(e=>Yn[e]||"")(t);if(n){const t=`${I(i.namespace)}-${n}`;e.className=e.className?`${e.className} ${t}`:t}return e},setColumnRenders:a=>{e.renderHeader||"selection"!==a.type&&(a.renderHeader=e=>{n.columnConfig.value.label;const l=t.header;return l?l(e):a.label});let r=a.renderCell;return"expand"===a.type?(a.renderCell=e=>ue("div",{class:"cell"},[r(e)]),l.value.renderExpanded=e=>t.default?t.default(e):t.default):(r=r||Un,a.renderCell=e=>{let o=null;if(t.default){const l=t.default(e);o=l.some((e=>e.type!==Ye))?l:r(e)}else o=r(e);const{columns:s}=l.value.store.states,u=s.value.findIndex((e=>"default"===e.type)),c=function({row:e,treeNode:t,store:l},n=!1){const{ns:a}=l;if(!t)return n?[ue("span",{class:a.e("placeholder")})]:null;const r=[],o=function(n){n.stopPropagation(),t.loading||l.loadOrToggle(e)};if(t.indent&&r.push(ue("span",{class:a.e("indent"),style:{"padding-left":`${t.indent}px`}})),"boolean"!=typeof t.expanded||t.noLazyChildren)r.push(ue("span",{class:a.e("placeholder")}));else{const e=[a.e("expand-icon"),t.expanded?a.em("expand-icon","expanded"):""];let l=pe;t.loading&&(l=qe),r.push(ue("div",{class:e,onClick:o},{default:()=>[ue(B,{class:{[a.is("loading")]:t.loading}},{default:()=>[ue(l)]})]}))}return r}(e,d.value&&e.cellIndex===u),p={class:"cell",style:{}};return a.showOverflowTooltip&&(p.class=`${p.class} ${I(i.namespace)}-tooltip`,p.style={width:(e.column.realWidth||Number(e.column.width))-1+"px"}),(e=>{function t(e){var t;"ElTableColumn"===(null==(t=null==e?void 0:e.type)?void 0:t.name)&&(e.vParent=n)}Array.isArray(e)?e.forEach((e=>t(e))):t(e)})(o),ue("div",p,[c,o])}),a},getPropsData:(...t)=>t.reduce(((t,l)=>(Array.isArray(l)&&l.forEach((l=>{t[l]=e[l]})),t)),{}),getColumnElIndex:(e,t)=>Array.prototype.indexOf.call(e,t),updateColumnOrder:()=>{l.value.store.commit("updateColumnOrder",n.columnConfig.value)}}}var Zn={type:{type:String,default:"default"},label:String,className:String,labelClassName:String,property:String,prop:String,width:{type:[String,Number],default:""},minWidth:{type:[String,Number],default:""},renderHeader:Function,sortable:{type:[Boolean,String],default:!1},sortMethod:Function,sortBy:[String,Function,Array],resizable:{type:Boolean,default:!0},columnKey:String,align:String,headerAlign:String,showOverflowTooltip:[Boolean,Object],fixed:[Boolean,String],formatter:Function,selectable:Function,reserveSelection:Boolean,filterMethod:Function,filteredValue:Array,filters:Array,filterPlacement:String,filterMultiple:{type:Boolean,default:!0},index:[Number,Function],sortOrders:{type:Array,default:()=>["ascending","descending",null],validator:e=>e.every((e=>["ascending","descending",null].includes(e)))}};let ea=1;var ta=L({name:"ElTableColumn",components:{ElCheckbox:rt},props:Zn,setup(e,{slots:t}){const l=oe(),n=Y({}),a=z((()=>{let e=l.parent;for(;e&&!e.tableId;)e=e.parent;return e})),{registerNormalWatchers:r,registerComplexWatchers:o}=function(e,t){const l=oe();return{registerComplexWatchers:()=>{const n={realWidth:"width",realMinWidth:"minWidth"},a=Jn(["fixed"],n);Object.keys(a).forEach((a=>{const r=n[a];fe(t,r)&&X((()=>t[r]),(t=>{let n=t;"width"===r&&"realWidth"===a&&(n=Zl(t)),"minWidth"===r&&"realMinWidth"===a&&(n=en(t)),l.columnConfig.value[r]=n,l.columnConfig.value[a]=n;const o="fixed"===r;e.value.store.scheduleLayout(o)}))}))},registerNormalWatchers:()=>{const e={property:"prop",align:"realAlign",headerAlign:"realHeaderAlign"},n=Jn(["label","filters","filterMultiple","sortable","index","formatter","className","labelClassName","showOverflowTooltip"],e);Object.keys(n).forEach((n=>{const a=e[n];fe(t,a)&&X((()=>t[a]),(e=>{l.columnConfig.value[n]=e}))}))}}}(a,e),{columnId:s,isSubColumn:i,realHeaderAlign:u,columnOrTableParent:d,setColumnWidth:c,setColumnForcedProps:p,setColumnRenders:h,getPropsData:f,getColumnElIndex:v,realAlign:m,updateColumnOrder:g}=Qn(e,t,a),b=d.value;s.value=`${b.tableId||b.columnId}_column_${ea++}`,Le((()=>{i.value=a.value!==b;const t=e.type||"default",d=""===e.sortable||e.sortable,v={...Xn[t],id:s.value,type:t,property:e.prop||e.property,align:m,headerAlign:u,showOverflowTooltip:e.showOverflowTooltip,filterable:e.filters||e.filterMethod,filteredValue:[],filterPlacement:"",isColumnGroup:!1,isSubColumn:!1,filterOpened:!1,sortable:d,index:e.index,rawColumnKey:l.vnode.key};let g=f(["columnKey","label","className","labelClassName","type","renderHeader","formatter","fixed","resizable"],["sortMethod","sortBy","sortOrders"],["selectable","reserveSelection"],["filterMethod","filters","filterMultiple","filterOpened","filteredValue","filterPlacement"]);g=function(e,t){const l={};let n;for(n in e)l[n]=e[n];for(n in t)if(fe(t,n)){const e=t[n];void 0!==e&&(l[n]=e)}return l}(v,g);g=function(...e){return 0===e.length?e=>e:1===e.length?e[0]:e.reduce(((e,t)=>(...l)=>e(t(...l))))}(h,c,p)(g),n.value=g,r(),o()})),Me((()=>{var e;const t=d.value,r=i.value?t.vnode.el.children:null==(e=t.refs.hiddenColumns)?void 0:e.children,o=()=>v(r||[],l.vnode.el);n.value.getColumnIndex=o;o()>-1&&a.value.store.commit("insertColumn",n.value,i.value?t.columnConfig.value:null,g)})),Xe((()=>{a.value.store.commit("removeColumn",n.value,i.value?b.columnConfig.value:null,g)})),l.columnId=s.value,l.columnConfig=n},render(){var e,t,l;try{const n=null==(t=(e=this.$slots).default)?void 0:t.call(e,{row:{},column:{},$index:-1}),a=[];if(Array.isArray(n))for(const e of n)"ElTableColumn"===(null==(l=e.type)?void 0:l.name)||2&e.shapeFlag?a.push(e):e.type===U&&Array.isArray(e.children)&&e.children.forEach((e=>{1024===(null==e?void 0:e.patchFlag)||Ge(null==e?void 0:e.children)||a.push(e)}));return ue("div",a)}catch(n){return ue("div",[])}}});const la=he(qn,{TableColumn:ta}),na=Ue(ta),aa=L({name:"Table",props:{pageSize:Je.number.def(10),currentPage:Je.number.def(1),selection:Je.bool.def(!0),showOverflowTooltip:Je.bool.def(!0),columns:{type:Array,default:()=>[]},expand:Je.bool.def(!1),pagination:{type:Object,default:()=>{}},reserveSelection:Je.bool.def(!1),loading:Je.bool.def(!1),reserveIndex:Je.bool.def(!1),align:Je.string.validate((e=>["left","center","right"].includes(e))).def("left"),headerAlign:Je.string.validate((e=>["left","center","right"].includes(e))).def("left"),data:{type:Array,default:()=>[]}},emits:["update:pageSize","update:currentPage","register"],setup(e,{attrs:t,slots:l,emit:n,expose:a}){const r=Y();Me((()=>{const e=I(r);n("register",null==e?void 0:e.$parent,r)}));const o=Y(e.pageSize),s=Y(e.currentPage),i=Y({}),u=Y({}),d=z((()=>{const t={...e};return Object.assign(t,I(u)),t})),c=(e,t)=>{var l;const{columns:n}=I(d);for(const a of t||n)for(const t of e)a.field===t.field?Ze(a,t.path,t.value):(null==(l=a.children)?void 0:l.length)&&c(e,a.children)},p=Y([]),h=e=>{p.value=e};a({setProps:(e={})=>{u.value=Object.assign(I(u),e),i.value=e},setColumn:c,selections:p,elTableRef:r});const f=z((()=>Object.assign({small:!1,background:!1,pagerCount:7,layout:"sizes, prev, pager, next, jumper, ->, total",pageSizes:[10,20,30,40,50,100],disabled:!1,hideOnSinglePage:!1,total:10},I(d).pagination)));X((()=>I(d).pageSize),(e=>{o.value=e})),X((()=>I(d).currentPage),(e=>{s.value=e})),X((()=>o.value),(e=>{n("update:pageSize",e)})),X((()=>s.value),(e=>{n("update:currentPage",e)}));const v=z((()=>{const l={...t,...e};return delete l.columns,delete l.data,l})),m=()=>{const{selection:e,reserveSelection:t,align:l,headerAlign:n}=I(d);return e?G(na,{type:"selection",reserveSelection:t,align:l,headerAlign:n,width:"50"},null):void 0},g=()=>{const{align:e,headerAlign:t,expand:n}=I(d);return n?G(na,{type:"expand",align:e,headerAlign:t},{default:e=>st(l,"expand",e)}):void 0},b=e=>{const{columns:t,reserveIndex:n,pageSize:a,currentPage:r,align:o,headerAlign:s,showOverflowTooltip:i}=I(d);return[g(),m()].concat((e||t).map((e=>{if("index"===e.type)return G(na,{type:"index",index:e.index?e.index:e=>((e,t,l,n)=>{const a=t+1;return e?l*(n-1)+a:a})(n,e,a,r),align:e.align||o,headerAlign:e.headerAlign||s,label:e.label,width:"65px"},null);{const t={...e};return t.children&&delete t.children,G(na,Qe({showOverflowTooltip:i,align:o,headerAlign:s},t,{prop:e.field}),{default:t=>{var n;return e.children&&e.children.length?(e=>{const{align:t,headerAlign:n,showOverflowTooltip:a}=I(d);return e.map((e=>{const r={...e};return r.children&&delete r.children,G(na,Qe({showOverflowTooltip:a,align:t,headerAlign:n},r,{prop:e.field}),{default:t=>{var n;return e.children&&e.children.length?b(e.children):st(l,e.field,t)||(null==(n=null==e?void 0:e.formatter)?void 0:n.call(e,t.row,t.column,t.row[e.field],t.$index))||t.row[e.field]},header:st(l,`${e.field}-header`)})}))})(e.children):st(l,e.field,t)||(null==(n=null==e?void 0:e.formatter)?void 0:n.call(e,t.row,t.column,t.row[e.field],t.$index))||t.row[e.field]},header:()=>st(l,`${e.field}-header`)||e.label})}})))};return()=>Oe(G("div",null,[G(la,Qe({ref:r,data:I(d).data,"onSelection-change":h},I(v)),{default:()=>b(),append:()=>st(l,"append")}),I(d).pagination?G(Kl,Qe({pageSize:o.value,"onUpdate:pageSize":e=>o.value=e,currentPage:s.value,"onUpdate:currentPage":e=>s.value=e,class:"mt-10px"},I(f)),null):void 0]),[[Re("loading"),I(d).loading]])}});export{aa as _};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFibGUudnVlX3Z1ZV90eXBlX3NjcmlwdF9sYW5nLTA3YTg1NzE0LmpzIiwic291cmNlcyI6WyIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStsb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNNYXRjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzU3RyaWN0Q29tcGFyYWJsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZU1hdGNoZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStsb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRNYXRjaERhdGEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStsb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlTWF0Y2hlc1Byb3BlcnR5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY3JlYXRlQmFzZUZvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvcHJvcGVydHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStsb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlUHJvcGVydHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStsb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlUHJvcGVydHlEZWVwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUl0ZXJhdGVlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUZvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VFYWNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY3JlYXRlQmFzZUVhY2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStsb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlRm9yT3duLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXNzaWduTWVyZ2VWYWx1ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3NhZmVHZXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStsb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlTWVyZ2VEZWVwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy90b1BsYWluT2JqZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZU1lcmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZU1hcC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvZmxhdE1hcC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvbWFwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9tZXJnZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NyZWF0ZUFzc2lnbmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNJdGVyYXRlZUNhbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStub3JtYWxpemUtd2hlZWwtZXNAMS4yLjAvbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS13aGVlbC1lcy9kaXN0L2luZGV4Lm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvZGlyZWN0aXZlcy9tb3VzZXdoZWVsL2luZGV4Lm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9wYWdpbmF0aW9uL3NyYy9jb25zdGFudHMubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMy4zX3Z1ZUAzLjIuNDcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3BhZ2luYXRpb24vc3JjL2NvbXBvbmVudHMvcHJldi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9zcmMvY29tcG9uZW50cy9wcmV2Mi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9zcmMvY29tcG9uZW50cy9uZXh0Lm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9wYWdpbmF0aW9uL3NyYy9jb21wb25lbnRzL25leHQyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9wYWdpbmF0aW9uL3NyYy91c2VQYWdpbmF0aW9uLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9wYWdpbmF0aW9uL3NyYy9jb21wb25lbnRzL3NpemVzLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9wYWdpbmF0aW9uL3NyYy9jb21wb25lbnRzL3NpemVzMi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9zcmMvY29tcG9uZW50cy9qdW1wZXIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMy4zX3Z1ZUAzLjIuNDcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3BhZ2luYXRpb24vc3JjL2NvbXBvbmVudHMvanVtcGVyMi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9zcmMvY29tcG9uZW50cy90b3RhbC5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9zcmMvY29tcG9uZW50cy90b3RhbDIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMy4zX3Z1ZUAzLjIuNDcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3BhZ2luYXRpb24vc3JjL2NvbXBvbmVudHMvcGFnZXIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMy4zX3Z1ZUAzLjIuNDcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3BhZ2luYXRpb24vc3JjL2NvbXBvbmVudHMvcGFnZXIyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9wYWdpbmF0aW9uL3NyYy9wYWdpbmF0aW9uLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9wYWdpbmF0aW9uL2luZGV4Lm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VzY2FwZS1odG1sQDEuMC4zL25vZGVfbW9kdWxlcy9lc2NhcGUtaHRtbC9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvdXRpbC5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvdGFibGUvc3JjL3N0b3JlL3dhdGNoZXIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMy4zX3Z1ZUAzLjIuNDcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3RhYmxlL3NyYy9zdG9yZS9leHBhbmQubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMy4zX3Z1ZUAzLjIuNDcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3RhYmxlL3NyYy9zdG9yZS90cmVlLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvc3RvcmUvY3VycmVudC5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvdGFibGUvc3JjL3N0b3JlL2luZGV4Lm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvc3RvcmUvaGVscGVyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvdGFibGUtbGF5b3V0Lm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvZmlsdGVyLXBhbmVsLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvbGF5b3V0LW9ic2VydmVyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvdG9rZW5zLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvdGFibGUtaGVhZGVyL3V0aWxzLWhlbHBlci5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvdGFibGUvc3JjL3RhYmxlLWhlYWRlci9pbmRleC5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvdGFibGUvc3JjL3RhYmxlLWhlYWRlci9ldmVudC1oZWxwZXIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMy4zX3Z1ZUAzLjIuNDcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3RhYmxlL3NyYy90YWJsZS1oZWFkZXIvc3R5bGUuaGVscGVyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvdGFibGUtYm9keS9ldmVudHMtaGVscGVyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvdGFibGUtYm9keS9yZW5kZXItaGVscGVyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvdGFibGUtYm9keS9zdHlsZXMtaGVscGVyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvdGFibGUtYm9keS9pbmRleC5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvdGFibGUvc3JjL3RhYmxlLWJvZHkvZGVmYXVsdHMubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMy4zX3Z1ZUAzLjIuNDcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3RhYmxlL3NyYy9oLWhlbHBlci5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvdGFibGUvc3JjL3RhYmxlLWZvb3Rlci9zdHlsZS1oZWxwZXIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMy4zX3Z1ZUAzLjIuNDcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3RhYmxlL3NyYy90YWJsZS1mb290ZXIvbWFwU3RhdGUtaGVscGVyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvdGFibGUtZm9vdGVyL2luZGV4Lm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvdGFibGUvc3R5bGUtaGVscGVyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvdGFibGUva2V5LXJlbmRlci1oZWxwZXIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMy4zX3Z1ZUAzLjIuNDcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3RhYmxlL3NyYy90YWJsZS9kZWZhdWx0cy5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvdGFibGUvc3JjL3RhYmxlLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvdGFibGUvdXRpbHMtaGVscGVyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvY29tcG9zYWJsZXMvdXNlLXNjcm9sbGJhci5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvdGFibGUvc3JjL2NvbmZpZy5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvdGFibGUvc3JjL3RhYmxlLWNvbHVtbi93YXRjaGVyLWhlbHBlci5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvdGFibGUvc3JjL3RhYmxlLWNvbHVtbi9yZW5kZXItaGVscGVyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvdGFibGUtY29sdW1uL2RlZmF1bHRzLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9zcmMvdGFibGUtY29sdW1uL2luZGV4Lm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90YWJsZS9pbmRleC5tanMiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9UYWJsZS9zcmMvVGFibGUudnVlIiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvVGFibGUvc3JjL2hlbHBlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3RhY2sgZnJvbSAnLi9fU3RhY2suanMnO1xuaW1wb3J0IGJhc2VJc0VxdWFsIGZyb20gJy4vX2Jhc2VJc0VxdWFsLmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gIWxlbmd0aDtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgaWYgKChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSlcbiAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgdmFyIGtleSA9IGRhdGFbMF0sXG4gICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc01hdGNoO1xuIiwiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzU3RyaWN0Q29tcGFyYWJsZTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hlc1N0cmljdENvbXBhcmFibGU7XG4iLCJpbXBvcnQgYmFzZUlzTWF0Y2ggZnJvbSAnLi9fYmFzZUlzTWF0Y2guanMnO1xuaW1wb3J0IGdldE1hdGNoRGF0YSBmcm9tICcuL19nZXRNYXRjaERhdGEuanMnO1xuaW1wb3J0IG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIGZyb20gJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VNYXRjaGVzO1xuIiwiaW1wb3J0IGlzU3RyaWN0Q29tcGFyYWJsZSBmcm9tICcuL19pc1N0cmljdENvbXBhcmFibGUuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldE1hdGNoRGF0YTtcbiIsImltcG9ydCBiYXNlSXNFcXVhbCBmcm9tICcuL19iYXNlSXNFcXVhbC5qcyc7XG5pbXBvcnQgZ2V0IGZyb20gJy4vZ2V0LmpzJztcbmltcG9ydCBoYXNJbiBmcm9tICcuL2hhc0luLmpzJztcbmltcG9ydCBpc0tleSBmcm9tICcuL19pc0tleS5qcyc7XG5pbXBvcnQgaXNTdHJpY3RDb21wYXJhYmxlIGZyb20gJy4vX2lzU3RyaWN0Q29tcGFyYWJsZS5qcyc7XG5pbXBvcnQgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgZnJvbSAnLi9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUuanMnO1xuaW1wb3J0IHRvS2V5IGZyb20gJy4vX3RvS2V5LmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlTWF0Y2hlc1Byb3BlcnR5O1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJhc2VGb3I7XG4iLCJpbXBvcnQgYmFzZVByb3BlcnR5IGZyb20gJy4vX2Jhc2VQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgYmFzZVByb3BlcnR5RGVlcCBmcm9tICcuL19iYXNlUHJvcGVydHlEZWVwLmpzJztcbmltcG9ydCBpc0tleSBmcm9tICcuL19pc0tleS5qcyc7XG5pbXBvcnQgdG9LZXkgZnJvbSAnLi9fdG9LZXkuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFtcbiAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICogXTtcbiAqXG4gKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqXG4gKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICogLy8gPT4gWzEsIDJdXG4gKi9cbmZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHByb3BlcnR5O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVByb3BlcnR5O1xuIiwiaW1wb3J0IGJhc2VHZXQgZnJvbSAnLi9fYmFzZUdldC5qcyc7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlUHJvcGVydHlEZWVwO1xuIiwiaW1wb3J0IGJhc2VNYXRjaGVzIGZyb20gJy4vX2Jhc2VNYXRjaGVzLmpzJztcbmltcG9ydCBiYXNlTWF0Y2hlc1Byb3BlcnR5IGZyb20gJy4vX2Jhc2VNYXRjaGVzUHJvcGVydHkuanMnO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBwcm9wZXJ0eSBmcm9tICcuL3Byb3BlcnR5LmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBpZGVudGl0eTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUl0ZXJhdGVlO1xuIiwiaW1wb3J0IGNyZWF0ZUJhc2VGb3IgZnJvbSAnLi9fY3JlYXRlQmFzZUZvci5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG52YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuZXhwb3J0IGRlZmF1bHQgYmFzZUZvcjtcbiIsImltcG9ydCBiYXNlRm9yT3duIGZyb20gJy4vX2Jhc2VGb3JPd24uanMnO1xuaW1wb3J0IGNyZWF0ZUJhc2VFYWNoIGZyb20gJy4vX2NyZWF0ZUJhc2VFYWNoLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAqL1xudmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VFYWNoO1xuIiwiaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vaXNBcnJheUxpa2UuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfVxuICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCYXNlRWFjaDtcbiIsImltcG9ydCBiYXNlRm9yIGZyb20gJy4vX2Jhc2VGb3IuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlRm9yT3duO1xuIiwiaW1wb3J0IGJhc2VBc3NpZ25WYWx1ZSBmcm9tICcuL19iYXNlQXNzaWduVmFsdWUuanMnO1xuaW1wb3J0IGVxIGZyb20gJy4vZXEuanMnO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXNzaWduVmFsdWVgIGV4Y2VwdCB0aGF0IGl0IGRvZXNuJ3QgYXNzaWduXG4gKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFlcShvYmplY3Rba2V5XSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3NpZ25NZXJnZVZhbHVlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCwgdW5sZXNzIGBrZXlgIGlzIFwiX19wcm90b19fXCIgb3IgXCJjb25zdHJ1Y3RvclwiLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc2FmZUdldChvYmplY3QsIGtleSkge1xuICBpZiAoa2V5ID09PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBvYmplY3Rba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICByZXR1cm4gb2JqZWN0W2tleV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNhZmVHZXQ7XG4iLCJpbXBvcnQgYXNzaWduTWVyZ2VWYWx1ZSBmcm9tICcuL19hc3NpZ25NZXJnZVZhbHVlLmpzJztcbmltcG9ydCBjbG9uZUJ1ZmZlciBmcm9tICcuL19jbG9uZUJ1ZmZlci5qcyc7XG5pbXBvcnQgY2xvbmVUeXBlZEFycmF5IGZyb20gJy4vX2Nsb25lVHlwZWRBcnJheS5qcyc7XG5pbXBvcnQgY29weUFycmF5IGZyb20gJy4vX2NvcHlBcnJheS5qcyc7XG5pbXBvcnQgaW5pdENsb25lT2JqZWN0IGZyb20gJy4vX2luaXRDbG9uZU9iamVjdC5qcyc7XG5pbXBvcnQgaXNBcmd1bWVudHMgZnJvbSAnLi9pc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlT2JqZWN0IGZyb20gJy4vaXNBcnJheUxpa2VPYmplY3QuanMnO1xuaW1wb3J0IGlzQnVmZmVyIGZyb20gJy4vaXNCdWZmZXIuanMnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCBpc1BsYWluT2JqZWN0IGZyb20gJy4vaXNQbGFpbk9iamVjdC5qcyc7XG5pbXBvcnQgaXNUeXBlZEFycmF5IGZyb20gJy4vaXNUeXBlZEFycmF5LmpzJztcbmltcG9ydCBzYWZlR2V0IGZyb20gJy4vX3NhZmVHZXQuanMnO1xuaW1wb3J0IHRvUGxhaW5PYmplY3QgZnJvbSAnLi90b1BsYWluT2JqZWN0LmpzJztcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBtZXJnZXMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgbWVyZ2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBtZXJnZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gKiAgY291bnRlcnBhcnRzLlxuICovXG5mdW5jdGlvbiBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBtZXJnZUZ1bmMsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gIHZhciBvYmpWYWx1ZSA9IHNhZmVHZXQob2JqZWN0LCBrZXkpLFxuICAgICAgc3JjVmFsdWUgPSBzYWZlR2V0KHNvdXJjZSwga2V5KSxcbiAgICAgIHN0YWNrZWQgPSBzdGFjay5nZXQoc3JjVmFsdWUpO1xuXG4gIGlmIChzdGFja2VkKSB7XG4gICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgc3RhY2tlZCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgOiB1bmRlZmluZWQ7XG5cbiAgdmFyIGlzQ29tbW9uID0gbmV3VmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICBpZiAoaXNDb21tb24pIHtcbiAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHNyY1ZhbHVlKSxcbiAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmIGlzQnVmZmVyKHNyY1ZhbHVlKSxcbiAgICAgICAgaXNUeXBlZCA9ICFpc0FyciAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheShzcmNWYWx1ZSk7XG5cbiAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgIGlmIChpc0FyciB8fCBpc0J1ZmYgfHwgaXNUeXBlZCkge1xuICAgICAgaWYgKGlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc0FycmF5TGlrZU9iamVjdChvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNCdWZmKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIG5ld1ZhbHVlID0gY2xvbmVCdWZmZXIoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNUeXBlZCkge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBuZXdWYWx1ZSA9IGNsb25lVHlwZWRBcnJheShzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbmV3VmFsdWUgPSBbXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChzcmNWYWx1ZSkgfHwgaXNBcmd1bWVudHMoc3JjVmFsdWUpKSB7XG4gICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgaWYgKGlzQXJndW1lbnRzKG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IHRvUGxhaW5PYmplY3Qob2JqVmFsdWUpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoIWlzT2JqZWN0KG9ialZhbHVlKSB8fCBpc0Z1bmN0aW9uKG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IGluaXRDbG9uZU9iamVjdChzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzQ29tbW9uKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgbWVyZ2VGdW5jKG5ld1ZhbHVlLCBzcmNWYWx1ZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICB9XG4gIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZU1lcmdlRGVlcDtcbiIsImltcG9ydCBjb3B5T2JqZWN0IGZyb20gJy4vX2NvcHlPYmplY3QuanMnO1xuaW1wb3J0IGtleXNJbiBmcm9tICcuL2tleXNJbi5qcyc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICpcbiAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICovXG5mdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9QbGFpbk9iamVjdDtcbiIsImltcG9ydCBTdGFjayBmcm9tICcuL19TdGFjay5qcyc7XG5pbXBvcnQgYXNzaWduTWVyZ2VWYWx1ZSBmcm9tICcuL19hc3NpZ25NZXJnZVZhbHVlLmpzJztcbmltcG9ydCBiYXNlRm9yIGZyb20gJy4vX2Jhc2VGb3IuanMnO1xuaW1wb3J0IGJhc2VNZXJnZURlZXAgZnJvbSAnLi9fYmFzZU1lcmdlRGVlcC5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQga2V5c0luIGZyb20gJy4va2V5c0luLmpzJztcbmltcG9ydCBzYWZlR2V0IGZyb20gJy4vX3NhZmVHZXQuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lcmdlYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2VkIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gKiAgY291bnRlcnBhcnRzLlxuICovXG5mdW5jdGlvbiBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIGlmIChpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgPyBjdXN0b21pemVyKHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH0sIGtleXNJbik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VNZXJnZTtcbiIsImltcG9ydCBiYXNlRWFjaCBmcm9tICcuL19iYXNlRWFjaC5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9pc0FycmF5TGlrZS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VNYXA7XG4iLCJpbXBvcnQgYmFzZUZsYXR0ZW4gZnJvbSAnLi9fYmFzZUZsYXR0ZW4uanMnO1xuaW1wb3J0IG1hcCBmcm9tICcuL21hcC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZsYXR0ZW5lZCBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gKiB0aHJ1IGBpdGVyYXRlZWAgYW5kIGZsYXR0ZW5pbmcgdGhlIG1hcHBlZCByZXN1bHRzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gKiAgIHJldHVybiBbbiwgbl07XG4gKiB9XG4gKlxuICogXy5mbGF0TWFwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICovXG5mdW5jdGlvbiBmbGF0TWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZmxhdE1hcDtcbiIsImltcG9ydCBhcnJheU1hcCBmcm9tICcuL19hcnJheU1hcC5qcyc7XG5pbXBvcnQgYmFzZUl0ZXJhdGVlIGZyb20gJy4vX2Jhc2VJdGVyYXRlZS5qcyc7XG5pbXBvcnQgYmFzZU1hcCBmcm9tICcuL19iYXNlTWFwLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICpcbiAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gKlxuICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gKiBgc2FtcGxlU2l6ZWAsIGBzbGljZWAsIGBzb21lYCwgYHNvcnRCeWAsIGBzcGxpdGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICogICByZXR1cm4gbiAqIG47XG4gKiB9XG4gKlxuICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICogLy8gPT4gWzE2LCA2NF1cbiAqXG4gKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcgfVxuICogXTtcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gKi9cbmZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXA7XG4iLCJpbXBvcnQgYmFzZU1lcmdlIGZyb20gJy4vX2Jhc2VNZXJnZS5qcyc7XG5pbXBvcnQgY3JlYXRlQXNzaWduZXIgZnJvbSAnLi9fY3JlYXRlQXNzaWduZXIuanMnO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC41LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHtcbiAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAqIH07XG4gKlxuICogdmFyIG90aGVyID0ge1xuICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICogfTtcbiAqXG4gKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICovXG52YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbWVyZ2U7XG4iLCJpbXBvcnQgYmFzZVJlc3QgZnJvbSAnLi9fYmFzZVJlc3QuanMnO1xuaW1wb3J0IGlzSXRlcmF0ZWVDYWxsIGZyb20gJy4vX2lzSXRlcmF0ZWVDYWxsLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5hc3NpZ25gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsXG4gICAgICAgIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICBjdXN0b21pemVyID0gKGFzc2lnbmVyLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJylcbiAgICAgID8gKGxlbmd0aC0tLCBjdXN0b21pemVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICBjdXN0b21pemVyID0gbGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IGN1c3RvbWl6ZXI7XG4gICAgICBsZW5ndGggPSAxO1xuICAgIH1cbiAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICBhc3NpZ25lcihvYmplY3QsIHNvdXJjZSwgaW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQXNzaWduZXI7XG4iLCJpbXBvcnQgZXEgZnJvbSAnLi9lcS5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQgaXNJbmRleCBmcm9tICcuL19pc0luZGV4LmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICkge1xuICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0l0ZXJhdGVlQ2FsbDtcbiIsInZhciB2PSExLG8sZixzLHUsZCxOLGwscCxtLHcsRCx4LEUsTSxGO2Z1bmN0aW9uIGEoKXtpZighdil7dj0hMDt2YXIgZT1uYXZpZ2F0b3IudXNlckFnZW50LG49Lyg/Ok1TSUUuKFxcZCtcXC5cXGQrKSl8KD86KD86RmlyZWZveHxHcmFuUGFyYWRpc298SWNld2Vhc2VsKS4oXFxkK1xcLlxcZCspKXwoPzpPcGVyYSg/Oi4rVmVyc2lvbi58LikoXFxkK1xcLlxcZCspKXwoPzpBcHBsZVdlYktpdC4oXFxkKyg/OlxcLlxcZCspPykpfCg/OlRyaWRlbnRcXC9cXGQrXFwuXFxkKy4qcnY6KFxcZCtcXC5cXGQrKSkvLmV4ZWMoZSksaT0vKE1hYyBPUyBYKXwoV2luZG93cyl8KExpbnV4KS8uZXhlYyhlKTtpZih4PS9cXGIoaVBob25lfGlQW2FvXWQpLy5leGVjKGUpLEU9L1xcYihpUFthb11kKS8uZXhlYyhlKSx3PS9BbmRyb2lkL2kuZXhlYyhlKSxNPS9GQkFOXFwvXFx3KzsvaS5leGVjKGUpLEY9L01vYmlsZS9pLmV4ZWMoZSksRD0hIS9XaW42NC8uZXhlYyhlKSxuKXtvPW5bMV0/cGFyc2VGbG9hdChuWzFdKTpuWzVdP3BhcnNlRmxvYXQobls1XSk6TmFOLG8mJmRvY3VtZW50JiZkb2N1bWVudC5kb2N1bWVudE1vZGUmJihvPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIHI9Lyg/OlRyaWRlbnRcXC8oXFxkKy5cXGQrKSkvLmV4ZWMoZSk7Tj1yP3BhcnNlRmxvYXQoclsxXSkrNDpvLGY9blsyXT9wYXJzZUZsb2F0KG5bMl0pOk5hTixzPW5bM10/cGFyc2VGbG9hdChuWzNdKTpOYU4sdT1uWzRdP3BhcnNlRmxvYXQobls0XSk6TmFOLHU/KG49Lyg/OkNocm9tZVxcLyhcXGQrXFwuXFxkKykpLy5leGVjKGUpLGQ9biYmblsxXT9wYXJzZUZsb2F0KG5bMV0pOk5hTik6ZD1OYU59ZWxzZSBvPWY9cz1kPXU9TmFOO2lmKGkpe2lmKGlbMV0pe3ZhciB0PS8oPzpNYWMgT1MgWCAoXFxkKyg/OlsuX11cXGQrKT8pKS8uZXhlYyhlKTtsPXQ/cGFyc2VGbG9hdCh0WzFdLnJlcGxhY2UoXCJfXCIsXCIuXCIpKTohMH1lbHNlIGw9ITE7cD0hIWlbMl0sbT0hIWlbM119ZWxzZSBsPXA9bT0hMX19dmFyIF89e2llOmZ1bmN0aW9uKCl7cmV0dXJuIGEoKXx8b30saWVDb21wYXRpYmlsaXR5TW9kZTpmdW5jdGlvbigpe3JldHVybiBhKCl8fE4+b30saWU2NDpmdW5jdGlvbigpe3JldHVybiBfLmllKCkmJkR9LGZpcmVmb3g6ZnVuY3Rpb24oKXtyZXR1cm4gYSgpfHxmfSxvcGVyYTpmdW5jdGlvbigpe3JldHVybiBhKCl8fHN9LHdlYmtpdDpmdW5jdGlvbigpe3JldHVybiBhKCl8fHV9LHNhZmFyaTpmdW5jdGlvbigpe3JldHVybiBfLndlYmtpdCgpfSxjaHJvbWU6ZnVuY3Rpb24oKXtyZXR1cm4gYSgpfHxkfSx3aW5kb3dzOmZ1bmN0aW9uKCl7cmV0dXJuIGEoKXx8cH0sb3N4OmZ1bmN0aW9uKCl7cmV0dXJuIGEoKXx8bH0sbGludXg6ZnVuY3Rpb24oKXtyZXR1cm4gYSgpfHxtfSxpcGhvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gYSgpfHx4fSxtb2JpbGU6ZnVuY3Rpb24oKXtyZXR1cm4gYSgpfHx4fHxFfHx3fHxGfSxuYXRpdmVBcHA6ZnVuY3Rpb24oKXtyZXR1cm4gYSgpfHxNfSxhbmRyb2lkOmZ1bmN0aW9uKCl7cmV0dXJuIGEoKXx8d30saXBhZDpmdW5jdGlvbigpe3JldHVybiBhKCl8fEV9fSxBPV87dmFyIGM9ISEodHlwZW9mIHdpbmRvdzxcInVcIiYmd2luZG93LmRvY3VtZW50JiZ3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksVT17Y2FuVXNlRE9NOmMsY2FuVXNlV29ya2Vyczp0eXBlb2YgV29ya2VyPFwidVwiLGNhblVzZUV2ZW50TGlzdGVuZXJzOmMmJiEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyfHx3aW5kb3cuYXR0YWNoRXZlbnQpLGNhblVzZVZpZXdwb3J0OmMmJiEhd2luZG93LnNjcmVlbixpc0luV29ya2VyOiFjfSxoPVU7dmFyIFg7aC5jYW5Vc2VET00mJihYPWRvY3VtZW50LmltcGxlbWVudGF0aW9uJiZkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlJiZkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKFwiXCIsXCJcIikhPT0hMCk7ZnVuY3Rpb24gUyhlLG4pe2lmKCFoLmNhblVzZURPTXx8biYmIShcImFkZEV2ZW50TGlzdGVuZXJcImluIGRvY3VtZW50KSlyZXR1cm4hMTt2YXIgaT1cIm9uXCIrZSxyPWkgaW4gZG9jdW1lbnQ7aWYoIXIpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7dC5zZXRBdHRyaWJ1dGUoaSxcInJldHVybjtcIikscj10eXBlb2YgdFtpXT09XCJmdW5jdGlvblwifXJldHVybiFyJiZYJiZlPT09XCJ3aGVlbFwiJiYocj1kb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKFwiRXZlbnRzLndoZWVsXCIsXCIzLjBcIikpLHJ9dmFyIGI9Uzt2YXIgTz0xMCxJPTQwLFA9ODAwO2Z1bmN0aW9uIFQoZSl7dmFyIG49MCxpPTAscj0wLHQ9MDtyZXR1cm5cImRldGFpbFwiaW4gZSYmKGk9ZS5kZXRhaWwpLFwid2hlZWxEZWx0YVwiaW4gZSYmKGk9LWUud2hlZWxEZWx0YS8xMjApLFwid2hlZWxEZWx0YVlcImluIGUmJihpPS1lLndoZWVsRGVsdGFZLzEyMCksXCJ3aGVlbERlbHRhWFwiaW4gZSYmKG49LWUud2hlZWxEZWx0YVgvMTIwKSxcImF4aXNcImluIGUmJmUuYXhpcz09PWUuSE9SSVpPTlRBTF9BWElTJiYobj1pLGk9MCkscj1uKk8sdD1pKk8sXCJkZWx0YVlcImluIGUmJih0PWUuZGVsdGFZKSxcImRlbHRhWFwiaW4gZSYmKHI9ZS5kZWx0YVgpLChyfHx0KSYmZS5kZWx0YU1vZGUmJihlLmRlbHRhTW9kZT09MT8ocio9SSx0Kj1JKToocio9UCx0Kj1QKSksciYmIW4mJihuPXI8MT8tMToxKSx0JiYhaSYmKGk9dDwxPy0xOjEpLHtzcGluWDpuLHNwaW5ZOmkscGl4ZWxYOnIscGl4ZWxZOnR9fVQuZ2V0RXZlbnRUeXBlPWZ1bmN0aW9uKCl7cmV0dXJuIEEuZmlyZWZveCgpP1wiRE9NTW91c2VTY3JvbGxcIjpiKFwid2hlZWxcIik/XCJ3aGVlbFwiOlwibW91c2V3aGVlbFwifTt2YXIgWT1UO2V4cG9ydHtZIGFzIGRlZmF1bHR9O1xuLyoqXG4gKiBDaGVja3MgaWYgYW4gZXZlbnQgaXMgc3VwcG9ydGVkIGluIHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBlbnZpcm9ubWVudC5cbiAqXG4gKiBOT1RFOiBUaGlzIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5IGZvciBub24tZ2VuZXJpYyBldmVudHMgc3VjaCBhcyBgY2hhbmdlYCxcbiAqIGByZXNldGAsIGBsb2FkYCwgYGVycm9yYCwgYW5kIGBzZWxlY3RgLlxuICpcbiAqIEJvcnJvd3MgZnJvbSBNb2Rlcm5penIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVN1ZmZpeCBFdmVudCBuYW1lLCBlLmcuIFwiY2xpY2tcIi5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IGNhcHR1cmUgQ2hlY2sgaWYgdGhlIGNhcHR1cmUgcGhhc2UgaXMgc3VwcG9ydGVkLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgaXMgc3VwcG9ydGVkLlxuICogQGludGVybmFsXG4gKiBAbGljZW5zZSBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiAqL1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCIsImltcG9ydCBub3JtYWxpemVXaGVlbCBmcm9tICdub3JtYWxpemUtd2hlZWwtZXMnO1xuXG5jb25zdCBtb3VzZXdoZWVsID0gZnVuY3Rpb24oZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgY29uc3QgZm4gPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZVdoZWVsKGV2ZW50KTtcbiAgICAgIGNhbGxiYWNrICYmIFJlZmxlY3QuYXBwbHkoY2FsbGJhY2ssIHRoaXMsIFtldmVudCwgbm9ybWFsaXplZF0pO1xuICAgIH07XG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgZm4sIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgfVxufTtcbmNvbnN0IE1vdXNld2hlZWwgPSB7XG4gIGJlZm9yZU1vdW50KGVsLCBiaW5kaW5nKSB7XG4gICAgbW91c2V3aGVlbChlbCwgYmluZGluZy52YWx1ZSk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IE1vdXNld2hlZWwgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIiwiY29uc3QgZWxQYWdpbmF0aW9uS2V5ID0gU3ltYm9sKFwiZWxQYWdpbmF0aW9uS2V5XCIpO1xuXG5leHBvcnQgeyBlbFBhZ2luYXRpb25LZXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBidWlsZFByb3BzIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdnVlL3Byb3BzL3J1bnRpbWUubWpzJztcbmltcG9ydCB7IGljb25Qcm9wVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3Z1ZS9pY29uLm1qcyc7XG5cbmNvbnN0IHBhZ2luYXRpb25QcmV2UHJvcHMgPSBidWlsZFByb3BzKHtcbiAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gIGN1cnJlbnRQYWdlOiB7XG4gICAgdHlwZTogTnVtYmVyLFxuICAgIGRlZmF1bHQ6IDFcbiAgfSxcbiAgcHJldlRleHQ6IHtcbiAgICB0eXBlOiBTdHJpbmdcbiAgfSxcbiAgcHJldkljb246IHtcbiAgICB0eXBlOiBpY29uUHJvcFR5cGVcbiAgfVxufSk7XG5jb25zdCBwYWdpbmF0aW9uUHJldkVtaXRzID0ge1xuICBjbGljazogKGV2dCkgPT4gZXZ0IGluc3RhbmNlb2YgTW91c2VFdmVudFxufTtcblxuZXhwb3J0IHsgcGFnaW5hdGlvblByZXZFbWl0cywgcGFnaW5hdGlvblByZXZQcm9wcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJldi5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGNvbXB1dGVkLCBvcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jaywgdW5yZWYsIHRvRGlzcGxheVN0cmluZywgY3JlYXRlQmxvY2ssIHdpdGhDdHgsIHJlc29sdmVEeW5hbWljQ29tcG9uZW50IH0gZnJvbSAndnVlJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCB7IEVsSWNvbiB9IGZyb20gJy4uLy4uLy4uL2ljb24vaW5kZXgubWpzJztcbmltcG9ydCB7IHBhZ2luYXRpb25QcmV2UHJvcHMsIHBhZ2luYXRpb25QcmV2RW1pdHMgfSBmcm9tICcuL3ByZXYubWpzJztcbmltcG9ydCBfZXhwb3J0X3NmYyBmcm9tICcuLi8uLi8uLi8uLi9fdmlydHVhbC9wbHVnaW4tdnVlX2V4cG9ydC1oZWxwZXIubWpzJztcbmltcG9ydCB7IHVzZUxvY2FsZSB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZS1sb2NhbGUvaW5kZXgubWpzJztcblxuY29uc3QgX2hvaXN0ZWRfMSA9IFtcImRpc2FibGVkXCIsIFwiYXJpYS1sYWJlbFwiLCBcImFyaWEtZGlzYWJsZWRcIl07XG5jb25zdCBfaG9pc3RlZF8yID0geyBrZXk6IDAgfTtcbmNvbnN0IF9fZGVmYXVsdF9fID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJFbFBhZ2luYXRpb25QcmV2XCJcbn0pO1xuY29uc3QgX3NmY19tYWluID0gLyogQF9fUFVSRV9fICovIGRlZmluZUNvbXBvbmVudCh7XG4gIC4uLl9fZGVmYXVsdF9fLFxuICBwcm9wczogcGFnaW5hdGlvblByZXZQcm9wcyxcbiAgZW1pdHM6IHBhZ2luYXRpb25QcmV2RW1pdHMsXG4gIHNldHVwKF9fcHJvcHMpIHtcbiAgICBjb25zdCBwcm9wcyA9IF9fcHJvcHM7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VMb2NhbGUoKTtcbiAgICBjb25zdCBpbnRlcm5hbERpc2FibGVkID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuZGlzYWJsZWQgfHwgcHJvcHMuY3VycmVudFBhZ2UgPD0gMSk7XG4gICAgcmV0dXJuIChfY3R4LCBfY2FjaGUpID0+IHtcbiAgICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiYnV0dG9uXCIsIHtcbiAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgY2xhc3M6IFwiYnRuLXByZXZcIixcbiAgICAgICAgZGlzYWJsZWQ6IHVucmVmKGludGVybmFsRGlzYWJsZWQpLFxuICAgICAgICBcImFyaWEtbGFiZWxcIjogX2N0eC5wcmV2VGV4dCB8fCB1bnJlZih0KShcImVsLnBhZ2luYXRpb24ucHJldlwiKSxcbiAgICAgICAgXCJhcmlhLWRpc2FibGVkXCI6IHVucmVmKGludGVybmFsRGlzYWJsZWQpLFxuICAgICAgICBvbkNsaWNrOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9ICgkZXZlbnQpID0+IF9jdHguJGVtaXQoXCJjbGlja1wiLCAkZXZlbnQpKVxuICAgICAgfSwgW1xuICAgICAgICBfY3R4LnByZXZUZXh0ID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJzcGFuXCIsIF9ob2lzdGVkXzIsIHRvRGlzcGxheVN0cmluZyhfY3R4LnByZXZUZXh0KSwgMSkpIDogKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayh1bnJlZihFbEljb24pLCB7IGtleTogMSB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKHJlc29sdmVEeW5hbWljQ29tcG9uZW50KF9jdHgucHJldkljb24pKSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfOiAxXG4gICAgICAgIH0pKVxuICAgICAgXSwgOCwgX2hvaXN0ZWRfMSk7XG4gICAgfTtcbiAgfVxufSk7XG52YXIgUHJldiA9IC8qIEBfX1BVUkVfXyAqLyBfZXhwb3J0X3NmYyhfc2ZjX21haW4sIFtbXCJfX2ZpbGVcIiwgXCIvaG9tZS9ydW5uZXIvd29yay9lbGVtZW50LXBsdXMvZWxlbWVudC1wbHVzL3BhY2thZ2VzL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9zcmMvY29tcG9uZW50cy9wcmV2LnZ1ZVwiXV0pO1xuXG5leHBvcnQgeyBQcmV2IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByZXYyLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCB7IGJ1aWxkUHJvcHMgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy92dWUvcHJvcHMvcnVudGltZS5tanMnO1xuaW1wb3J0IHsgaWNvblByb3BUeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdnVlL2ljb24ubWpzJztcblxuY29uc3QgcGFnaW5hdGlvbk5leHRQcm9wcyA9IGJ1aWxkUHJvcHMoe1xuICBkaXNhYmxlZDogQm9vbGVhbixcbiAgY3VycmVudFBhZ2U6IHtcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgZGVmYXVsdDogMVxuICB9LFxuICBwYWdlQ291bnQ6IHtcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgZGVmYXVsdDogNTBcbiAgfSxcbiAgbmV4dFRleHQ6IHtcbiAgICB0eXBlOiBTdHJpbmdcbiAgfSxcbiAgbmV4dEljb246IHtcbiAgICB0eXBlOiBpY29uUHJvcFR5cGVcbiAgfVxufSk7XG5cbmV4cG9ydCB7IHBhZ2luYXRpb25OZXh0UHJvcHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5leHQubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBjb21wdXRlZCwgb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2ssIHVucmVmLCB0b0Rpc3BsYXlTdHJpbmcsIGNyZWF0ZUJsb2NrLCB3aXRoQ3R4LCByZXNvbHZlRHluYW1pY0NvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL2hvb2tzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBFbEljb24gfSBmcm9tICcuLi8uLi8uLi9pY29uL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBwYWdpbmF0aW9uTmV4dFByb3BzIH0gZnJvbSAnLi9uZXh0Lm1qcyc7XG5pbXBvcnQgX2V4cG9ydF9zZmMgZnJvbSAnLi4vLi4vLi4vLi4vX3ZpcnR1YWwvcGx1Z2luLXZ1ZV9leHBvcnQtaGVscGVyLm1qcyc7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2UtbG9jYWxlL2luZGV4Lm1qcyc7XG5cbmNvbnN0IF9ob2lzdGVkXzEgPSBbXCJkaXNhYmxlZFwiLCBcImFyaWEtbGFiZWxcIiwgXCJhcmlhLWRpc2FibGVkXCJdO1xuY29uc3QgX2hvaXN0ZWRfMiA9IHsga2V5OiAwIH07XG5jb25zdCBfX2RlZmF1bHRfXyA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRWxQYWdpbmF0aW9uTmV4dFwiXG59KTtcbmNvbnN0IF9zZmNfbWFpbiA9IC8qIEBfX1BVUkVfXyAqLyBkZWZpbmVDb21wb25lbnQoe1xuICAuLi5fX2RlZmF1bHRfXyxcbiAgcHJvcHM6IHBhZ2luYXRpb25OZXh0UHJvcHMsXG4gIGVtaXRzOiBbXCJjbGlja1wiXSxcbiAgc2V0dXAoX19wcm9wcykge1xuICAgIGNvbnN0IHByb3BzID0gX19wcm9wcztcbiAgICBjb25zdCB7IHQgfSA9IHVzZUxvY2FsZSgpO1xuICAgIGNvbnN0IGludGVybmFsRGlzYWJsZWQgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5kaXNhYmxlZCB8fCBwcm9wcy5jdXJyZW50UGFnZSA9PT0gcHJvcHMucGFnZUNvdW50IHx8IHByb3BzLnBhZ2VDb3VudCA9PT0gMCk7XG4gICAgcmV0dXJuIChfY3R4LCBfY2FjaGUpID0+IHtcbiAgICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiYnV0dG9uXCIsIHtcbiAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgY2xhc3M6IFwiYnRuLW5leHRcIixcbiAgICAgICAgZGlzYWJsZWQ6IHVucmVmKGludGVybmFsRGlzYWJsZWQpLFxuICAgICAgICBcImFyaWEtbGFiZWxcIjogX2N0eC5uZXh0VGV4dCB8fCB1bnJlZih0KShcImVsLnBhZ2luYXRpb24ubmV4dFwiKSxcbiAgICAgICAgXCJhcmlhLWRpc2FibGVkXCI6IHVucmVmKGludGVybmFsRGlzYWJsZWQpLFxuICAgICAgICBvbkNsaWNrOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9ICgkZXZlbnQpID0+IF9jdHguJGVtaXQoXCJjbGlja1wiLCAkZXZlbnQpKVxuICAgICAgfSwgW1xuICAgICAgICBfY3R4Lm5leHRUZXh0ID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJzcGFuXCIsIF9ob2lzdGVkXzIsIHRvRGlzcGxheVN0cmluZyhfY3R4Lm5leHRUZXh0KSwgMSkpIDogKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayh1bnJlZihFbEljb24pLCB7IGtleTogMSB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKHJlc29sdmVEeW5hbWljQ29tcG9uZW50KF9jdHgubmV4dEljb24pKSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfOiAxXG4gICAgICAgIH0pKVxuICAgICAgXSwgOCwgX2hvaXN0ZWRfMSk7XG4gICAgfTtcbiAgfVxufSk7XG52YXIgTmV4dCA9IC8qIEBfX1BVUkVfXyAqLyBfZXhwb3J0X3NmYyhfc2ZjX21haW4sIFtbXCJfX2ZpbGVcIiwgXCIvaG9tZS9ydW5uZXIvd29yay9lbGVtZW50LXBsdXMvZWxlbWVudC1wbHVzL3BhY2thZ2VzL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9zcmMvY29tcG9uZW50cy9uZXh0LnZ1ZVwiXV0pO1xuXG5leHBvcnQgeyBOZXh0IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5leHQyLm1qcy5tYXBcbiIsImltcG9ydCB7IGluamVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBlbFBhZ2luYXRpb25LZXkgfSBmcm9tICcuL2NvbnN0YW50cy5tanMnO1xuXG5jb25zdCB1c2VQYWdpbmF0aW9uID0gKCkgPT4gaW5qZWN0KGVsUGFnaW5hdGlvbktleSwge30pO1xuXG5leHBvcnQgeyB1c2VQYWdpbmF0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VQYWdpbmF0aW9uLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vY29uc3RhbnRzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBidWlsZFByb3BzLCBkZWZpbmVQcm9wVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3Z1ZS9wcm9wcy9ydW50aW1lLm1qcyc7XG5pbXBvcnQgeyBtdXRhYmxlIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdHlwZXNjcmlwdC5tanMnO1xuaW1wb3J0IHsgY29tcG9uZW50U2l6ZXMgfSBmcm9tICcuLi8uLi8uLi8uLi9jb25zdGFudHMvc2l6ZS5tanMnO1xuXG5jb25zdCBwYWdpbmF0aW9uU2l6ZXNQcm9wcyA9IGJ1aWxkUHJvcHMoe1xuICBwYWdlU2l6ZToge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICByZXF1aXJlZDogdHJ1ZVxuICB9LFxuICBwYWdlU2l6ZXM6IHtcbiAgICB0eXBlOiBkZWZpbmVQcm9wVHlwZShBcnJheSksXG4gICAgZGVmYXVsdDogKCkgPT4gbXV0YWJsZShbMTAsIDIwLCAzMCwgNDAsIDUwLCAxMDBdKVxuICB9LFxuICBwb3BwZXJDbGFzczoge1xuICAgIHR5cGU6IFN0cmluZ1xuICB9LFxuICBkaXNhYmxlZDogQm9vbGVhbixcbiAgc2l6ZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICB2YWx1ZXM6IGNvbXBvbmVudFNpemVzXG4gIH1cbn0pO1xuXG5leHBvcnQgeyBwYWdpbmF0aW9uU2l6ZXNQcm9wcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2l6ZXMubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCByZWYsIHdhdGNoLCBjb21wdXRlZCwgb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2ssIG5vcm1hbGl6ZUNsYXNzLCB1bnJlZiwgY3JlYXRlVk5vZGUsIHdpdGhDdHgsIEZyYWdtZW50LCByZW5kZXJMaXN0LCBjcmVhdGVCbG9jayB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBpc0VxdWFsIH0gZnJvbSAnbG9kYXNoLXVuaWZpZWQnO1xuaW1wb3J0IHsgRWxTZWxlY3QsIEVsT3B0aW9uIH0gZnJvbSAnLi4vLi4vLi4vc2VsZWN0L2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL2hvb2tzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VQYWdpbmF0aW9uIH0gZnJvbSAnLi4vdXNlUGFnaW5hdGlvbi5tanMnO1xuaW1wb3J0IHsgcGFnaW5hdGlvblNpemVzUHJvcHMgfSBmcm9tICcuL3NpemVzLm1qcyc7XG5pbXBvcnQgX2V4cG9ydF9zZmMgZnJvbSAnLi4vLi4vLi4vLi4vX3ZpcnR1YWwvcGx1Z2luLXZ1ZV9leHBvcnQtaGVscGVyLm1qcyc7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2UtbG9jYWxlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VOYW1lc3BhY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2UtbmFtZXNwYWNlL2luZGV4Lm1qcyc7XG5cbmNvbnN0IF9fZGVmYXVsdF9fID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJFbFBhZ2luYXRpb25TaXplc1wiXG59KTtcbmNvbnN0IF9zZmNfbWFpbiA9IC8qIEBfX1BVUkVfXyAqLyBkZWZpbmVDb21wb25lbnQoe1xuICAuLi5fX2RlZmF1bHRfXyxcbiAgcHJvcHM6IHBhZ2luYXRpb25TaXplc1Byb3BzLFxuICBlbWl0czogW1wicGFnZS1zaXplLWNoYW5nZVwiXSxcbiAgc2V0dXAoX19wcm9wcywgeyBlbWl0IH0pIHtcbiAgICBjb25zdCBwcm9wcyA9IF9fcHJvcHM7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VMb2NhbGUoKTtcbiAgICBjb25zdCBucyA9IHVzZU5hbWVzcGFjZShcInBhZ2luYXRpb25cIik7XG4gICAgY29uc3QgcGFnaW5hdGlvbiA9IHVzZVBhZ2luYXRpb24oKTtcbiAgICBjb25zdCBpbm5lclBhZ2VTaXplID0gcmVmKHByb3BzLnBhZ2VTaXplKTtcbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5wYWdlU2l6ZXMsIChuZXdWYWwsIG9sZFZhbCkgPT4ge1xuICAgICAgaWYgKGlzRXF1YWwobmV3VmFsLCBvbGRWYWwpKVxuICAgICAgICByZXR1cm47XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShuZXdWYWwpKSB7XG4gICAgICAgIGNvbnN0IHBhZ2VTaXplID0gbmV3VmFsLmluY2x1ZGVzKHByb3BzLnBhZ2VTaXplKSA/IHByb3BzLnBhZ2VTaXplIDogcHJvcHMucGFnZVNpemVzWzBdO1xuICAgICAgICBlbWl0KFwicGFnZS1zaXplLWNoYW5nZVwiLCBwYWdlU2l6ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgd2F0Y2goKCkgPT4gcHJvcHMucGFnZVNpemUsIChuZXdWYWwpID0+IHtcbiAgICAgIGlubmVyUGFnZVNpemUudmFsdWUgPSBuZXdWYWw7XG4gICAgfSk7XG4gICAgY29uc3QgaW5uZXJQYWdlU2l6ZXMgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5wYWdlU2l6ZXMpO1xuICAgIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZSh2YWwpIHtcbiAgICAgIHZhciBfYTtcbiAgICAgIGlmICh2YWwgIT09IGlubmVyUGFnZVNpemUudmFsdWUpIHtcbiAgICAgICAgaW5uZXJQYWdlU2l6ZS52YWx1ZSA9IHZhbDtcbiAgICAgICAgKF9hID0gcGFnaW5hdGlvbi5oYW5kbGVTaXplQ2hhbmdlKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChwYWdpbmF0aW9uLCBOdW1iZXIodmFsKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoX2N0eCwgX2NhY2hlKSA9PiB7XG4gICAgICByZXR1cm4gb3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcInNwYW5cIiwge1xuICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYobnMpLmUoXCJzaXplc1wiKSlcbiAgICAgIH0sIFtcbiAgICAgICAgY3JlYXRlVk5vZGUodW5yZWYoRWxTZWxlY3QpLCB7XG4gICAgICAgICAgXCJtb2RlbC12YWx1ZVwiOiBpbm5lclBhZ2VTaXplLnZhbHVlLFxuICAgICAgICAgIGRpc2FibGVkOiBfY3R4LmRpc2FibGVkLFxuICAgICAgICAgIFwicG9wcGVyLWNsYXNzXCI6IF9jdHgucG9wcGVyQ2xhc3MsXG4gICAgICAgICAgc2l6ZTogX2N0eC5zaXplLFxuICAgICAgICAgIFwidmFsaWRhdGUtZXZlbnRcIjogZmFsc2UsXG4gICAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAob3BlbkJsb2NrKHRydWUpLCBjcmVhdGVFbGVtZW50QmxvY2soRnJhZ21lbnQsIG51bGwsIHJlbmRlckxpc3QodW5yZWYoaW5uZXJQYWdlU2l6ZXMpLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gb3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKHVucmVmKEVsT3B0aW9uKSwge1xuICAgICAgICAgICAgICAgIGtleTogaXRlbSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogaXRlbSxcbiAgICAgICAgICAgICAgICBsYWJlbDogaXRlbSArIHVucmVmKHQpKFwiZWwucGFnaW5hdGlvbi5wYWdlc2l6ZVwiKVxuICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbXCJ2YWx1ZVwiLCBcImxhYmVsXCJdKTtcbiAgICAgICAgICAgIH0pLCAxMjgpKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF86IDFcbiAgICAgICAgfSwgOCwgW1wibW9kZWwtdmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcInBvcHBlci1jbGFzc1wiLCBcInNpemVcIl0pXG4gICAgICBdLCAyKTtcbiAgICB9O1xuICB9XG59KTtcbnZhciBTaXplcyA9IC8qIEBfX1BVUkVfXyAqLyBfZXhwb3J0X3NmYyhfc2ZjX21haW4sIFtbXCJfX2ZpbGVcIiwgXCIvaG9tZS9ydW5uZXIvd29yay9lbGVtZW50LXBsdXMvZWxlbWVudC1wbHVzL3BhY2thZ2VzL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9zcmMvY29tcG9uZW50cy9zaXplcy52dWVcIl1dKTtcblxuZXhwb3J0IHsgU2l6ZXMgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2l6ZXMyLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vY29uc3RhbnRzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBidWlsZFByb3BzIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdnVlL3Byb3BzL3J1bnRpbWUubWpzJztcbmltcG9ydCB7IGNvbXBvbmVudFNpemVzIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29uc3RhbnRzL3NpemUubWpzJztcblxuY29uc3QgcGFnaW5hdGlvbkp1bXBlclByb3BzID0gYnVpbGRQcm9wcyh7XG4gIHNpemU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgdmFsdWVzOiBjb21wb25lbnRTaXplc1xuICB9XG59KTtcblxuZXhwb3J0IHsgcGFnaW5hdGlvbkp1bXBlclByb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qdW1wZXIubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCByZWYsIGNvbXB1dGVkLCBvcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jaywgbm9ybWFsaXplQ2xhc3MsIHVucmVmLCBjcmVhdGVFbGVtZW50Vk5vZGUsIHRvRGlzcGxheVN0cmluZywgY3JlYXRlVk5vZGUgfSBmcm9tICd2dWUnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi9ob29rcy9pbmRleC5tanMnO1xuaW1wb3J0IHsgRWxJbnB1dCB9IGZyb20gJy4uLy4uLy4uL2lucHV0L2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VQYWdpbmF0aW9uIH0gZnJvbSAnLi4vdXNlUGFnaW5hdGlvbi5tanMnO1xuaW1wb3J0IHsgcGFnaW5hdGlvbkp1bXBlclByb3BzIH0gZnJvbSAnLi9qdW1wZXIubWpzJztcbmltcG9ydCBfZXhwb3J0X3NmYyBmcm9tICcuLi8uLi8uLi8uLi9fdmlydHVhbC9wbHVnaW4tdnVlX2V4cG9ydC1oZWxwZXIubWpzJztcbmltcG9ydCB7IHVzZUxvY2FsZSB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZS1sb2NhbGUvaW5kZXgubWpzJztcbmltcG9ydCB7IHVzZU5hbWVzcGFjZSB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZS1uYW1lc3BhY2UvaW5kZXgubWpzJztcblxuY29uc3QgX2hvaXN0ZWRfMSA9IFtcImRpc2FibGVkXCJdO1xuY29uc3QgX19kZWZhdWx0X18gPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkVsUGFnaW5hdGlvbkp1bXBlclwiXG59KTtcbmNvbnN0IF9zZmNfbWFpbiA9IC8qIEBfX1BVUkVfXyAqLyBkZWZpbmVDb21wb25lbnQoe1xuICAuLi5fX2RlZmF1bHRfXyxcbiAgcHJvcHM6IHBhZ2luYXRpb25KdW1wZXJQcm9wcyxcbiAgc2V0dXAoX19wcm9wcykge1xuICAgIGNvbnN0IHsgdCB9ID0gdXNlTG9jYWxlKCk7XG4gICAgY29uc3QgbnMgPSB1c2VOYW1lc3BhY2UoXCJwYWdpbmF0aW9uXCIpO1xuICAgIGNvbnN0IHsgcGFnZUNvdW50LCBkaXNhYmxlZCwgY3VycmVudFBhZ2UsIGNoYW5nZUV2ZW50IH0gPSB1c2VQYWdpbmF0aW9uKCk7XG4gICAgY29uc3QgdXNlcklucHV0ID0gcmVmKCk7XG4gICAgY29uc3QgaW5uZXJWYWx1ZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHZhciBfYTtcbiAgICAgIHJldHVybiAoX2EgPSB1c2VySW5wdXQudmFsdWUpICE9IG51bGwgPyBfYSA6IGN1cnJlbnRQYWdlID09IG51bGwgPyB2b2lkIDAgOiBjdXJyZW50UGFnZS52YWx1ZTtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBoYW5kbGVJbnB1dCh2YWwpIHtcbiAgICAgIHVzZXJJbnB1dC52YWx1ZSA9IHZhbCA/ICt2YWwgOiBcIlwiO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UodmFsKSB7XG4gICAgICB2YWwgPSBNYXRoLnRydW5jKCt2YWwpO1xuICAgICAgY2hhbmdlRXZlbnQgPT0gbnVsbCA/IHZvaWQgMCA6IGNoYW5nZUV2ZW50KHZhbCk7XG4gICAgICB1c2VySW5wdXQudmFsdWUgPSB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiAoX2N0eCwgX2NhY2hlKSA9PiB7XG4gICAgICByZXR1cm4gb3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcInNwYW5cIiwge1xuICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYobnMpLmUoXCJqdW1wXCIpKSxcbiAgICAgICAgZGlzYWJsZWQ6IHVucmVmKGRpc2FibGVkKVxuICAgICAgfSwgW1xuICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW3VucmVmKG5zKS5lKFwiZ290b1wiKV0pXG4gICAgICAgIH0sIHRvRGlzcGxheVN0cmluZyh1bnJlZih0KShcImVsLnBhZ2luYXRpb24uZ290b1wiKSksIDMpLFxuICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihFbElucHV0KSwge1xuICAgICAgICAgIHNpemU6IF9jdHguc2l6ZSxcbiAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW3VucmVmKG5zKS5lKFwiZWRpdG9yXCIpLCB1bnJlZihucykuaXMoXCJpbi1wYWdpbmF0aW9uXCIpXSksXG4gICAgICAgICAgbWluOiAxLFxuICAgICAgICAgIG1heDogdW5yZWYocGFnZUNvdW50KSxcbiAgICAgICAgICBkaXNhYmxlZDogdW5yZWYoZGlzYWJsZWQpLFxuICAgICAgICAgIFwibW9kZWwtdmFsdWVcIjogdW5yZWYoaW5uZXJWYWx1ZSksXG4gICAgICAgICAgXCJ2YWxpZGF0ZS1ldmVudFwiOiBmYWxzZSxcbiAgICAgICAgICBsYWJlbDogdW5yZWYodCkoXCJlbC5wYWdpbmF0aW9uLnBhZ2VcIiksXG4gICAgICAgICAgdHlwZTogXCJudW1iZXJcIixcbiAgICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogaGFuZGxlSW5wdXQsXG4gICAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgICAgICB9LCBudWxsLCA4LCBbXCJzaXplXCIsIFwiY2xhc3NcIiwgXCJtYXhcIiwgXCJkaXNhYmxlZFwiLCBcIm1vZGVsLXZhbHVlXCIsIFwibGFiZWxcIl0pLFxuICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW3VucmVmKG5zKS5lKFwiY2xhc3NpZmllclwiKV0pXG4gICAgICAgIH0sIHRvRGlzcGxheVN0cmluZyh1bnJlZih0KShcImVsLnBhZ2luYXRpb24ucGFnZUNsYXNzaWZpZXJcIikpLCAzKVxuICAgICAgXSwgMTAsIF9ob2lzdGVkXzEpO1xuICAgIH07XG4gIH1cbn0pO1xudmFyIEp1bXBlciA9IC8qIEBfX1BVUkVfXyAqLyBfZXhwb3J0X3NmYyhfc2ZjX21haW4sIFtbXCJfX2ZpbGVcIiwgXCIvaG9tZS9ydW5uZXIvd29yay9lbGVtZW50LXBsdXMvZWxlbWVudC1wbHVzL3BhY2thZ2VzL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9zcmMvY29tcG9uZW50cy9qdW1wZXIudnVlXCJdXSk7XG5cbmV4cG9ydCB7IEp1bXBlciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qdW1wZXIyLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCB7IGJ1aWxkUHJvcHMgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy92dWUvcHJvcHMvcnVudGltZS5tanMnO1xuXG5jb25zdCBwYWdpbmF0aW9uVG90YWxQcm9wcyA9IGJ1aWxkUHJvcHMoe1xuICB0b3RhbDoge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZWZhdWx0OiAxZTNcbiAgfVxufSk7XG5cbmV4cG9ydCB7IHBhZ2luYXRpb25Ub3RhbFByb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b3RhbC5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIG9wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrLCBub3JtYWxpemVDbGFzcywgdW5yZWYsIHRvRGlzcGxheVN0cmluZyB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL2hvb2tzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VQYWdpbmF0aW9uIH0gZnJvbSAnLi4vdXNlUGFnaW5hdGlvbi5tanMnO1xuaW1wb3J0IHsgcGFnaW5hdGlvblRvdGFsUHJvcHMgfSBmcm9tICcuL3RvdGFsLm1qcyc7XG5pbXBvcnQgX2V4cG9ydF9zZmMgZnJvbSAnLi4vLi4vLi4vLi4vX3ZpcnR1YWwvcGx1Z2luLXZ1ZV9leHBvcnQtaGVscGVyLm1qcyc7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2UtbG9jYWxlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VOYW1lc3BhY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2UtbmFtZXNwYWNlL2luZGV4Lm1qcyc7XG5cbmNvbnN0IF9ob2lzdGVkXzEgPSBbXCJkaXNhYmxlZFwiXTtcbmNvbnN0IF9fZGVmYXVsdF9fID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJFbFBhZ2luYXRpb25Ub3RhbFwiXG59KTtcbmNvbnN0IF9zZmNfbWFpbiA9IC8qIEBfX1BVUkVfXyAqLyBkZWZpbmVDb21wb25lbnQoe1xuICAuLi5fX2RlZmF1bHRfXyxcbiAgcHJvcHM6IHBhZ2luYXRpb25Ub3RhbFByb3BzLFxuICBzZXR1cChfX3Byb3BzKSB7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VMb2NhbGUoKTtcbiAgICBjb25zdCBucyA9IHVzZU5hbWVzcGFjZShcInBhZ2luYXRpb25cIik7XG4gICAgY29uc3QgeyBkaXNhYmxlZCB9ID0gdXNlUGFnaW5hdGlvbigpO1xuICAgIHJldHVybiAoX2N0eCwgX2NhY2hlKSA9PiB7XG4gICAgICByZXR1cm4gb3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcInNwYW5cIiwge1xuICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYobnMpLmUoXCJ0b3RhbFwiKSksXG4gICAgICAgIGRpc2FibGVkOiB1bnJlZihkaXNhYmxlZClcbiAgICAgIH0sIHRvRGlzcGxheVN0cmluZyh1bnJlZih0KShcImVsLnBhZ2luYXRpb24udG90YWxcIiwge1xuICAgICAgICB0b3RhbDogX2N0eC50b3RhbFxuICAgICAgfSkpLCAxMSwgX2hvaXN0ZWRfMSk7XG4gICAgfTtcbiAgfVxufSk7XG52YXIgVG90YWwgPSAvKiBAX19QVVJFX18gKi8gX2V4cG9ydF9zZmMoX3NmY19tYWluLCBbW1wiX19maWxlXCIsIFwiL2hvbWUvcnVubmVyL3dvcmsvZWxlbWVudC1wbHVzL2VsZW1lbnQtcGx1cy9wYWNrYWdlcy9jb21wb25lbnRzL3BhZ2luYXRpb24vc3JjL2NvbXBvbmVudHMvdG90YWwudnVlXCJdXSk7XG5cbmV4cG9ydCB7IFRvdGFsIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvdGFsMi5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBidWlsZFByb3BzIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdnVlL3Byb3BzL3J1bnRpbWUubWpzJztcblxuY29uc3QgcGFnaW5hdGlvblBhZ2VyUHJvcHMgPSBidWlsZFByb3BzKHtcbiAgY3VycmVudFBhZ2U6IHtcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgZGVmYXVsdDogMVxuICB9LFxuICBwYWdlQ291bnQ6IHtcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgcmVxdWlyZWQ6IHRydWVcbiAgfSxcbiAgcGFnZXJDb3VudDoge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZWZhdWx0OiA3XG4gIH0sXG4gIGRpc2FibGVkOiBCb29sZWFuXG59KTtcblxuZXhwb3J0IHsgcGFnaW5hdGlvblBhZ2VyUHJvcHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VyLm1qcy5tYXBcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgcmVmLCBjb21wdXRlZCwgd2F0Y2hFZmZlY3QsIG9wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrLCBub3JtYWxpemVDbGFzcywgdW5yZWYsIHdpdGhLZXlzLCBjcmVhdGVDb21tZW50Vk5vZGUsIGNyZWF0ZUJsb2NrLCBGcmFnbWVudCwgcmVuZGVyTGlzdCwgdG9EaXNwbGF5U3RyaW5nIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IERBcnJvd0xlZnQsIE1vcmVGaWxsZWQsIERBcnJvd1JpZ2h0IH0gZnJvbSAnQGVsZW1lbnQtcGx1cy9pY29ucy12dWUnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi9ob29rcy9pbmRleC5tanMnO1xuaW1wb3J0IHsgcGFnaW5hdGlvblBhZ2VyUHJvcHMgfSBmcm9tICcuL3BhZ2VyLm1qcyc7XG5pbXBvcnQgX2V4cG9ydF9zZmMgZnJvbSAnLi4vLi4vLi4vLi4vX3ZpcnR1YWwvcGx1Z2luLXZ1ZV9leHBvcnQtaGVscGVyLm1qcyc7XG5pbXBvcnQgeyB1c2VOYW1lc3BhY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2UtbmFtZXNwYWNlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2UtbG9jYWxlL2luZGV4Lm1qcyc7XG5cbmNvbnN0IF9ob2lzdGVkXzEgPSBbXCJvbktleXVwXCJdO1xuY29uc3QgX2hvaXN0ZWRfMiA9IFtcImFyaWEtY3VycmVudFwiLCBcImFyaWEtbGFiZWxcIiwgXCJ0YWJpbmRleFwiXTtcbmNvbnN0IF9ob2lzdGVkXzMgPSBbXCJ0YWJpbmRleFwiLCBcImFyaWEtbGFiZWxcIl07XG5jb25zdCBfaG9pc3RlZF80ID0gW1wiYXJpYS1jdXJyZW50XCIsIFwiYXJpYS1sYWJlbFwiLCBcInRhYmluZGV4XCJdO1xuY29uc3QgX2hvaXN0ZWRfNSA9IFtcInRhYmluZGV4XCIsIFwiYXJpYS1sYWJlbFwiXTtcbmNvbnN0IF9ob2lzdGVkXzYgPSBbXCJhcmlhLWN1cnJlbnRcIiwgXCJhcmlhLWxhYmVsXCIsIFwidGFiaW5kZXhcIl07XG5jb25zdCBfX2RlZmF1bHRfXyA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRWxQYWdpbmF0aW9uUGFnZXJcIlxufSk7XG5jb25zdCBfc2ZjX21haW4gPSAvKiBAX19QVVJFX18gKi8gZGVmaW5lQ29tcG9uZW50KHtcbiAgLi4uX19kZWZhdWx0X18sXG4gIHByb3BzOiBwYWdpbmF0aW9uUGFnZXJQcm9wcyxcbiAgZW1pdHM6IFtcImNoYW5nZVwiXSxcbiAgc2V0dXAoX19wcm9wcywgeyBlbWl0IH0pIHtcbiAgICBjb25zdCBwcm9wcyA9IF9fcHJvcHM7XG4gICAgY29uc3QgbnNQYWdlciA9IHVzZU5hbWVzcGFjZShcInBhZ2VyXCIpO1xuICAgIGNvbnN0IG5zSWNvbiA9IHVzZU5hbWVzcGFjZShcImljb25cIik7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VMb2NhbGUoKTtcbiAgICBjb25zdCBzaG93UHJldk1vcmUgPSByZWYoZmFsc2UpO1xuICAgIGNvbnN0IHNob3dOZXh0TW9yZSA9IHJlZihmYWxzZSk7XG4gICAgY29uc3QgcXVpY2tQcmV2SG92ZXIgPSByZWYoZmFsc2UpO1xuICAgIGNvbnN0IHF1aWNrTmV4dEhvdmVyID0gcmVmKGZhbHNlKTtcbiAgICBjb25zdCBxdWlja1ByZXZGb2N1cyA9IHJlZihmYWxzZSk7XG4gICAgY29uc3QgcXVpY2tOZXh0Rm9jdXMgPSByZWYoZmFsc2UpO1xuICAgIGNvbnN0IHBhZ2VycyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IHBhZ2VyQ291bnQgPSBwcm9wcy5wYWdlckNvdW50O1xuICAgICAgY29uc3QgaGFsZlBhZ2VyQ291bnQgPSAocGFnZXJDb3VudCAtIDEpIC8gMjtcbiAgICAgIGNvbnN0IGN1cnJlbnRQYWdlID0gTnVtYmVyKHByb3BzLmN1cnJlbnRQYWdlKTtcbiAgICAgIGNvbnN0IHBhZ2VDb3VudCA9IE51bWJlcihwcm9wcy5wYWdlQ291bnQpO1xuICAgICAgbGV0IHNob3dQcmV2TW9yZTIgPSBmYWxzZTtcbiAgICAgIGxldCBzaG93TmV4dE1vcmUyID0gZmFsc2U7XG4gICAgICBpZiAocGFnZUNvdW50ID4gcGFnZXJDb3VudCkge1xuICAgICAgICBpZiAoY3VycmVudFBhZ2UgPiBwYWdlckNvdW50IC0gaGFsZlBhZ2VyQ291bnQpIHtcbiAgICAgICAgICBzaG93UHJldk1vcmUyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudFBhZ2UgPCBwYWdlQ291bnQgLSBoYWxmUGFnZXJDb3VudCkge1xuICAgICAgICAgIHNob3dOZXh0TW9yZTIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgICAgaWYgKHNob3dQcmV2TW9yZTIgJiYgIXNob3dOZXh0TW9yZTIpIHtcbiAgICAgICAgY29uc3Qgc3RhcnRQYWdlID0gcGFnZUNvdW50IC0gKHBhZ2VyQ291bnQgLSAyKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0UGFnZTsgaSA8IHBhZ2VDb3VudDsgaSsrKSB7XG4gICAgICAgICAgYXJyYXkucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghc2hvd1ByZXZNb3JlMiAmJiBzaG93TmV4dE1vcmUyKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAyOyBpIDwgcGFnZXJDb3VudDsgaSsrKSB7XG4gICAgICAgICAgYXJyYXkucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzaG93UHJldk1vcmUyICYmIHNob3dOZXh0TW9yZTIpIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gTWF0aC5mbG9vcihwYWdlckNvdW50IC8gMikgLSAxO1xuICAgICAgICBmb3IgKGxldCBpID0gY3VycmVudFBhZ2UgLSBvZmZzZXQ7IGkgPD0gY3VycmVudFBhZ2UgKyBvZmZzZXQ7IGkrKykge1xuICAgICAgICAgIGFycmF5LnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAyOyBpIDwgcGFnZUNvdW50OyBpKyspIHtcbiAgICAgICAgICBhcnJheS5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfSk7XG4gICAgY29uc3QgdGFiaW5kZXggPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5kaXNhYmxlZCA/IC0xIDogMCk7XG4gICAgd2F0Y2hFZmZlY3QoKCkgPT4ge1xuICAgICAgY29uc3QgaGFsZlBhZ2VyQ291bnQgPSAocHJvcHMucGFnZXJDb3VudCAtIDEpIC8gMjtcbiAgICAgIHNob3dQcmV2TW9yZS52YWx1ZSA9IGZhbHNlO1xuICAgICAgc2hvd05leHRNb3JlLnZhbHVlID0gZmFsc2U7XG4gICAgICBpZiAocHJvcHMucGFnZUNvdW50ID4gcHJvcHMucGFnZXJDb3VudCkge1xuICAgICAgICBpZiAocHJvcHMuY3VycmVudFBhZ2UgPiBwcm9wcy5wYWdlckNvdW50IC0gaGFsZlBhZ2VyQ291bnQpIHtcbiAgICAgICAgICBzaG93UHJldk1vcmUudmFsdWUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wcy5jdXJyZW50UGFnZSA8IHByb3BzLnBhZ2VDb3VudCAtIGhhbGZQYWdlckNvdW50KSB7XG4gICAgICAgICAgc2hvd05leHRNb3JlLnZhbHVlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIG9uTW91c2VFbnRlcihmb3J3YXJkID0gZmFsc2UpIHtcbiAgICAgIGlmIChwcm9wcy5kaXNhYmxlZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKGZvcndhcmQpIHtcbiAgICAgICAgcXVpY2tQcmV2SG92ZXIudmFsdWUgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcXVpY2tOZXh0SG92ZXIudmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbkZvY3VzKGZvcndhcmQgPSBmYWxzZSkge1xuICAgICAgaWYgKGZvcndhcmQpIHtcbiAgICAgICAgcXVpY2tQcmV2Rm9jdXMudmFsdWUgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcXVpY2tOZXh0Rm9jdXMudmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbkVudGVyKGUpIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgaWYgKHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwibGlcIiAmJiBBcnJheS5mcm9tKHRhcmdldC5jbGFzc0xpc3QpLmluY2x1ZGVzKFwibnVtYmVyXCIpKSB7XG4gICAgICAgIGNvbnN0IG5ld1BhZ2UgPSBOdW1iZXIodGFyZ2V0LnRleHRDb250ZW50KTtcbiAgICAgICAgaWYgKG5ld1BhZ2UgIT09IHByb3BzLmN1cnJlbnRQYWdlKSB7XG4gICAgICAgICAgZW1pdChcImNoYW5nZVwiLCBuZXdQYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImxpXCIgJiYgQXJyYXkuZnJvbSh0YXJnZXQuY2xhc3NMaXN0KS5pbmNsdWRlcyhcIm1vcmVcIikpIHtcbiAgICAgICAgb25QYWdlckNsaWNrKGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvblBhZ2VyQ2xpY2soZXZlbnQpIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgIGlmICh0YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInVsXCIgfHwgcHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGV0IG5ld1BhZ2UgPSBOdW1iZXIodGFyZ2V0LnRleHRDb250ZW50KTtcbiAgICAgIGNvbnN0IHBhZ2VDb3VudCA9IHByb3BzLnBhZ2VDb3VudDtcbiAgICAgIGNvbnN0IGN1cnJlbnRQYWdlID0gcHJvcHMuY3VycmVudFBhZ2U7XG4gICAgICBjb25zdCBwYWdlckNvdW50T2Zmc2V0ID0gcHJvcHMucGFnZXJDb3VudCAtIDI7XG4gICAgICBpZiAodGFyZ2V0LmNsYXNzTmFtZS5pbmNsdWRlcyhcIm1vcmVcIikpIHtcbiAgICAgICAgaWYgKHRhcmdldC5jbGFzc05hbWUuaW5jbHVkZXMoXCJxdWlja3ByZXZcIikpIHtcbiAgICAgICAgICBuZXdQYWdlID0gY3VycmVudFBhZ2UgLSBwYWdlckNvdW50T2Zmc2V0O1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldC5jbGFzc05hbWUuaW5jbHVkZXMoXCJxdWlja25leHRcIikpIHtcbiAgICAgICAgICBuZXdQYWdlID0gY3VycmVudFBhZ2UgKyBwYWdlckNvdW50T2Zmc2V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIU51bWJlci5pc05hTigrbmV3UGFnZSkpIHtcbiAgICAgICAgaWYgKG5ld1BhZ2UgPCAxKSB7XG4gICAgICAgICAgbmV3UGFnZSA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld1BhZ2UgPiBwYWdlQ291bnQpIHtcbiAgICAgICAgICBuZXdQYWdlID0gcGFnZUNvdW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobmV3UGFnZSAhPT0gY3VycmVudFBhZ2UpIHtcbiAgICAgICAgZW1pdChcImNoYW5nZVwiLCBuZXdQYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChfY3R4LCBfY2FjaGUpID0+IHtcbiAgICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwidWxcIiwge1xuICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYobnNQYWdlcikuYigpKSxcbiAgICAgICAgb25DbGljazogb25QYWdlckNsaWNrLFxuICAgICAgICBvbktleXVwOiB3aXRoS2V5cyhvbkVudGVyLCBbXCJlbnRlclwiXSlcbiAgICAgIH0sIFtcbiAgICAgICAgX2N0eC5wYWdlQ291bnQgPiAwID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJsaVwiLCB7XG4gICAgICAgICAga2V5OiAwLFxuICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbW1xuICAgICAgICAgICAgdW5yZWYobnNQYWdlcikuaXMoXCJhY3RpdmVcIiwgX2N0eC5jdXJyZW50UGFnZSA9PT0gMSksXG4gICAgICAgICAgICB1bnJlZihuc1BhZ2VyKS5pcyhcImRpc2FibGVkXCIsIF9jdHguZGlzYWJsZWQpXG4gICAgICAgICAgXSwgXCJudW1iZXJcIl0pLFxuICAgICAgICAgIFwiYXJpYS1jdXJyZW50XCI6IF9jdHguY3VycmVudFBhZ2UgPT09IDEsXG4gICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IHVucmVmKHQpKFwiZWwucGFnaW5hdGlvbi5jdXJyZW50UGFnZVwiLCB7IHBhZ2VyOiAxIH0pLFxuICAgICAgICAgIHRhYmluZGV4OiB1bnJlZih0YWJpbmRleClcbiAgICAgICAgfSwgXCIgMSBcIiwgMTAsIF9ob2lzdGVkXzIpKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSksXG4gICAgICAgIHNob3dQcmV2TW9yZS52YWx1ZSA/IChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwibGlcIiwge1xuICAgICAgICAgIGtleTogMSxcbiAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW1xuICAgICAgICAgICAgXCJtb3JlXCIsXG4gICAgICAgICAgICBcImJ0bi1xdWlja3ByZXZcIixcbiAgICAgICAgICAgIHVucmVmKG5zSWNvbikuYigpLFxuICAgICAgICAgICAgdW5yZWYobnNQYWdlcikuaXMoXCJkaXNhYmxlZFwiLCBfY3R4LmRpc2FibGVkKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIHRhYmluZGV4OiB1bnJlZih0YWJpbmRleCksXG4gICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IHVucmVmKHQpKFwiZWwucGFnaW5hdGlvbi5wcmV2UGFnZXNcIiwgeyBwYWdlcjogX2N0eC5wYWdlckNvdW50IC0gMiB9KSxcbiAgICAgICAgICBvbk1vdXNlZW50ZXI6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gKCRldmVudCkgPT4gb25Nb3VzZUVudGVyKHRydWUpKSxcbiAgICAgICAgICBvbk1vdXNlbGVhdmU6IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gKCRldmVudCkgPT4gcXVpY2tQcmV2SG92ZXIudmFsdWUgPSBmYWxzZSksXG4gICAgICAgICAgb25Gb2N1czogX2NhY2hlWzJdIHx8IChfY2FjaGVbMl0gPSAoJGV2ZW50KSA9PiBvbkZvY3VzKHRydWUpKSxcbiAgICAgICAgICBvbkJsdXI6IF9jYWNoZVszXSB8fCAoX2NhY2hlWzNdID0gKCRldmVudCkgPT4gcXVpY2tQcmV2Rm9jdXMudmFsdWUgPSBmYWxzZSlcbiAgICAgICAgfSwgW1xuICAgICAgICAgIChxdWlja1ByZXZIb3Zlci52YWx1ZSB8fCBxdWlja1ByZXZGb2N1cy52YWx1ZSkgJiYgIV9jdHguZGlzYWJsZWQgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKHVucmVmKERBcnJvd0xlZnQpLCB7IGtleTogMCB9KSkgOiAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKHVucmVmKE1vcmVGaWxsZWQpLCB7IGtleTogMSB9KSlcbiAgICAgICAgXSwgNDIsIF9ob2lzdGVkXzMpKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSksXG4gICAgICAgIChvcGVuQmxvY2sodHJ1ZSksIGNyZWF0ZUVsZW1lbnRCbG9jayhGcmFnbWVudCwgbnVsbCwgcmVuZGVyTGlzdCh1bnJlZihwYWdlcnMpLCAocGFnZXIpID0+IHtcbiAgICAgICAgICByZXR1cm4gb3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImxpXCIsIHtcbiAgICAgICAgICAgIGtleTogcGFnZXIsXG4gICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW1tcbiAgICAgICAgICAgICAgdW5yZWYobnNQYWdlcikuaXMoXCJhY3RpdmVcIiwgX2N0eC5jdXJyZW50UGFnZSA9PT0gcGFnZXIpLFxuICAgICAgICAgICAgICB1bnJlZihuc1BhZ2VyKS5pcyhcImRpc2FibGVkXCIsIF9jdHguZGlzYWJsZWQpXG4gICAgICAgICAgICBdLCBcIm51bWJlclwiXSksXG4gICAgICAgICAgICBcImFyaWEtY3VycmVudFwiOiBfY3R4LmN1cnJlbnRQYWdlID09PSBwYWdlcixcbiAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiB1bnJlZih0KShcImVsLnBhZ2luYXRpb24uY3VycmVudFBhZ2VcIiwgeyBwYWdlciB9KSxcbiAgICAgICAgICAgIHRhYmluZGV4OiB1bnJlZih0YWJpbmRleClcbiAgICAgICAgICB9LCB0b0Rpc3BsYXlTdHJpbmcocGFnZXIpLCAxMSwgX2hvaXN0ZWRfNCk7XG4gICAgICAgIH0pLCAxMjgpKSxcbiAgICAgICAgc2hvd05leHRNb3JlLnZhbHVlID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJsaVwiLCB7XG4gICAgICAgICAga2V5OiAyLFxuICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbXG4gICAgICAgICAgICBcIm1vcmVcIixcbiAgICAgICAgICAgIFwiYnRuLXF1aWNrbmV4dFwiLFxuICAgICAgICAgICAgdW5yZWYobnNJY29uKS5iKCksXG4gICAgICAgICAgICB1bnJlZihuc1BhZ2VyKS5pcyhcImRpc2FibGVkXCIsIF9jdHguZGlzYWJsZWQpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgdGFiaW5kZXg6IHVucmVmKHRhYmluZGV4KSxcbiAgICAgICAgICBcImFyaWEtbGFiZWxcIjogdW5yZWYodCkoXCJlbC5wYWdpbmF0aW9uLm5leHRQYWdlc1wiLCB7IHBhZ2VyOiBfY3R4LnBhZ2VyQ291bnQgLSAyIH0pLFxuICAgICAgICAgIG9uTW91c2VlbnRlcjogX2NhY2hlWzRdIHx8IChfY2FjaGVbNF0gPSAoJGV2ZW50KSA9PiBvbk1vdXNlRW50ZXIoKSksXG4gICAgICAgICAgb25Nb3VzZWxlYXZlOiBfY2FjaGVbNV0gfHwgKF9jYWNoZVs1XSA9ICgkZXZlbnQpID0+IHF1aWNrTmV4dEhvdmVyLnZhbHVlID0gZmFsc2UpLFxuICAgICAgICAgIG9uRm9jdXM6IF9jYWNoZVs2XSB8fCAoX2NhY2hlWzZdID0gKCRldmVudCkgPT4gb25Gb2N1cygpKSxcbiAgICAgICAgICBvbkJsdXI6IF9jYWNoZVs3XSB8fCAoX2NhY2hlWzddID0gKCRldmVudCkgPT4gcXVpY2tOZXh0Rm9jdXMudmFsdWUgPSBmYWxzZSlcbiAgICAgICAgfSwgW1xuICAgICAgICAgIChxdWlja05leHRIb3Zlci52YWx1ZSB8fCBxdWlja05leHRGb2N1cy52YWx1ZSkgJiYgIV9jdHguZGlzYWJsZWQgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKHVucmVmKERBcnJvd1JpZ2h0KSwgeyBrZXk6IDAgfSkpIDogKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayh1bnJlZihNb3JlRmlsbGVkKSwgeyBrZXk6IDEgfSkpXG4gICAgICAgIF0sIDQyLCBfaG9pc3RlZF81KSkgOiBjcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpLFxuICAgICAgICBfY3R4LnBhZ2VDb3VudCA+IDEgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImxpXCIsIHtcbiAgICAgICAgICBrZXk6IDMsXG4gICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFtbXG4gICAgICAgICAgICB1bnJlZihuc1BhZ2VyKS5pcyhcImFjdGl2ZVwiLCBfY3R4LmN1cnJlbnRQYWdlID09PSBfY3R4LnBhZ2VDb3VudCksXG4gICAgICAgICAgICB1bnJlZihuc1BhZ2VyKS5pcyhcImRpc2FibGVkXCIsIF9jdHguZGlzYWJsZWQpXG4gICAgICAgICAgXSwgXCJudW1iZXJcIl0pLFxuICAgICAgICAgIFwiYXJpYS1jdXJyZW50XCI6IF9jdHguY3VycmVudFBhZ2UgPT09IF9jdHgucGFnZUNvdW50LFxuICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiB1bnJlZih0KShcImVsLnBhZ2luYXRpb24uY3VycmVudFBhZ2VcIiwgeyBwYWdlcjogX2N0eC5wYWdlQ291bnQgfSksXG4gICAgICAgICAgdGFiaW5kZXg6IHVucmVmKHRhYmluZGV4KVxuICAgICAgICB9LCB0b0Rpc3BsYXlTdHJpbmcoX2N0eC5wYWdlQ291bnQpLCAxMSwgX2hvaXN0ZWRfNikpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKVxuICAgICAgXSwgNDIsIF9ob2lzdGVkXzEpO1xuICAgIH07XG4gIH1cbn0pO1xudmFyIFBhZ2VyID0gLyogQF9fUFVSRV9fICovIF9leHBvcnRfc2ZjKF9zZmNfbWFpbiwgW1tcIl9fZmlsZVwiLCBcIi9ob21lL3J1bm5lci93b3JrL2VsZW1lbnQtcGx1cy9lbGVtZW50LXBsdXMvcGFja2FnZXMvY29tcG9uZW50cy9wYWdpbmF0aW9uL3NyYy9jb21wb25lbnRzL3BhZ2VyLnZ1ZVwiXV0pO1xuXG5leHBvcnQgeyBQYWdlciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcjIubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBnZXRDdXJyZW50SW5zdGFuY2UsIGNvbXB1dGVkLCByZWYsIHdhdGNoLCBwcm92aWRlLCBoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IEFycm93TGVmdCwgQXJyb3dSaWdodCB9IGZyb20gJ0BlbGVtZW50LXBsdXMvaWNvbnMtdnVlJztcbmltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCB7IGVsUGFnaW5hdGlvbktleSB9IGZyb20gJy4vY29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgUHJldiBmcm9tICcuL2NvbXBvbmVudHMvcHJldjIubWpzJztcbmltcG9ydCBOZXh0IGZyb20gJy4vY29tcG9uZW50cy9uZXh0Mi5tanMnO1xuaW1wb3J0IFNpemVzIGZyb20gJy4vY29tcG9uZW50cy9zaXplczIubWpzJztcbmltcG9ydCBKdW1wZXIgZnJvbSAnLi9jb21wb25lbnRzL2p1bXBlcjIubWpzJztcbmltcG9ydCBUb3RhbCBmcm9tICcuL2NvbXBvbmVudHMvdG90YWwyLm1qcyc7XG5pbXBvcnQgUGFnZXIgZnJvbSAnLi9jb21wb25lbnRzL3BhZ2VyMi5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9wcywgZGVmaW5lUHJvcFR5cGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy92dWUvcHJvcHMvcnVudGltZS5tanMnO1xuaW1wb3J0IHsgaXNOdW1iZXIgfSBmcm9tICdAdnVldXNlL2NvcmUnO1xuaW1wb3J0IHsgbXV0YWJsZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3R5cGVzY3JpcHQubWpzJztcbmltcG9ydCB7IGljb25Qcm9wVHlwZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3Z1ZS9pY29uLm1qcyc7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2UtbG9jYWxlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VOYW1lc3BhY2UgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2UtbmFtZXNwYWNlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBkZWJ1Z1dhcm4gfSBmcm9tICcuLi8uLi8uLi91dGlscy9lcnJvci5tanMnO1xuXG5jb25zdCBpc0Fic2VudCA9ICh2KSA9PiB0eXBlb2YgdiAhPT0gXCJudW1iZXJcIjtcbmNvbnN0IHBhZ2luYXRpb25Qcm9wcyA9IGJ1aWxkUHJvcHMoe1xuICB0b3RhbDogTnVtYmVyLFxuICBwYWdlU2l6ZTogTnVtYmVyLFxuICBkZWZhdWx0UGFnZVNpemU6IE51bWJlcixcbiAgY3VycmVudFBhZ2U6IE51bWJlcixcbiAgZGVmYXVsdEN1cnJlbnRQYWdlOiBOdW1iZXIsXG4gIHBhZ2VDb3VudDogTnVtYmVyLFxuICBwYWdlckNvdW50OiB7XG4gICAgdHlwZTogTnVtYmVyLFxuICAgIHZhbGlkYXRvcjogKHZhbHVlKSA9PiB7XG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIE1hdGgudHJ1bmModmFsdWUpID09PSB2YWx1ZSAmJiB2YWx1ZSA+IDQgJiYgdmFsdWUgPCAyMiAmJiB2YWx1ZSAlIDIgPT09IDE7XG4gICAgfSxcbiAgICBkZWZhdWx0OiA3XG4gIH0sXG4gIGxheW91dDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiBbXCJwcmV2XCIsIFwicGFnZXJcIiwgXCJuZXh0XCIsIFwianVtcGVyXCIsIFwiLT5cIiwgXCJ0b3RhbFwiXS5qb2luKFwiLCBcIilcbiAgfSxcbiAgcGFnZVNpemVzOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoQXJyYXkpLFxuICAgIGRlZmF1bHQ6ICgpID0+IG11dGFibGUoWzEwLCAyMCwgMzAsIDQwLCA1MCwgMTAwXSlcbiAgfSxcbiAgcG9wcGVyQ2xhc3M6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogXCJcIlxuICB9LFxuICBwcmV2VGV4dDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiBcIlwiXG4gIH0sXG4gIHByZXZJY29uOiB7XG4gICAgdHlwZTogaWNvblByb3BUeXBlLFxuICAgIGRlZmF1bHQ6ICgpID0+IEFycm93TGVmdFxuICB9LFxuICBuZXh0VGV4dDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiBcIlwiXG4gIH0sXG4gIG5leHRJY29uOiB7XG4gICAgdHlwZTogaWNvblByb3BUeXBlLFxuICAgIGRlZmF1bHQ6ICgpID0+IEFycm93UmlnaHRcbiAgfSxcbiAgc21hbGw6IEJvb2xlYW4sXG4gIGJhY2tncm91bmQ6IEJvb2xlYW4sXG4gIGRpc2FibGVkOiBCb29sZWFuLFxuICBoaWRlT25TaW5nbGVQYWdlOiBCb29sZWFuXG59KTtcbmNvbnN0IHBhZ2luYXRpb25FbWl0cyA9IHtcbiAgXCJ1cGRhdGU6Y3VycmVudC1wYWdlXCI6ICh2YWwpID0+IGlzTnVtYmVyKHZhbCksXG4gIFwidXBkYXRlOnBhZ2Utc2l6ZVwiOiAodmFsKSA9PiBpc051bWJlcih2YWwpLFxuICBcInNpemUtY2hhbmdlXCI6ICh2YWwpID0+IGlzTnVtYmVyKHZhbCksXG4gIFwiY3VycmVudC1jaGFuZ2VcIjogKHZhbCkgPT4gaXNOdW1iZXIodmFsKSxcbiAgXCJwcmV2LWNsaWNrXCI6ICh2YWwpID0+IGlzTnVtYmVyKHZhbCksXG4gIFwibmV4dC1jbGlja1wiOiAodmFsKSA9PiBpc051bWJlcih2YWwpXG59O1xuY29uc3QgY29tcG9uZW50TmFtZSA9IFwiRWxQYWdpbmF0aW9uXCI7XG52YXIgUGFnaW5hdGlvbiA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IGNvbXBvbmVudE5hbWUsXG4gIHByb3BzOiBwYWdpbmF0aW9uUHJvcHMsXG4gIGVtaXRzOiBwYWdpbmF0aW9uRW1pdHMsXG4gIHNldHVwKHByb3BzLCB7IGVtaXQsIHNsb3RzIH0pIHtcbiAgICBjb25zdCB7IHQgfSA9IHVzZUxvY2FsZSgpO1xuICAgIGNvbnN0IG5zID0gdXNlTmFtZXNwYWNlKFwicGFnaW5hdGlvblwiKTtcbiAgICBjb25zdCB2bm9kZVByb3BzID0gZ2V0Q3VycmVudEluc3RhbmNlKCkudm5vZGUucHJvcHMgfHwge307XG4gICAgY29uc3QgaGFzQ3VycmVudFBhZ2VMaXN0ZW5lciA9IFwib25VcGRhdGU6Y3VycmVudFBhZ2VcIiBpbiB2bm9kZVByb3BzIHx8IFwib25VcGRhdGU6Y3VycmVudC1wYWdlXCIgaW4gdm5vZGVQcm9wcyB8fCBcIm9uQ3VycmVudENoYW5nZVwiIGluIHZub2RlUHJvcHM7XG4gICAgY29uc3QgaGFzUGFnZVNpemVMaXN0ZW5lciA9IFwib25VcGRhdGU6cGFnZVNpemVcIiBpbiB2bm9kZVByb3BzIHx8IFwib25VcGRhdGU6cGFnZS1zaXplXCIgaW4gdm5vZGVQcm9wcyB8fCBcIm9uU2l6ZUNoYW5nZVwiIGluIHZub2RlUHJvcHM7XG4gICAgY29uc3QgYXNzZXJ0VmFsaWRVc2FnZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmIChpc0Fic2VudChwcm9wcy50b3RhbCkgJiYgaXNBYnNlbnQocHJvcHMucGFnZUNvdW50KSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKCFpc0Fic2VudChwcm9wcy5jdXJyZW50UGFnZSkgJiYgIWhhc0N1cnJlbnRQYWdlTGlzdGVuZXIpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIGlmIChwcm9wcy5sYXlvdXQuaW5jbHVkZXMoXCJzaXplc1wiKSkge1xuICAgICAgICBpZiAoIWlzQWJzZW50KHByb3BzLnBhZ2VDb3VudCkpIHtcbiAgICAgICAgICBpZiAoIWhhc1BhZ2VTaXplTGlzdGVuZXIpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzQWJzZW50KHByb3BzLnRvdGFsKSkge1xuICAgICAgICAgIGlmICghaXNBYnNlbnQocHJvcHMucGFnZVNpemUpKSB7XG4gICAgICAgICAgICBpZiAoIWhhc1BhZ2VTaXplTGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICBjb25zdCBpbm5lclBhZ2VTaXplID0gcmVmKGlzQWJzZW50KHByb3BzLmRlZmF1bHRQYWdlU2l6ZSkgPyAxMCA6IHByb3BzLmRlZmF1bHRQYWdlU2l6ZSk7XG4gICAgY29uc3QgaW5uZXJDdXJyZW50UGFnZSA9IHJlZihpc0Fic2VudChwcm9wcy5kZWZhdWx0Q3VycmVudFBhZ2UpID8gMSA6IHByb3BzLmRlZmF1bHRDdXJyZW50UGFnZSk7XG4gICAgY29uc3QgcGFnZVNpemVCcmlkZ2UgPSBjb21wdXRlZCh7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiBpc0Fic2VudChwcm9wcy5wYWdlU2l6ZSkgPyBpbm5lclBhZ2VTaXplLnZhbHVlIDogcHJvcHMucGFnZVNpemU7XG4gICAgICB9LFxuICAgICAgc2V0KHYpIHtcbiAgICAgICAgaWYgKGlzQWJzZW50KHByb3BzLnBhZ2VTaXplKSkge1xuICAgICAgICAgIGlubmVyUGFnZVNpemUudmFsdWUgPSB2O1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNQYWdlU2l6ZUxpc3RlbmVyKSB7XG4gICAgICAgICAgZW1pdChcInVwZGF0ZTpwYWdlLXNpemVcIiwgdik7XG4gICAgICAgICAgZW1pdChcInNpemUtY2hhbmdlXCIsIHYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgcGFnZUNvdW50QnJpZGdlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgbGV0IHBhZ2VDb3VudCA9IDA7XG4gICAgICBpZiAoIWlzQWJzZW50KHByb3BzLnBhZ2VDb3VudCkpIHtcbiAgICAgICAgcGFnZUNvdW50ID0gcHJvcHMucGFnZUNvdW50O1xuICAgICAgfSBlbHNlIGlmICghaXNBYnNlbnQocHJvcHMudG90YWwpKSB7XG4gICAgICAgIHBhZ2VDb3VudCA9IE1hdGgubWF4KDEsIE1hdGguY2VpbChwcm9wcy50b3RhbCAvIHBhZ2VTaXplQnJpZGdlLnZhbHVlKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFnZUNvdW50O1xuICAgIH0pO1xuICAgIGNvbnN0IGN1cnJlbnRQYWdlQnJpZGdlID0gY29tcHV0ZWQoe1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gaXNBYnNlbnQocHJvcHMuY3VycmVudFBhZ2UpID8gaW5uZXJDdXJyZW50UGFnZS52YWx1ZSA6IHByb3BzLmN1cnJlbnRQYWdlO1xuICAgICAgfSxcbiAgICAgIHNldCh2KSB7XG4gICAgICAgIGxldCBuZXdDdXJyZW50UGFnZSA9IHY7XG4gICAgICAgIGlmICh2IDwgMSkge1xuICAgICAgICAgIG5ld0N1cnJlbnRQYWdlID0gMTtcbiAgICAgICAgfSBlbHNlIGlmICh2ID4gcGFnZUNvdW50QnJpZGdlLnZhbHVlKSB7XG4gICAgICAgICAgbmV3Q3VycmVudFBhZ2UgPSBwYWdlQ291bnRCcmlkZ2UudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQWJzZW50KHByb3BzLmN1cnJlbnRQYWdlKSkge1xuICAgICAgICAgIGlubmVyQ3VycmVudFBhZ2UudmFsdWUgPSBuZXdDdXJyZW50UGFnZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzQ3VycmVudFBhZ2VMaXN0ZW5lcikge1xuICAgICAgICAgIGVtaXQoXCJ1cGRhdGU6Y3VycmVudC1wYWdlXCIsIG5ld0N1cnJlbnRQYWdlKTtcbiAgICAgICAgICBlbWl0KFwiY3VycmVudC1jaGFuZ2VcIiwgbmV3Q3VycmVudFBhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgd2F0Y2gocGFnZUNvdW50QnJpZGdlLCAodmFsKSA9PiB7XG4gICAgICBpZiAoY3VycmVudFBhZ2VCcmlkZ2UudmFsdWUgPiB2YWwpXG4gICAgICAgIGN1cnJlbnRQYWdlQnJpZGdlLnZhbHVlID0gdmFsO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGhhbmRsZUN1cnJlbnRDaGFuZ2UodmFsKSB7XG4gICAgICBjdXJyZW50UGFnZUJyaWRnZS52YWx1ZSA9IHZhbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlU2l6ZUNoYW5nZSh2YWwpIHtcbiAgICAgIHBhZ2VTaXplQnJpZGdlLnZhbHVlID0gdmFsO1xuICAgICAgY29uc3QgbmV3UGFnZUNvdW50ID0gcGFnZUNvdW50QnJpZGdlLnZhbHVlO1xuICAgICAgaWYgKGN1cnJlbnRQYWdlQnJpZGdlLnZhbHVlID4gbmV3UGFnZUNvdW50KSB7XG4gICAgICAgIGN1cnJlbnRQYWdlQnJpZGdlLnZhbHVlID0gbmV3UGFnZUNvdW50O1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBwcmV2KCkge1xuICAgICAgaWYgKHByb3BzLmRpc2FibGVkKVxuICAgICAgICByZXR1cm47XG4gICAgICBjdXJyZW50UGFnZUJyaWRnZS52YWx1ZSAtPSAxO1xuICAgICAgZW1pdChcInByZXYtY2xpY2tcIiwgY3VycmVudFBhZ2VCcmlkZ2UudmFsdWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgaWYgKHByb3BzLmRpc2FibGVkKVxuICAgICAgICByZXR1cm47XG4gICAgICBjdXJyZW50UGFnZUJyaWRnZS52YWx1ZSArPSAxO1xuICAgICAgZW1pdChcIm5leHQtY2xpY2tcIiwgY3VycmVudFBhZ2VCcmlkZ2UudmFsdWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50LCBjbHMpIHtcbiAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIGlmICghZWxlbWVudC5wcm9wcykge1xuICAgICAgICAgIGVsZW1lbnQucHJvcHMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50LnByb3BzLmNsYXNzID0gW2VsZW1lbnQucHJvcHMuY2xhc3MsIGNsc10uam9pbihcIiBcIik7XG4gICAgICB9XG4gICAgfVxuICAgIHByb3ZpZGUoZWxQYWdpbmF0aW9uS2V5LCB7XG4gICAgICBwYWdlQ291bnQ6IHBhZ2VDb3VudEJyaWRnZSxcbiAgICAgIGRpc2FibGVkOiBjb21wdXRlZCgoKSA9PiBwcm9wcy5kaXNhYmxlZCksXG4gICAgICBjdXJyZW50UGFnZTogY3VycmVudFBhZ2VCcmlkZ2UsXG4gICAgICBjaGFuZ2VFdmVudDogaGFuZGxlQ3VycmVudENoYW5nZSxcbiAgICAgIGhhbmRsZVNpemVDaGFuZ2VcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdmFyIF9hLCBfYjtcbiAgICAgIGlmICghYXNzZXJ0VmFsaWRVc2FnZS52YWx1ZSkge1xuICAgICAgICBkZWJ1Z1dhcm4oY29tcG9uZW50TmFtZSwgdChcImVsLnBhZ2luYXRpb24uZGVwcmVjYXRpb25XYXJuaW5nXCIpKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoIXByb3BzLmxheW91dClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICBpZiAocHJvcHMuaGlkZU9uU2luZ2xlUGFnZSAmJiBwYWdlQ291bnRCcmlkZ2UudmFsdWUgPD0gMSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICBjb25zdCByb290Q2hpbGRyZW4gPSBbXTtcbiAgICAgIGNvbnN0IHJpZ2h0V3JhcHBlckNoaWxkcmVuID0gW107XG4gICAgICBjb25zdCByaWdodFdyYXBwZXJSb290ID0gaChcImRpdlwiLCB7IGNsYXNzOiBucy5lKFwicmlnaHR3cmFwcGVyXCIpIH0sIHJpZ2h0V3JhcHBlckNoaWxkcmVuKTtcbiAgICAgIGNvbnN0IFRFTVBMQVRFX01BUCA9IHtcbiAgICAgICAgcHJldjogaChQcmV2LCB7XG4gICAgICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIGN1cnJlbnRQYWdlOiBjdXJyZW50UGFnZUJyaWRnZS52YWx1ZSxcbiAgICAgICAgICBwcmV2VGV4dDogcHJvcHMucHJldlRleHQsXG4gICAgICAgICAgcHJldkljb246IHByb3BzLnByZXZJY29uLFxuICAgICAgICAgIG9uQ2xpY2s6IHByZXZcbiAgICAgICAgfSksXG4gICAgICAgIGp1bXBlcjogaChKdW1wZXIsIHtcbiAgICAgICAgICBzaXplOiBwcm9wcy5zbWFsbCA/IFwic21hbGxcIiA6IFwiZGVmYXVsdFwiXG4gICAgICAgIH0pLFxuICAgICAgICBwYWdlcjogaChQYWdlciwge1xuICAgICAgICAgIGN1cnJlbnRQYWdlOiBjdXJyZW50UGFnZUJyaWRnZS52YWx1ZSxcbiAgICAgICAgICBwYWdlQ291bnQ6IHBhZ2VDb3VudEJyaWRnZS52YWx1ZSxcbiAgICAgICAgICBwYWdlckNvdW50OiBwcm9wcy5wYWdlckNvdW50LFxuICAgICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDdXJyZW50Q2hhbmdlLFxuICAgICAgICAgIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlZFxuICAgICAgICB9KSxcbiAgICAgICAgbmV4dDogaChOZXh0LCB7XG4gICAgICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIGN1cnJlbnRQYWdlOiBjdXJyZW50UGFnZUJyaWRnZS52YWx1ZSxcbiAgICAgICAgICBwYWdlQ291bnQ6IHBhZ2VDb3VudEJyaWRnZS52YWx1ZSxcbiAgICAgICAgICBuZXh0VGV4dDogcHJvcHMubmV4dFRleHQsXG4gICAgICAgICAgbmV4dEljb246IHByb3BzLm5leHRJY29uLFxuICAgICAgICAgIG9uQ2xpY2s6IG5leHRcbiAgICAgICAgfSksXG4gICAgICAgIHNpemVzOiBoKFNpemVzLCB7XG4gICAgICAgICAgcGFnZVNpemU6IHBhZ2VTaXplQnJpZGdlLnZhbHVlLFxuICAgICAgICAgIHBhZ2VTaXplczogcHJvcHMucGFnZVNpemVzLFxuICAgICAgICAgIHBvcHBlckNsYXNzOiBwcm9wcy5wb3BwZXJDbGFzcyxcbiAgICAgICAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgc2l6ZTogcHJvcHMuc21hbGwgPyBcInNtYWxsXCIgOiBcImRlZmF1bHRcIlxuICAgICAgICB9KSxcbiAgICAgICAgc2xvdDogKF9iID0gKF9hID0gc2xvdHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RzLmRlZmF1bHQpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKHNsb3RzKSkgIT0gbnVsbCA/IF9iIDogbnVsbCxcbiAgICAgICAgdG90YWw6IGgoVG90YWwsIHsgdG90YWw6IGlzQWJzZW50KHByb3BzLnRvdGFsKSA/IDAgOiBwcm9wcy50b3RhbCB9KVxuICAgICAgfTtcbiAgICAgIGNvbnN0IGNvbXBvbmVudHMgPSBwcm9wcy5sYXlvdXQuc3BsaXQoXCIsXCIpLm1hcCgoaXRlbSkgPT4gaXRlbS50cmltKCkpO1xuICAgICAgbGV0IGhhdmVSaWdodFdyYXBwZXIgPSBmYWxzZTtcbiAgICAgIGNvbXBvbmVudHMuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgICBpZiAoYyA9PT0gXCItPlwiKSB7XG4gICAgICAgICAgaGF2ZVJpZ2h0V3JhcHBlciA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaGF2ZVJpZ2h0V3JhcHBlcikge1xuICAgICAgICAgIHJvb3RDaGlsZHJlbi5wdXNoKFRFTVBMQVRFX01BUFtjXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmlnaHRXcmFwcGVyQ2hpbGRyZW4ucHVzaChURU1QTEFURV9NQVBbY10pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGFkZENsYXNzKHJvb3RDaGlsZHJlblswXSwgbnMuaXMoXCJmaXJzdFwiKSk7XG4gICAgICBhZGRDbGFzcyhyb290Q2hpbGRyZW5bcm9vdENoaWxkcmVuLmxlbmd0aCAtIDFdLCBucy5pcyhcImxhc3RcIikpO1xuICAgICAgaWYgKGhhdmVSaWdodFdyYXBwZXIgJiYgcmlnaHRXcmFwcGVyQ2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICBhZGRDbGFzcyhyaWdodFdyYXBwZXJDaGlsZHJlblswXSwgbnMuaXMoXCJmaXJzdFwiKSk7XG4gICAgICAgIGFkZENsYXNzKHJpZ2h0V3JhcHBlckNoaWxkcmVuW3JpZ2h0V3JhcHBlckNoaWxkcmVuLmxlbmd0aCAtIDFdLCBucy5pcyhcImxhc3RcIikpO1xuICAgICAgICByb290Q2hpbGRyZW4ucHVzaChyaWdodFdyYXBwZXJSb290KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoKFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3M6IFtcbiAgICAgICAgICBucy5iKCksXG4gICAgICAgICAgbnMuaXMoXCJiYWNrZ3JvdW5kXCIsIHByb3BzLmJhY2tncm91bmQpLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFtucy5tKFwic21hbGxcIildOiBwcm9wcy5zbWFsbFxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSwgcm9vdENoaWxkcmVuKTtcbiAgICB9O1xuICB9XG59KTtcblxuZXhwb3J0IHsgUGFnaW5hdGlvbiBhcyBkZWZhdWx0LCBwYWdpbmF0aW9uRW1pdHMsIHBhZ2luYXRpb25Qcm9wcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnaW5hdGlvbi5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgUGFnaW5hdGlvbiBmcm9tICcuL3NyYy9wYWdpbmF0aW9uLm1qcyc7XG5leHBvcnQgeyBwYWdpbmF0aW9uRW1pdHMsIHBhZ2luYXRpb25Qcm9wcyB9IGZyb20gJy4vc3JjL3BhZ2luYXRpb24ubWpzJztcbmV4cG9ydCB7IGVsUGFnaW5hdGlvbktleSB9IGZyb20gJy4vc3JjL2NvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgd2l0aEluc3RhbGwgfSBmcm9tICcuLi8uLi91dGlscy92dWUvaW5zdGFsbC5tanMnO1xuXG5jb25zdCBFbFBhZ2luYXRpb24gPSB3aXRoSW5zdGFsbChQYWdpbmF0aW9uKTtcblxuZXhwb3J0IHsgRWxQYWdpbmF0aW9uLCBFbFBhZ2luYXRpb24gYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIiwiLyohXG4gKiBlc2NhcGUtaHRtbFxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxMyBUSiBIb2xvd2F5Y2h1a1xuICogQ29weXJpZ2h0KGMpIDIwMTUgQW5kcmVhcyBMdWJiZVxuICogQ29weXJpZ2h0KGMpIDIwMTUgVGlhbmNoZW5nIFwiVGltb3RoeVwiIEd1XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIG1hdGNoSHRtbFJlZ0V4cCA9IC9bXCInJjw+XS87XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBlc2NhcGVIdG1sO1xuXG4vKipcbiAqIEVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgaW4gdGhlIGdpdmVuIHN0cmluZyBvZiBodG1sLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gZXNjYXBlIGZvciBpbnNlcnRpbmcgaW50byBIVE1MXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZXNjYXBlSHRtbChzdHJpbmcpIHtcbiAgdmFyIHN0ciA9ICcnICsgc3RyaW5nO1xuICB2YXIgbWF0Y2ggPSBtYXRjaEh0bWxSZWdFeHAuZXhlYyhzdHIpO1xuXG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgdmFyIGVzY2FwZTtcbiAgdmFyIGh0bWwgPSAnJztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RJbmRleCA9IDA7XG5cbiAgZm9yIChpbmRleCA9IG1hdGNoLmluZGV4OyBpbmRleCA8IHN0ci5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBzd2l0Y2ggKHN0ci5jaGFyQ29kZUF0KGluZGV4KSkge1xuICAgICAgY2FzZSAzNDogLy8gXCJcbiAgICAgICAgZXNjYXBlID0gJyZxdW90Oyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzODogLy8gJlxuICAgICAgICBlc2NhcGUgPSAnJmFtcDsnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzk6IC8vICdcbiAgICAgICAgZXNjYXBlID0gJyYjMzk7JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDYwOiAvLyA8XG4gICAgICAgIGVzY2FwZSA9ICcmbHQ7JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDYyOiAvLyA+XG4gICAgICAgIGVzY2FwZSA9ICcmZ3Q7JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAobGFzdEluZGV4ICE9PSBpbmRleCkge1xuICAgICAgaHRtbCArPSBzdHIuc3Vic3RyaW5nKGxhc3RJbmRleCwgaW5kZXgpO1xuICAgIH1cblxuICAgIGxhc3RJbmRleCA9IGluZGV4ICsgMTtcbiAgICBodG1sICs9IGVzY2FwZTtcbiAgfVxuXG4gIHJldHVybiBsYXN0SW5kZXggIT09IGluZGV4XG4gICAgPyBodG1sICsgc3RyLnN1YnN0cmluZyhsYXN0SW5kZXgsIGluZGV4KVxuICAgIDogaHRtbDtcbn1cbiIsImltcG9ydCB7IGNyZWF0ZVBvcHBlciB9IGZyb20gJ0Bwb3BwZXJqcy9jb3JlJztcbmltcG9ydCB7IGdldCwgbWVyZ2UsIGZsYXRNYXAgfSBmcm9tICdsb2Rhc2gtdW5pZmllZCc7XG5pbXBvcnQgZXNjYXBlSHRtbCBmcm9tICdlc2NhcGUtaHRtbCc7XG5pbXBvcnQgJy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL2hvb2tzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBpc09iamVjdCwgaGFzT3duLCBpc0FycmF5IH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuaW1wb3J0IHsgdGhyb3dFcnJvciB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2Vycm9yLm1qcyc7XG5pbXBvcnQgeyBpc0Jvb2xlYW4gfSBmcm9tICdAdnVldXNlL2NvcmUnO1xuaW1wb3J0IHsgdXNlRGVsYXllZFRvZ2dsZSB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1kZWxheWVkLXRvZ2dsZS9pbmRleC5tanMnO1xuXG5jb25zdCBnZXRDZWxsID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgdmFyIF9hO1xuICByZXR1cm4gKF9hID0gZXZlbnQudGFyZ2V0KSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2xvc2VzdChcInRkXCIpO1xufTtcbmNvbnN0IG9yZGVyQnkgPSBmdW5jdGlvbihhcnJheSwgc29ydEtleSwgcmV2ZXJzZSwgc29ydE1ldGhvZCwgc29ydEJ5KSB7XG4gIGlmICghc29ydEtleSAmJiAhc29ydE1ldGhvZCAmJiAoIXNvcnRCeSB8fCBBcnJheS5pc0FycmF5KHNvcnRCeSkgJiYgIXNvcnRCeS5sZW5ndGgpKSB7XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG4gIGlmICh0eXBlb2YgcmV2ZXJzZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldmVyc2UgPSByZXZlcnNlID09PSBcImRlc2NlbmRpbmdcIiA/IC0xIDogMTtcbiAgfSBlbHNlIHtcbiAgICByZXZlcnNlID0gcmV2ZXJzZSAmJiByZXZlcnNlIDwgMCA/IC0xIDogMTtcbiAgfVxuICBjb25zdCBnZXRLZXkgPSBzb3J0TWV0aG9kID8gbnVsbCA6IGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xuICAgIGlmIChzb3J0QnkpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShzb3J0QnkpKSB7XG4gICAgICAgIHNvcnRCeSA9IFtzb3J0QnldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNvcnRCeS5tYXAoKGJ5KSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgYnkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0KHZhbHVlLCBieSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGJ5KHZhbHVlLCBpbmRleCwgYXJyYXkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHNvcnRLZXkgIT09IFwiJGtleVwiKSB7XG4gICAgICBpZiAoaXNPYmplY3QodmFsdWUpICYmIFwiJHZhbHVlXCIgaW4gdmFsdWUpXG4gICAgICAgIHZhbHVlID0gdmFsdWUuJHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gW2lzT2JqZWN0KHZhbHVlKSA/IGdldCh2YWx1ZSwgc29ydEtleSkgOiB2YWx1ZV07XG4gIH07XG4gIGNvbnN0IGNvbXBhcmUgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgaWYgKHNvcnRNZXRob2QpIHtcbiAgICAgIHJldHVybiBzb3J0TWV0aG9kKGEudmFsdWUsIGIudmFsdWUpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYS5rZXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChhLmtleVtpXSA8IGIua2V5W2ldKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIGlmIChhLmtleVtpXSA+IGIua2V5W2ldKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfTtcbiAgcmV0dXJuIGFycmF5Lm1hcCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlLFxuICAgICAgaW5kZXgsXG4gICAgICBrZXk6IGdldEtleSA/IGdldEtleSh2YWx1ZSwgaW5kZXgpIDogbnVsbFxuICAgIH07XG4gIH0pLnNvcnQoKGEsIGIpID0+IHtcbiAgICBsZXQgb3JkZXIgPSBjb21wYXJlKGEsIGIpO1xuICAgIGlmICghb3JkZXIpIHtcbiAgICAgIG9yZGVyID0gYS5pbmRleCAtIGIuaW5kZXg7XG4gICAgfVxuICAgIHJldHVybiBvcmRlciAqICtyZXZlcnNlO1xuICB9KS5tYXAoKGl0ZW0pID0+IGl0ZW0udmFsdWUpO1xufTtcbmNvbnN0IGdldENvbHVtbkJ5SWQgPSBmdW5jdGlvbih0YWJsZSwgY29sdW1uSWQpIHtcbiAgbGV0IGNvbHVtbiA9IG51bGw7XG4gIHRhYmxlLmNvbHVtbnMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIGlmIChpdGVtLmlkID09PSBjb2x1bW5JZCkge1xuICAgICAgY29sdW1uID0gaXRlbTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY29sdW1uO1xufTtcbmNvbnN0IGdldENvbHVtbkJ5S2V5ID0gZnVuY3Rpb24odGFibGUsIGNvbHVtbktleSkge1xuICBsZXQgY29sdW1uID0gbnVsbDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YWJsZS5jb2x1bW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgaXRlbSA9IHRhYmxlLmNvbHVtbnNbaV07XG4gICAgaWYgKGl0ZW0uY29sdW1uS2V5ID09PSBjb2x1bW5LZXkpIHtcbiAgICAgIGNvbHVtbiA9IGl0ZW07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKCFjb2x1bW4pXG4gICAgdGhyb3dFcnJvcihcIkVsVGFibGVcIiwgYE5vIGNvbHVtbiBtYXRjaGluZyB3aXRoIGNvbHVtbi1rZXk6ICR7Y29sdW1uS2V5fWApO1xuICByZXR1cm4gY29sdW1uO1xufTtcbmNvbnN0IGdldENvbHVtbkJ5Q2VsbCA9IGZ1bmN0aW9uKHRhYmxlLCBjZWxsLCBuYW1lc3BhY2UpIHtcbiAgY29uc3QgbWF0Y2hlcyA9IChjZWxsLmNsYXNzTmFtZSB8fCBcIlwiKS5tYXRjaChuZXcgUmVnRXhwKGAke25hbWVzcGFjZX0tdGFibGVfW15cXFxcc10rYCwgXCJnbVwiKSk7XG4gIGlmIChtYXRjaGVzKSB7XG4gICAgcmV0dXJuIGdldENvbHVtbkJ5SWQodGFibGUsIG1hdGNoZXNbMF0pO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbmNvbnN0IGdldFJvd0lkZW50aXR5ID0gKHJvdywgcm93S2V5KSA9PiB7XG4gIGlmICghcm93KVxuICAgIHRocm93IG5ldyBFcnJvcihcIlJvdyBpcyByZXF1aXJlZCB3aGVuIGdldCByb3cgaWRlbnRpdHlcIik7XG4gIGlmICh0eXBlb2Ygcm93S2V5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKCFyb3dLZXkuaW5jbHVkZXMoXCIuXCIpKSB7XG4gICAgICByZXR1cm4gYCR7cm93W3Jvd0tleV19YDtcbiAgICB9XG4gICAgY29uc3Qga2V5ID0gcm93S2V5LnNwbGl0KFwiLlwiKTtcbiAgICBsZXQgY3VycmVudCA9IHJvdztcbiAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2Yga2V5KSB7XG4gICAgICBjdXJyZW50ID0gY3VycmVudFtlbGVtZW50XTtcbiAgICB9XG4gICAgcmV0dXJuIGAke2N1cnJlbnR9YDtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygcm93S2V5ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gcm93S2V5LmNhbGwobnVsbCwgcm93KTtcbiAgfVxufTtcbmNvbnN0IGdldEtleXNNYXAgPSBmdW5jdGlvbihhcnJheSwgcm93S2V5KSB7XG4gIGNvbnN0IGFycmF5TWFwID0ge307XG4gIChhcnJheSB8fCBbXSkuZm9yRWFjaCgocm93LCBpbmRleCkgPT4ge1xuICAgIGFycmF5TWFwW2dldFJvd0lkZW50aXR5KHJvdywgcm93S2V5KV0gPSB7IHJvdywgaW5kZXggfTtcbiAgfSk7XG4gIHJldHVybiBhcnJheU1hcDtcbn07XG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMoZGVmYXVsdHMsIGNvbmZpZykge1xuICBjb25zdCBvcHRpb25zID0ge307XG4gIGxldCBrZXk7XG4gIGZvciAoa2V5IGluIGRlZmF1bHRzKSB7XG4gICAgb3B0aW9uc1trZXldID0gZGVmYXVsdHNba2V5XTtcbiAgfVxuICBmb3IgKGtleSBpbiBjb25maWcpIHtcbiAgICBpZiAoaGFzT3duKGNvbmZpZywga2V5KSkge1xuICAgICAgY29uc3QgdmFsdWUgPSBjb25maWdba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgb3B0aW9uc1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zO1xufVxuZnVuY3Rpb24gcGFyc2VXaWR0aCh3aWR0aCkge1xuICBpZiAod2lkdGggPT09IFwiXCIpXG4gICAgcmV0dXJuIHdpZHRoO1xuICBpZiAod2lkdGggIT09IHZvaWQgMCkge1xuICAgIHdpZHRoID0gTnVtYmVyLnBhcnNlSW50KHdpZHRoLCAxMCk7XG4gICAgaWYgKE51bWJlci5pc05hTih3aWR0aCkpIHtcbiAgICAgIHdpZHRoID0gXCJcIjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHdpZHRoO1xufVxuZnVuY3Rpb24gcGFyc2VNaW5XaWR0aChtaW5XaWR0aCkge1xuICBpZiAobWluV2lkdGggPT09IFwiXCIpXG4gICAgcmV0dXJuIG1pbldpZHRoO1xuICBpZiAobWluV2lkdGggIT09IHZvaWQgMCkge1xuICAgIG1pbldpZHRoID0gcGFyc2VXaWR0aChtaW5XaWR0aCk7XG4gICAgaWYgKE51bWJlci5pc05hTihtaW5XaWR0aCkpIHtcbiAgICAgIG1pbldpZHRoID0gODA7XG4gICAgfVxuICB9XG4gIHJldHVybiBtaW5XaWR0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlSGVpZ2h0KGhlaWdodCkge1xuICBpZiAodHlwZW9mIGhlaWdodCA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBoZWlnaHQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBoZWlnaHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICBpZiAoL15cXGQrKD86cHgpPyQvLnRlc3QoaGVpZ2h0KSkge1xuICAgICAgcmV0dXJuIE51bWJlci5wYXJzZUludChoZWlnaHQsIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBjb21wb3NlKC4uLmZ1bmNzKSB7XG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gKGFyZykgPT4gYXJnO1xuICB9XG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZSgoYSwgYikgPT4gKC4uLmFyZ3MpID0+IGEoYiguLi5hcmdzKSkpO1xufVxuZnVuY3Rpb24gdG9nZ2xlUm93U3RhdHVzKHN0YXR1c0Fyciwgcm93LCBuZXdWYWwpIHtcbiAgbGV0IGNoYW5nZWQgPSBmYWxzZTtcbiAgY29uc3QgaW5kZXggPSBzdGF0dXNBcnIuaW5kZXhPZihyb3cpO1xuICBjb25zdCBpbmNsdWRlZCA9IGluZGV4ICE9PSAtMTtcbiAgY29uc3QgdG9nZ2xlU3RhdHVzID0gKHR5cGUpID0+IHtcbiAgICBpZiAodHlwZSA9PT0gXCJhZGRcIikge1xuICAgICAgc3RhdHVzQXJyLnB1c2gocm93KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdHVzQXJyLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgIGlmIChpc0FycmF5KHJvdy5jaGlsZHJlbikpIHtcbiAgICAgIHJvdy5jaGlsZHJlbi5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIHRvZ2dsZVJvd1N0YXR1cyhzdGF0dXNBcnIsIGl0ZW0sIG5ld1ZhbCAhPSBudWxsID8gbmV3VmFsIDogIWluY2x1ZGVkKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgaWYgKGlzQm9vbGVhbihuZXdWYWwpKSB7XG4gICAgaWYgKG5ld1ZhbCAmJiAhaW5jbHVkZWQpIHtcbiAgICAgIHRvZ2dsZVN0YXR1cyhcImFkZFwiKTtcbiAgICB9IGVsc2UgaWYgKCFuZXdWYWwgJiYgaW5jbHVkZWQpIHtcbiAgICAgIHRvZ2dsZVN0YXR1cyhcInJlbW92ZVwiKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaW5jbHVkZWQgPyB0b2dnbGVTdGF0dXMoXCJyZW1vdmVcIikgOiB0b2dnbGVTdGF0dXMoXCJhZGRcIik7XG4gIH1cbiAgcmV0dXJuIGNoYW5nZWQ7XG59XG5mdW5jdGlvbiB3YWxrVHJlZU5vZGUocm9vdCwgY2IsIGNoaWxkcmVuS2V5ID0gXCJjaGlsZHJlblwiLCBsYXp5S2V5ID0gXCJoYXNDaGlsZHJlblwiKSB7XG4gIGNvbnN0IGlzTmlsID0gKGFycmF5KSA9PiAhKEFycmF5LmlzQXJyYXkoYXJyYXkpICYmIGFycmF5Lmxlbmd0aCk7XG4gIGZ1bmN0aW9uIF93YWxrZXIocGFyZW50LCBjaGlsZHJlbiwgbGV2ZWwpIHtcbiAgICBjYihwYXJlbnQsIGNoaWxkcmVuLCBsZXZlbCk7XG4gICAgY2hpbGRyZW4uZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYgKGl0ZW1bbGF6eUtleV0pIHtcbiAgICAgICAgY2IoaXRlbSwgbnVsbCwgbGV2ZWwgKyAxKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgY2hpbGRyZW4yID0gaXRlbVtjaGlsZHJlbktleV07XG4gICAgICBpZiAoIWlzTmlsKGNoaWxkcmVuMikpIHtcbiAgICAgICAgX3dhbGtlcihpdGVtLCBjaGlsZHJlbjIsIGxldmVsICsgMSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcm9vdC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgaWYgKGl0ZW1bbGF6eUtleV0pIHtcbiAgICAgIGNiKGl0ZW0sIG51bGwsIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjaGlsZHJlbiA9IGl0ZW1bY2hpbGRyZW5LZXldO1xuICAgIGlmICghaXNOaWwoY2hpbGRyZW4pKSB7XG4gICAgICBfd2Fsa2VyKGl0ZW0sIGNoaWxkcmVuLCAwKTtcbiAgICB9XG4gIH0pO1xufVxubGV0IHJlbW92ZVBvcHBlcjtcbmZ1bmN0aW9uIGNyZWF0ZVRhYmxlUG9wcGVyKHBhcmVudE5vZGUsIHRyaWdnZXIsIHBvcHBlckNvbnRlbnQsIG5leHRaSW5kZXgsIHRvb2x0aXBPcHRpb25zKSB7XG4gIHRvb2x0aXBPcHRpb25zID0gbWVyZ2Uoe1xuICAgIGVudGVyYWJsZTogdHJ1ZSxcbiAgICBzaG93QXJyb3c6IHRydWVcbiAgfSwgdG9vbHRpcE9wdGlvbnMpO1xuICBjb25zdCBucyA9IHBhcmVudE5vZGUgPT0gbnVsbCA/IHZvaWQgMCA6IHBhcmVudE5vZGUuZGF0YXNldC5wcmVmaXg7XG4gIGNvbnN0IHNjcm9sbENvbnRhaW5lciA9IHBhcmVudE5vZGUgPT0gbnVsbCA/IHZvaWQgMCA6IHBhcmVudE5vZGUucXVlcnlTZWxlY3RvcihgLiR7bnN9LXNjcm9sbGJhcl9fd3JhcGApO1xuICBmdW5jdGlvbiByZW5kZXJDb250ZW50KCkge1xuICAgIGNvbnN0IGlzTGlnaHQgPSB0b29sdGlwT3B0aW9ucy5lZmZlY3QgPT09IFwibGlnaHRcIjtcbiAgICBjb25zdCBjb250ZW50MiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY29udGVudDIuY2xhc3NOYW1lID0gW1xuICAgICAgYCR7bnN9LXBvcHBlcmAsXG4gICAgICBpc0xpZ2h0ID8gXCJpcy1saWdodFwiIDogXCJpcy1kYXJrXCIsXG4gICAgICB0b29sdGlwT3B0aW9ucy5wb3BwZXJDbGFzcyB8fCBcIlwiXG4gICAgXS5qb2luKFwiIFwiKTtcbiAgICBwb3BwZXJDb250ZW50ID0gZXNjYXBlSHRtbChwb3BwZXJDb250ZW50KTtcbiAgICBjb250ZW50Mi5pbm5lckhUTUwgPSBwb3BwZXJDb250ZW50O1xuICAgIGNvbnRlbnQyLnN0eWxlLnpJbmRleCA9IFN0cmluZyhuZXh0WkluZGV4KCkpO1xuICAgIHBhcmVudE5vZGUgPT0gbnVsbCA/IHZvaWQgMCA6IHBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoY29udGVudDIpO1xuICAgIHJldHVybiBjb250ZW50MjtcbiAgfVxuICBmdW5jdGlvbiByZW5kZXJBcnJvdygpIHtcbiAgICBjb25zdCBhcnJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgYXJyb3cuY2xhc3NOYW1lID0gYCR7bnN9LXBvcHBlcl9fYXJyb3dgO1xuICAgIHJldHVybiBhcnJvdztcbiAgfVxuICBmdW5jdGlvbiBzaG93UG9wcGVyKCkge1xuICAgIHBvcHBlckluc3RhbmNlICYmIHBvcHBlckluc3RhbmNlLnVwZGF0ZSgpO1xuICB9XG4gIHJlbW92ZVBvcHBlciA9PSBudWxsID8gdm9pZCAwIDogcmVtb3ZlUG9wcGVyKCk7XG4gIHJlbW92ZVBvcHBlciA9ICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgcG9wcGVySW5zdGFuY2UgJiYgcG9wcGVySW5zdGFuY2UuZGVzdHJveSgpO1xuICAgICAgY29udGVudCAmJiAocGFyZW50Tm9kZSA9PSBudWxsID8gdm9pZCAwIDogcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjb250ZW50KSk7XG4gICAgICB0cmlnZ2VyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIG9uT3Blbik7XG4gICAgICB0cmlnZ2VyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIG9uQ2xvc2UpO1xuICAgICAgc2Nyb2xsQ29udGFpbmVyID09IG51bGwgPyB2b2lkIDAgOiBzY3JvbGxDb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCByZW1vdmVQb3BwZXIpO1xuICAgICAgcmVtb3ZlUG9wcGVyID0gdm9pZCAwO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICB9XG4gIH07XG4gIGxldCBwb3BwZXJJbnN0YW5jZSA9IG51bGw7XG4gIGxldCBvbk9wZW4gPSBzaG93UG9wcGVyO1xuICBsZXQgb25DbG9zZSA9IHJlbW92ZVBvcHBlcjtcbiAgaWYgKHRvb2x0aXBPcHRpb25zLmVudGVyYWJsZSkge1xuICAgIDtcbiAgICAoeyBvbk9wZW4sIG9uQ2xvc2UgfSA9IHVzZURlbGF5ZWRUb2dnbGUoe1xuICAgICAgc2hvd0FmdGVyOiB0b29sdGlwT3B0aW9ucy5zaG93QWZ0ZXIsXG4gICAgICBoaWRlQWZ0ZXI6IHRvb2x0aXBPcHRpb25zLmhpZGVBZnRlcixcbiAgICAgIG9wZW46IHNob3dQb3BwZXIsXG4gICAgICBjbG9zZTogcmVtb3ZlUG9wcGVyXG4gICAgfSkpO1xuICB9XG4gIGNvbnN0IGNvbnRlbnQgPSByZW5kZXJDb250ZW50KCk7XG4gIGNvbnRlbnQub25tb3VzZWVudGVyID0gb25PcGVuO1xuICBjb250ZW50Lm9ubW91c2VsZWF2ZSA9IG9uQ2xvc2U7XG4gIGNvbnN0IG1vZGlmaWVycyA9IFtdO1xuICBpZiAodG9vbHRpcE9wdGlvbnMub2Zmc2V0KSB7XG4gICAgbW9kaWZpZXJzLnB1c2goe1xuICAgICAgbmFtZTogXCJvZmZzZXRcIixcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgb2Zmc2V0OiBbMCwgdG9vbHRpcE9wdGlvbnMub2Zmc2V0XVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGlmICh0b29sdGlwT3B0aW9ucy5zaG93QXJyb3cpIHtcbiAgICBjb25zdCBhcnJvdyA9IGNvbnRlbnQuYXBwZW5kQ2hpbGQocmVuZGVyQXJyb3coKSk7XG4gICAgbW9kaWZpZXJzLnB1c2goe1xuICAgICAgbmFtZTogXCJhcnJvd1wiLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBlbGVtZW50OiBhcnJvdyxcbiAgICAgICAgcGFkZGluZzogMTBcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBjb25zdCBwb3BwZXJPcHRpb25zID0gdG9vbHRpcE9wdGlvbnMucG9wcGVyT3B0aW9ucyB8fCB7fTtcbiAgcG9wcGVySW5zdGFuY2UgPSBjcmVhdGVQb3BwZXIodHJpZ2dlciwgY29udGVudCwge1xuICAgIHBsYWNlbWVudDogdG9vbHRpcE9wdGlvbnMucGxhY2VtZW50IHx8IFwidG9wXCIsXG4gICAgc3RyYXRlZ3k6IFwiZml4ZWRcIixcbiAgICAuLi5wb3BwZXJPcHRpb25zLFxuICAgIG1vZGlmaWVyczogcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMgPyBtb2RpZmllcnMuY29uY2F0KHBvcHBlck9wdGlvbnMubW9kaWZpZXJzKSA6IG1vZGlmaWVyc1xuICB9KTtcbiAgdHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCBvbk9wZW4pO1xuICB0cmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIG9uQ2xvc2UpO1xuICBzY3JvbGxDb250YWluZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHNjcm9sbENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHJlbW92ZVBvcHBlcik7XG4gIHJldHVybiBwb3BwZXJJbnN0YW5jZTtcbn1cbmZ1bmN0aW9uIGdldEN1cnJlbnRDb2x1bW5zKGNvbHVtbikge1xuICBpZiAoY29sdW1uLmNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIGZsYXRNYXAoY29sdW1uLmNoaWxkcmVuLCBnZXRDdXJyZW50Q29sdW1ucyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFtjb2x1bW5dO1xuICB9XG59XG5mdW5jdGlvbiBnZXRDb2xTcGFuKGNvbFNwYW4sIGNvbHVtbikge1xuICByZXR1cm4gY29sU3BhbiArIGNvbHVtbi5jb2xTcGFuO1xufVxuY29uc3QgaXNGaXhlZENvbHVtbiA9IChpbmRleCwgZml4ZWQsIHN0b3JlLCByZWFsQ29sdW1ucykgPT4ge1xuICBsZXQgc3RhcnQgPSAwO1xuICBsZXQgYWZ0ZXIgPSBpbmRleDtcbiAgY29uc3QgY29sdW1ucyA9IHN0b3JlLnN0YXRlcy5jb2x1bW5zLnZhbHVlO1xuICBpZiAocmVhbENvbHVtbnMpIHtcbiAgICBjb25zdCBjdXJDb2x1bW5zID0gZ2V0Q3VycmVudENvbHVtbnMocmVhbENvbHVtbnNbaW5kZXhdKTtcbiAgICBjb25zdCBwcmVDb2x1bW5zID0gY29sdW1ucy5zbGljZSgwLCBjb2x1bW5zLmluZGV4T2YoY3VyQ29sdW1uc1swXSkpO1xuICAgIHN0YXJ0ID0gcHJlQ29sdW1ucy5yZWR1Y2UoZ2V0Q29sU3BhbiwgMCk7XG4gICAgYWZ0ZXIgPSBzdGFydCArIGN1ckNvbHVtbnMucmVkdWNlKGdldENvbFNwYW4sIDApIC0gMTtcbiAgfSBlbHNlIHtcbiAgICBzdGFydCA9IGluZGV4O1xuICB9XG4gIGxldCBmaXhlZExheW91dDtcbiAgc3dpdGNoIChmaXhlZCkge1xuICAgIGNhc2UgXCJsZWZ0XCI6XG4gICAgICBpZiAoYWZ0ZXIgPCBzdG9yZS5zdGF0ZXMuZml4ZWRMZWFmQ29sdW1uc0xlbmd0aC52YWx1ZSkge1xuICAgICAgICBmaXhlZExheW91dCA9IFwibGVmdFwiO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInJpZ2h0XCI6XG4gICAgICBpZiAoc3RhcnQgPj0gY29sdW1ucy5sZW5ndGggLSBzdG9yZS5zdGF0ZXMucmlnaHRGaXhlZExlYWZDb2x1bW5zTGVuZ3RoLnZhbHVlKSB7XG4gICAgICAgIGZpeGVkTGF5b3V0ID0gXCJyaWdodFwiO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChhZnRlciA8IHN0b3JlLnN0YXRlcy5maXhlZExlYWZDb2x1bW5zTGVuZ3RoLnZhbHVlKSB7XG4gICAgICAgIGZpeGVkTGF5b3V0ID0gXCJsZWZ0XCI7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0ID49IGNvbHVtbnMubGVuZ3RoIC0gc3RvcmUuc3RhdGVzLnJpZ2h0Rml4ZWRMZWFmQ29sdW1uc0xlbmd0aC52YWx1ZSkge1xuICAgICAgICBmaXhlZExheW91dCA9IFwicmlnaHRcIjtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZml4ZWRMYXlvdXQgPyB7XG4gICAgZGlyZWN0aW9uOiBmaXhlZExheW91dCxcbiAgICBzdGFydCxcbiAgICBhZnRlclxuICB9IDoge307XG59O1xuY29uc3QgZ2V0Rml4ZWRDb2x1bW5zQ2xhc3MgPSAobmFtZXNwYWNlLCBpbmRleCwgZml4ZWQsIHN0b3JlLCByZWFsQ29sdW1ucywgb2Zmc2V0ID0gMCkgPT4ge1xuICBjb25zdCBjbGFzc2VzID0gW107XG4gIGNvbnN0IHsgZGlyZWN0aW9uLCBzdGFydCwgYWZ0ZXIgfSA9IGlzRml4ZWRDb2x1bW4oaW5kZXgsIGZpeGVkLCBzdG9yZSwgcmVhbENvbHVtbnMpO1xuICBpZiAoZGlyZWN0aW9uKSB7XG4gICAgY29uc3QgaXNMZWZ0ID0gZGlyZWN0aW9uID09PSBcImxlZnRcIjtcbiAgICBjbGFzc2VzLnB1c2goYCR7bmFtZXNwYWNlfS1maXhlZC1jb2x1bW4tLSR7ZGlyZWN0aW9ufWApO1xuICAgIGlmIChpc0xlZnQgJiYgYWZ0ZXIgKyBvZmZzZXQgPT09IHN0b3JlLnN0YXRlcy5maXhlZExlYWZDb2x1bW5zTGVuZ3RoLnZhbHVlIC0gMSkge1xuICAgICAgY2xhc3Nlcy5wdXNoKFwiaXMtbGFzdC1jb2x1bW5cIik7XG4gICAgfSBlbHNlIGlmICghaXNMZWZ0ICYmIHN0YXJ0IC0gb2Zmc2V0ID09PSBzdG9yZS5zdGF0ZXMuY29sdW1ucy52YWx1ZS5sZW5ndGggLSBzdG9yZS5zdGF0ZXMucmlnaHRGaXhlZExlYWZDb2x1bW5zTGVuZ3RoLnZhbHVlKSB7XG4gICAgICBjbGFzc2VzLnB1c2goXCJpcy1maXJzdC1jb2x1bW5cIik7XG4gICAgfVxuICB9XG4gIHJldHVybiBjbGFzc2VzO1xufTtcbmZ1bmN0aW9uIGdldE9mZnNldChvZmZzZXQsIGNvbHVtbikge1xuICByZXR1cm4gb2Zmc2V0ICsgKGNvbHVtbi5yZWFsV2lkdGggPT09IG51bGwgfHwgTnVtYmVyLmlzTmFOKGNvbHVtbi5yZWFsV2lkdGgpID8gTnVtYmVyKGNvbHVtbi53aWR0aCkgOiBjb2x1bW4ucmVhbFdpZHRoKTtcbn1cbmNvbnN0IGdldEZpeGVkQ29sdW1uT2Zmc2V0ID0gKGluZGV4LCBmaXhlZCwgc3RvcmUsIHJlYWxDb2x1bW5zKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBkaXJlY3Rpb24sXG4gICAgc3RhcnQgPSAwLFxuICAgIGFmdGVyID0gMFxuICB9ID0gaXNGaXhlZENvbHVtbihpbmRleCwgZml4ZWQsIHN0b3JlLCByZWFsQ29sdW1ucyk7XG4gIGlmICghZGlyZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHN0eWxlcyA9IHt9O1xuICBjb25zdCBpc0xlZnQgPSBkaXJlY3Rpb24gPT09IFwibGVmdFwiO1xuICBjb25zdCBjb2x1bW5zID0gc3RvcmUuc3RhdGVzLmNvbHVtbnMudmFsdWU7XG4gIGlmIChpc0xlZnQpIHtcbiAgICBzdHlsZXMubGVmdCA9IGNvbHVtbnMuc2xpY2UoMCwgc3RhcnQpLnJlZHVjZShnZXRPZmZzZXQsIDApO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlcy5yaWdodCA9IGNvbHVtbnMuc2xpY2UoYWZ0ZXIgKyAxKS5yZXZlcnNlKCkucmVkdWNlKGdldE9mZnNldCwgMCk7XG4gIH1cbiAgcmV0dXJuIHN0eWxlcztcbn07XG5jb25zdCBlbnN1cmVQb3NpdGlvbiA9IChzdHlsZSwga2V5KSA9PiB7XG4gIGlmICghc3R5bGUpXG4gICAgcmV0dXJuO1xuICBpZiAoIU51bWJlci5pc05hTihzdHlsZVtrZXldKSkge1xuICAgIHN0eWxlW2tleV0gPSBgJHtzdHlsZVtrZXldfXB4YDtcbiAgfVxufTtcblxuZXhwb3J0IHsgY29tcG9zZSwgY3JlYXRlVGFibGVQb3BwZXIsIGVuc3VyZVBvc2l0aW9uLCBnZXRDZWxsLCBnZXRDb2x1bW5CeUNlbGwsIGdldENvbHVtbkJ5SWQsIGdldENvbHVtbkJ5S2V5LCBnZXRGaXhlZENvbHVtbk9mZnNldCwgZ2V0Rml4ZWRDb2x1bW5zQ2xhc3MsIGdldEtleXNNYXAsIGdldFJvd0lkZW50aXR5LCBpc0ZpeGVkQ29sdW1uLCBtZXJnZU9wdGlvbnMsIG9yZGVyQnksIHBhcnNlSGVpZ2h0LCBwYXJzZU1pbldpZHRoLCBwYXJzZVdpZHRoLCByZW1vdmVQb3BwZXIsIHRvZ2dsZVJvd1N0YXR1cywgd2Fsa1RyZWVOb2RlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLm1qcy5tYXBcbiIsImltcG9ydCB7IGdldEN1cnJlbnRJbnN0YW5jZSwgdG9SZWZzLCByZWYsIHdhdGNoLCB1bnJlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBvcmRlckJ5LCBnZXRLZXlzTWFwLCB0b2dnbGVSb3dTdGF0dXMsIGdldFJvd0lkZW50aXR5LCBnZXRDb2x1bW5CeUlkLCBnZXRDb2x1bW5CeUtleSB9IGZyb20gJy4uL3V0aWwubWpzJztcbmltcG9ydCB1c2VFeHBhbmQgZnJvbSAnLi9leHBhbmQubWpzJztcbmltcG9ydCB1c2VDdXJyZW50IGZyb20gJy4vY3VycmVudC5tanMnO1xuaW1wb3J0IHVzZVRyZWUgZnJvbSAnLi90cmVlLm1qcyc7XG5pbXBvcnQgeyBoYXNPd24gfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmNvbnN0IHNvcnREYXRhID0gKGRhdGEsIHN0YXRlcykgPT4ge1xuICBjb25zdCBzb3J0aW5nQ29sdW1uID0gc3RhdGVzLnNvcnRpbmdDb2x1bW47XG4gIGlmICghc29ydGluZ0NvbHVtbiB8fCB0eXBlb2Ygc29ydGluZ0NvbHVtbi5zb3J0YWJsZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG4gIHJldHVybiBvcmRlckJ5KGRhdGEsIHN0YXRlcy5zb3J0UHJvcCwgc3RhdGVzLnNvcnRPcmRlciwgc29ydGluZ0NvbHVtbi5zb3J0TWV0aG9kLCBzb3J0aW5nQ29sdW1uLnNvcnRCeSk7XG59O1xuY29uc3QgZG9GbGF0dGVuQ29sdW1ucyA9IChjb2x1bW5zKSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBjb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuICAgIGlmIChjb2x1bW4uY2hpbGRyZW4pIHtcbiAgICAgIHJlc3VsdC5wdXNoLmFwcGx5KHJlc3VsdCwgZG9GbGF0dGVuQ29sdW1ucyhjb2x1bW4uY2hpbGRyZW4pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnB1c2goY29sdW1uKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbmZ1bmN0aW9uIHVzZVdhdGNoZXIoKSB7XG4gIHZhciBfYTtcbiAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgY29uc3QgeyBzaXplOiB0YWJsZVNpemUgfSA9IHRvUmVmcygoX2EgPSBpbnN0YW5jZS5wcm94eSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLiRwcm9wcyk7XG4gIGNvbnN0IHJvd0tleSA9IHJlZihudWxsKTtcbiAgY29uc3QgZGF0YSA9IHJlZihbXSk7XG4gIGNvbnN0IF9kYXRhID0gcmVmKFtdKTtcbiAgY29uc3QgaXNDb21wbGV4ID0gcmVmKGZhbHNlKTtcbiAgY29uc3QgX2NvbHVtbnMgPSByZWYoW10pO1xuICBjb25zdCBvcmlnaW5Db2x1bW5zID0gcmVmKFtdKTtcbiAgY29uc3QgY29sdW1ucyA9IHJlZihbXSk7XG4gIGNvbnN0IGZpeGVkQ29sdW1ucyA9IHJlZihbXSk7XG4gIGNvbnN0IHJpZ2h0Rml4ZWRDb2x1bW5zID0gcmVmKFtdKTtcbiAgY29uc3QgbGVhZkNvbHVtbnMgPSByZWYoW10pO1xuICBjb25zdCBmaXhlZExlYWZDb2x1bW5zID0gcmVmKFtdKTtcbiAgY29uc3QgcmlnaHRGaXhlZExlYWZDb2x1bW5zID0gcmVmKFtdKTtcbiAgY29uc3QgdXBkYXRlT3JkZXJGbnMgPSBbXTtcbiAgY29uc3QgbGVhZkNvbHVtbnNMZW5ndGggPSByZWYoMCk7XG4gIGNvbnN0IGZpeGVkTGVhZkNvbHVtbnNMZW5ndGggPSByZWYoMCk7XG4gIGNvbnN0IHJpZ2h0Rml4ZWRMZWFmQ29sdW1uc0xlbmd0aCA9IHJlZigwKTtcbiAgY29uc3QgaXNBbGxTZWxlY3RlZCA9IHJlZihmYWxzZSk7XG4gIGNvbnN0IHNlbGVjdGlvbiA9IHJlZihbXSk7XG4gIGNvbnN0IHJlc2VydmVTZWxlY3Rpb24gPSByZWYoZmFsc2UpO1xuICBjb25zdCBzZWxlY3RPbkluZGV0ZXJtaW5hdGUgPSByZWYoZmFsc2UpO1xuICBjb25zdCBzZWxlY3RhYmxlID0gcmVmKG51bGwpO1xuICBjb25zdCBmaWx0ZXJzID0gcmVmKHt9KTtcbiAgY29uc3QgZmlsdGVyZWREYXRhID0gcmVmKG51bGwpO1xuICBjb25zdCBzb3J0aW5nQ29sdW1uID0gcmVmKG51bGwpO1xuICBjb25zdCBzb3J0UHJvcCA9IHJlZihudWxsKTtcbiAgY29uc3Qgc29ydE9yZGVyID0gcmVmKG51bGwpO1xuICBjb25zdCBob3ZlclJvdyA9IHJlZihudWxsKTtcbiAgd2F0Y2goZGF0YSwgKCkgPT4gaW5zdGFuY2Uuc3RhdGUgJiYgc2NoZWR1bGVMYXlvdXQoZmFsc2UpLCB7XG4gICAgZGVlcDogdHJ1ZVxuICB9KTtcbiAgY29uc3QgYXNzZXJ0Um93S2V5ID0gKCkgPT4ge1xuICAgIGlmICghcm93S2V5LnZhbHVlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW0VsVGFibGVdIHByb3Agcm93LWtleSBpcyByZXF1aXJlZFwiKTtcbiAgfTtcbiAgY29uc3QgdXBkYXRlQ2hpbGRGaXhlZCA9IChjb2x1bW4pID0+IHtcbiAgICB2YXIgX2EyO1xuICAgIChfYTIgPSBjb2x1bW4uY2hpbGRyZW4pID09IG51bGwgPyB2b2lkIDAgOiBfYTIuZm9yRWFjaCgoY2hpbGRDb2x1bW4pID0+IHtcbiAgICAgIGNoaWxkQ29sdW1uLmZpeGVkID0gY29sdW1uLmZpeGVkO1xuICAgICAgdXBkYXRlQ2hpbGRGaXhlZChjaGlsZENvbHVtbik7XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IHVwZGF0ZUNvbHVtbnMgPSAoKSA9PiB7XG4gICAgX2NvbHVtbnMudmFsdWUuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG4gICAgICB1cGRhdGVDaGlsZEZpeGVkKGNvbHVtbik7XG4gICAgfSk7XG4gICAgZml4ZWRDb2x1bW5zLnZhbHVlID0gX2NvbHVtbnMudmFsdWUuZmlsdGVyKChjb2x1bW4pID0+IGNvbHVtbi5maXhlZCA9PT0gdHJ1ZSB8fCBjb2x1bW4uZml4ZWQgPT09IFwibGVmdFwiKTtcbiAgICByaWdodEZpeGVkQ29sdW1ucy52YWx1ZSA9IF9jb2x1bW5zLnZhbHVlLmZpbHRlcigoY29sdW1uKSA9PiBjb2x1bW4uZml4ZWQgPT09IFwicmlnaHRcIik7XG4gICAgaWYgKGZpeGVkQ29sdW1ucy52YWx1ZS5sZW5ndGggPiAwICYmIF9jb2x1bW5zLnZhbHVlWzBdICYmIF9jb2x1bW5zLnZhbHVlWzBdLnR5cGUgPT09IFwic2VsZWN0aW9uXCIgJiYgIV9jb2x1bW5zLnZhbHVlWzBdLmZpeGVkKSB7XG4gICAgICBfY29sdW1ucy52YWx1ZVswXS5maXhlZCA9IHRydWU7XG4gICAgICBmaXhlZENvbHVtbnMudmFsdWUudW5zaGlmdChfY29sdW1ucy52YWx1ZVswXSk7XG4gICAgfVxuICAgIGNvbnN0IG5vdEZpeGVkQ29sdW1ucyA9IF9jb2x1bW5zLnZhbHVlLmZpbHRlcigoY29sdW1uKSA9PiAhY29sdW1uLmZpeGVkKTtcbiAgICBvcmlnaW5Db2x1bW5zLnZhbHVlID0gW10uY29uY2F0KGZpeGVkQ29sdW1ucy52YWx1ZSkuY29uY2F0KG5vdEZpeGVkQ29sdW1ucykuY29uY2F0KHJpZ2h0Rml4ZWRDb2x1bW5zLnZhbHVlKTtcbiAgICBjb25zdCBsZWFmQ29sdW1uczIgPSBkb0ZsYXR0ZW5Db2x1bW5zKG5vdEZpeGVkQ29sdW1ucyk7XG4gICAgY29uc3QgZml4ZWRMZWFmQ29sdW1uczIgPSBkb0ZsYXR0ZW5Db2x1bW5zKGZpeGVkQ29sdW1ucy52YWx1ZSk7XG4gICAgY29uc3QgcmlnaHRGaXhlZExlYWZDb2x1bW5zMiA9IGRvRmxhdHRlbkNvbHVtbnMocmlnaHRGaXhlZENvbHVtbnMudmFsdWUpO1xuICAgIGxlYWZDb2x1bW5zTGVuZ3RoLnZhbHVlID0gbGVhZkNvbHVtbnMyLmxlbmd0aDtcbiAgICBmaXhlZExlYWZDb2x1bW5zTGVuZ3RoLnZhbHVlID0gZml4ZWRMZWFmQ29sdW1uczIubGVuZ3RoO1xuICAgIHJpZ2h0Rml4ZWRMZWFmQ29sdW1uc0xlbmd0aC52YWx1ZSA9IHJpZ2h0Rml4ZWRMZWFmQ29sdW1uczIubGVuZ3RoO1xuICAgIGNvbHVtbnMudmFsdWUgPSBbXS5jb25jYXQoZml4ZWRMZWFmQ29sdW1uczIpLmNvbmNhdChsZWFmQ29sdW1uczIpLmNvbmNhdChyaWdodEZpeGVkTGVhZkNvbHVtbnMyKTtcbiAgICBpc0NvbXBsZXgudmFsdWUgPSBmaXhlZENvbHVtbnMudmFsdWUubGVuZ3RoID4gMCB8fCByaWdodEZpeGVkQ29sdW1ucy52YWx1ZS5sZW5ndGggPiAwO1xuICB9O1xuICBjb25zdCBzY2hlZHVsZUxheW91dCA9IChuZWVkVXBkYXRlQ29sdW1ucywgaW1tZWRpYXRlID0gZmFsc2UpID0+IHtcbiAgICBpZiAobmVlZFVwZGF0ZUNvbHVtbnMpIHtcbiAgICAgIHVwZGF0ZUNvbHVtbnMoKTtcbiAgICB9XG4gICAgaWYgKGltbWVkaWF0ZSkge1xuICAgICAgaW5zdGFuY2Uuc3RhdGUuZG9MYXlvdXQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zdGFuY2Uuc3RhdGUuZGVib3VuY2VkVXBkYXRlTGF5b3V0KCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBpc1NlbGVjdGVkID0gKHJvdykgPT4ge1xuICAgIHJldHVybiBzZWxlY3Rpb24udmFsdWUuaW5jbHVkZXMocm93KTtcbiAgfTtcbiAgY29uc3QgY2xlYXJTZWxlY3Rpb24gPSAoKSA9PiB7XG4gICAgaXNBbGxTZWxlY3RlZC52YWx1ZSA9IGZhbHNlO1xuICAgIGNvbnN0IG9sZFNlbGVjdGlvbiA9IHNlbGVjdGlvbi52YWx1ZTtcbiAgICBpZiAob2xkU2VsZWN0aW9uLmxlbmd0aCkge1xuICAgICAgc2VsZWN0aW9uLnZhbHVlID0gW107XG4gICAgICBpbnN0YW5jZS5lbWl0KFwic2VsZWN0aW9uLWNoYW5nZVwiLCBbXSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBjbGVhblNlbGVjdGlvbiA9ICgpID0+IHtcbiAgICBsZXQgZGVsZXRlZDtcbiAgICBpZiAocm93S2V5LnZhbHVlKSB7XG4gICAgICBkZWxldGVkID0gW107XG4gICAgICBjb25zdCBzZWxlY3RlZE1hcCA9IGdldEtleXNNYXAoc2VsZWN0aW9uLnZhbHVlLCByb3dLZXkudmFsdWUpO1xuICAgICAgY29uc3QgZGF0YU1hcCA9IGdldEtleXNNYXAoZGF0YS52YWx1ZSwgcm93S2V5LnZhbHVlKTtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHNlbGVjdGVkTWFwKSB7XG4gICAgICAgIGlmIChoYXNPd24oc2VsZWN0ZWRNYXAsIGtleSkgJiYgIWRhdGFNYXBba2V5XSkge1xuICAgICAgICAgIGRlbGV0ZWQucHVzaChzZWxlY3RlZE1hcFtrZXldLnJvdyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlZCA9IHNlbGVjdGlvbi52YWx1ZS5maWx0ZXIoKGl0ZW0pID0+ICFkYXRhLnZhbHVlLmluY2x1ZGVzKGl0ZW0pKTtcbiAgICB9XG4gICAgaWYgKGRlbGV0ZWQubGVuZ3RoKSB7XG4gICAgICBjb25zdCBuZXdTZWxlY3Rpb24gPSBzZWxlY3Rpb24udmFsdWUuZmlsdGVyKChpdGVtKSA9PiAhZGVsZXRlZC5pbmNsdWRlcyhpdGVtKSk7XG4gICAgICBzZWxlY3Rpb24udmFsdWUgPSBuZXdTZWxlY3Rpb247XG4gICAgICBpbnN0YW5jZS5lbWl0KFwic2VsZWN0aW9uLWNoYW5nZVwiLCBuZXdTZWxlY3Rpb24uc2xpY2UoKSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBnZXRTZWxlY3Rpb25Sb3dzID0gKCkgPT4ge1xuICAgIHJldHVybiAoc2VsZWN0aW9uLnZhbHVlIHx8IFtdKS5zbGljZSgpO1xuICB9O1xuICBjb25zdCB0b2dnbGVSb3dTZWxlY3Rpb24gPSAocm93LCBzZWxlY3RlZCA9IHZvaWQgMCwgZW1pdENoYW5nZSA9IHRydWUpID0+IHtcbiAgICBjb25zdCBjaGFuZ2VkID0gdG9nZ2xlUm93U3RhdHVzKHNlbGVjdGlvbi52YWx1ZSwgcm93LCBzZWxlY3RlZCk7XG4gICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgIGNvbnN0IG5ld1NlbGVjdGlvbiA9IChzZWxlY3Rpb24udmFsdWUgfHwgW10pLnNsaWNlKCk7XG4gICAgICBpZiAoZW1pdENoYW5nZSkge1xuICAgICAgICBpbnN0YW5jZS5lbWl0KFwic2VsZWN0XCIsIG5ld1NlbGVjdGlvbiwgcm93KTtcbiAgICAgIH1cbiAgICAgIGluc3RhbmNlLmVtaXQoXCJzZWxlY3Rpb24tY2hhbmdlXCIsIG5ld1NlbGVjdGlvbik7XG4gICAgfVxuICB9O1xuICBjb25zdCBfdG9nZ2xlQWxsU2VsZWN0aW9uID0gKCkgPT4ge1xuICAgIHZhciBfYTIsIF9iO1xuICAgIGNvbnN0IHZhbHVlID0gc2VsZWN0T25JbmRldGVybWluYXRlLnZhbHVlID8gIWlzQWxsU2VsZWN0ZWQudmFsdWUgOiAhKGlzQWxsU2VsZWN0ZWQudmFsdWUgfHwgc2VsZWN0aW9uLnZhbHVlLmxlbmd0aCk7XG4gICAgaXNBbGxTZWxlY3RlZC52YWx1ZSA9IHZhbHVlO1xuICAgIGxldCBzZWxlY3Rpb25DaGFuZ2VkID0gZmFsc2U7XG4gICAgbGV0IGNoaWxkcmVuQ291bnQgPSAwO1xuICAgIGNvbnN0IHJvd0tleTIgPSAoX2IgPSAoX2EyID0gaW5zdGFuY2UgPT0gbnVsbCA/IHZvaWQgMCA6IGluc3RhbmNlLnN0b3JlKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLnN0YXRlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnJvd0tleS52YWx1ZTtcbiAgICBkYXRhLnZhbHVlLmZvckVhY2goKHJvdywgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHJvd0luZGV4ID0gaW5kZXggKyBjaGlsZHJlbkNvdW50O1xuICAgICAgaWYgKHNlbGVjdGFibGUudmFsdWUpIHtcbiAgICAgICAgaWYgKHNlbGVjdGFibGUudmFsdWUuY2FsbChudWxsLCByb3csIHJvd0luZGV4KSAmJiB0b2dnbGVSb3dTdGF0dXMoc2VsZWN0aW9uLnZhbHVlLCByb3csIHZhbHVlKSkge1xuICAgICAgICAgIHNlbGVjdGlvbkNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodG9nZ2xlUm93U3RhdHVzKHNlbGVjdGlvbi52YWx1ZSwgcm93LCB2YWx1ZSkpIHtcbiAgICAgICAgICBzZWxlY3Rpb25DaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hpbGRyZW5Db3VudCArPSBnZXRDaGlsZHJlbkNvdW50KGdldFJvd0lkZW50aXR5KHJvdywgcm93S2V5MikpO1xuICAgIH0pO1xuICAgIGlmIChzZWxlY3Rpb25DaGFuZ2VkKSB7XG4gICAgICBpbnN0YW5jZS5lbWl0KFwic2VsZWN0aW9uLWNoYW5nZVwiLCBzZWxlY3Rpb24udmFsdWUgPyBzZWxlY3Rpb24udmFsdWUuc2xpY2UoKSA6IFtdKTtcbiAgICB9XG4gICAgaW5zdGFuY2UuZW1pdChcInNlbGVjdC1hbGxcIiwgc2VsZWN0aW9uLnZhbHVlKTtcbiAgfTtcbiAgY29uc3QgdXBkYXRlU2VsZWN0aW9uQnlSb3dLZXkgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2VsZWN0ZWRNYXAgPSBnZXRLZXlzTWFwKHNlbGVjdGlvbi52YWx1ZSwgcm93S2V5LnZhbHVlKTtcbiAgICBkYXRhLnZhbHVlLmZvckVhY2goKHJvdykgPT4ge1xuICAgICAgY29uc3Qgcm93SWQgPSBnZXRSb3dJZGVudGl0eShyb3csIHJvd0tleS52YWx1ZSk7XG4gICAgICBjb25zdCByb3dJbmZvID0gc2VsZWN0ZWRNYXBbcm93SWRdO1xuICAgICAgaWYgKHJvd0luZm8pIHtcbiAgICAgICAgc2VsZWN0aW9uLnZhbHVlW3Jvd0luZm8uaW5kZXhdID0gcm93O1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICBjb25zdCB1cGRhdGVBbGxTZWxlY3RlZCA9ICgpID0+IHtcbiAgICB2YXIgX2EyLCBfYiwgX2M7XG4gICAgaWYgKCgoX2EyID0gZGF0YS52YWx1ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5sZW5ndGgpID09PSAwKSB7XG4gICAgICBpc0FsbFNlbGVjdGVkLnZhbHVlID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBzZWxlY3RlZE1hcDtcbiAgICBpZiAocm93S2V5LnZhbHVlKSB7XG4gICAgICBzZWxlY3RlZE1hcCA9IGdldEtleXNNYXAoc2VsZWN0aW9uLnZhbHVlLCByb3dLZXkudmFsdWUpO1xuICAgIH1cbiAgICBjb25zdCBpc1NlbGVjdGVkMiA9IGZ1bmN0aW9uKHJvdykge1xuICAgICAgaWYgKHNlbGVjdGVkTWFwKSB7XG4gICAgICAgIHJldHVybiAhIXNlbGVjdGVkTWFwW2dldFJvd0lkZW50aXR5KHJvdywgcm93S2V5LnZhbHVlKV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc2VsZWN0aW9uLnZhbHVlLmluY2x1ZGVzKHJvdyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBsZXQgaXNBbGxTZWxlY3RlZF8gPSB0cnVlO1xuICAgIGxldCBzZWxlY3RlZENvdW50ID0gMDtcbiAgICBsZXQgY2hpbGRyZW5Db3VudCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDAsIGogPSAoZGF0YS52YWx1ZSB8fCBbXSkubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBjb25zdCBrZXlQcm9wID0gKF9jID0gKF9iID0gaW5zdGFuY2UgPT0gbnVsbCA/IHZvaWQgMCA6IGluc3RhbmNlLnN0b3JlKSA9PSBudWxsID8gdm9pZCAwIDogX2Iuc3RhdGVzKSA9PSBudWxsID8gdm9pZCAwIDogX2Mucm93S2V5LnZhbHVlO1xuICAgICAgY29uc3Qgcm93SW5kZXggPSBpICsgY2hpbGRyZW5Db3VudDtcbiAgICAgIGNvbnN0IGl0ZW0gPSBkYXRhLnZhbHVlW2ldO1xuICAgICAgY29uc3QgaXNSb3dTZWxlY3RhYmxlID0gc2VsZWN0YWJsZS52YWx1ZSAmJiBzZWxlY3RhYmxlLnZhbHVlLmNhbGwobnVsbCwgaXRlbSwgcm93SW5kZXgpO1xuICAgICAgaWYgKCFpc1NlbGVjdGVkMihpdGVtKSkge1xuICAgICAgICBpZiAoIXNlbGVjdGFibGUudmFsdWUgfHwgaXNSb3dTZWxlY3RhYmxlKSB7XG4gICAgICAgICAgaXNBbGxTZWxlY3RlZF8gPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0ZWRDb3VudCsrO1xuICAgICAgfVxuICAgICAgY2hpbGRyZW5Db3VudCArPSBnZXRDaGlsZHJlbkNvdW50KGdldFJvd0lkZW50aXR5KGl0ZW0sIGtleVByb3ApKTtcbiAgICB9XG4gICAgaWYgKHNlbGVjdGVkQ291bnQgPT09IDApXG4gICAgICBpc0FsbFNlbGVjdGVkXyA9IGZhbHNlO1xuICAgIGlzQWxsU2VsZWN0ZWQudmFsdWUgPSBpc0FsbFNlbGVjdGVkXztcbiAgfTtcbiAgY29uc3QgZ2V0Q2hpbGRyZW5Db3VudCA9IChyb3dLZXkyKSA9PiB7XG4gICAgdmFyIF9hMjtcbiAgICBpZiAoIWluc3RhbmNlIHx8ICFpbnN0YW5jZS5zdG9yZSlcbiAgICAgIHJldHVybiAwO1xuICAgIGNvbnN0IHsgdHJlZURhdGEgfSA9IGluc3RhbmNlLnN0b3JlLnN0YXRlcztcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGNvbnN0IGNoaWxkcmVuID0gKF9hMiA9IHRyZWVEYXRhLnZhbHVlW3Jvd0tleTJdKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgY291bnQgKz0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGRLZXkpID0+IHtcbiAgICAgICAgY291bnQgKz0gZ2V0Q2hpbGRyZW5Db3VudChjaGlsZEtleSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvdW50O1xuICB9O1xuICBjb25zdCB1cGRhdGVGaWx0ZXJzID0gKGNvbHVtbnMyLCB2YWx1ZXMpID0+IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoY29sdW1uczIpKSB7XG4gICAgICBjb2x1bW5zMiA9IFtjb2x1bW5zMl07XG4gICAgfVxuICAgIGNvbnN0IGZpbHRlcnNfID0ge307XG4gICAgY29sdW1uczIuZm9yRWFjaCgoY29sKSA9PiB7XG4gICAgICBmaWx0ZXJzLnZhbHVlW2NvbC5pZF0gPSB2YWx1ZXM7XG4gICAgICBmaWx0ZXJzX1tjb2wuY29sdW1uS2V5IHx8IGNvbC5pZF0gPSB2YWx1ZXM7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZpbHRlcnNfO1xuICB9O1xuICBjb25zdCB1cGRhdGVTb3J0ID0gKGNvbHVtbiwgcHJvcCwgb3JkZXIpID0+IHtcbiAgICBpZiAoc29ydGluZ0NvbHVtbi52YWx1ZSAmJiBzb3J0aW5nQ29sdW1uLnZhbHVlICE9PSBjb2x1bW4pIHtcbiAgICAgIHNvcnRpbmdDb2x1bW4udmFsdWUub3JkZXIgPSBudWxsO1xuICAgIH1cbiAgICBzb3J0aW5nQ29sdW1uLnZhbHVlID0gY29sdW1uO1xuICAgIHNvcnRQcm9wLnZhbHVlID0gcHJvcDtcbiAgICBzb3J0T3JkZXIudmFsdWUgPSBvcmRlcjtcbiAgfTtcbiAgY29uc3QgZXhlY0ZpbHRlciA9ICgpID0+IHtcbiAgICBsZXQgc291cmNlRGF0YSA9IHVucmVmKF9kYXRhKTtcbiAgICBPYmplY3Qua2V5cyhmaWx0ZXJzLnZhbHVlKS5mb3JFYWNoKChjb2x1bW5JZCkgPT4ge1xuICAgICAgY29uc3QgdmFsdWVzID0gZmlsdGVycy52YWx1ZVtjb2x1bW5JZF07XG4gICAgICBpZiAoIXZhbHVlcyB8fCB2YWx1ZXMubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCBjb2x1bW4gPSBnZXRDb2x1bW5CeUlkKHtcbiAgICAgICAgY29sdW1uczogY29sdW1ucy52YWx1ZVxuICAgICAgfSwgY29sdW1uSWQpO1xuICAgICAgaWYgKGNvbHVtbiAmJiBjb2x1bW4uZmlsdGVyTWV0aG9kKSB7XG4gICAgICAgIHNvdXJjZURhdGEgPSBzb3VyY2VEYXRhLmZpbHRlcigocm93KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlcy5zb21lKCh2YWx1ZSkgPT4gY29sdW1uLmZpbHRlck1ldGhvZC5jYWxsKG51bGwsIHZhbHVlLCByb3csIGNvbHVtbikpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBmaWx0ZXJlZERhdGEudmFsdWUgPSBzb3VyY2VEYXRhO1xuICB9O1xuICBjb25zdCBleGVjU29ydCA9ICgpID0+IHtcbiAgICBkYXRhLnZhbHVlID0gc29ydERhdGEoZmlsdGVyZWREYXRhLnZhbHVlLCB7XG4gICAgICBzb3J0aW5nQ29sdW1uOiBzb3J0aW5nQ29sdW1uLnZhbHVlLFxuICAgICAgc29ydFByb3A6IHNvcnRQcm9wLnZhbHVlLFxuICAgICAgc29ydE9yZGVyOiBzb3J0T3JkZXIudmFsdWVcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZXhlY1F1ZXJ5ID0gKGlnbm9yZSA9IHZvaWQgMCkgPT4ge1xuICAgIGlmICghKGlnbm9yZSAmJiBpZ25vcmUuZmlsdGVyKSkge1xuICAgICAgZXhlY0ZpbHRlcigpO1xuICAgIH1cbiAgICBleGVjU29ydCgpO1xuICB9O1xuICBjb25zdCBjbGVhckZpbHRlciA9IChjb2x1bW5LZXlzKSA9PiB7XG4gICAgY29uc3QgeyB0YWJsZUhlYWRlclJlZiB9ID0gaW5zdGFuY2UucmVmcztcbiAgICBpZiAoIXRhYmxlSGVhZGVyUmVmKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHBhbmVscyA9IE9iamVjdC5hc3NpZ24oe30sIHRhYmxlSGVhZGVyUmVmLmZpbHRlclBhbmVscyk7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHBhbmVscyk7XG4gICAgaWYgKCFrZXlzLmxlbmd0aClcbiAgICAgIHJldHVybjtcbiAgICBpZiAodHlwZW9mIGNvbHVtbktleXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbHVtbktleXMgPSBbY29sdW1uS2V5c107XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbHVtbktleXMpKSB7XG4gICAgICBjb25zdCBjb2x1bW5zXyA9IGNvbHVtbktleXMubWFwKChrZXkpID0+IGdldENvbHVtbkJ5S2V5KHtcbiAgICAgICAgY29sdW1uczogY29sdW1ucy52YWx1ZVxuICAgICAgfSwga2V5KSk7XG4gICAgICBrZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBjb25zdCBjb2x1bW4gPSBjb2x1bW5zXy5maW5kKChjb2wpID0+IGNvbC5pZCA9PT0ga2V5KTtcbiAgICAgICAgaWYgKGNvbHVtbikge1xuICAgICAgICAgIGNvbHVtbi5maWx0ZXJlZFZhbHVlID0gW107XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaW5zdGFuY2Uuc3RvcmUuY29tbWl0KFwiZmlsdGVyQ2hhbmdlXCIsIHtcbiAgICAgICAgY29sdW1uOiBjb2x1bW5zXyxcbiAgICAgICAgdmFsdWVzOiBbXSxcbiAgICAgICAgc2lsZW50OiB0cnVlLFxuICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbHVtbiA9IGNvbHVtbnMudmFsdWUuZmluZCgoY29sKSA9PiBjb2wuaWQgPT09IGtleSk7XG4gICAgICAgIGlmIChjb2x1bW4pIHtcbiAgICAgICAgICBjb2x1bW4uZmlsdGVyZWRWYWx1ZSA9IFtdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGZpbHRlcnMudmFsdWUgPSB7fTtcbiAgICAgIGluc3RhbmNlLnN0b3JlLmNvbW1pdChcImZpbHRlckNoYW5nZVwiLCB7XG4gICAgICAgIGNvbHVtbjoge30sXG4gICAgICAgIHZhbHVlczogW10sXG4gICAgICAgIHNpbGVudDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBjbGVhclNvcnQgPSAoKSA9PiB7XG4gICAgaWYgKCFzb3J0aW5nQ29sdW1uLnZhbHVlKVxuICAgICAgcmV0dXJuO1xuICAgIHVwZGF0ZVNvcnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgaW5zdGFuY2Uuc3RvcmUuY29tbWl0KFwiY2hhbmdlU29ydENvbmRpdGlvblwiLCB7XG4gICAgICBzaWxlbnQ6IHRydWVcbiAgICB9KTtcbiAgfTtcbiAgY29uc3Qge1xuICAgIHNldEV4cGFuZFJvd0tleXMsXG4gICAgdG9nZ2xlUm93RXhwYW5zaW9uLFxuICAgIHVwZGF0ZUV4cGFuZFJvd3MsXG4gICAgc3RhdGVzOiBleHBhbmRTdGF0ZXMsXG4gICAgaXNSb3dFeHBhbmRlZFxuICB9ID0gdXNlRXhwYW5kKHtcbiAgICBkYXRhLFxuICAgIHJvd0tleVxuICB9KTtcbiAgY29uc3Qge1xuICAgIHVwZGF0ZVRyZWVFeHBhbmRLZXlzLFxuICAgIHRvZ2dsZVRyZWVFeHBhbnNpb24sXG4gICAgdXBkYXRlVHJlZURhdGEsXG4gICAgbG9hZE9yVG9nZ2xlLFxuICAgIHN0YXRlczogdHJlZVN0YXRlc1xuICB9ID0gdXNlVHJlZSh7XG4gICAgZGF0YSxcbiAgICByb3dLZXlcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICB1cGRhdGVDdXJyZW50Um93RGF0YSxcbiAgICB1cGRhdGVDdXJyZW50Um93LFxuICAgIHNldEN1cnJlbnRSb3dLZXksXG4gICAgc3RhdGVzOiBjdXJyZW50RGF0YVxuICB9ID0gdXNlQ3VycmVudCh7XG4gICAgZGF0YSxcbiAgICByb3dLZXlcbiAgfSk7XG4gIGNvbnN0IHNldEV4cGFuZFJvd0tleXNBZGFwdGVyID0gKHZhbCkgPT4ge1xuICAgIHNldEV4cGFuZFJvd0tleXModmFsKTtcbiAgICB1cGRhdGVUcmVlRXhwYW5kS2V5cyh2YWwpO1xuICB9O1xuICBjb25zdCB0b2dnbGVSb3dFeHBhbnNpb25BZGFwdGVyID0gKHJvdywgZXhwYW5kZWQpID0+IHtcbiAgICBjb25zdCBoYXNFeHBhbmRDb2x1bW4gPSBjb2x1bW5zLnZhbHVlLnNvbWUoKHsgdHlwZSB9KSA9PiB0eXBlID09PSBcImV4cGFuZFwiKTtcbiAgICBpZiAoaGFzRXhwYW5kQ29sdW1uKSB7XG4gICAgICB0b2dnbGVSb3dFeHBhbnNpb24ocm93LCBleHBhbmRlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvZ2dsZVRyZWVFeHBhbnNpb24ocm93LCBleHBhbmRlZCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgIGFzc2VydFJvd0tleSxcbiAgICB1cGRhdGVDb2x1bW5zLFxuICAgIHNjaGVkdWxlTGF5b3V0LFxuICAgIGlzU2VsZWN0ZWQsXG4gICAgY2xlYXJTZWxlY3Rpb24sXG4gICAgY2xlYW5TZWxlY3Rpb24sXG4gICAgZ2V0U2VsZWN0aW9uUm93cyxcbiAgICB0b2dnbGVSb3dTZWxlY3Rpb24sXG4gICAgX3RvZ2dsZUFsbFNlbGVjdGlvbixcbiAgICB0b2dnbGVBbGxTZWxlY3Rpb246IG51bGwsXG4gICAgdXBkYXRlU2VsZWN0aW9uQnlSb3dLZXksXG4gICAgdXBkYXRlQWxsU2VsZWN0ZWQsXG4gICAgdXBkYXRlRmlsdGVycyxcbiAgICB1cGRhdGVDdXJyZW50Um93LFxuICAgIHVwZGF0ZVNvcnQsXG4gICAgZXhlY0ZpbHRlcixcbiAgICBleGVjU29ydCxcbiAgICBleGVjUXVlcnksXG4gICAgY2xlYXJGaWx0ZXIsXG4gICAgY2xlYXJTb3J0LFxuICAgIHRvZ2dsZVJvd0V4cGFuc2lvbixcbiAgICBzZXRFeHBhbmRSb3dLZXlzQWRhcHRlcixcbiAgICBzZXRDdXJyZW50Um93S2V5LFxuICAgIHRvZ2dsZVJvd0V4cGFuc2lvbkFkYXB0ZXIsXG4gICAgaXNSb3dFeHBhbmRlZCxcbiAgICB1cGRhdGVFeHBhbmRSb3dzLFxuICAgIHVwZGF0ZUN1cnJlbnRSb3dEYXRhLFxuICAgIGxvYWRPclRvZ2dsZSxcbiAgICB1cGRhdGVUcmVlRGF0YSxcbiAgICBzdGF0ZXM6IHtcbiAgICAgIHRhYmxlU2l6ZSxcbiAgICAgIHJvd0tleSxcbiAgICAgIGRhdGEsXG4gICAgICBfZGF0YSxcbiAgICAgIGlzQ29tcGxleCxcbiAgICAgIF9jb2x1bW5zLFxuICAgICAgb3JpZ2luQ29sdW1ucyxcbiAgICAgIGNvbHVtbnMsXG4gICAgICBmaXhlZENvbHVtbnMsXG4gICAgICByaWdodEZpeGVkQ29sdW1ucyxcbiAgICAgIGxlYWZDb2x1bW5zLFxuICAgICAgZml4ZWRMZWFmQ29sdW1ucyxcbiAgICAgIHJpZ2h0Rml4ZWRMZWFmQ29sdW1ucyxcbiAgICAgIHVwZGF0ZU9yZGVyRm5zLFxuICAgICAgbGVhZkNvbHVtbnNMZW5ndGgsXG4gICAgICBmaXhlZExlYWZDb2x1bW5zTGVuZ3RoLFxuICAgICAgcmlnaHRGaXhlZExlYWZDb2x1bW5zTGVuZ3RoLFxuICAgICAgaXNBbGxTZWxlY3RlZCxcbiAgICAgIHNlbGVjdGlvbixcbiAgICAgIHJlc2VydmVTZWxlY3Rpb24sXG4gICAgICBzZWxlY3RPbkluZGV0ZXJtaW5hdGUsXG4gICAgICBzZWxlY3RhYmxlLFxuICAgICAgZmlsdGVycyxcbiAgICAgIGZpbHRlcmVkRGF0YSxcbiAgICAgIHNvcnRpbmdDb2x1bW4sXG4gICAgICBzb3J0UHJvcCxcbiAgICAgIHNvcnRPcmRlcixcbiAgICAgIGhvdmVyUm93LFxuICAgICAgLi4uZXhwYW5kU3RhdGVzLFxuICAgICAgLi4udHJlZVN0YXRlcyxcbiAgICAgIC4uLmN1cnJlbnREYXRhXG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgeyB1c2VXYXRjaGVyIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhdGNoZXIubWpzLm1hcFxuIiwiaW1wb3J0IHsgZ2V0Q3VycmVudEluc3RhbmNlLCByZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2V0S2V5c01hcCwgZ2V0Um93SWRlbnRpdHksIHRvZ2dsZVJvd1N0YXR1cyB9IGZyb20gJy4uL3V0aWwubWpzJztcblxuZnVuY3Rpb24gdXNlRXhwYW5kKHdhdGNoZXJEYXRhKSB7XG4gIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gIGNvbnN0IGRlZmF1bHRFeHBhbmRBbGwgPSByZWYoZmFsc2UpO1xuICBjb25zdCBleHBhbmRSb3dzID0gcmVmKFtdKTtcbiAgY29uc3QgdXBkYXRlRXhwYW5kUm93cyA9ICgpID0+IHtcbiAgICBjb25zdCBkYXRhID0gd2F0Y2hlckRhdGEuZGF0YS52YWx1ZSB8fCBbXTtcbiAgICBjb25zdCByb3dLZXkgPSB3YXRjaGVyRGF0YS5yb3dLZXkudmFsdWU7XG4gICAgaWYgKGRlZmF1bHRFeHBhbmRBbGwudmFsdWUpIHtcbiAgICAgIGV4cGFuZFJvd3MudmFsdWUgPSBkYXRhLnNsaWNlKCk7XG4gICAgfSBlbHNlIGlmIChyb3dLZXkpIHtcbiAgICAgIGNvbnN0IGV4cGFuZFJvd3NNYXAgPSBnZXRLZXlzTWFwKGV4cGFuZFJvd3MudmFsdWUsIHJvd0tleSk7XG4gICAgICBleHBhbmRSb3dzLnZhbHVlID0gZGF0YS5yZWR1Y2UoKHByZXYsIHJvdykgPT4ge1xuICAgICAgICBjb25zdCByb3dJZCA9IGdldFJvd0lkZW50aXR5KHJvdywgcm93S2V5KTtcbiAgICAgICAgY29uc3Qgcm93SW5mbyA9IGV4cGFuZFJvd3NNYXBbcm93SWRdO1xuICAgICAgICBpZiAocm93SW5mbykge1xuICAgICAgICAgIHByZXYucHVzaChyb3cpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgfSwgW10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBhbmRSb3dzLnZhbHVlID0gW107XG4gICAgfVxuICB9O1xuICBjb25zdCB0b2dnbGVSb3dFeHBhbnNpb24gPSAocm93LCBleHBhbmRlZCkgPT4ge1xuICAgIGNvbnN0IGNoYW5nZWQgPSB0b2dnbGVSb3dTdGF0dXMoZXhwYW5kUm93cy52YWx1ZSwgcm93LCBleHBhbmRlZCk7XG4gICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgIGluc3RhbmNlLmVtaXQoXCJleHBhbmQtY2hhbmdlXCIsIHJvdywgZXhwYW5kUm93cy52YWx1ZS5zbGljZSgpKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHNldEV4cGFuZFJvd0tleXMgPSAocm93S2V5cykgPT4ge1xuICAgIGluc3RhbmNlLnN0b3JlLmFzc2VydFJvd0tleSgpO1xuICAgIGNvbnN0IGRhdGEgPSB3YXRjaGVyRGF0YS5kYXRhLnZhbHVlIHx8IFtdO1xuICAgIGNvbnN0IHJvd0tleSA9IHdhdGNoZXJEYXRhLnJvd0tleS52YWx1ZTtcbiAgICBjb25zdCBrZXlzTWFwID0gZ2V0S2V5c01hcChkYXRhLCByb3dLZXkpO1xuICAgIGV4cGFuZFJvd3MudmFsdWUgPSByb3dLZXlzLnJlZHVjZSgocHJldiwgY3VyKSA9PiB7XG4gICAgICBjb25zdCBpbmZvID0ga2V5c01hcFtjdXJdO1xuICAgICAgaWYgKGluZm8pIHtcbiAgICAgICAgcHJldi5wdXNoKGluZm8ucm93KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH0sIFtdKTtcbiAgfTtcbiAgY29uc3QgaXNSb3dFeHBhbmRlZCA9IChyb3cpID0+IHtcbiAgICBjb25zdCByb3dLZXkgPSB3YXRjaGVyRGF0YS5yb3dLZXkudmFsdWU7XG4gICAgaWYgKHJvd0tleSkge1xuICAgICAgY29uc3QgZXhwYW5kTWFwID0gZ2V0S2V5c01hcChleHBhbmRSb3dzLnZhbHVlLCByb3dLZXkpO1xuICAgICAgcmV0dXJuICEhZXhwYW5kTWFwW2dldFJvd0lkZW50aXR5KHJvdywgcm93S2V5KV07XG4gICAgfVxuICAgIHJldHVybiBleHBhbmRSb3dzLnZhbHVlLmluY2x1ZGVzKHJvdyk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgdXBkYXRlRXhwYW5kUm93cyxcbiAgICB0b2dnbGVSb3dFeHBhbnNpb24sXG4gICAgc2V0RXhwYW5kUm93S2V5cyxcbiAgICBpc1Jvd0V4cGFuZGVkLFxuICAgIHN0YXRlczoge1xuICAgICAgZXhwYW5kUm93cyxcbiAgICAgIGRlZmF1bHRFeHBhbmRBbGxcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCB7IHVzZUV4cGFuZCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHBhbmQubWpzLm1hcFxuIiwiaW1wb3J0IHsgcmVmLCBnZXRDdXJyZW50SW5zdGFuY2UsIGNvbXB1dGVkLCB1bnJlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2V0Um93SWRlbnRpdHksIHdhbGtUcmVlTm9kZSB9IGZyb20gJy4uL3V0aWwubWpzJztcblxuZnVuY3Rpb24gdXNlVHJlZSh3YXRjaGVyRGF0YSkge1xuICBjb25zdCBleHBhbmRSb3dLZXlzID0gcmVmKFtdKTtcbiAgY29uc3QgdHJlZURhdGEgPSByZWYoe30pO1xuICBjb25zdCBpbmRlbnQgPSByZWYoMTYpO1xuICBjb25zdCBsYXp5ID0gcmVmKGZhbHNlKTtcbiAgY29uc3QgbGF6eVRyZWVOb2RlTWFwID0gcmVmKHt9KTtcbiAgY29uc3QgbGF6eUNvbHVtbklkZW50aWZpZXIgPSByZWYoXCJoYXNDaGlsZHJlblwiKTtcbiAgY29uc3QgY2hpbGRyZW5Db2x1bW5OYW1lID0gcmVmKFwiY2hpbGRyZW5cIik7XG4gIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gIGNvbnN0IG5vcm1hbGl6ZWREYXRhID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmICghd2F0Y2hlckRhdGEucm93S2V5LnZhbHVlKVxuICAgICAgcmV0dXJuIHt9O1xuICAgIGNvbnN0IGRhdGEgPSB3YXRjaGVyRGF0YS5kYXRhLnZhbHVlIHx8IFtdO1xuICAgIHJldHVybiBub3JtYWxpemUoZGF0YSk7XG4gIH0pO1xuICBjb25zdCBub3JtYWxpemVkTGF6eU5vZGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3Qgcm93S2V5ID0gd2F0Y2hlckRhdGEucm93S2V5LnZhbHVlO1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhsYXp5VHJlZU5vZGVNYXAudmFsdWUpO1xuICAgIGNvbnN0IHJlcyA9IHt9O1xuICAgIGlmICgha2V5cy5sZW5ndGgpXG4gICAgICByZXR1cm4gcmVzO1xuICAgIGtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAobGF6eVRyZWVOb2RlTWFwLnZhbHVlW2tleV0ubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB7IGNoaWxkcmVuOiBbXSB9O1xuICAgICAgICBsYXp5VHJlZU5vZGVNYXAudmFsdWVba2V5XS5mb3JFYWNoKChyb3cpID0+IHtcbiAgICAgICAgICBjb25zdCBjdXJyZW50Um93S2V5ID0gZ2V0Um93SWRlbnRpdHkocm93LCByb3dLZXkpO1xuICAgICAgICAgIGl0ZW0uY2hpbGRyZW4ucHVzaChjdXJyZW50Um93S2V5KTtcbiAgICAgICAgICBpZiAocm93W2xhenlDb2x1bW5JZGVudGlmaWVyLnZhbHVlXSAmJiAhcmVzW2N1cnJlbnRSb3dLZXldKSB7XG4gICAgICAgICAgICByZXNbY3VycmVudFJvd0tleV0gPSB7IGNoaWxkcmVuOiBbXSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlc1trZXldID0gaXRlbTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzO1xuICB9KTtcbiAgY29uc3Qgbm9ybWFsaXplID0gKGRhdGEpID0+IHtcbiAgICBjb25zdCByb3dLZXkgPSB3YXRjaGVyRGF0YS5yb3dLZXkudmFsdWU7XG4gICAgY29uc3QgcmVzID0ge307XG4gICAgd2Fsa1RyZWVOb2RlKGRhdGEsIChwYXJlbnQsIGNoaWxkcmVuLCBsZXZlbCkgPT4ge1xuICAgICAgY29uc3QgcGFyZW50SWQgPSBnZXRSb3dJZGVudGl0eShwYXJlbnQsIHJvd0tleSk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgcmVzW3BhcmVudElkXSA9IHtcbiAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4ubWFwKChyb3cpID0+IGdldFJvd0lkZW50aXR5KHJvdywgcm93S2V5KSksXG4gICAgICAgICAgbGV2ZWxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAobGF6eS52YWx1ZSkge1xuICAgICAgICByZXNbcGFyZW50SWRdID0ge1xuICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICBsYXp5OiB0cnVlLFxuICAgICAgICAgIGxldmVsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgY2hpbGRyZW5Db2x1bW5OYW1lLnZhbHVlLCBsYXp5Q29sdW1uSWRlbnRpZmllci52YWx1ZSk7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcbiAgY29uc3QgdXBkYXRlVHJlZURhdGEgPSAoaWZDaGFuZ2VFeHBhbmRSb3dLZXlzID0gZmFsc2UsIGlmRXhwYW5kQWxsID0gKChfYSkgPT4gKF9hID0gaW5zdGFuY2Uuc3RvcmUpID09IG51bGwgPyB2b2lkIDAgOiBfYS5zdGF0ZXMuZGVmYXVsdEV4cGFuZEFsbC52YWx1ZSkoKSkgPT4ge1xuICAgIHZhciBfYTI7XG4gICAgY29uc3QgbmVzdGVkID0gbm9ybWFsaXplZERhdGEudmFsdWU7XG4gICAgY29uc3Qgbm9ybWFsaXplZExhenlOb2RlXyA9IG5vcm1hbGl6ZWRMYXp5Tm9kZS52YWx1ZTtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobmVzdGVkKTtcbiAgICBjb25zdCBuZXdUcmVlRGF0YSA9IHt9O1xuICAgIGlmIChrZXlzLmxlbmd0aCkge1xuICAgICAgY29uc3Qgb2xkVHJlZURhdGEgPSB1bnJlZih0cmVlRGF0YSk7XG4gICAgICBjb25zdCByb290TGF6eVJvd0tleXMgPSBbXTtcbiAgICAgIGNvbnN0IGdldEV4cGFuZGVkID0gKG9sZFZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgaWYgKGlmQ2hhbmdlRXhwYW5kUm93S2V5cykge1xuICAgICAgICAgIGlmIChleHBhbmRSb3dLZXlzLnZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gaWZFeHBhbmRBbGwgfHwgZXhwYW5kUm93S2V5cy52YWx1ZS5pbmNsdWRlcyhrZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gISEoaWZFeHBhbmRBbGwgfHwgKG9sZFZhbHVlID09IG51bGwgPyB2b2lkIDAgOiBvbGRWYWx1ZS5leHBhbmRlZCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBpbmNsdWRlZCA9IGlmRXhwYW5kQWxsIHx8IGV4cGFuZFJvd0tleXMudmFsdWUgJiYgZXhwYW5kUm93S2V5cy52YWx1ZS5pbmNsdWRlcyhrZXkpO1xuICAgICAgICAgIHJldHVybiAhISgob2xkVmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IG9sZFZhbHVlLmV4cGFuZGVkKSB8fCBpbmNsdWRlZCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBrZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IG9sZFRyZWVEYXRhW2tleV07XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0geyAuLi5uZXN0ZWRba2V5XSB9O1xuICAgICAgICBuZXdWYWx1ZS5leHBhbmRlZCA9IGdldEV4cGFuZGVkKG9sZFZhbHVlLCBrZXkpO1xuICAgICAgICBpZiAobmV3VmFsdWUubGF6eSkge1xuICAgICAgICAgIGNvbnN0IHsgbG9hZGVkID0gZmFsc2UsIGxvYWRpbmcgPSBmYWxzZSB9ID0gb2xkVmFsdWUgfHwge307XG4gICAgICAgICAgbmV3VmFsdWUubG9hZGVkID0gISFsb2FkZWQ7XG4gICAgICAgICAgbmV3VmFsdWUubG9hZGluZyA9ICEhbG9hZGluZztcbiAgICAgICAgICByb290TGF6eVJvd0tleXMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIG5ld1RyZWVEYXRhW2tleV0gPSBuZXdWYWx1ZTtcbiAgICAgIH0pO1xuICAgICAgY29uc3QgbGF6eUtleXMgPSBPYmplY3Qua2V5cyhub3JtYWxpemVkTGF6eU5vZGVfKTtcbiAgICAgIGlmIChsYXp5LnZhbHVlICYmIGxhenlLZXlzLmxlbmd0aCAmJiByb290TGF6eVJvd0tleXMubGVuZ3RoKSB7XG4gICAgICAgIGxhenlLZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gb2xkVHJlZURhdGFba2V5XTtcbiAgICAgICAgICBjb25zdCBsYXp5Tm9kZUNoaWxkcmVuID0gbm9ybWFsaXplZExhenlOb2RlX1trZXldLmNoaWxkcmVuO1xuICAgICAgICAgIGlmIChyb290TGF6eVJvd0tleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgaWYgKG5ld1RyZWVEYXRhW2tleV0uY2hpbGRyZW4ubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIltFbFRhYmxlXWNoaWxkcmVuIG11c3QgYmUgYW4gZW1wdHkgYXJyYXkuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3VHJlZURhdGFba2V5XS5jaGlsZHJlbiA9IGxhenlOb2RlQ2hpbGRyZW47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHsgbG9hZGVkID0gZmFsc2UsIGxvYWRpbmcgPSBmYWxzZSB9ID0gb2xkVmFsdWUgfHwge307XG4gICAgICAgICAgICBuZXdUcmVlRGF0YVtrZXldID0ge1xuICAgICAgICAgICAgICBsYXp5OiB0cnVlLFxuICAgICAgICAgICAgICBsb2FkZWQ6ICEhbG9hZGVkLFxuICAgICAgICAgICAgICBsb2FkaW5nOiAhIWxvYWRpbmcsXG4gICAgICAgICAgICAgIGV4cGFuZGVkOiBnZXRFeHBhbmRlZChvbGRWYWx1ZSwga2V5KSxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IGxhenlOb2RlQ2hpbGRyZW4sXG4gICAgICAgICAgICAgIGxldmVsOiBcIlwiXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRyZWVEYXRhLnZhbHVlID0gbmV3VHJlZURhdGE7XG4gICAgKF9hMiA9IGluc3RhbmNlLnN0b3JlKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLnVwZGF0ZVRhYmxlU2Nyb2xsWSgpO1xuICB9O1xuICB3YXRjaCgoKSA9PiBleHBhbmRSb3dLZXlzLnZhbHVlLCAoKSA9PiB7XG4gICAgdXBkYXRlVHJlZURhdGEodHJ1ZSk7XG4gIH0pO1xuICB3YXRjaCgoKSA9PiBub3JtYWxpemVkRGF0YS52YWx1ZSwgKCkgPT4ge1xuICAgIHVwZGF0ZVRyZWVEYXRhKCk7XG4gIH0pO1xuICB3YXRjaCgoKSA9PiBub3JtYWxpemVkTGF6eU5vZGUudmFsdWUsICgpID0+IHtcbiAgICB1cGRhdGVUcmVlRGF0YSgpO1xuICB9KTtcbiAgY29uc3QgdXBkYXRlVHJlZUV4cGFuZEtleXMgPSAodmFsdWUpID0+IHtcbiAgICBleHBhbmRSb3dLZXlzLnZhbHVlID0gdmFsdWU7XG4gICAgdXBkYXRlVHJlZURhdGEoKTtcbiAgfTtcbiAgY29uc3QgdG9nZ2xlVHJlZUV4cGFuc2lvbiA9IChyb3csIGV4cGFuZGVkKSA9PiB7XG4gICAgaW5zdGFuY2Uuc3RvcmUuYXNzZXJ0Um93S2V5KCk7XG4gICAgY29uc3Qgcm93S2V5ID0gd2F0Y2hlckRhdGEucm93S2V5LnZhbHVlO1xuICAgIGNvbnN0IGlkID0gZ2V0Um93SWRlbnRpdHkocm93LCByb3dLZXkpO1xuICAgIGNvbnN0IGRhdGEgPSBpZCAmJiB0cmVlRGF0YS52YWx1ZVtpZF07XG4gICAgaWYgKGlkICYmIGRhdGEgJiYgXCJleHBhbmRlZFwiIGluIGRhdGEpIHtcbiAgICAgIGNvbnN0IG9sZEV4cGFuZGVkID0gZGF0YS5leHBhbmRlZDtcbiAgICAgIGV4cGFuZGVkID0gdHlwZW9mIGV4cGFuZGVkID09PSBcInVuZGVmaW5lZFwiID8gIWRhdGEuZXhwYW5kZWQgOiBleHBhbmRlZDtcbiAgICAgIHRyZWVEYXRhLnZhbHVlW2lkXS5leHBhbmRlZCA9IGV4cGFuZGVkO1xuICAgICAgaWYgKG9sZEV4cGFuZGVkICE9PSBleHBhbmRlZCkge1xuICAgICAgICBpbnN0YW5jZS5lbWl0KFwiZXhwYW5kLWNoYW5nZVwiLCByb3csIGV4cGFuZGVkKTtcbiAgICAgIH1cbiAgICAgIGluc3RhbmNlLnN0b3JlLnVwZGF0ZVRhYmxlU2Nyb2xsWSgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgbG9hZE9yVG9nZ2xlID0gKHJvdykgPT4ge1xuICAgIGluc3RhbmNlLnN0b3JlLmFzc2VydFJvd0tleSgpO1xuICAgIGNvbnN0IHJvd0tleSA9IHdhdGNoZXJEYXRhLnJvd0tleS52YWx1ZTtcbiAgICBjb25zdCBpZCA9IGdldFJvd0lkZW50aXR5KHJvdywgcm93S2V5KTtcbiAgICBjb25zdCBkYXRhID0gdHJlZURhdGEudmFsdWVbaWRdO1xuICAgIGlmIChsYXp5LnZhbHVlICYmIGRhdGEgJiYgXCJsb2FkZWRcIiBpbiBkYXRhICYmICFkYXRhLmxvYWRlZCkge1xuICAgICAgbG9hZERhdGEocm93LCBpZCwgZGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvZ2dsZVRyZWVFeHBhbnNpb24ocm93LCB2b2lkIDApO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgbG9hZERhdGEgPSAocm93LCBrZXksIHRyZWVOb2RlKSA9PiB7XG4gICAgY29uc3QgeyBsb2FkIH0gPSBpbnN0YW5jZS5wcm9wcztcbiAgICBpZiAobG9hZCAmJiAhdHJlZURhdGEudmFsdWVba2V5XS5sb2FkZWQpIHtcbiAgICAgIHRyZWVEYXRhLnZhbHVlW2tleV0ubG9hZGluZyA9IHRydWU7XG4gICAgICBsb2FkKHJvdywgdHJlZU5vZGUsIChkYXRhKSA9PiB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbRWxUYWJsZV0gZGF0YSBtdXN0IGJlIGFuIGFycmF5XCIpO1xuICAgICAgICB9XG4gICAgICAgIHRyZWVEYXRhLnZhbHVlW2tleV0ubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB0cmVlRGF0YS52YWx1ZVtrZXldLmxvYWRlZCA9IHRydWU7XG4gICAgICAgIHRyZWVEYXRhLnZhbHVlW2tleV0uZXhwYW5kZWQgPSB0cnVlO1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICBsYXp5VHJlZU5vZGVNYXAudmFsdWVba2V5XSA9IGRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2UuZW1pdChcImV4cGFuZC1jaGFuZ2VcIiwgcm93LCB0cnVlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBsb2FkRGF0YSxcbiAgICBsb2FkT3JUb2dnbGUsXG4gICAgdG9nZ2xlVHJlZUV4cGFuc2lvbixcbiAgICB1cGRhdGVUcmVlRXhwYW5kS2V5cyxcbiAgICB1cGRhdGVUcmVlRGF0YSxcbiAgICBub3JtYWxpemUsXG4gICAgc3RhdGVzOiB7XG4gICAgICBleHBhbmRSb3dLZXlzLFxuICAgICAgdHJlZURhdGEsXG4gICAgICBpbmRlbnQsXG4gICAgICBsYXp5LFxuICAgICAgbGF6eVRyZWVOb2RlTWFwLFxuICAgICAgbGF6eUNvbHVtbklkZW50aWZpZXIsXG4gICAgICBjaGlsZHJlbkNvbHVtbk5hbWVcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCB7IHVzZVRyZWUgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJlZS5tanMubWFwXG4iLCJpbXBvcnQgeyBnZXRDdXJyZW50SW5zdGFuY2UsIHJlZiwgdW5yZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2V0Um93SWRlbnRpdHkgfSBmcm9tICcuLi91dGlsLm1qcyc7XG5cbmZ1bmN0aW9uIHVzZUN1cnJlbnQod2F0Y2hlckRhdGEpIHtcbiAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgY29uc3QgX2N1cnJlbnRSb3dLZXkgPSByZWYobnVsbCk7XG4gIGNvbnN0IGN1cnJlbnRSb3cgPSByZWYobnVsbCk7XG4gIGNvbnN0IHNldEN1cnJlbnRSb3dLZXkgPSAoa2V5KSA9PiB7XG4gICAgaW5zdGFuY2Uuc3RvcmUuYXNzZXJ0Um93S2V5KCk7XG4gICAgX2N1cnJlbnRSb3dLZXkudmFsdWUgPSBrZXk7XG4gICAgc2V0Q3VycmVudFJvd0J5S2V5KGtleSk7XG4gIH07XG4gIGNvbnN0IHJlc3RvcmVDdXJyZW50Um93S2V5ID0gKCkgPT4ge1xuICAgIF9jdXJyZW50Um93S2V5LnZhbHVlID0gbnVsbDtcbiAgfTtcbiAgY29uc3Qgc2V0Q3VycmVudFJvd0J5S2V5ID0gKGtleSkgPT4ge1xuICAgIGNvbnN0IHsgZGF0YSwgcm93S2V5IH0gPSB3YXRjaGVyRGF0YTtcbiAgICBsZXQgX2N1cnJlbnRSb3cgPSBudWxsO1xuICAgIGlmIChyb3dLZXkudmFsdWUpIHtcbiAgICAgIF9jdXJyZW50Um93ID0gKHVucmVmKGRhdGEpIHx8IFtdKS5maW5kKChpdGVtKSA9PiBnZXRSb3dJZGVudGl0eShpdGVtLCByb3dLZXkudmFsdWUpID09PSBrZXkpO1xuICAgIH1cbiAgICBjdXJyZW50Um93LnZhbHVlID0gX2N1cnJlbnRSb3c7XG4gICAgaW5zdGFuY2UuZW1pdChcImN1cnJlbnQtY2hhbmdlXCIsIGN1cnJlbnRSb3cudmFsdWUsIG51bGwpO1xuICB9O1xuICBjb25zdCB1cGRhdGVDdXJyZW50Um93ID0gKF9jdXJyZW50Um93KSA9PiB7XG4gICAgY29uc3Qgb2xkQ3VycmVudFJvdyA9IGN1cnJlbnRSb3cudmFsdWU7XG4gICAgaWYgKF9jdXJyZW50Um93ICYmIF9jdXJyZW50Um93ICE9PSBvbGRDdXJyZW50Um93KSB7XG4gICAgICBjdXJyZW50Um93LnZhbHVlID0gX2N1cnJlbnRSb3c7XG4gICAgICBpbnN0YW5jZS5lbWl0KFwiY3VycmVudC1jaGFuZ2VcIiwgY3VycmVudFJvdy52YWx1ZSwgb2xkQ3VycmVudFJvdyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghX2N1cnJlbnRSb3cgJiYgb2xkQ3VycmVudFJvdykge1xuICAgICAgY3VycmVudFJvdy52YWx1ZSA9IG51bGw7XG4gICAgICBpbnN0YW5jZS5lbWl0KFwiY3VycmVudC1jaGFuZ2VcIiwgbnVsbCwgb2xkQ3VycmVudFJvdyk7XG4gICAgfVxuICB9O1xuICBjb25zdCB1cGRhdGVDdXJyZW50Um93RGF0YSA9ICgpID0+IHtcbiAgICBjb25zdCByb3dLZXkgPSB3YXRjaGVyRGF0YS5yb3dLZXkudmFsdWU7XG4gICAgY29uc3QgZGF0YSA9IHdhdGNoZXJEYXRhLmRhdGEudmFsdWUgfHwgW107XG4gICAgY29uc3Qgb2xkQ3VycmVudFJvdyA9IGN1cnJlbnRSb3cudmFsdWU7XG4gICAgaWYgKCFkYXRhLmluY2x1ZGVzKG9sZEN1cnJlbnRSb3cpICYmIG9sZEN1cnJlbnRSb3cpIHtcbiAgICAgIGlmIChyb3dLZXkpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFJvd0tleSA9IGdldFJvd0lkZW50aXR5KG9sZEN1cnJlbnRSb3csIHJvd0tleSk7XG4gICAgICAgIHNldEN1cnJlbnRSb3dCeUtleShjdXJyZW50Um93S2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnRSb3cudmFsdWUgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRSb3cudmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgaW5zdGFuY2UuZW1pdChcImN1cnJlbnQtY2hhbmdlXCIsIG51bGwsIG9sZEN1cnJlbnRSb3cpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX2N1cnJlbnRSb3dLZXkudmFsdWUpIHtcbiAgICAgIHNldEN1cnJlbnRSb3dCeUtleShfY3VycmVudFJvd0tleS52YWx1ZSk7XG4gICAgICByZXN0b3JlQ3VycmVudFJvd0tleSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBzZXRDdXJyZW50Um93S2V5LFxuICAgIHJlc3RvcmVDdXJyZW50Um93S2V5LFxuICAgIHNldEN1cnJlbnRSb3dCeUtleSxcbiAgICB1cGRhdGVDdXJyZW50Um93LFxuICAgIHVwZGF0ZUN1cnJlbnRSb3dEYXRhLFxuICAgIHN0YXRlczoge1xuICAgICAgX2N1cnJlbnRSb3dLZXksXG4gICAgICBjdXJyZW50Um93XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgeyB1c2VDdXJyZW50IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWN1cnJlbnQubWpzLm1hcFxuIiwiaW1wb3J0IHsgZ2V0Q3VycmVudEluc3RhbmNlLCB1bnJlZiwgbmV4dFRpY2sgfSBmcm9tICd2dWUnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi9ob29rcy9pbmRleC5tanMnO1xuaW1wb3J0IHVzZVdhdGNoZXIgZnJvbSAnLi93YXRjaGVyLm1qcyc7XG5pbXBvcnQgeyB1c2VOYW1lc3BhY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2UtbmFtZXNwYWNlL2luZGV4Lm1qcyc7XG5cbmZ1bmN0aW9uIHJlcGxhY2VDb2x1bW4oYXJyYXksIGNvbHVtbikge1xuICByZXR1cm4gYXJyYXkubWFwKChpdGVtKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIGlmIChpdGVtLmlkID09PSBjb2x1bW4uaWQpIHtcbiAgICAgIHJldHVybiBjb2x1bW47XG4gICAgfSBlbHNlIGlmICgoX2EgPSBpdGVtLmNoaWxkcmVuKSA9PSBudWxsID8gdm9pZCAwIDogX2EubGVuZ3RoKSB7XG4gICAgICBpdGVtLmNoaWxkcmVuID0gcmVwbGFjZUNvbHVtbihpdGVtLmNoaWxkcmVuLCBjb2x1bW4pO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbiAgfSk7XG59XG5mdW5jdGlvbiBzb3J0Q29sdW1uKGFycmF5KSB7XG4gIGFycmF5LmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGl0ZW0ubm8gPSAoX2EgPSBpdGVtLmdldENvbHVtbkluZGV4KSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChpdGVtKTtcbiAgICBpZiAoKF9iID0gaXRlbS5jaGlsZHJlbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmxlbmd0aCkge1xuICAgICAgc29ydENvbHVtbihpdGVtLmNoaWxkcmVuKTtcbiAgICB9XG4gIH0pO1xuICBhcnJheS5zb3J0KChjdXIsIHByZSkgPT4gY3VyLm5vIC0gcHJlLm5vKTtcbn1cbmZ1bmN0aW9uIHVzZVN0b3JlKCkge1xuICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBjb25zdCB3YXRjaGVyID0gdXNlV2F0Y2hlcigpO1xuICBjb25zdCBucyA9IHVzZU5hbWVzcGFjZShcInRhYmxlXCIpO1xuICBjb25zdCBtdXRhdGlvbnMgPSB7XG4gICAgc2V0RGF0YShzdGF0ZXMsIGRhdGEpIHtcbiAgICAgIGNvbnN0IGRhdGFJbnN0YW5jZUNoYW5nZWQgPSB1bnJlZihzdGF0ZXMuX2RhdGEpICE9PSBkYXRhO1xuICAgICAgc3RhdGVzLmRhdGEudmFsdWUgPSBkYXRhO1xuICAgICAgc3RhdGVzLl9kYXRhLnZhbHVlID0gZGF0YTtcbiAgICAgIGluc3RhbmNlLnN0b3JlLmV4ZWNRdWVyeSgpO1xuICAgICAgaW5zdGFuY2Uuc3RvcmUudXBkYXRlQ3VycmVudFJvd0RhdGEoKTtcbiAgICAgIGluc3RhbmNlLnN0b3JlLnVwZGF0ZUV4cGFuZFJvd3MoKTtcbiAgICAgIGluc3RhbmNlLnN0b3JlLnVwZGF0ZVRyZWVEYXRhKGluc3RhbmNlLnN0b3JlLnN0YXRlcy5kZWZhdWx0RXhwYW5kQWxsLnZhbHVlKTtcbiAgICAgIGlmICh1bnJlZihzdGF0ZXMucmVzZXJ2ZVNlbGVjdGlvbikpIHtcbiAgICAgICAgaW5zdGFuY2Uuc3RvcmUuYXNzZXJ0Um93S2V5KCk7XG4gICAgICAgIGluc3RhbmNlLnN0b3JlLnVwZGF0ZVNlbGVjdGlvbkJ5Um93S2V5KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZGF0YUluc3RhbmNlQ2hhbmdlZCkge1xuICAgICAgICAgIGluc3RhbmNlLnN0b3JlLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5zdGFuY2Uuc3RvcmUuY2xlYW5TZWxlY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaW5zdGFuY2Uuc3RvcmUudXBkYXRlQWxsU2VsZWN0ZWQoKTtcbiAgICAgIGlmIChpbnN0YW5jZS4kcmVhZHkpIHtcbiAgICAgICAgaW5zdGFuY2Uuc3RvcmUuc2NoZWR1bGVMYXlvdXQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGluc2VydENvbHVtbihzdGF0ZXMsIGNvbHVtbiwgcGFyZW50LCB1cGRhdGVDb2x1bW5PcmRlcikge1xuICAgICAgY29uc3QgYXJyYXkgPSB1bnJlZihzdGF0ZXMuX2NvbHVtbnMpO1xuICAgICAgbGV0IG5ld0NvbHVtbnMgPSBbXTtcbiAgICAgIGlmICghcGFyZW50KSB7XG4gICAgICAgIGFycmF5LnB1c2goY29sdW1uKTtcbiAgICAgICAgbmV3Q29sdW1ucyA9IGFycmF5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHBhcmVudCAmJiAhcGFyZW50LmNoaWxkcmVuKSB7XG4gICAgICAgICAgcGFyZW50LmNoaWxkcmVuID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50LmNoaWxkcmVuLnB1c2goY29sdW1uKTtcbiAgICAgICAgbmV3Q29sdW1ucyA9IHJlcGxhY2VDb2x1bW4oYXJyYXksIHBhcmVudCk7XG4gICAgICB9XG4gICAgICBzb3J0Q29sdW1uKG5ld0NvbHVtbnMpO1xuICAgICAgc3RhdGVzLl9jb2x1bW5zLnZhbHVlID0gbmV3Q29sdW1ucztcbiAgICAgIHN0YXRlcy51cGRhdGVPcmRlckZucy5wdXNoKHVwZGF0ZUNvbHVtbk9yZGVyKTtcbiAgICAgIGlmIChjb2x1bW4udHlwZSA9PT0gXCJzZWxlY3Rpb25cIikge1xuICAgICAgICBzdGF0ZXMuc2VsZWN0YWJsZS52YWx1ZSA9IGNvbHVtbi5zZWxlY3RhYmxlO1xuICAgICAgICBzdGF0ZXMucmVzZXJ2ZVNlbGVjdGlvbi52YWx1ZSA9IGNvbHVtbi5yZXNlcnZlU2VsZWN0aW9uO1xuICAgICAgfVxuICAgICAgaWYgKGluc3RhbmNlLiRyZWFkeSkge1xuICAgICAgICBpbnN0YW5jZS5zdG9yZS51cGRhdGVDb2x1bW5zKCk7XG4gICAgICAgIGluc3RhbmNlLnN0b3JlLnNjaGVkdWxlTGF5b3V0KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB1cGRhdGVDb2x1bW5PcmRlcihzdGF0ZXMsIGNvbHVtbikge1xuICAgICAgdmFyIF9hO1xuICAgICAgY29uc3QgbmV3Q29sdW1uSW5kZXggPSAoX2EgPSBjb2x1bW4uZ2V0Q29sdW1uSW5kZXgpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKGNvbHVtbik7XG4gICAgICBpZiAobmV3Q29sdW1uSW5kZXggPT09IGNvbHVtbi5ubylcbiAgICAgICAgcmV0dXJuO1xuICAgICAgc29ydENvbHVtbihzdGF0ZXMuX2NvbHVtbnMudmFsdWUpO1xuICAgICAgaWYgKGluc3RhbmNlLiRyZWFkeSkge1xuICAgICAgICBpbnN0YW5jZS5zdG9yZS51cGRhdGVDb2x1bW5zKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW1vdmVDb2x1bW4oc3RhdGVzLCBjb2x1bW4sIHBhcmVudCwgdXBkYXRlQ29sdW1uT3JkZXIpIHtcbiAgICAgIGNvbnN0IGFycmF5ID0gdW5yZWYoc3RhdGVzLl9jb2x1bW5zKSB8fCBbXTtcbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShwYXJlbnQuY2hpbGRyZW4uZmluZEluZGV4KChpdGVtKSA9PiBpdGVtLmlkID09PSBjb2x1bW4uaWQpLCAxKTtcbiAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICBpZiAoKChfYSA9IHBhcmVudC5jaGlsZHJlbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgPT09IDApIHtcbiAgICAgICAgICAgIGRlbGV0ZSBwYXJlbnQuY2hpbGRyZW47XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc3RhdGVzLl9jb2x1bW5zLnZhbHVlID0gcmVwbGFjZUNvbHVtbihhcnJheSwgcGFyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gYXJyYXkuaW5kZXhPZihjb2x1bW4pO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgc3RhdGVzLl9jb2x1bW5zLnZhbHVlID0gYXJyYXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHVwZGF0ZUZuSW5kZXggPSBzdGF0ZXMudXBkYXRlT3JkZXJGbnMuaW5kZXhPZih1cGRhdGVDb2x1bW5PcmRlcik7XG4gICAgICB1cGRhdGVGbkluZGV4ID4gLTEgJiYgc3RhdGVzLnVwZGF0ZU9yZGVyRm5zLnNwbGljZSh1cGRhdGVGbkluZGV4LCAxKTtcbiAgICAgIGlmIChpbnN0YW5jZS4kcmVhZHkpIHtcbiAgICAgICAgaW5zdGFuY2Uuc3RvcmUudXBkYXRlQ29sdW1ucygpO1xuICAgICAgICBpbnN0YW5jZS5zdG9yZS5zY2hlZHVsZUxheW91dCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc29ydChzdGF0ZXMsIG9wdGlvbnMpIHtcbiAgICAgIGNvbnN0IHsgcHJvcCwgb3JkZXIsIGluaXQgfSA9IG9wdGlvbnM7XG4gICAgICBpZiAocHJvcCkge1xuICAgICAgICBjb25zdCBjb2x1bW4gPSB1bnJlZihzdGF0ZXMuY29sdW1ucykuZmluZCgoY29sdW1uMikgPT4gY29sdW1uMi5wcm9wZXJ0eSA9PT0gcHJvcCk7XG4gICAgICAgIGlmIChjb2x1bW4pIHtcbiAgICAgICAgICBjb2x1bW4ub3JkZXIgPSBvcmRlcjtcbiAgICAgICAgICBpbnN0YW5jZS5zdG9yZS51cGRhdGVTb3J0KGNvbHVtbiwgcHJvcCwgb3JkZXIpO1xuICAgICAgICAgIGluc3RhbmNlLnN0b3JlLmNvbW1pdChcImNoYW5nZVNvcnRDb25kaXRpb25cIiwgeyBpbml0IH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjaGFuZ2VTb3J0Q29uZGl0aW9uKHN0YXRlcywgb3B0aW9ucykge1xuICAgICAgY29uc3QgeyBzb3J0aW5nQ29sdW1uLCBzb3J0UHJvcCwgc29ydE9yZGVyIH0gPSBzdGF0ZXM7XG4gICAgICBjb25zdCBjb2x1bW5WYWx1ZSA9IHVucmVmKHNvcnRpbmdDb2x1bW4pLCBwcm9wVmFsdWUgPSB1bnJlZihzb3J0UHJvcCksIG9yZGVyVmFsdWUgPSB1bnJlZihzb3J0T3JkZXIpO1xuICAgICAgaWYgKG9yZGVyVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgc3RhdGVzLnNvcnRpbmdDb2x1bW4udmFsdWUgPSBudWxsO1xuICAgICAgICBzdGF0ZXMuc29ydFByb3AudmFsdWUgPSBudWxsO1xuICAgICAgfVxuICAgICAgY29uc3QgaWdub3JlID0geyBmaWx0ZXI6IHRydWUgfTtcbiAgICAgIGluc3RhbmNlLnN0b3JlLmV4ZWNRdWVyeShpZ25vcmUpO1xuICAgICAgaWYgKCFvcHRpb25zIHx8ICEob3B0aW9ucy5zaWxlbnQgfHwgb3B0aW9ucy5pbml0KSkge1xuICAgICAgICBpbnN0YW5jZS5lbWl0KFwic29ydC1jaGFuZ2VcIiwge1xuICAgICAgICAgIGNvbHVtbjogY29sdW1uVmFsdWUsXG4gICAgICAgICAgcHJvcDogcHJvcFZhbHVlLFxuICAgICAgICAgIG9yZGVyOiBvcmRlclZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaW5zdGFuY2Uuc3RvcmUudXBkYXRlVGFibGVTY3JvbGxZKCk7XG4gICAgfSxcbiAgICBmaWx0ZXJDaGFuZ2UoX3N0YXRlcywgb3B0aW9ucykge1xuICAgICAgY29uc3QgeyBjb2x1bW4sIHZhbHVlcywgc2lsZW50IH0gPSBvcHRpb25zO1xuICAgICAgY29uc3QgbmV3RmlsdGVycyA9IGluc3RhbmNlLnN0b3JlLnVwZGF0ZUZpbHRlcnMoY29sdW1uLCB2YWx1ZXMpO1xuICAgICAgaW5zdGFuY2Uuc3RvcmUuZXhlY1F1ZXJ5KCk7XG4gICAgICBpZiAoIXNpbGVudCkge1xuICAgICAgICBpbnN0YW5jZS5lbWl0KFwiZmlsdGVyLWNoYW5nZVwiLCBuZXdGaWx0ZXJzKTtcbiAgICAgIH1cbiAgICAgIGluc3RhbmNlLnN0b3JlLnVwZGF0ZVRhYmxlU2Nyb2xsWSgpO1xuICAgIH0sXG4gICAgdG9nZ2xlQWxsU2VsZWN0aW9uKCkge1xuICAgICAgaW5zdGFuY2Uuc3RvcmUudG9nZ2xlQWxsU2VsZWN0aW9uKCk7XG4gICAgfSxcbiAgICByb3dTZWxlY3RlZENoYW5nZWQoX3N0YXRlcywgcm93KSB7XG4gICAgICBpbnN0YW5jZS5zdG9yZS50b2dnbGVSb3dTZWxlY3Rpb24ocm93KTtcbiAgICAgIGluc3RhbmNlLnN0b3JlLnVwZGF0ZUFsbFNlbGVjdGVkKCk7XG4gICAgfSxcbiAgICBzZXRIb3ZlclJvdyhzdGF0ZXMsIHJvdykge1xuICAgICAgc3RhdGVzLmhvdmVyUm93LnZhbHVlID0gcm93O1xuICAgIH0sXG4gICAgc2V0Q3VycmVudFJvdyhfc3RhdGVzLCByb3cpIHtcbiAgICAgIGluc3RhbmNlLnN0b3JlLnVwZGF0ZUN1cnJlbnRSb3cocm93KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGNvbW1pdCA9IGZ1bmN0aW9uKG5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBtdXRhdGlvbnMyID0gaW5zdGFuY2Uuc3RvcmUubXV0YXRpb25zO1xuICAgIGlmIChtdXRhdGlvbnMyW25hbWVdKSB7XG4gICAgICBtdXRhdGlvbnMyW25hbWVdLmFwcGx5KGluc3RhbmNlLCBbaW5zdGFuY2Uuc3RvcmUuc3RhdGVzXS5jb25jYXQoYXJncykpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEFjdGlvbiBub3QgZm91bmQ6ICR7bmFtZX1gKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHVwZGF0ZVRhYmxlU2Nyb2xsWSA9IGZ1bmN0aW9uKCkge1xuICAgIG5leHRUaWNrKCgpID0+IGluc3RhbmNlLmxheW91dC51cGRhdGVTY3JvbGxZLmFwcGx5KGluc3RhbmNlLmxheW91dCkpO1xuICB9O1xuICByZXR1cm4ge1xuICAgIG5zLFxuICAgIC4uLndhdGNoZXIsXG4gICAgbXV0YXRpb25zLFxuICAgIGNvbW1pdCxcbiAgICB1cGRhdGVUYWJsZVNjcm9sbFlcbiAgfTtcbn1cbmNsYXNzIEhlbHBlclN0b3JlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5SZXR1cm4gPSB1c2VTdG9yZSgpO1xuICB9XG59XG5cbmV4cG9ydCB7IHVzZVN0b3JlIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiIsImltcG9ydCB7IHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGRlYm91bmNlIH0gZnJvbSAnbG9kYXNoLXVuaWZpZWQnO1xuaW1wb3J0IHVzZVN0b3JlIGZyb20gJy4vaW5kZXgubWpzJztcblxuY29uc3QgSW5pdGlhbFN0YXRlTWFwID0ge1xuICByb3dLZXk6IFwicm93S2V5XCIsXG4gIGRlZmF1bHRFeHBhbmRBbGw6IFwiZGVmYXVsdEV4cGFuZEFsbFwiLFxuICBzZWxlY3RPbkluZGV0ZXJtaW5hdGU6IFwic2VsZWN0T25JbmRldGVybWluYXRlXCIsXG4gIGluZGVudDogXCJpbmRlbnRcIixcbiAgbGF6eTogXCJsYXp5XCIsXG4gIGRhdGE6IFwiZGF0YVwiLFxuICBbXCJ0cmVlUHJvcHMuaGFzQ2hpbGRyZW5cIl06IHtcbiAgICBrZXk6IFwibGF6eUNvbHVtbklkZW50aWZpZXJcIixcbiAgICBkZWZhdWx0OiBcImhhc0NoaWxkcmVuXCJcbiAgfSxcbiAgW1widHJlZVByb3BzLmNoaWxkcmVuXCJdOiB7XG4gICAga2V5OiBcImNoaWxkcmVuQ29sdW1uTmFtZVwiLFxuICAgIGRlZmF1bHQ6IFwiY2hpbGRyZW5cIlxuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlU3RvcmUodGFibGUsIHByb3BzKSB7XG4gIGlmICghdGFibGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUYWJsZSBpcyByZXF1aXJlZC5cIik7XG4gIH1cbiAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSgpO1xuICBzdG9yZS50b2dnbGVBbGxTZWxlY3Rpb24gPSBkZWJvdW5jZShzdG9yZS5fdG9nZ2xlQWxsU2VsZWN0aW9uLCAxMCk7XG4gIE9iamVjdC5rZXlzKEluaXRpYWxTdGF0ZU1hcCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgaGFuZGxlVmFsdWUoZ2V0QXJyS2V5c1ZhbHVlKHByb3BzLCBrZXkpLCBrZXksIHN0b3JlKTtcbiAgfSk7XG4gIHByb3h5VGFibGVQcm9wcyhzdG9yZSwgcHJvcHMpO1xuICByZXR1cm4gc3RvcmU7XG59XG5mdW5jdGlvbiBwcm94eVRhYmxlUHJvcHMoc3RvcmUsIHByb3BzKSB7XG4gIE9iamVjdC5rZXlzKEluaXRpYWxTdGF0ZU1hcCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgd2F0Y2goKCkgPT4gZ2V0QXJyS2V5c1ZhbHVlKHByb3BzLCBrZXkpLCAodmFsdWUpID0+IHtcbiAgICAgIGhhbmRsZVZhbHVlKHZhbHVlLCBrZXksIHN0b3JlKTtcbiAgICB9KTtcbiAgfSk7XG59XG5mdW5jdGlvbiBoYW5kbGVWYWx1ZSh2YWx1ZSwgcHJvcHNLZXksIHN0b3JlKSB7XG4gIGxldCBuZXdWYWwgPSB2YWx1ZTtcbiAgbGV0IHN0b3JlS2V5ID0gSW5pdGlhbFN0YXRlTWFwW3Byb3BzS2V5XTtcbiAgaWYgKHR5cGVvZiBJbml0aWFsU3RhdGVNYXBbcHJvcHNLZXldID09PSBcIm9iamVjdFwiKSB7XG4gICAgc3RvcmVLZXkgPSBzdG9yZUtleS5rZXk7XG4gICAgbmV3VmFsID0gbmV3VmFsIHx8IEluaXRpYWxTdGF0ZU1hcFtwcm9wc0tleV0uZGVmYXVsdDtcbiAgfVxuICBzdG9yZS5zdGF0ZXNbc3RvcmVLZXldLnZhbHVlID0gbmV3VmFsO1xufVxuZnVuY3Rpb24gZ2V0QXJyS2V5c1ZhbHVlKHByb3BzLCBrZXlzKSB7XG4gIGlmIChrZXlzLmluY2x1ZGVzKFwiLlwiKSkge1xuICAgIGNvbnN0IGtleUxpc3QgPSBrZXlzLnNwbGl0KFwiLlwiKTtcbiAgICBsZXQgdmFsdWUgPSBwcm9wcztcbiAgICBrZXlMaXN0LmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgdmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcHJvcHNba2V5c107XG4gIH1cbn1cblxuZXhwb3J0IHsgY3JlYXRlU3RvcmUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlci5tanMubWFwXG4iLCJpbXBvcnQgeyByZWYsIGlzUmVmLCBuZXh0VGljayB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBpc0NsaWVudCB9IGZyb20gJ0B2dWV1c2UvY29yZSc7XG5pbXBvcnQgJy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBwYXJzZUhlaWdodCB9IGZyb20gJy4vdXRpbC5tanMnO1xuaW1wb3J0IHsgaGFzT3duIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5jbGFzcyBUYWJsZUxheW91dCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9ic2VydmVycyA9IFtdO1xuICAgIHRoaXMudGFibGUgPSBudWxsO1xuICAgIHRoaXMuc3RvcmUgPSBudWxsO1xuICAgIHRoaXMuY29sdW1ucyA9IFtdO1xuICAgIHRoaXMuZml0ID0gdHJ1ZTtcbiAgICB0aGlzLnNob3dIZWFkZXIgPSB0cnVlO1xuICAgIHRoaXMuaGVpZ2h0ID0gcmVmKG51bGwpO1xuICAgIHRoaXMuc2Nyb2xsWCA9IHJlZihmYWxzZSk7XG4gICAgdGhpcy5zY3JvbGxZID0gcmVmKGZhbHNlKTtcbiAgICB0aGlzLmJvZHlXaWR0aCA9IHJlZihudWxsKTtcbiAgICB0aGlzLmZpeGVkV2lkdGggPSByZWYobnVsbCk7XG4gICAgdGhpcy5yaWdodEZpeGVkV2lkdGggPSByZWYobnVsbCk7XG4gICAgdGhpcy5ndXR0ZXJXaWR0aCA9IDA7XG4gICAgZm9yIChjb25zdCBuYW1lIGluIG9wdGlvbnMpIHtcbiAgICAgIGlmIChoYXNPd24ob3B0aW9ucywgbmFtZSkpIHtcbiAgICAgICAgaWYgKGlzUmVmKHRoaXNbbmFtZV0pKSB7XG4gICAgICAgICAgdGhpc1tuYW1lXS52YWx1ZSA9IG9wdGlvbnNbbmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpc1tuYW1lXSA9IG9wdGlvbnNbbmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0aGlzLnRhYmxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUYWJsZSBpcyByZXF1aXJlZCBmb3IgVGFibGUgTGF5b3V0XCIpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuc3RvcmUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlN0b3JlIGlzIHJlcXVpcmVkIGZvciBUYWJsZSBMYXlvdXRcIik7XG4gICAgfVxuICB9XG4gIHVwZGF0ZVNjcm9sbFkoKSB7XG4gICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5oZWlnaHQudmFsdWU7XG4gICAgaWYgKGhlaWdodCA9PT0gbnVsbClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBzY3JvbGxCYXJSZWYgPSB0aGlzLnRhYmxlLnJlZnMuc2Nyb2xsQmFyUmVmO1xuICAgIGlmICh0aGlzLnRhYmxlLnZub2RlLmVsICYmIChzY3JvbGxCYXJSZWYgPT0gbnVsbCA/IHZvaWQgMCA6IHNjcm9sbEJhclJlZi53cmFwUmVmKSkge1xuICAgICAgbGV0IHNjcm9sbFkgPSB0cnVlO1xuICAgICAgY29uc3QgcHJldlNjcm9sbFkgPSB0aGlzLnNjcm9sbFkudmFsdWU7XG4gICAgICBzY3JvbGxZID0gc2Nyb2xsQmFyUmVmLndyYXBSZWYuc2Nyb2xsSGVpZ2h0ID4gc2Nyb2xsQmFyUmVmLndyYXBSZWYuY2xpZW50SGVpZ2h0O1xuICAgICAgdGhpcy5zY3JvbGxZLnZhbHVlID0gc2Nyb2xsWTtcbiAgICAgIHJldHVybiBwcmV2U2Nyb2xsWSAhPT0gc2Nyb2xsWTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHNldEhlaWdodCh2YWx1ZSwgcHJvcCA9IFwiaGVpZ2h0XCIpIHtcbiAgICBpZiAoIWlzQ2xpZW50KVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGVsID0gdGhpcy50YWJsZS52bm9kZS5lbDtcbiAgICB2YWx1ZSA9IHBhcnNlSGVpZ2h0KHZhbHVlKTtcbiAgICB0aGlzLmhlaWdodC52YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG4gICAgaWYgKCFlbCAmJiAodmFsdWUgfHwgdmFsdWUgPT09IDApKVxuICAgICAgcmV0dXJuIG5leHRUaWNrKCgpID0+IHRoaXMuc2V0SGVpZ2h0KHZhbHVlLCBwcm9wKSk7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgZWwuc3R5bGVbcHJvcF0gPSBgJHt2YWx1ZX1weGA7XG4gICAgICB0aGlzLnVwZGF0ZUVsc0hlaWdodCgpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBlbC5zdHlsZVtwcm9wXSA9IHZhbHVlO1xuICAgICAgdGhpcy51cGRhdGVFbHNIZWlnaHQoKTtcbiAgICB9XG4gIH1cbiAgc2V0TWF4SGVpZ2h0KHZhbHVlKSB7XG4gICAgdGhpcy5zZXRIZWlnaHQodmFsdWUsIFwibWF4LWhlaWdodFwiKTtcbiAgfVxuICBnZXRGbGF0dGVuQ29sdW1ucygpIHtcbiAgICBjb25zdCBmbGF0dGVuQ29sdW1ucyA9IFtdO1xuICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLnRhYmxlLnN0b3JlLnN0YXRlcy5jb2x1bW5zLnZhbHVlO1xuICAgIGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG4gICAgICBpZiAoY29sdW1uLmlzQ29sdW1uR3JvdXApIHtcbiAgICAgICAgZmxhdHRlbkNvbHVtbnMucHVzaC5hcHBseShmbGF0dGVuQ29sdW1ucywgY29sdW1uLmNvbHVtbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmxhdHRlbkNvbHVtbnMucHVzaChjb2x1bW4pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmbGF0dGVuQ29sdW1ucztcbiAgfVxuICB1cGRhdGVFbHNIZWlnaHQoKSB7XG4gICAgdGhpcy51cGRhdGVTY3JvbGxZKCk7XG4gICAgdGhpcy5ub3RpZnlPYnNlcnZlcnMoXCJzY3JvbGxhYmxlXCIpO1xuICB9XG4gIGhlYWRlckRpc3BsYXlOb25lKGVsbSkge1xuICAgIGlmICghZWxtKVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgbGV0IGhlYWRlckNoaWxkID0gZWxtO1xuICAgIHdoaWxlIChoZWFkZXJDaGlsZC50YWdOYW1lICE9PSBcIkRJVlwiKSB7XG4gICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShoZWFkZXJDaGlsZCkuZGlzcGxheSA9PT0gXCJub25lXCIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBoZWFkZXJDaGlsZCA9IGhlYWRlckNoaWxkLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB1cGRhdGVDb2x1bW5zV2lkdGgoKSB7XG4gICAgaWYgKCFpc0NsaWVudClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBmaXQgPSB0aGlzLmZpdDtcbiAgICBjb25zdCBib2R5V2lkdGggPSB0aGlzLnRhYmxlLnZub2RlLmVsLmNsaWVudFdpZHRoO1xuICAgIGxldCBib2R5TWluV2lkdGggPSAwO1xuICAgIGNvbnN0IGZsYXR0ZW5Db2x1bW5zID0gdGhpcy5nZXRGbGF0dGVuQ29sdW1ucygpO1xuICAgIGNvbnN0IGZsZXhDb2x1bW5zID0gZmxhdHRlbkNvbHVtbnMuZmlsdGVyKChjb2x1bW4pID0+IHR5cGVvZiBjb2x1bW4ud2lkdGggIT09IFwibnVtYmVyXCIpO1xuICAgIGZsYXR0ZW5Db2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBjb2x1bW4ud2lkdGggPT09IFwibnVtYmVyXCIgJiYgY29sdW1uLnJlYWxXaWR0aClcbiAgICAgICAgY29sdW1uLnJlYWxXaWR0aCA9IG51bGw7XG4gICAgfSk7XG4gICAgaWYgKGZsZXhDb2x1bW5zLmxlbmd0aCA+IDAgJiYgZml0KSB7XG4gICAgICBmbGF0dGVuQ29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcbiAgICAgICAgYm9keU1pbldpZHRoICs9IE51bWJlcihjb2x1bW4ud2lkdGggfHwgY29sdW1uLm1pbldpZHRoIHx8IDgwKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGJvZHlNaW5XaWR0aCA8PSBib2R5V2lkdGgpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxYLnZhbHVlID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHRvdGFsRmxleFdpZHRoID0gYm9keVdpZHRoIC0gYm9keU1pbldpZHRoO1xuICAgICAgICBpZiAoZmxleENvbHVtbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgZmxleENvbHVtbnNbMF0ucmVhbFdpZHRoID0gTnVtYmVyKGZsZXhDb2x1bW5zWzBdLm1pbldpZHRoIHx8IDgwKSArIHRvdGFsRmxleFdpZHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGFsbENvbHVtbnNXaWR0aCA9IGZsZXhDb2x1bW5zLnJlZHVjZSgocHJldiwgY29sdW1uKSA9PiBwcmV2ICsgTnVtYmVyKGNvbHVtbi5taW5XaWR0aCB8fCA4MCksIDApO1xuICAgICAgICAgIGNvbnN0IGZsZXhXaWR0aFBlclBpeGVsID0gdG90YWxGbGV4V2lkdGggLyBhbGxDb2x1bW5zV2lkdGg7XG4gICAgICAgICAgbGV0IG5vbmVGaXJzdFdpZHRoID0gMDtcbiAgICAgICAgICBmbGV4Q29sdW1ucy5mb3JFYWNoKChjb2x1bW4sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IGZsZXhXaWR0aCA9IE1hdGguZmxvb3IoTnVtYmVyKGNvbHVtbi5taW5XaWR0aCB8fCA4MCkgKiBmbGV4V2lkdGhQZXJQaXhlbCk7XG4gICAgICAgICAgICBub25lRmlyc3RXaWR0aCArPSBmbGV4V2lkdGg7XG4gICAgICAgICAgICBjb2x1bW4ucmVhbFdpZHRoID0gTnVtYmVyKGNvbHVtbi5taW5XaWR0aCB8fCA4MCkgKyBmbGV4V2lkdGg7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZmxleENvbHVtbnNbMF0ucmVhbFdpZHRoID0gTnVtYmVyKGZsZXhDb2x1bW5zWzBdLm1pbldpZHRoIHx8IDgwKSArIHRvdGFsRmxleFdpZHRoIC0gbm9uZUZpcnN0V2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsWC52YWx1ZSA9IHRydWU7XG4gICAgICAgIGZsZXhDb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuICAgICAgICAgIGNvbHVtbi5yZWFsV2lkdGggPSBOdW1iZXIoY29sdW1uLm1pbldpZHRoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLmJvZHlXaWR0aC52YWx1ZSA9IE1hdGgubWF4KGJvZHlNaW5XaWR0aCwgYm9keVdpZHRoKTtcbiAgICAgIHRoaXMudGFibGUuc3RhdGUucmVzaXplU3RhdGUudmFsdWUud2lkdGggPSB0aGlzLmJvZHlXaWR0aC52YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZmxhdHRlbkNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG4gICAgICAgIGlmICghY29sdW1uLndpZHRoICYmICFjb2x1bW4ubWluV2lkdGgpIHtcbiAgICAgICAgICBjb2x1bW4ucmVhbFdpZHRoID0gODA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29sdW1uLnJlYWxXaWR0aCA9IE51bWJlcihjb2x1bW4ud2lkdGggfHwgY29sdW1uLm1pbldpZHRoKTtcbiAgICAgICAgfVxuICAgICAgICBib2R5TWluV2lkdGggKz0gY29sdW1uLnJlYWxXaWR0aDtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zY3JvbGxYLnZhbHVlID0gYm9keU1pbldpZHRoID4gYm9keVdpZHRoO1xuICAgICAgdGhpcy5ib2R5V2lkdGgudmFsdWUgPSBib2R5TWluV2lkdGg7XG4gICAgfVxuICAgIGNvbnN0IGZpeGVkQ29sdW1ucyA9IHRoaXMuc3RvcmUuc3RhdGVzLmZpeGVkQ29sdW1ucy52YWx1ZTtcbiAgICBpZiAoZml4ZWRDb2x1bW5zLmxlbmd0aCA+IDApIHtcbiAgICAgIGxldCBmaXhlZFdpZHRoID0gMDtcbiAgICAgIGZpeGVkQ29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcbiAgICAgICAgZml4ZWRXaWR0aCArPSBOdW1iZXIoY29sdW1uLnJlYWxXaWR0aCB8fCBjb2x1bW4ud2lkdGgpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmZpeGVkV2lkdGgudmFsdWUgPSBmaXhlZFdpZHRoO1xuICAgIH1cbiAgICBjb25zdCByaWdodEZpeGVkQ29sdW1ucyA9IHRoaXMuc3RvcmUuc3RhdGVzLnJpZ2h0Rml4ZWRDb2x1bW5zLnZhbHVlO1xuICAgIGlmIChyaWdodEZpeGVkQ29sdW1ucy5sZW5ndGggPiAwKSB7XG4gICAgICBsZXQgcmlnaHRGaXhlZFdpZHRoID0gMDtcbiAgICAgIHJpZ2h0Rml4ZWRDb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuICAgICAgICByaWdodEZpeGVkV2lkdGggKz0gTnVtYmVyKGNvbHVtbi5yZWFsV2lkdGggfHwgY29sdW1uLndpZHRoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5yaWdodEZpeGVkV2lkdGgudmFsdWUgPSByaWdodEZpeGVkV2lkdGg7XG4gICAgfVxuICAgIHRoaXMubm90aWZ5T2JzZXJ2ZXJzKFwiY29sdW1uc1wiKTtcbiAgfVxuICBhZGRPYnNlcnZlcihvYnNlcnZlcikge1xuICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICB9XG4gIHJlbW92ZU9ic2VydmVyKG9ic2VydmVyKSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLm9ic2VydmVycy5pbmRleE9mKG9ic2VydmVyKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLm9ic2VydmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuICBub3RpZnlPYnNlcnZlcnMoZXZlbnQpIHtcbiAgICBjb25zdCBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycztcbiAgICBvYnNlcnZlcnMuZm9yRWFjaCgob2JzZXJ2ZXIpID0+IHtcbiAgICAgIHZhciBfYSwgX2I7XG4gICAgICBzd2l0Y2ggKGV2ZW50KSB7XG4gICAgICAgIGNhc2UgXCJjb2x1bW5zXCI6XG4gICAgICAgICAgKF9hID0gb2JzZXJ2ZXIuc3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfYS5vbkNvbHVtbnNDaGFuZ2UodGhpcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzY3JvbGxhYmxlXCI6XG4gICAgICAgICAgKF9iID0gb2JzZXJ2ZXIuc3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfYi5vblNjcm9sbGFibGVDaGFuZ2UodGhpcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUYWJsZSBMYXlvdXQgZG9uJ3QgaGF2ZSBldmVudCAke2V2ZW50fS5gKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgeyBUYWJsZUxheW91dCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWJsZS1sYXlvdXQubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBnZXRDdXJyZW50SW5zdGFuY2UsIHJlZiwgY29tcHV0ZWQsIHdhdGNoLCByZXNvbHZlQ29tcG9uZW50LCByZXNvbHZlRGlyZWN0aXZlLCBvcGVuQmxvY2ssIGNyZWF0ZUJsb2NrLCB3aXRoQ3R4LCBjcmVhdGVFbGVtZW50QmxvY2ssIGNyZWF0ZUVsZW1lbnRWTm9kZSwgbm9ybWFsaXplQ2xhc3MsIGNyZWF0ZVZOb2RlLCBGcmFnbWVudCwgcmVuZGVyTGlzdCwgY3JlYXRlVGV4dFZOb2RlLCB0b0Rpc3BsYXlTdHJpbmcsIHdpdGhEaXJlY3RpdmVzIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IEVsQ2hlY2tib3ggfSBmcm9tICcuLi8uLi9jaGVja2JveC9pbmRleC5tanMnO1xuaW1wb3J0IHsgRWxJY29uIH0gZnJvbSAnLi4vLi4vaWNvbi9pbmRleC5tanMnO1xuaW1wb3J0IHsgQXJyb3dEb3duLCBBcnJvd1VwIH0gZnJvbSAnQGVsZW1lbnQtcGx1cy9pY29ucy12dWUnO1xuaW1wb3J0ICcuLi8uLi8uLi9kaXJlY3RpdmVzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL2hvb2tzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBFbFRvb2x0aXAgfSBmcm9tICcuLi8uLi90b29sdGlwL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBFbFNjcm9sbGJhciB9IGZyb20gJy4uLy4uL3Njcm9sbGJhci9pbmRleC5tanMnO1xuaW1wb3J0IF9leHBvcnRfc2ZjIGZyb20gJy4uLy4uLy4uL192aXJ0dWFsL3BsdWdpbi12dWVfZXhwb3J0LWhlbHBlci5tanMnO1xuaW1wb3J0IENsaWNrT3V0c2lkZSBmcm9tICcuLi8uLi8uLi9kaXJlY3RpdmVzL2NsaWNrLW91dHNpZGUvaW5kZXgubWpzJztcbmltcG9ydCB7IHVzZUxvY2FsZSB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1sb2NhbGUvaW5kZXgubWpzJztcbmltcG9ydCB7IHVzZU5hbWVzcGFjZSB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1uYW1lc3BhY2UvaW5kZXgubWpzJztcblxuY29uc3QgeyBDaGVja2JveEdyb3VwOiBFbENoZWNrYm94R3JvdXAgfSA9IEVsQ2hlY2tib3g7XG5jb25zdCBfc2ZjX21haW4gPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkVsVGFibGVGaWx0ZXJQYW5lbFwiLFxuICBjb21wb25lbnRzOiB7XG4gICAgRWxDaGVja2JveCxcbiAgICBFbENoZWNrYm94R3JvdXAsXG4gICAgRWxTY3JvbGxiYXIsXG4gICAgRWxUb29sdGlwLFxuICAgIEVsSWNvbixcbiAgICBBcnJvd0Rvd24sXG4gICAgQXJyb3dVcFxuICB9LFxuICBkaXJlY3RpdmVzOiB7IENsaWNrT3V0c2lkZSB9LFxuICBwcm9wczoge1xuICAgIHBsYWNlbWVudDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogXCJib3R0b20tc3RhcnRcIlxuICAgIH0sXG4gICAgc3RvcmU6IHtcbiAgICAgIHR5cGU6IE9iamVjdFxuICAgIH0sXG4gICAgY29sdW1uOiB7XG4gICAgICB0eXBlOiBPYmplY3RcbiAgICB9LFxuICAgIHVwRGF0YUNvbHVtbjoge1xuICAgICAgdHlwZTogRnVuY3Rpb25cbiAgICB9XG4gIH0sXG4gIHNldHVwKHByb3BzKSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBjb25zdCB7IHQgfSA9IHVzZUxvY2FsZSgpO1xuICAgIGNvbnN0IG5zID0gdXNlTmFtZXNwYWNlKFwidGFibGUtZmlsdGVyXCIpO1xuICAgIGNvbnN0IHBhcmVudCA9IGluc3RhbmNlID09IG51bGwgPyB2b2lkIDAgOiBpbnN0YW5jZS5wYXJlbnQ7XG4gICAgaWYgKCFwYXJlbnQuZmlsdGVyUGFuZWxzLnZhbHVlW3Byb3BzLmNvbHVtbi5pZF0pIHtcbiAgICAgIHBhcmVudC5maWx0ZXJQYW5lbHMudmFsdWVbcHJvcHMuY29sdW1uLmlkXSA9IGluc3RhbmNlO1xuICAgIH1cbiAgICBjb25zdCB0b29sdGlwVmlzaWJsZSA9IHJlZihmYWxzZSk7XG4gICAgY29uc3QgdG9vbHRpcCA9IHJlZihudWxsKTtcbiAgICBjb25zdCBmaWx0ZXJzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLmNvbHVtbiAmJiBwcm9wcy5jb2x1bW4uZmlsdGVycztcbiAgICB9KTtcbiAgICBjb25zdCBmaWx0ZXJWYWx1ZSA9IGNvbXB1dGVkKHtcbiAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoKChfYSA9IHByb3BzLmNvbHVtbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmZpbHRlcmVkVmFsdWUpIHx8IFtdKVswXTtcbiAgICAgIH0sXG4gICAgICBzZXQ6ICh2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAoZmlsdGVyZWRWYWx1ZS52YWx1ZSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwidW5kZWZpbmVkXCIgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGZpbHRlcmVkVmFsdWUudmFsdWUuc3BsaWNlKDAsIDEsIHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmlsdGVyZWRWYWx1ZS52YWx1ZS5zcGxpY2UoMCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgZmlsdGVyZWRWYWx1ZSA9IGNvbXB1dGVkKHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgaWYgKHByb3BzLmNvbHVtbikge1xuICAgICAgICAgIHJldHVybiBwcm9wcy5jb2x1bW4uZmlsdGVyZWRWYWx1ZSB8fCBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgICB9LFxuICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgIGlmIChwcm9wcy5jb2x1bW4pIHtcbiAgICAgICAgICBwcm9wcy51cERhdGFDb2x1bW4oXCJmaWx0ZXJlZFZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IG11bHRpcGxlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLmNvbHVtbikge1xuICAgICAgICByZXR1cm4gcHJvcHMuY29sdW1uLmZpbHRlck11bHRpcGxlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgY29uc3QgaXNBY3RpdmUgPSAoZmlsdGVyKSA9PiB7XG4gICAgICByZXR1cm4gZmlsdGVyLnZhbHVlID09PSBmaWx0ZXJWYWx1ZS52YWx1ZTtcbiAgICB9O1xuICAgIGNvbnN0IGhpZGRlbiA9ICgpID0+IHtcbiAgICAgIHRvb2x0aXBWaXNpYmxlLnZhbHVlID0gZmFsc2U7XG4gICAgfTtcbiAgICBjb25zdCBzaG93RmlsdGVyUGFuZWwgPSAoZSkgPT4ge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHRvb2x0aXBWaXNpYmxlLnZhbHVlID0gIXRvb2x0aXBWaXNpYmxlLnZhbHVlO1xuICAgIH07XG4gICAgY29uc3QgaGlkZUZpbHRlclBhbmVsID0gKCkgPT4ge1xuICAgICAgdG9vbHRpcFZpc2libGUudmFsdWUgPSBmYWxzZTtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZUNvbmZpcm0gPSAoKSA9PiB7XG4gICAgICBjb25maXJtRmlsdGVyKGZpbHRlcmVkVmFsdWUudmFsdWUpO1xuICAgICAgaGlkZGVuKCk7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVSZXNldCA9ICgpID0+IHtcbiAgICAgIGZpbHRlcmVkVmFsdWUudmFsdWUgPSBbXTtcbiAgICAgIGNvbmZpcm1GaWx0ZXIoZmlsdGVyZWRWYWx1ZS52YWx1ZSk7XG4gICAgICBoaWRkZW4oKTtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZVNlbGVjdCA9IChfZmlsdGVyVmFsdWUpID0+IHtcbiAgICAgIGZpbHRlclZhbHVlLnZhbHVlID0gX2ZpbHRlclZhbHVlO1xuICAgICAgaWYgKHR5cGVvZiBfZmlsdGVyVmFsdWUgIT09IFwidW5kZWZpbmVkXCIgJiYgX2ZpbHRlclZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgIGNvbmZpcm1GaWx0ZXIoZmlsdGVyZWRWYWx1ZS52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25maXJtRmlsdGVyKFtdKTtcbiAgICAgIH1cbiAgICAgIGhpZGRlbigpO1xuICAgIH07XG4gICAgY29uc3QgY29uZmlybUZpbHRlciA9IChmaWx0ZXJlZFZhbHVlMikgPT4ge1xuICAgICAgcHJvcHMuc3RvcmUuY29tbWl0KFwiZmlsdGVyQ2hhbmdlXCIsIHtcbiAgICAgICAgY29sdW1uOiBwcm9wcy5jb2x1bW4sXG4gICAgICAgIHZhbHVlczogZmlsdGVyZWRWYWx1ZTJcbiAgICAgIH0pO1xuICAgICAgcHJvcHMuc3RvcmUudXBkYXRlQWxsU2VsZWN0ZWQoKTtcbiAgICB9O1xuICAgIHdhdGNoKHRvb2x0aXBWaXNpYmxlLCAodmFsdWUpID0+IHtcbiAgICAgIGlmIChwcm9wcy5jb2x1bW4pIHtcbiAgICAgICAgcHJvcHMudXBEYXRhQ29sdW1uKFwiZmlsdGVyT3BlbmVkXCIsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBpbW1lZGlhdGU6IHRydWVcbiAgICB9KTtcbiAgICBjb25zdCBwb3BwZXJQYW5lUmVmID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgdmFyIF9hLCBfYjtcbiAgICAgIHJldHVybiAoX2IgPSAoX2EgPSB0b29sdGlwLnZhbHVlKSA9PSBudWxsID8gdm9pZCAwIDogX2EucG9wcGVyUmVmKSA9PSBudWxsID8gdm9pZCAwIDogX2IuY29udGVudFJlZjtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9vbHRpcFZpc2libGUsXG4gICAgICBtdWx0aXBsZSxcbiAgICAgIGZpbHRlcmVkVmFsdWUsXG4gICAgICBmaWx0ZXJWYWx1ZSxcbiAgICAgIGZpbHRlcnMsXG4gICAgICBoYW5kbGVDb25maXJtLFxuICAgICAgaGFuZGxlUmVzZXQsXG4gICAgICBoYW5kbGVTZWxlY3QsXG4gICAgICBpc0FjdGl2ZSxcbiAgICAgIHQsXG4gICAgICBucyxcbiAgICAgIHNob3dGaWx0ZXJQYW5lbCxcbiAgICAgIGhpZGVGaWx0ZXJQYW5lbCxcbiAgICAgIHBvcHBlclBhbmVSZWYsXG4gICAgICB0b29sdGlwXG4gICAgfTtcbiAgfVxufSk7XG5jb25zdCBfaG9pc3RlZF8xID0geyBrZXk6IDAgfTtcbmNvbnN0IF9ob2lzdGVkXzIgPSBbXCJkaXNhYmxlZFwiXTtcbmNvbnN0IF9ob2lzdGVkXzMgPSBbXCJsYWJlbFwiLCBcIm9uQ2xpY2tcIl07XG5mdW5jdGlvbiBfc2ZjX3JlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHtcbiAgY29uc3QgX2NvbXBvbmVudF9lbF9jaGVja2JveCA9IHJlc29sdmVDb21wb25lbnQoXCJlbC1jaGVja2JveFwiKTtcbiAgY29uc3QgX2NvbXBvbmVudF9lbF9jaGVja2JveF9ncm91cCA9IHJlc29sdmVDb21wb25lbnQoXCJlbC1jaGVja2JveC1ncm91cFwiKTtcbiAgY29uc3QgX2NvbXBvbmVudF9lbF9zY3JvbGxiYXIgPSByZXNvbHZlQ29tcG9uZW50KFwiZWwtc2Nyb2xsYmFyXCIpO1xuICBjb25zdCBfY29tcG9uZW50X2Fycm93X3VwID0gcmVzb2x2ZUNvbXBvbmVudChcImFycm93LXVwXCIpO1xuICBjb25zdCBfY29tcG9uZW50X2Fycm93X2Rvd24gPSByZXNvbHZlQ29tcG9uZW50KFwiYXJyb3ctZG93blwiKTtcbiAgY29uc3QgX2NvbXBvbmVudF9lbF9pY29uID0gcmVzb2x2ZUNvbXBvbmVudChcImVsLWljb25cIik7XG4gIGNvbnN0IF9jb21wb25lbnRfZWxfdG9vbHRpcCA9IHJlc29sdmVDb21wb25lbnQoXCJlbC10b29sdGlwXCIpO1xuICBjb25zdCBfZGlyZWN0aXZlX2NsaWNrX291dHNpZGUgPSByZXNvbHZlRGlyZWN0aXZlKFwiY2xpY2stb3V0c2lkZVwiKTtcbiAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX3Rvb2x0aXAsIHtcbiAgICByZWY6IFwidG9vbHRpcFwiLFxuICAgIHZpc2libGU6IF9jdHgudG9vbHRpcFZpc2libGUsXG4gICAgb2Zmc2V0OiAwLFxuICAgIHBsYWNlbWVudDogX2N0eC5wbGFjZW1lbnQsXG4gICAgXCJzaG93LWFycm93XCI6IGZhbHNlLFxuICAgIFwic3RvcC1wb3BwZXItbW91c2UtZXZlbnRcIjogZmFsc2UsXG4gICAgdGVsZXBvcnRlZDogXCJcIixcbiAgICBlZmZlY3Q6IFwibGlnaHRcIixcbiAgICBwdXJlOiBcIlwiLFxuICAgIFwicG9wcGVyLWNsYXNzXCI6IF9jdHgubnMuYigpLFxuICAgIHBlcnNpc3RlbnQ6IFwiXCJcbiAgfSwge1xuICAgIGNvbnRlbnQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgX2N0eC5tdWx0aXBsZSA/IChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIF9ob2lzdGVkXzEsIFtcbiAgICAgICAgY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoX2N0eC5ucy5lKFwiY29udGVudFwiKSlcbiAgICAgICAgfSwgW1xuICAgICAgICAgIGNyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfc2Nyb2xsYmFyLCB7XG4gICAgICAgICAgICBcIndyYXAtY2xhc3NcIjogX2N0eC5ucy5lKFwid3JhcFwiKVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICBjcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX2NoZWNrYm94X2dyb3VwLCB7XG4gICAgICAgICAgICAgICAgbW9kZWxWYWx1ZTogX2N0eC5maWx0ZXJlZFZhbHVlLFxuICAgICAgICAgICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9ICgkZXZlbnQpID0+IF9jdHguZmlsdGVyZWRWYWx1ZSA9ICRldmVudCksXG4gICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKF9jdHgubnMuZShcImNoZWNrYm94LWdyb3VwXCIpKVxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAob3BlbkJsb2NrKHRydWUpLCBjcmVhdGVFbGVtZW50QmxvY2soRnJhZ21lbnQsIG51bGwsIHJlbmRlckxpc3QoX2N0eC5maWx0ZXJzLCAoZmlsdGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF9jaGVja2JveCwge1xuICAgICAgICAgICAgICAgICAgICAgIGtleTogZmlsdGVyLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBmaWx0ZXIudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlVGV4dFZOb2RlKHRvRGlzcGxheVN0cmluZyhmaWx0ZXIudGV4dCksIDEpXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXzogMlxuICAgICAgICAgICAgICAgICAgICB9LCAxMDMyLCBbXCJsYWJlbFwiXSk7XG4gICAgICAgICAgICAgICAgICB9KSwgMTI4KSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgIH0sIDgsIFtcIm1vZGVsVmFsdWVcIiwgXCJjbGFzc1wiXSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXzogMVxuICAgICAgICAgIH0sIDgsIFtcIndyYXAtY2xhc3NcIl0pXG4gICAgICAgIF0sIDIpLFxuICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhfY3R4Lm5zLmUoXCJib3R0b21cIikpXG4gICAgICAgIH0sIFtcbiAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJidXR0b25cIiwge1xuICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHsgW19jdHgubnMuaXMoXCJkaXNhYmxlZFwiKV06IF9jdHguZmlsdGVyZWRWYWx1ZS5sZW5ndGggPT09IDAgfSksXG4gICAgICAgICAgICBkaXNhYmxlZDogX2N0eC5maWx0ZXJlZFZhbHVlLmxlbmd0aCA9PT0gMCxcbiAgICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICBvbkNsaWNrOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9ICguLi5hcmdzKSA9PiBfY3R4LmhhbmRsZUNvbmZpcm0gJiYgX2N0eC5oYW5kbGVDb25maXJtKC4uLmFyZ3MpKVxuICAgICAgICAgIH0sIHRvRGlzcGxheVN0cmluZyhfY3R4LnQoXCJlbC50YWJsZS5jb25maXJtRmlsdGVyXCIpKSwgMTEsIF9ob2lzdGVkXzIpLFxuICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImJ1dHRvblwiLCB7XG4gICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgb25DbGljazogX2NhY2hlWzJdIHx8IChfY2FjaGVbMl0gPSAoLi4uYXJncykgPT4gX2N0eC5oYW5kbGVSZXNldCAmJiBfY3R4LmhhbmRsZVJlc2V0KC4uLmFyZ3MpKVxuICAgICAgICAgIH0sIHRvRGlzcGxheVN0cmluZyhfY3R4LnQoXCJlbC50YWJsZS5yZXNldEZpbHRlclwiKSksIDEpXG4gICAgICAgIF0sIDIpXG4gICAgICBdKSkgOiAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcInVsXCIsIHtcbiAgICAgICAga2V5OiAxLFxuICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoX2N0eC5ucy5lKFwibGlzdFwiKSlcbiAgICAgIH0sIFtcbiAgICAgICAgY3JlYXRlRWxlbWVudFZOb2RlKFwibGlcIiwge1xuICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbXG4gICAgICAgICAgICBfY3R4Lm5zLmUoXCJsaXN0LWl0ZW1cIiksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFtfY3R4Lm5zLmlzKFwiYWN0aXZlXCIpXTogX2N0eC5maWx0ZXJWYWx1ZSA9PT0gdm9pZCAwIHx8IF9jdHguZmlsdGVyVmFsdWUgPT09IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdKSxcbiAgICAgICAgICBvbkNsaWNrOiBfY2FjaGVbM10gfHwgKF9jYWNoZVszXSA9ICgkZXZlbnQpID0+IF9jdHguaGFuZGxlU2VsZWN0KG51bGwpKVxuICAgICAgICB9LCB0b0Rpc3BsYXlTdHJpbmcoX2N0eC50KFwiZWwudGFibGUuY2xlYXJGaWx0ZXJcIikpLCAzKSxcbiAgICAgICAgKG9wZW5CbG9jayh0cnVlKSwgY3JlYXRlRWxlbWVudEJsb2NrKEZyYWdtZW50LCBudWxsLCByZW5kZXJMaXN0KF9jdHguZmlsdGVycywgKGZpbHRlcikgPT4ge1xuICAgICAgICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwibGlcIiwge1xuICAgICAgICAgICAga2V5OiBmaWx0ZXIudmFsdWUsXG4gICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW19jdHgubnMuZShcImxpc3QtaXRlbVwiKSwgX2N0eC5ucy5pcyhcImFjdGl2ZVwiLCBfY3R4LmlzQWN0aXZlKGZpbHRlcikpXSksXG4gICAgICAgICAgICBsYWJlbDogZmlsdGVyLnZhbHVlLFxuICAgICAgICAgICAgb25DbGljazogKCRldmVudCkgPT4gX2N0eC5oYW5kbGVTZWxlY3QoZmlsdGVyLnZhbHVlKVxuICAgICAgICAgIH0sIHRvRGlzcGxheVN0cmluZyhmaWx0ZXIudGV4dCksIDExLCBfaG9pc3RlZF8zKTtcbiAgICAgICAgfSksIDEyOCkpXG4gICAgICBdLCAyKSlcbiAgICBdKSxcbiAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgIHdpdGhEaXJlY3RpdmVzKChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbXG4gICAgICAgICAgYCR7X2N0eC5ucy5uYW1lc3BhY2UudmFsdWV9LXRhYmxlX19jb2x1bW4tZmlsdGVyLXRyaWdnZXJgLFxuICAgICAgICAgIGAke19jdHgubnMubmFtZXNwYWNlLnZhbHVlfS1ub25lLW91dGxpbmVgXG4gICAgICAgIF0pLFxuICAgICAgICBvbkNsaWNrOiBfY2FjaGVbNF0gfHwgKF9jYWNoZVs0XSA9ICguLi5hcmdzKSA9PiBfY3R4LnNob3dGaWx0ZXJQYW5lbCAmJiBfY3R4LnNob3dGaWx0ZXJQYW5lbCguLi5hcmdzKSlcbiAgICAgIH0sIFtcbiAgICAgICAgY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9pY29uLCBudWxsLCB7XG4gICAgICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICBfY3R4LmNvbHVtbi5maWx0ZXJPcGVuZWQgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKF9jb21wb25lbnRfYXJyb3dfdXAsIHsga2V5OiAwIH0pKSA6IChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2soX2NvbXBvbmVudF9hcnJvd19kb3duLCB7IGtleTogMSB9KSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfOiAxXG4gICAgICAgIH0pXG4gICAgICBdLCAyKSksIFtcbiAgICAgICAgW19kaXJlY3RpdmVfY2xpY2tfb3V0c2lkZSwgX2N0eC5oaWRlRmlsdGVyUGFuZWwsIF9jdHgucG9wcGVyUGFuZVJlZl1cbiAgICAgIF0pXG4gICAgXSksXG4gICAgXzogMVxuICB9LCA4LCBbXCJ2aXNpYmxlXCIsIFwicGxhY2VtZW50XCIsIFwicG9wcGVyLWNsYXNzXCJdKTtcbn1cbnZhciBGaWx0ZXJQYW5lbCA9IC8qIEBfX1BVUkVfXyAqLyBfZXhwb3J0X3NmYyhfc2ZjX21haW4sIFtbXCJyZW5kZXJcIiwgX3NmY19yZW5kZXJdLCBbXCJfX2ZpbGVcIiwgXCIvaG9tZS9ydW5uZXIvd29yay9lbGVtZW50LXBsdXMvZWxlbWVudC1wbHVzL3BhY2thZ2VzL2NvbXBvbmVudHMvdGFibGUvc3JjL2ZpbHRlci1wYW5lbC52dWVcIl1dKTtcblxuZXhwb3J0IHsgRmlsdGVyUGFuZWwgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLXBhbmVsLm1qcy5tYXBcbiIsImltcG9ydCB7IGdldEN1cnJlbnRJbnN0YW5jZSwgb25CZWZvcmVNb3VudCwgb25Nb3VudGVkLCBvblVwZGF0ZWQsIG9uVW5tb3VudGVkLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5cbmZ1bmN0aW9uIHVzZUxheW91dE9ic2VydmVyKHJvb3QpIHtcbiAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgb25CZWZvcmVNb3VudCgoKSA9PiB7XG4gICAgdGFibGVMYXlvdXQudmFsdWUuYWRkT2JzZXJ2ZXIoaW5zdGFuY2UpO1xuICB9KTtcbiAgb25Nb3VudGVkKCgpID0+IHtcbiAgICBvbkNvbHVtbnNDaGFuZ2UodGFibGVMYXlvdXQudmFsdWUpO1xuICAgIG9uU2Nyb2xsYWJsZUNoYW5nZSh0YWJsZUxheW91dC52YWx1ZSk7XG4gIH0pO1xuICBvblVwZGF0ZWQoKCkgPT4ge1xuICAgIG9uQ29sdW1uc0NoYW5nZSh0YWJsZUxheW91dC52YWx1ZSk7XG4gICAgb25TY3JvbGxhYmxlQ2hhbmdlKHRhYmxlTGF5b3V0LnZhbHVlKTtcbiAgfSk7XG4gIG9uVW5tb3VudGVkKCgpID0+IHtcbiAgICB0YWJsZUxheW91dC52YWx1ZS5yZW1vdmVPYnNlcnZlcihpbnN0YW5jZSk7XG4gIH0pO1xuICBjb25zdCB0YWJsZUxheW91dCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBsYXlvdXQgPSByb290LmxheW91dDtcbiAgICBpZiAoIWxheW91dCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuIG5vdCBmaW5kIHRhYmxlIGxheW91dC5cIik7XG4gICAgfVxuICAgIHJldHVybiBsYXlvdXQ7XG4gIH0pO1xuICBjb25zdCBvbkNvbHVtbnNDaGFuZ2UgPSAobGF5b3V0KSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGNvbHMgPSAoKF9hID0gcm9vdC52bm9kZS5lbCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnF1ZXJ5U2VsZWN0b3JBbGwoXCJjb2xncm91cCA+IGNvbFwiKSkgfHwgW107XG4gICAgaWYgKCFjb2xzLmxlbmd0aClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBmbGF0dGVuQ29sdW1ucyA9IGxheW91dC5nZXRGbGF0dGVuQ29sdW1ucygpO1xuICAgIGNvbnN0IGNvbHVtbnNNYXAgPSB7fTtcbiAgICBmbGF0dGVuQ29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcbiAgICAgIGNvbHVtbnNNYXBbY29sdW1uLmlkXSA9IGNvbHVtbjtcbiAgICB9KTtcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IGNvbHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBjb25zdCBjb2wgPSBjb2xzW2ldO1xuICAgICAgY29uc3QgbmFtZSA9IGNvbC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpO1xuICAgICAgY29uc3QgY29sdW1uID0gY29sdW1uc01hcFtuYW1lXTtcbiAgICAgIGlmIChjb2x1bW4pIHtcbiAgICAgICAgY29sLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIGNvbHVtbi5yZWFsV2lkdGggfHwgY29sdW1uLndpZHRoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uU2Nyb2xsYWJsZUNoYW5nZSA9IChsYXlvdXQpID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IGNvbHMgPSAoKF9hID0gcm9vdC52bm9kZS5lbCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnF1ZXJ5U2VsZWN0b3JBbGwoXCJjb2xncm91cCA+IGNvbFtuYW1lPWd1dHRlcl1cIikpIHx8IFtdO1xuICAgIGZvciAobGV0IGkgPSAwLCBqID0gY29scy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGNvbnN0IGNvbCA9IGNvbHNbaV07XG4gICAgICBjb2wuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgbGF5b3V0LnNjcm9sbFkudmFsdWUgPyBsYXlvdXQuZ3V0dGVyV2lkdGggOiBcIjBcIik7XG4gICAgfVxuICAgIGNvbnN0IHRocyA9ICgoX2IgPSByb290LnZub2RlLmVsKSA9PSBudWxsID8gdm9pZCAwIDogX2IucXVlcnlTZWxlY3RvckFsbChcInRoLmd1dHRlclwiKSkgfHwgW107XG4gICAgZm9yIChsZXQgaSA9IDAsIGogPSB0aHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBjb25zdCB0aCA9IHRoc1tpXTtcbiAgICAgIHRoLnN0eWxlLndpZHRoID0gbGF5b3V0LnNjcm9sbFkudmFsdWUgPyBgJHtsYXlvdXQuZ3V0dGVyV2lkdGh9cHhgIDogXCIwXCI7XG4gICAgICB0aC5zdHlsZS5kaXNwbGF5ID0gbGF5b3V0LnNjcm9sbFkudmFsdWUgPyBcIlwiIDogXCJub25lXCI7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgIHRhYmxlTGF5b3V0OiB0YWJsZUxheW91dC52YWx1ZSxcbiAgICBvbkNvbHVtbnNDaGFuZ2UsXG4gICAgb25TY3JvbGxhYmxlQ2hhbmdlXG4gIH07XG59XG5cbmV4cG9ydCB7IHVzZUxheW91dE9ic2VydmVyIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxheW91dC1vYnNlcnZlci5tanMubWFwXG4iLCJjb25zdCBUQUJMRV9JTkpFQ1RJT05fS0VZID0gU3ltYm9sKFwiRWxUYWJsZVwiKTtcblxuZXhwb3J0IHsgVEFCTEVfSU5KRUNUSU9OX0tFWSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9rZW5zLm1qcy5tYXBcbiIsImltcG9ydCB7IGluamVjdCwgY29tcHV0ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgVEFCTEVfSU5KRUNUSU9OX0tFWSB9IGZyb20gJy4uL3Rva2Vucy5tanMnO1xuXG5jb25zdCBnZXRBbGxDb2x1bW5zID0gKGNvbHVtbnMpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG4gICAgaWYgKGNvbHVtbi5jaGlsZHJlbikge1xuICAgICAgcmVzdWx0LnB1c2goY29sdW1uKTtcbiAgICAgIHJlc3VsdC5wdXNoLmFwcGx5KHJlc3VsdCwgZ2V0QWxsQ29sdW1ucyhjb2x1bW4uY2hpbGRyZW4pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnB1c2goY29sdW1uKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbmNvbnN0IGNvbnZlcnRUb1Jvd3MgPSAob3JpZ2luQ29sdW1ucykgPT4ge1xuICBsZXQgbWF4TGV2ZWwgPSAxO1xuICBjb25zdCB0cmF2ZXJzZSA9IChjb2x1bW4sIHBhcmVudCkgPT4ge1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGNvbHVtbi5sZXZlbCA9IHBhcmVudC5sZXZlbCArIDE7XG4gICAgICBpZiAobWF4TGV2ZWwgPCBjb2x1bW4ubGV2ZWwpIHtcbiAgICAgICAgbWF4TGV2ZWwgPSBjb2x1bW4ubGV2ZWw7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjb2x1bW4uY2hpbGRyZW4pIHtcbiAgICAgIGxldCBjb2xTcGFuID0gMDtcbiAgICAgIGNvbHVtbi5jaGlsZHJlbi5mb3JFYWNoKChzdWJDb2x1bW4pID0+IHtcbiAgICAgICAgdHJhdmVyc2Uoc3ViQ29sdW1uLCBjb2x1bW4pO1xuICAgICAgICBjb2xTcGFuICs9IHN1YkNvbHVtbi5jb2xTcGFuO1xuICAgICAgfSk7XG4gICAgICBjb2x1bW4uY29sU3BhbiA9IGNvbFNwYW47XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbHVtbi5jb2xTcGFuID0gMTtcbiAgICB9XG4gIH07XG4gIG9yaWdpbkNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG4gICAgY29sdW1uLmxldmVsID0gMTtcbiAgICB0cmF2ZXJzZShjb2x1bW4sIHZvaWQgMCk7XG4gIH0pO1xuICBjb25zdCByb3dzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4TGV2ZWw7IGkrKykge1xuICAgIHJvd3MucHVzaChbXSk7XG4gIH1cbiAgY29uc3QgYWxsQ29sdW1ucyA9IGdldEFsbENvbHVtbnMob3JpZ2luQ29sdW1ucyk7XG4gIGFsbENvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG4gICAgaWYgKCFjb2x1bW4uY2hpbGRyZW4pIHtcbiAgICAgIGNvbHVtbi5yb3dTcGFuID0gbWF4TGV2ZWwgLSBjb2x1bW4ubGV2ZWwgKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb2x1bW4ucm93U3BhbiA9IDE7XG4gICAgICBjb2x1bW4uY2hpbGRyZW4uZm9yRWFjaCgoY29sKSA9PiBjb2wuaXNTdWJDb2x1bW4gPSB0cnVlKTtcbiAgICB9XG4gICAgcm93c1tjb2x1bW4ubGV2ZWwgLSAxXS5wdXNoKGNvbHVtbik7XG4gIH0pO1xuICByZXR1cm4gcm93cztcbn07XG5mdW5jdGlvbiB1c2VVdGlscyhwcm9wcykge1xuICBjb25zdCBwYXJlbnQgPSBpbmplY3QoVEFCTEVfSU5KRUNUSU9OX0tFWSk7XG4gIGNvbnN0IGNvbHVtblJvd3MgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIGNvbnZlcnRUb1Jvd3MocHJvcHMuc3RvcmUuc3RhdGVzLm9yaWdpbkNvbHVtbnMudmFsdWUpO1xuICB9KTtcbiAgY29uc3QgaXNHcm91cCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBjb2x1bW5Sb3dzLnZhbHVlLmxlbmd0aCA+IDE7XG4gICAgaWYgKHJlc3VsdCAmJiBwYXJlbnQpIHtcbiAgICAgIHBhcmVudC5zdGF0ZS5pc0dyb3VwLnZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSk7XG4gIGNvbnN0IHRvZ2dsZUFsbFNlbGVjdGlvbiA9IChldmVudCkgPT4ge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHBhcmVudCA9PSBudWxsID8gdm9pZCAwIDogcGFyZW50LnN0b3JlLmNvbW1pdChcInRvZ2dsZUFsbFNlbGVjdGlvblwiKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBpc0dyb3VwLFxuICAgIHRvZ2dsZUFsbFNlbGVjdGlvbixcbiAgICBjb2x1bW5Sb3dzXG4gIH07XG59XG5cbmV4cG9ydCB7IHVzZVV0aWxzIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLWhlbHBlci5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGdldEN1cnJlbnRJbnN0YW5jZSwgaW5qZWN0LCByZWYsIG9uTW91bnRlZCwgbmV4dFRpY2ssIGggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgRWxDaGVja2JveCB9IGZyb20gJy4uLy4uLy4uL2NoZWNrYm94L2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL2hvb2tzL2luZGV4Lm1qcyc7XG5pbXBvcnQgRmlsdGVyUGFuZWwgZnJvbSAnLi4vZmlsdGVyLXBhbmVsLm1qcyc7XG5pbXBvcnQgdXNlTGF5b3V0T2JzZXJ2ZXIgZnJvbSAnLi4vbGF5b3V0LW9ic2VydmVyLm1qcyc7XG5pbXBvcnQgeyBUQUJMRV9JTkpFQ1RJT05fS0VZIH0gZnJvbSAnLi4vdG9rZW5zLm1qcyc7XG5pbXBvcnQgdXNlRXZlbnQgZnJvbSAnLi9ldmVudC1oZWxwZXIubWpzJztcbmltcG9ydCB1c2VTdHlsZSBmcm9tICcuL3N0eWxlLmhlbHBlci5tanMnO1xuaW1wb3J0IHVzZVV0aWxzIGZyb20gJy4vdXRpbHMtaGVscGVyLm1qcyc7XG5pbXBvcnQgeyB1c2VOYW1lc3BhY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2UtbmFtZXNwYWNlL2luZGV4Lm1qcyc7XG5cbnZhciBUYWJsZUhlYWRlciA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRWxUYWJsZUhlYWRlclwiLFxuICBjb21wb25lbnRzOiB7XG4gICAgRWxDaGVja2JveFxuICB9LFxuICBwcm9wczoge1xuICAgIGZpeGVkOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBcIlwiXG4gICAgfSxcbiAgICBzdG9yZToge1xuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICB0eXBlOiBPYmplY3RcbiAgICB9LFxuICAgIGJvcmRlcjogQm9vbGVhbixcbiAgICBkZWZhdWx0U29ydDoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdDogKCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHByb3A6IFwiXCIsXG4gICAgICAgICAgb3JkZXI6IFwiXCJcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNldHVwKHByb3BzLCB7IGVtaXQgfSkge1xuICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgY29uc3QgcGFyZW50ID0gaW5qZWN0KFRBQkxFX0lOSkVDVElPTl9LRVkpO1xuICAgIGNvbnN0IG5zID0gdXNlTmFtZXNwYWNlKFwidGFibGVcIik7XG4gICAgY29uc3QgZmlsdGVyUGFuZWxzID0gcmVmKHt9KTtcbiAgICBjb25zdCB7IG9uQ29sdW1uc0NoYW5nZSwgb25TY3JvbGxhYmxlQ2hhbmdlIH0gPSB1c2VMYXlvdXRPYnNlcnZlcihwYXJlbnQpO1xuICAgIG9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICAgIGNvbnN0IHsgcHJvcCwgb3JkZXIgfSA9IHByb3BzLmRlZmF1bHRTb3J0O1xuICAgICAgcGFyZW50ID09IG51bGwgPyB2b2lkIDAgOiBwYXJlbnQuc3RvcmUuY29tbWl0KFwic29ydFwiLCB7IHByb3AsIG9yZGVyLCBpbml0OiB0cnVlIH0pO1xuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGhhbmRsZUhlYWRlckNsaWNrLFxuICAgICAgaGFuZGxlSGVhZGVyQ29udGV4dE1lbnUsXG4gICAgICBoYW5kbGVNb3VzZURvd24sXG4gICAgICBoYW5kbGVNb3VzZU1vdmUsXG4gICAgICBoYW5kbGVNb3VzZU91dCxcbiAgICAgIGhhbmRsZVNvcnRDbGljayxcbiAgICAgIGhhbmRsZUZpbHRlckNsaWNrXG4gICAgfSA9IHVzZUV2ZW50KHByb3BzLCBlbWl0KTtcbiAgICBjb25zdCB7XG4gICAgICBnZXRIZWFkZXJSb3dTdHlsZSxcbiAgICAgIGdldEhlYWRlclJvd0NsYXNzLFxuICAgICAgZ2V0SGVhZGVyQ2VsbFN0eWxlLFxuICAgICAgZ2V0SGVhZGVyQ2VsbENsYXNzXG4gICAgfSA9IHVzZVN0eWxlKHByb3BzKTtcbiAgICBjb25zdCB7IGlzR3JvdXAsIHRvZ2dsZUFsbFNlbGVjdGlvbiwgY29sdW1uUm93cyB9ID0gdXNlVXRpbHMocHJvcHMpO1xuICAgIGluc3RhbmNlLnN0YXRlID0ge1xuICAgICAgb25Db2x1bW5zQ2hhbmdlLFxuICAgICAgb25TY3JvbGxhYmxlQ2hhbmdlXG4gICAgfTtcbiAgICBpbnN0YW5jZS5maWx0ZXJQYW5lbHMgPSBmaWx0ZXJQYW5lbHM7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5zLFxuICAgICAgZmlsdGVyUGFuZWxzLFxuICAgICAgb25Db2x1bW5zQ2hhbmdlLFxuICAgICAgb25TY3JvbGxhYmxlQ2hhbmdlLFxuICAgICAgY29sdW1uUm93cyxcbiAgICAgIGdldEhlYWRlclJvd0NsYXNzLFxuICAgICAgZ2V0SGVhZGVyUm93U3R5bGUsXG4gICAgICBnZXRIZWFkZXJDZWxsQ2xhc3MsXG4gICAgICBnZXRIZWFkZXJDZWxsU3R5bGUsXG4gICAgICBoYW5kbGVIZWFkZXJDbGljayxcbiAgICAgIGhhbmRsZUhlYWRlckNvbnRleHRNZW51LFxuICAgICAgaGFuZGxlTW91c2VEb3duLFxuICAgICAgaGFuZGxlTW91c2VNb3ZlLFxuICAgICAgaGFuZGxlTW91c2VPdXQsXG4gICAgICBoYW5kbGVTb3J0Q2xpY2ssXG4gICAgICBoYW5kbGVGaWx0ZXJDbGljayxcbiAgICAgIGlzR3JvdXAsXG4gICAgICB0b2dnbGVBbGxTZWxlY3Rpb25cbiAgICB9O1xuICB9LFxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgbnMsXG4gICAgICBpc0dyb3VwLFxuICAgICAgY29sdW1uUm93cyxcbiAgICAgIGdldEhlYWRlckNlbGxTdHlsZSxcbiAgICAgIGdldEhlYWRlckNlbGxDbGFzcyxcbiAgICAgIGdldEhlYWRlclJvd0NsYXNzLFxuICAgICAgZ2V0SGVhZGVyUm93U3R5bGUsXG4gICAgICBoYW5kbGVIZWFkZXJDbGljayxcbiAgICAgIGhhbmRsZUhlYWRlckNvbnRleHRNZW51LFxuICAgICAgaGFuZGxlTW91c2VEb3duLFxuICAgICAgaGFuZGxlTW91c2VNb3ZlLFxuICAgICAgaGFuZGxlU29ydENsaWNrLFxuICAgICAgaGFuZGxlTW91c2VPdXQsXG4gICAgICBzdG9yZSxcbiAgICAgICRwYXJlbnRcbiAgICB9ID0gdGhpcztcbiAgICBsZXQgcm93U3BhbiA9IDE7XG4gICAgcmV0dXJuIGgoXCJ0aGVhZFwiLCB7XG4gICAgICBjbGFzczogeyBbbnMuaXMoXCJncm91cFwiKV06IGlzR3JvdXAgfVxuICAgIH0sIGNvbHVtblJvd3MubWFwKChzdWJDb2x1bW5zLCByb3dJbmRleCkgPT4gaChcInRyXCIsIHtcbiAgICAgIGNsYXNzOiBnZXRIZWFkZXJSb3dDbGFzcyhyb3dJbmRleCksXG4gICAgICBrZXk6IHJvd0luZGV4LFxuICAgICAgc3R5bGU6IGdldEhlYWRlclJvd1N0eWxlKHJvd0luZGV4KVxuICAgIH0sIHN1YkNvbHVtbnMubWFwKChjb2x1bW4sIGNlbGxJbmRleCkgPT4ge1xuICAgICAgaWYgKGNvbHVtbi5yb3dTcGFuID4gcm93U3Bhbikge1xuICAgICAgICByb3dTcGFuID0gY29sdW1uLnJvd1NwYW47XG4gICAgICB9XG4gICAgICByZXR1cm4gaChcInRoXCIsIHtcbiAgICAgICAgY2xhc3M6IGdldEhlYWRlckNlbGxDbGFzcyhyb3dJbmRleCwgY2VsbEluZGV4LCBzdWJDb2x1bW5zLCBjb2x1bW4pLFxuICAgICAgICBjb2xzcGFuOiBjb2x1bW4uY29sU3BhbixcbiAgICAgICAga2V5OiBgJHtjb2x1bW4uaWR9LXRoZWFkYCxcbiAgICAgICAgcm93c3BhbjogY29sdW1uLnJvd1NwYW4sXG4gICAgICAgIHN0eWxlOiBnZXRIZWFkZXJDZWxsU3R5bGUocm93SW5kZXgsIGNlbGxJbmRleCwgc3ViQ29sdW1ucywgY29sdW1uKSxcbiAgICAgICAgb25DbGljazogKCRldmVudCkgPT4gaGFuZGxlSGVhZGVyQ2xpY2soJGV2ZW50LCBjb2x1bW4pLFxuICAgICAgICBvbkNvbnRleHRtZW51OiAoJGV2ZW50KSA9PiBoYW5kbGVIZWFkZXJDb250ZXh0TWVudSgkZXZlbnQsIGNvbHVtbiksXG4gICAgICAgIG9uTW91c2Vkb3duOiAoJGV2ZW50KSA9PiBoYW5kbGVNb3VzZURvd24oJGV2ZW50LCBjb2x1bW4pLFxuICAgICAgICBvbk1vdXNlbW92ZTogKCRldmVudCkgPT4gaGFuZGxlTW91c2VNb3ZlKCRldmVudCwgY29sdW1uKSxcbiAgICAgICAgb25Nb3VzZW91dDogaGFuZGxlTW91c2VPdXRcbiAgICAgIH0sIFtcbiAgICAgICAgaChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3M6IFtcbiAgICAgICAgICAgIFwiY2VsbFwiLFxuICAgICAgICAgICAgY29sdW1uLmZpbHRlcmVkVmFsdWUgJiYgY29sdW1uLmZpbHRlcmVkVmFsdWUubGVuZ3RoID4gMCA/IFwiaGlnaGxpZ2h0XCIgOiBcIlwiXG4gICAgICAgICAgXVxuICAgICAgICB9LCBbXG4gICAgICAgICAgY29sdW1uLnJlbmRlckhlYWRlciA/IGNvbHVtbi5yZW5kZXJIZWFkZXIoe1xuICAgICAgICAgICAgY29sdW1uLFxuICAgICAgICAgICAgJGluZGV4OiBjZWxsSW5kZXgsXG4gICAgICAgICAgICBzdG9yZSxcbiAgICAgICAgICAgIF9zZWxmOiAkcGFyZW50XG4gICAgICAgICAgfSkgOiBjb2x1bW4ubGFiZWwsXG4gICAgICAgICAgY29sdW1uLnNvcnRhYmxlICYmIGgoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgkZXZlbnQpID0+IGhhbmRsZVNvcnRDbGljaygkZXZlbnQsIGNvbHVtbiksXG4gICAgICAgICAgICBjbGFzczogXCJjYXJldC13cmFwcGVyXCJcbiAgICAgICAgICB9LCBbXG4gICAgICAgICAgICBoKFwiaVwiLCB7XG4gICAgICAgICAgICAgIG9uQ2xpY2s6ICgkZXZlbnQpID0+IGhhbmRsZVNvcnRDbGljaygkZXZlbnQsIGNvbHVtbiwgXCJhc2NlbmRpbmdcIiksXG4gICAgICAgICAgICAgIGNsYXNzOiBcInNvcnQtY2FyZXQgYXNjZW5kaW5nXCJcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgaChcImlcIiwge1xuICAgICAgICAgICAgICBvbkNsaWNrOiAoJGV2ZW50KSA9PiBoYW5kbGVTb3J0Q2xpY2soJGV2ZW50LCBjb2x1bW4sIFwiZGVzY2VuZGluZ1wiKSxcbiAgICAgICAgICAgICAgY2xhc3M6IFwic29ydC1jYXJldCBkZXNjZW5kaW5nXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgY29sdW1uLmZpbHRlcmFibGUgJiYgaChGaWx0ZXJQYW5lbCwge1xuICAgICAgICAgICAgc3RvcmUsXG4gICAgICAgICAgICBwbGFjZW1lbnQ6IGNvbHVtbi5maWx0ZXJQbGFjZW1lbnQgfHwgXCJib3R0b20tc3RhcnRcIixcbiAgICAgICAgICAgIGNvbHVtbixcbiAgICAgICAgICAgIHVwRGF0YUNvbHVtbjogKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgY29sdW1uW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgXSk7XG4gICAgfSkpKSk7XG4gIH1cbn0pO1xuXG5leHBvcnQgeyBUYWJsZUhlYWRlciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iLCJpbXBvcnQgeyBnZXRDdXJyZW50SW5zdGFuY2UsIGluamVjdCwgcmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGlzQ2xpZW50IH0gZnJvbSAnQHZ1ZXVzZS9jb3JlJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCB7IFRBQkxFX0lOSkVDVElPTl9LRVkgfSBmcm9tICcuLi90b2tlbnMubWpzJztcbmltcG9ydCB7IGFkZENsYXNzLCByZW1vdmVDbGFzcywgaGFzQ2xhc3MgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9kb20vc3R5bGUubWpzJztcblxuZnVuY3Rpb24gdXNlRXZlbnQocHJvcHMsIGVtaXQpIHtcbiAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgY29uc3QgcGFyZW50ID0gaW5qZWN0KFRBQkxFX0lOSkVDVElPTl9LRVkpO1xuICBjb25zdCBoYW5kbGVGaWx0ZXJDbGljayA9IChldmVudCkgPT4ge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHJldHVybjtcbiAgfTtcbiAgY29uc3QgaGFuZGxlSGVhZGVyQ2xpY2sgPSAoZXZlbnQsIGNvbHVtbikgPT4ge1xuICAgIGlmICghY29sdW1uLmZpbHRlcnMgJiYgY29sdW1uLnNvcnRhYmxlKSB7XG4gICAgICBoYW5kbGVTb3J0Q2xpY2soZXZlbnQsIGNvbHVtbiwgZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAoY29sdW1uLmZpbHRlcmFibGUgJiYgIWNvbHVtbi5zb3J0YWJsZSkge1xuICAgICAgaGFuZGxlRmlsdGVyQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgICBwYXJlbnQgPT0gbnVsbCA/IHZvaWQgMCA6IHBhcmVudC5lbWl0KFwiaGVhZGVyLWNsaWNrXCIsIGNvbHVtbiwgZXZlbnQpO1xuICB9O1xuICBjb25zdCBoYW5kbGVIZWFkZXJDb250ZXh0TWVudSA9IChldmVudCwgY29sdW1uKSA9PiB7XG4gICAgcGFyZW50ID09IG51bGwgPyB2b2lkIDAgOiBwYXJlbnQuZW1pdChcImhlYWRlci1jb250ZXh0bWVudVwiLCBjb2x1bW4sIGV2ZW50KTtcbiAgfTtcbiAgY29uc3QgZHJhZ2dpbmdDb2x1bW4gPSByZWYobnVsbCk7XG4gIGNvbnN0IGRyYWdnaW5nID0gcmVmKGZhbHNlKTtcbiAgY29uc3QgZHJhZ1N0YXRlID0gcmVmKHt9KTtcbiAgY29uc3QgaGFuZGxlTW91c2VEb3duID0gKGV2ZW50LCBjb2x1bW4pID0+IHtcbiAgICBpZiAoIWlzQ2xpZW50KVxuICAgICAgcmV0dXJuO1xuICAgIGlmIChjb2x1bW4uY2hpbGRyZW4gJiYgY29sdW1uLmNoaWxkcmVuLmxlbmd0aCA+IDApXG4gICAgICByZXR1cm47XG4gICAgaWYgKGRyYWdnaW5nQ29sdW1uLnZhbHVlICYmIHByb3BzLmJvcmRlcikge1xuICAgICAgZHJhZ2dpbmcudmFsdWUgPSB0cnVlO1xuICAgICAgY29uc3QgdGFibGUgPSBwYXJlbnQ7XG4gICAgICBlbWl0KFwic2V0LWRyYWctdmlzaWJsZVwiLCB0cnVlKTtcbiAgICAgIGNvbnN0IHRhYmxlRWwgPSB0YWJsZSA9PSBudWxsID8gdm9pZCAwIDogdGFibGUudm5vZGUuZWw7XG4gICAgICBjb25zdCB0YWJsZUxlZnQgPSB0YWJsZUVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG4gICAgICBjb25zdCBjb2x1bW5FbCA9IGluc3RhbmNlLnZub2RlLmVsLnF1ZXJ5U2VsZWN0b3IoYHRoLiR7Y29sdW1uLmlkfWApO1xuICAgICAgY29uc3QgY29sdW1uUmVjdCA9IGNvbHVtbkVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3QgbWluTGVmdCA9IGNvbHVtblJlY3QubGVmdCAtIHRhYmxlTGVmdCArIDMwO1xuICAgICAgYWRkQ2xhc3MoY29sdW1uRWwsIFwibm9jbGlja1wiKTtcbiAgICAgIGRyYWdTdGF0ZS52YWx1ZSA9IHtcbiAgICAgICAgc3RhcnRNb3VzZUxlZnQ6IGV2ZW50LmNsaWVudFgsXG4gICAgICAgIHN0YXJ0TGVmdDogY29sdW1uUmVjdC5yaWdodCAtIHRhYmxlTGVmdCxcbiAgICAgICAgc3RhcnRDb2x1bW5MZWZ0OiBjb2x1bW5SZWN0LmxlZnQgLSB0YWJsZUxlZnQsXG4gICAgICAgIHRhYmxlTGVmdFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHJlc2l6ZVByb3h5ID0gdGFibGUgPT0gbnVsbCA/IHZvaWQgMCA6IHRhYmxlLnJlZnMucmVzaXplUHJveHk7XG4gICAgICByZXNpemVQcm94eS5zdHlsZS5sZWZ0ID0gYCR7ZHJhZ1N0YXRlLnZhbHVlLnN0YXJ0TGVmdH1weGA7XG4gICAgICBkb2N1bWVudC5vbnNlbGVjdHN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG4gICAgICBkb2N1bWVudC5vbmRyYWdzdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuICAgICAgY29uc3QgaGFuZGxlTW91c2VNb3ZlMiA9IChldmVudDIpID0+IHtcbiAgICAgICAgY29uc3QgZGVsdGFMZWZ0ID0gZXZlbnQyLmNsaWVudFggLSBkcmFnU3RhdGUudmFsdWUuc3RhcnRNb3VzZUxlZnQ7XG4gICAgICAgIGNvbnN0IHByb3h5TGVmdCA9IGRyYWdTdGF0ZS52YWx1ZS5zdGFydExlZnQgKyBkZWx0YUxlZnQ7XG4gICAgICAgIHJlc2l6ZVByb3h5LnN0eWxlLmxlZnQgPSBgJHtNYXRoLm1heChtaW5MZWZ0LCBwcm94eUxlZnQpfXB4YDtcbiAgICAgIH07XG4gICAgICBjb25zdCBoYW5kbGVNb3VzZVVwID0gKCkgPT4ge1xuICAgICAgICBpZiAoZHJhZ2dpbmcudmFsdWUpIHtcbiAgICAgICAgICBjb25zdCB7IHN0YXJ0Q29sdW1uTGVmdCwgc3RhcnRMZWZ0IH0gPSBkcmFnU3RhdGUudmFsdWU7XG4gICAgICAgICAgY29uc3QgZmluYWxMZWZ0ID0gTnVtYmVyLnBhcnNlSW50KHJlc2l6ZVByb3h5LnN0eWxlLmxlZnQsIDEwKTtcbiAgICAgICAgICBjb25zdCBjb2x1bW5XaWR0aCA9IGZpbmFsTGVmdCAtIHN0YXJ0Q29sdW1uTGVmdDtcbiAgICAgICAgICBjb2x1bW4ud2lkdGggPSBjb2x1bW4ucmVhbFdpZHRoID0gY29sdW1uV2lkdGg7XG4gICAgICAgICAgdGFibGUgPT0gbnVsbCA/IHZvaWQgMCA6IHRhYmxlLmVtaXQoXCJoZWFkZXItZHJhZ2VuZFwiLCBjb2x1bW4ud2lkdGgsIHN0YXJ0TGVmdCAtIHN0YXJ0Q29sdW1uTGVmdCwgY29sdW1uLCBldmVudCk7XG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHByb3BzLnN0b3JlLnNjaGVkdWxlTGF5b3V0KGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9IFwiXCI7XG4gICAgICAgICAgZHJhZ2dpbmcudmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICBkcmFnZ2luZ0NvbHVtbi52YWx1ZSA9IG51bGw7XG4gICAgICAgICAgZHJhZ1N0YXRlLnZhbHVlID0ge307XG4gICAgICAgICAgZW1pdChcInNldC1kcmFnLXZpc2libGVcIiwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgaGFuZGxlTW91c2VNb3ZlMik7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGhhbmRsZU1vdXNlVXApO1xuICAgICAgICBkb2N1bWVudC5vbnNlbGVjdHN0YXJ0ID0gbnVsbDtcbiAgICAgICAgZG9jdW1lbnQub25kcmFnc3RhcnQgPSBudWxsO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICByZW1vdmVDbGFzcyhjb2x1bW5FbCwgXCJub2NsaWNrXCIpO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH07XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIGhhbmRsZU1vdXNlTW92ZTIpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgaGFuZGxlTW91c2VVcCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVNb3VzZU1vdmUgPSAoZXZlbnQsIGNvbHVtbikgPT4ge1xuICAgIHZhciBfYTtcbiAgICBpZiAoY29sdW1uLmNoaWxkcmVuICYmIGNvbHVtbi5jaGlsZHJlbi5sZW5ndGggPiAwKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHRhcmdldCA9IChfYSA9IGV2ZW50LnRhcmdldCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmNsb3Nlc3QoXCJ0aFwiKTtcbiAgICBpZiAoIWNvbHVtbiB8fCAhY29sdW1uLnJlc2l6YWJsZSlcbiAgICAgIHJldHVybjtcbiAgICBpZiAoIWRyYWdnaW5nLnZhbHVlICYmIHByb3BzLmJvcmRlcikge1xuICAgICAgY29uc3QgcmVjdCA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IGJvZHlTdHlsZSA9IGRvY3VtZW50LmJvZHkuc3R5bGU7XG4gICAgICBpZiAocmVjdC53aWR0aCA+IDEyICYmIHJlY3QucmlnaHQgLSBldmVudC5wYWdlWCA8IDgpIHtcbiAgICAgICAgYm9keVN0eWxlLmN1cnNvciA9IFwiY29sLXJlc2l6ZVwiO1xuICAgICAgICBpZiAoaGFzQ2xhc3ModGFyZ2V0LCBcImlzLXNvcnRhYmxlXCIpKSB7XG4gICAgICAgICAgdGFyZ2V0LnN0eWxlLmN1cnNvciA9IFwiY29sLXJlc2l6ZVwiO1xuICAgICAgICB9XG4gICAgICAgIGRyYWdnaW5nQ29sdW1uLnZhbHVlID0gY29sdW1uO1xuICAgICAgfSBlbHNlIGlmICghZHJhZ2dpbmcudmFsdWUpIHtcbiAgICAgICAgYm9keVN0eWxlLmN1cnNvciA9IFwiXCI7XG4gICAgICAgIGlmIChoYXNDbGFzcyh0YXJnZXQsIFwiaXMtc29ydGFibGVcIikpIHtcbiAgICAgICAgICB0YXJnZXQuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gICAgICAgIH1cbiAgICAgICAgZHJhZ2dpbmdDb2x1bW4udmFsdWUgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlTW91c2VPdXQgPSAoKSA9PiB7XG4gICAgaWYgKCFpc0NsaWVudClcbiAgICAgIHJldHVybjtcbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9IFwiXCI7XG4gIH07XG4gIGNvbnN0IHRvZ2dsZU9yZGVyID0gKHsgb3JkZXIsIHNvcnRPcmRlcnMgfSkgPT4ge1xuICAgIGlmIChvcmRlciA9PT0gXCJcIilcbiAgICAgIHJldHVybiBzb3J0T3JkZXJzWzBdO1xuICAgIGNvbnN0IGluZGV4ID0gc29ydE9yZGVycy5pbmRleE9mKG9yZGVyIHx8IG51bGwpO1xuICAgIHJldHVybiBzb3J0T3JkZXJzW2luZGV4ID4gc29ydE9yZGVycy5sZW5ndGggLSAyID8gMCA6IGluZGV4ICsgMV07XG4gIH07XG4gIGNvbnN0IGhhbmRsZVNvcnRDbGljayA9IChldmVudCwgY29sdW1uLCBnaXZlbk9yZGVyKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGNvbnN0IG9yZGVyID0gY29sdW1uLm9yZGVyID09PSBnaXZlbk9yZGVyID8gbnVsbCA6IGdpdmVuT3JkZXIgfHwgdG9nZ2xlT3JkZXIoY29sdW1uKTtcbiAgICBjb25zdCB0YXJnZXQgPSAoX2EgPSBldmVudC50YXJnZXQpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jbG9zZXN0KFwidGhcIik7XG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgaWYgKGhhc0NsYXNzKHRhcmdldCwgXCJub2NsaWNrXCIpKSB7XG4gICAgICAgIHJlbW92ZUNsYXNzKHRhcmdldCwgXCJub2NsaWNrXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghY29sdW1uLnNvcnRhYmxlKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHN0YXRlcyA9IHByb3BzLnN0b3JlLnN0YXRlcztcbiAgICBsZXQgc29ydFByb3AgPSBzdGF0ZXMuc29ydFByb3AudmFsdWU7XG4gICAgbGV0IHNvcnRPcmRlcjtcbiAgICBjb25zdCBzb3J0aW5nQ29sdW1uID0gc3RhdGVzLnNvcnRpbmdDb2x1bW4udmFsdWU7XG4gICAgaWYgKHNvcnRpbmdDb2x1bW4gIT09IGNvbHVtbiB8fCBzb3J0aW5nQ29sdW1uID09PSBjb2x1bW4gJiYgc29ydGluZ0NvbHVtbi5vcmRlciA9PT0gbnVsbCkge1xuICAgICAgaWYgKHNvcnRpbmdDb2x1bW4pIHtcbiAgICAgICAgc29ydGluZ0NvbHVtbi5vcmRlciA9IG51bGw7XG4gICAgICB9XG4gICAgICBzdGF0ZXMuc29ydGluZ0NvbHVtbi52YWx1ZSA9IGNvbHVtbjtcbiAgICAgIHNvcnRQcm9wID0gY29sdW1uLnByb3BlcnR5O1xuICAgIH1cbiAgICBpZiAoIW9yZGVyKSB7XG4gICAgICBzb3J0T3JkZXIgPSBjb2x1bW4ub3JkZXIgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzb3J0T3JkZXIgPSBjb2x1bW4ub3JkZXIgPSBvcmRlcjtcbiAgICB9XG4gICAgc3RhdGVzLnNvcnRQcm9wLnZhbHVlID0gc29ydFByb3A7XG4gICAgc3RhdGVzLnNvcnRPcmRlci52YWx1ZSA9IHNvcnRPcmRlcjtcbiAgICBwYXJlbnQgPT0gbnVsbCA/IHZvaWQgMCA6IHBhcmVudC5zdG9yZS5jb21taXQoXCJjaGFuZ2VTb3J0Q29uZGl0aW9uXCIpO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGhhbmRsZUhlYWRlckNsaWNrLFxuICAgIGhhbmRsZUhlYWRlckNvbnRleHRNZW51LFxuICAgIGhhbmRsZU1vdXNlRG93bixcbiAgICBoYW5kbGVNb3VzZU1vdmUsXG4gICAgaGFuZGxlTW91c2VPdXQsXG4gICAgaGFuZGxlU29ydENsaWNrLFxuICAgIGhhbmRsZUZpbHRlckNsaWNrXG4gIH07XG59XG5cbmV4cG9ydCB7IHVzZUV2ZW50IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50LWhlbHBlci5tanMubWFwXG4iLCJpbXBvcnQgeyBpbmplY3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi9ob29rcy9pbmRleC5tanMnO1xuaW1wb3J0IHsgZ2V0Rml4ZWRDb2x1bW5PZmZzZXQsIGVuc3VyZVBvc2l0aW9uLCBnZXRGaXhlZENvbHVtbnNDbGFzcyB9IGZyb20gJy4uL3V0aWwubWpzJztcbmltcG9ydCB7IFRBQkxFX0lOSkVDVElPTl9LRVkgfSBmcm9tICcuLi90b2tlbnMubWpzJztcbmltcG9ydCB7IHVzZU5hbWVzcGFjZSB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZS1uYW1lc3BhY2UvaW5kZXgubWpzJztcblxuZnVuY3Rpb24gdXNlU3R5bGUocHJvcHMpIHtcbiAgY29uc3QgcGFyZW50ID0gaW5qZWN0KFRBQkxFX0lOSkVDVElPTl9LRVkpO1xuICBjb25zdCBucyA9IHVzZU5hbWVzcGFjZShcInRhYmxlXCIpO1xuICBjb25zdCBnZXRIZWFkZXJSb3dTdHlsZSA9IChyb3dJbmRleCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlclJvd1N0eWxlID0gcGFyZW50ID09IG51bGwgPyB2b2lkIDAgOiBwYXJlbnQucHJvcHMuaGVhZGVyUm93U3R5bGU7XG4gICAgaWYgKHR5cGVvZiBoZWFkZXJSb3dTdHlsZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gaGVhZGVyUm93U3R5bGUuY2FsbChudWxsLCB7IHJvd0luZGV4IH0pO1xuICAgIH1cbiAgICByZXR1cm4gaGVhZGVyUm93U3R5bGU7XG4gIH07XG4gIGNvbnN0IGdldEhlYWRlclJvd0NsYXNzID0gKHJvd0luZGV4KSA9PiB7XG4gICAgY29uc3QgY2xhc3NlcyA9IFtdO1xuICAgIGNvbnN0IGhlYWRlclJvd0NsYXNzTmFtZSA9IHBhcmVudCA9PSBudWxsID8gdm9pZCAwIDogcGFyZW50LnByb3BzLmhlYWRlclJvd0NsYXNzTmFtZTtcbiAgICBpZiAodHlwZW9mIGhlYWRlclJvd0NsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgY2xhc3Nlcy5wdXNoKGhlYWRlclJvd0NsYXNzTmFtZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaGVhZGVyUm93Q2xhc3NOYW1lID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGNsYXNzZXMucHVzaChoZWFkZXJSb3dDbGFzc05hbWUuY2FsbChudWxsLCB7IHJvd0luZGV4IH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzZXMuam9pbihcIiBcIik7XG4gIH07XG4gIGNvbnN0IGdldEhlYWRlckNlbGxTdHlsZSA9IChyb3dJbmRleCwgY29sdW1uSW5kZXgsIHJvdywgY29sdW1uKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIGxldCBoZWFkZXJDZWxsU3R5bGVzID0gKF9hID0gcGFyZW50ID09IG51bGwgPyB2b2lkIDAgOiBwYXJlbnQucHJvcHMuaGVhZGVyQ2VsbFN0eWxlKSAhPSBudWxsID8gX2EgOiB7fTtcbiAgICBpZiAodHlwZW9mIGhlYWRlckNlbGxTdHlsZXMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgaGVhZGVyQ2VsbFN0eWxlcyA9IGhlYWRlckNlbGxTdHlsZXMuY2FsbChudWxsLCB7XG4gICAgICAgIHJvd0luZGV4LFxuICAgICAgICBjb2x1bW5JbmRleCxcbiAgICAgICAgcm93LFxuICAgICAgICBjb2x1bW5cbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBmaXhlZFN0eWxlID0gZ2V0Rml4ZWRDb2x1bW5PZmZzZXQoY29sdW1uSW5kZXgsIGNvbHVtbi5maXhlZCwgcHJvcHMuc3RvcmUsIHJvdyk7XG4gICAgZW5zdXJlUG9zaXRpb24oZml4ZWRTdHlsZSwgXCJsZWZ0XCIpO1xuICAgIGVuc3VyZVBvc2l0aW9uKGZpeGVkU3R5bGUsIFwicmlnaHRcIik7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGhlYWRlckNlbGxTdHlsZXMsIGZpeGVkU3R5bGUpO1xuICB9O1xuICBjb25zdCBnZXRIZWFkZXJDZWxsQ2xhc3MgPSAocm93SW5kZXgsIGNvbHVtbkluZGV4LCByb3csIGNvbHVtbikgPT4ge1xuICAgIGNvbnN0IGZpeGVkQ2xhc3NlcyA9IGdldEZpeGVkQ29sdW1uc0NsYXNzKG5zLmIoKSwgY29sdW1uSW5kZXgsIGNvbHVtbi5maXhlZCwgcHJvcHMuc3RvcmUsIHJvdyk7XG4gICAgY29uc3QgY2xhc3NlcyA9IFtcbiAgICAgIGNvbHVtbi5pZCxcbiAgICAgIGNvbHVtbi5vcmRlcixcbiAgICAgIGNvbHVtbi5oZWFkZXJBbGlnbixcbiAgICAgIGNvbHVtbi5jbGFzc05hbWUsXG4gICAgICBjb2x1bW4ubGFiZWxDbGFzc05hbWUsXG4gICAgICAuLi5maXhlZENsYXNzZXNcbiAgICBdO1xuICAgIGlmICghY29sdW1uLmNoaWxkcmVuKSB7XG4gICAgICBjbGFzc2VzLnB1c2goXCJpcy1sZWFmXCIpO1xuICAgIH1cbiAgICBpZiAoY29sdW1uLnNvcnRhYmxlKSB7XG4gICAgICBjbGFzc2VzLnB1c2goXCJpcy1zb3J0YWJsZVwiKTtcbiAgICB9XG4gICAgY29uc3QgaGVhZGVyQ2VsbENsYXNzTmFtZSA9IHBhcmVudCA9PSBudWxsID8gdm9pZCAwIDogcGFyZW50LnByb3BzLmhlYWRlckNlbGxDbGFzc05hbWU7XG4gICAgaWYgKHR5cGVvZiBoZWFkZXJDZWxsQ2xhc3NOYW1lID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjbGFzc2VzLnB1c2goaGVhZGVyQ2VsbENsYXNzTmFtZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaGVhZGVyQ2VsbENsYXNzTmFtZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjbGFzc2VzLnB1c2goaGVhZGVyQ2VsbENsYXNzTmFtZS5jYWxsKG51bGwsIHtcbiAgICAgICAgcm93SW5kZXgsXG4gICAgICAgIGNvbHVtbkluZGV4LFxuICAgICAgICByb3csXG4gICAgICAgIGNvbHVtblxuICAgICAgfSkpO1xuICAgIH1cbiAgICBjbGFzc2VzLnB1c2gobnMuZShcImNlbGxcIikpO1xuICAgIHJldHVybiBjbGFzc2VzLmZpbHRlcigoY2xhc3NOYW1lKSA9PiBCb29sZWFuKGNsYXNzTmFtZSkpLmpvaW4oXCIgXCIpO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGdldEhlYWRlclJvd1N0eWxlLFxuICAgIGdldEhlYWRlclJvd0NsYXNzLFxuICAgIGdldEhlYWRlckNlbGxTdHlsZSxcbiAgICBnZXRIZWFkZXJDZWxsQ2xhc3NcbiAgfTtcbn1cblxuZXhwb3J0IHsgdXNlU3R5bGUgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGUuaGVscGVyLm1qcy5tYXBcbiIsImltcG9ydCB7IGluamVjdCwgcmVmLCBoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGRlYm91bmNlIH0gZnJvbSAnbG9kYXNoLXVuaWZpZWQnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi91dGlscy9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi9ob29rcy9pbmRleC5tanMnO1xuaW1wb3J0IHsgZ2V0Q2VsbCwgZ2V0Q29sdW1uQnlDZWxsLCBjcmVhdGVUYWJsZVBvcHBlciB9IGZyb20gJy4uL3V0aWwubWpzJztcbmltcG9ydCB7IFRBQkxFX0lOSkVDVElPTl9LRVkgfSBmcm9tICcuLi90b2tlbnMubWpzJztcbmltcG9ydCB7IHVzZVpJbmRleCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZS16LWluZGV4L2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBoYXNDbGFzcywgZ2V0U3R5bGUgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9kb20vc3R5bGUubWpzJztcblxuZnVuY3Rpb24gdXNlRXZlbnRzKHByb3BzKSB7XG4gIGNvbnN0IHBhcmVudCA9IGluamVjdChUQUJMRV9JTkpFQ1RJT05fS0VZKTtcbiAgY29uc3QgdG9vbHRpcENvbnRlbnQgPSByZWYoXCJcIik7XG4gIGNvbnN0IHRvb2x0aXBUcmlnZ2VyID0gcmVmKGgoXCJkaXZcIikpO1xuICBjb25zdCB7IG5leHRaSW5kZXggfSA9IHVzZVpJbmRleCgpO1xuICBjb25zdCBoYW5kbGVFdmVudCA9IChldmVudCwgcm93LCBuYW1lKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHRhYmxlID0gcGFyZW50O1xuICAgIGNvbnN0IGNlbGwgPSBnZXRDZWxsKGV2ZW50KTtcbiAgICBsZXQgY29sdW1uO1xuICAgIGNvbnN0IG5hbWVzcGFjZSA9IChfYSA9IHRhYmxlID09IG51bGwgPyB2b2lkIDAgOiB0YWJsZS52bm9kZS5lbCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmRhdGFzZXQucHJlZml4O1xuICAgIGlmIChjZWxsKSB7XG4gICAgICBjb2x1bW4gPSBnZXRDb2x1bW5CeUNlbGwoe1xuICAgICAgICBjb2x1bW5zOiBwcm9wcy5zdG9yZS5zdGF0ZXMuY29sdW1ucy52YWx1ZVxuICAgICAgfSwgY2VsbCwgbmFtZXNwYWNlKTtcbiAgICAgIGlmIChjb2x1bW4pIHtcbiAgICAgICAgdGFibGUgPT0gbnVsbCA/IHZvaWQgMCA6IHRhYmxlLmVtaXQoYGNlbGwtJHtuYW1lfWAsIHJvdywgY29sdW1uLCBjZWxsLCBldmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRhYmxlID09IG51bGwgPyB2b2lkIDAgOiB0YWJsZS5lbWl0KGByb3ctJHtuYW1lfWAsIHJvdywgY29sdW1uLCBldmVudCk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZURvdWJsZUNsaWNrID0gKGV2ZW50LCByb3cpID0+IHtcbiAgICBoYW5kbGVFdmVudChldmVudCwgcm93LCBcImRibGNsaWNrXCIpO1xuICB9O1xuICBjb25zdCBoYW5kbGVDbGljayA9IChldmVudCwgcm93KSA9PiB7XG4gICAgcHJvcHMuc3RvcmUuY29tbWl0KFwic2V0Q3VycmVudFJvd1wiLCByb3cpO1xuICAgIGhhbmRsZUV2ZW50KGV2ZW50LCByb3csIFwiY2xpY2tcIik7XG4gIH07XG4gIGNvbnN0IGhhbmRsZUNvbnRleHRNZW51ID0gKGV2ZW50LCByb3cpID0+IHtcbiAgICBoYW5kbGVFdmVudChldmVudCwgcm93LCBcImNvbnRleHRtZW51XCIpO1xuICB9O1xuICBjb25zdCBoYW5kbGVNb3VzZUVudGVyID0gZGVib3VuY2UoKGluZGV4KSA9PiB7XG4gICAgcHJvcHMuc3RvcmUuY29tbWl0KFwic2V0SG92ZXJSb3dcIiwgaW5kZXgpO1xuICB9LCAzMCk7XG4gIGNvbnN0IGhhbmRsZU1vdXNlTGVhdmUgPSBkZWJvdW5jZSgoKSA9PiB7XG4gICAgcHJvcHMuc3RvcmUuY29tbWl0KFwic2V0SG92ZXJSb3dcIiwgbnVsbCk7XG4gIH0sIDMwKTtcbiAgY29uc3QgaGFuZGxlQ2VsbE1vdXNlRW50ZXIgPSAoZXZlbnQsIHJvdywgdG9vbHRpcE9wdGlvbnMpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgdGFibGUgPSBwYXJlbnQ7XG4gICAgY29uc3QgY2VsbCA9IGdldENlbGwoZXZlbnQpO1xuICAgIGNvbnN0IG5hbWVzcGFjZSA9IChfYSA9IHRhYmxlID09IG51bGwgPyB2b2lkIDAgOiB0YWJsZS52bm9kZS5lbCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmRhdGFzZXQucHJlZml4O1xuICAgIGlmIChjZWxsKSB7XG4gICAgICBjb25zdCBjb2x1bW4gPSBnZXRDb2x1bW5CeUNlbGwoe1xuICAgICAgICBjb2x1bW5zOiBwcm9wcy5zdG9yZS5zdGF0ZXMuY29sdW1ucy52YWx1ZVxuICAgICAgfSwgY2VsbCwgbmFtZXNwYWNlKTtcbiAgICAgIGNvbnN0IGhvdmVyU3RhdGUgPSB0YWJsZS5ob3ZlclN0YXRlID0geyBjZWxsLCBjb2x1bW4sIHJvdyB9O1xuICAgICAgdGFibGUgPT0gbnVsbCA/IHZvaWQgMCA6IHRhYmxlLmVtaXQoXCJjZWxsLW1vdXNlLWVudGVyXCIsIGhvdmVyU3RhdGUucm93LCBob3ZlclN0YXRlLmNvbHVtbiwgaG92ZXJTdGF0ZS5jZWxsLCBldmVudCk7XG4gICAgfVxuICAgIGlmICghdG9vbHRpcE9wdGlvbnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY2VsbENoaWxkID0gZXZlbnQudGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoXCIuY2VsbFwiKTtcbiAgICBpZiAoIShoYXNDbGFzcyhjZWxsQ2hpbGQsIGAke25hbWVzcGFjZX0tdG9vbHRpcGApICYmIGNlbGxDaGlsZC5jaGlsZE5vZGVzLmxlbmd0aCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIHJhbmdlLnNldFN0YXJ0KGNlbGxDaGlsZCwgMCk7XG4gICAgcmFuZ2Uuc2V0RW5kKGNlbGxDaGlsZCwgY2VsbENoaWxkLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICBjb25zdCByYW5nZVdpZHRoID0gTWF0aC5yb3VuZChyYW5nZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCk7XG4gICAgY29uc3QgcGFkZGluZyA9IChOdW1iZXIucGFyc2VJbnQoZ2V0U3R5bGUoY2VsbENoaWxkLCBcInBhZGRpbmdMZWZ0XCIpLCAxMCkgfHwgMCkgKyAoTnVtYmVyLnBhcnNlSW50KGdldFN0eWxlKGNlbGxDaGlsZCwgXCJwYWRkaW5nUmlnaHRcIiksIDEwKSB8fCAwKTtcbiAgICBpZiAocmFuZ2VXaWR0aCArIHBhZGRpbmcgPiBjZWxsQ2hpbGQub2Zmc2V0V2lkdGggfHwgY2VsbENoaWxkLnNjcm9sbFdpZHRoID4gY2VsbENoaWxkLm9mZnNldFdpZHRoKSB7XG4gICAgICBjcmVhdGVUYWJsZVBvcHBlcihwYXJlbnQgPT0gbnVsbCA/IHZvaWQgMCA6IHBhcmVudC5yZWZzLnRhYmxlV3JhcHBlciwgY2VsbCwgY2VsbC5pbm5lclRleHQgfHwgY2VsbC50ZXh0Q29udGVudCwgbmV4dFpJbmRleCwgdG9vbHRpcE9wdGlvbnMpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlQ2VsbE1vdXNlTGVhdmUgPSAoZXZlbnQpID0+IHtcbiAgICBjb25zdCBjZWxsID0gZ2V0Q2VsbChldmVudCk7XG4gICAgaWYgKCFjZWxsKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IG9sZEhvdmVyU3RhdGUgPSBwYXJlbnQgPT0gbnVsbCA/IHZvaWQgMCA6IHBhcmVudC5ob3ZlclN0YXRlO1xuICAgIHBhcmVudCA9PSBudWxsID8gdm9pZCAwIDogcGFyZW50LmVtaXQoXCJjZWxsLW1vdXNlLWxlYXZlXCIsIG9sZEhvdmVyU3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IG9sZEhvdmVyU3RhdGUucm93LCBvbGRIb3ZlclN0YXRlID09IG51bGwgPyB2b2lkIDAgOiBvbGRIb3ZlclN0YXRlLmNvbHVtbiwgb2xkSG92ZXJTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogb2xkSG92ZXJTdGF0ZS5jZWxsLCBldmVudCk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgaGFuZGxlRG91YmxlQ2xpY2ssXG4gICAgaGFuZGxlQ2xpY2ssXG4gICAgaGFuZGxlQ29udGV4dE1lbnUsXG4gICAgaGFuZGxlTW91c2VFbnRlcixcbiAgICBoYW5kbGVNb3VzZUxlYXZlLFxuICAgIGhhbmRsZUNlbGxNb3VzZUVudGVyLFxuICAgIGhhbmRsZUNlbGxNb3VzZUxlYXZlLFxuICAgIHRvb2x0aXBDb250ZW50LFxuICAgIHRvb2x0aXBUcmlnZ2VyXG4gIH07XG59XG5cbmV4cG9ydCB7IHVzZUV2ZW50cyBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudHMtaGVscGVyLm1qcy5tYXBcbiIsImltcG9ydCB7IGluamVjdCwgY29tcHV0ZWQsIGggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tICdsb2Rhc2gtdW5pZmllZCc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL2hvb2tzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBnZXRSb3dJZGVudGl0eSB9IGZyb20gJy4uL3V0aWwubWpzJztcbmltcG9ydCB7IFRBQkxFX0lOSkVDVElPTl9LRVkgfSBmcm9tICcuLi90b2tlbnMubWpzJztcbmltcG9ydCB1c2VFdmVudHMgZnJvbSAnLi9ldmVudHMtaGVscGVyLm1qcyc7XG5pbXBvcnQgdXNlU3R5bGVzIGZyb20gJy4vc3R5bGVzLWhlbHBlci5tanMnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleC5tanMnO1xuXG5mdW5jdGlvbiB1c2VSZW5kZXIocHJvcHMpIHtcbiAgY29uc3QgcGFyZW50ID0gaW5qZWN0KFRBQkxFX0lOSkVDVElPTl9LRVkpO1xuICBjb25zdCBucyA9IHVzZU5hbWVzcGFjZShcInRhYmxlXCIpO1xuICBjb25zdCB7XG4gICAgaGFuZGxlRG91YmxlQ2xpY2ssXG4gICAgaGFuZGxlQ2xpY2ssXG4gICAgaGFuZGxlQ29udGV4dE1lbnUsXG4gICAgaGFuZGxlTW91c2VFbnRlcixcbiAgICBoYW5kbGVNb3VzZUxlYXZlLFxuICAgIGhhbmRsZUNlbGxNb3VzZUVudGVyLFxuICAgIGhhbmRsZUNlbGxNb3VzZUxlYXZlLFxuICAgIHRvb2x0aXBDb250ZW50LFxuICAgIHRvb2x0aXBUcmlnZ2VyXG4gIH0gPSB1c2VFdmVudHMocHJvcHMpO1xuICBjb25zdCB7XG4gICAgZ2V0Um93U3R5bGUsXG4gICAgZ2V0Um93Q2xhc3MsXG4gICAgZ2V0Q2VsbFN0eWxlLFxuICAgIGdldENlbGxDbGFzcyxcbiAgICBnZXRTcGFuLFxuICAgIGdldENvbHNwYW5SZWFsV2lkdGhcbiAgfSA9IHVzZVN0eWxlcyhwcm9wcyk7XG4gIGNvbnN0IGZpcnN0RGVmYXVsdENvbHVtbkluZGV4ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBwcm9wcy5zdG9yZS5zdGF0ZXMuY29sdW1ucy52YWx1ZS5maW5kSW5kZXgoKHsgdHlwZSB9KSA9PiB0eXBlID09PSBcImRlZmF1bHRcIik7XG4gIH0pO1xuICBjb25zdCBnZXRLZXlPZlJvdyA9IChyb3csIGluZGV4KSA9PiB7XG4gICAgY29uc3Qgcm93S2V5ID0gcGFyZW50LnByb3BzLnJvd0tleTtcbiAgICBpZiAocm93S2V5KSB7XG4gICAgICByZXR1cm4gZ2V0Um93SWRlbnRpdHkocm93LCByb3dLZXkpO1xuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG4gIH07XG4gIGNvbnN0IHJvd1JlbmRlciA9IChyb3csICRpbmRleCwgdHJlZVJvd0RhdGEsIGV4cGFuZGVkID0gZmFsc2UpID0+IHtcbiAgICBjb25zdCB7IHRvb2x0aXBFZmZlY3QsIHRvb2x0aXBPcHRpb25zLCBzdG9yZSB9ID0gcHJvcHM7XG4gICAgY29uc3QgeyBpbmRlbnQsIGNvbHVtbnMgfSA9IHN0b3JlLnN0YXRlcztcbiAgICBjb25zdCByb3dDbGFzc2VzID0gZ2V0Um93Q2xhc3Mocm93LCAkaW5kZXgpO1xuICAgIGxldCBkaXNwbGF5ID0gdHJ1ZTtcbiAgICBpZiAodHJlZVJvd0RhdGEpIHtcbiAgICAgIHJvd0NsYXNzZXMucHVzaChucy5lbShcInJvd1wiLCBgbGV2ZWwtJHt0cmVlUm93RGF0YS5sZXZlbH1gKSk7XG4gICAgICBkaXNwbGF5ID0gdHJlZVJvd0RhdGEuZGlzcGxheTtcbiAgICB9XG4gICAgY29uc3QgZGlzcGxheVN0eWxlID0gZGlzcGxheSA/IG51bGwgOiB7XG4gICAgICBkaXNwbGF5OiBcIm5vbmVcIlxuICAgIH07XG4gICAgcmV0dXJuIGgoXCJ0clwiLCB7XG4gICAgICBzdHlsZTogW2Rpc3BsYXlTdHlsZSwgZ2V0Um93U3R5bGUocm93LCAkaW5kZXgpXSxcbiAgICAgIGNsYXNzOiByb3dDbGFzc2VzLFxuICAgICAga2V5OiBnZXRLZXlPZlJvdyhyb3csICRpbmRleCksXG4gICAgICBvbkRibGNsaWNrOiAoJGV2ZW50KSA9PiBoYW5kbGVEb3VibGVDbGljaygkZXZlbnQsIHJvdyksXG4gICAgICBvbkNsaWNrOiAoJGV2ZW50KSA9PiBoYW5kbGVDbGljaygkZXZlbnQsIHJvdyksXG4gICAgICBvbkNvbnRleHRtZW51OiAoJGV2ZW50KSA9PiBoYW5kbGVDb250ZXh0TWVudSgkZXZlbnQsIHJvdyksXG4gICAgICBvbk1vdXNlZW50ZXI6ICgpID0+IGhhbmRsZU1vdXNlRW50ZXIoJGluZGV4KSxcbiAgICAgIG9uTW91c2VsZWF2ZTogaGFuZGxlTW91c2VMZWF2ZVxuICAgIH0sIGNvbHVtbnMudmFsdWUubWFwKChjb2x1bW4sIGNlbGxJbmRleCkgPT4ge1xuICAgICAgY29uc3QgeyByb3dzcGFuLCBjb2xzcGFuIH0gPSBnZXRTcGFuKHJvdywgY29sdW1uLCAkaW5kZXgsIGNlbGxJbmRleCk7XG4gICAgICBpZiAoIXJvd3NwYW4gfHwgIWNvbHNwYW4pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBjb25zdCBjb2x1bW5EYXRhID0geyAuLi5jb2x1bW4gfTtcbiAgICAgIGNvbHVtbkRhdGEucmVhbFdpZHRoID0gZ2V0Q29sc3BhblJlYWxXaWR0aChjb2x1bW5zLnZhbHVlLCBjb2xzcGFuLCBjZWxsSW5kZXgpO1xuICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgc3RvcmU6IHByb3BzLnN0b3JlLFxuICAgICAgICBfc2VsZjogcHJvcHMuY29udGV4dCB8fCBwYXJlbnQsXG4gICAgICAgIGNvbHVtbjogY29sdW1uRGF0YSxcbiAgICAgICAgcm93LFxuICAgICAgICAkaW5kZXgsXG4gICAgICAgIGNlbGxJbmRleCxcbiAgICAgICAgZXhwYW5kZWRcbiAgICAgIH07XG4gICAgICBpZiAoY2VsbEluZGV4ID09PSBmaXJzdERlZmF1bHRDb2x1bW5JbmRleC52YWx1ZSAmJiB0cmVlUm93RGF0YSkge1xuICAgICAgICBkYXRhLnRyZWVOb2RlID0ge1xuICAgICAgICAgIGluZGVudDogdHJlZVJvd0RhdGEubGV2ZWwgKiBpbmRlbnQudmFsdWUsXG4gICAgICAgICAgbGV2ZWw6IHRyZWVSb3dEYXRhLmxldmVsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2YgdHJlZVJvd0RhdGEuZXhwYW5kZWQgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgZGF0YS50cmVlTm9kZS5leHBhbmRlZCA9IHRyZWVSb3dEYXRhLmV4cGFuZGVkO1xuICAgICAgICAgIGlmIChcImxvYWRpbmdcIiBpbiB0cmVlUm93RGF0YSkge1xuICAgICAgICAgICAgZGF0YS50cmVlTm9kZS5sb2FkaW5nID0gdHJlZVJvd0RhdGEubG9hZGluZztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKFwibm9MYXp5Q2hpbGRyZW5cIiBpbiB0cmVlUm93RGF0YSkge1xuICAgICAgICAgICAgZGF0YS50cmVlTm9kZS5ub0xhenlDaGlsZHJlbiA9IHRyZWVSb3dEYXRhLm5vTGF6eUNoaWxkcmVuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgYmFzZUtleSA9IGAkeyRpbmRleH0sJHtjZWxsSW5kZXh9YDtcbiAgICAgIGNvbnN0IHBhdGNoS2V5ID0gY29sdW1uRGF0YS5jb2x1bW5LZXkgfHwgY29sdW1uRGF0YS5yYXdDb2x1bW5LZXkgfHwgXCJcIjtcbiAgICAgIGNvbnN0IHRkQ2hpbGRyZW4gPSBjZWxsQ2hpbGRyZW4oY2VsbEluZGV4LCBjb2x1bW4sIGRhdGEpO1xuICAgICAgY29uc3QgbWVyZ2VkVG9vbHRpcE9wdGlvbnMgPSBjb2x1bW4uc2hvd092ZXJmbG93VG9vbHRpcCAmJiBtZXJnZSh7XG4gICAgICAgIGVmZmVjdDogdG9vbHRpcEVmZmVjdFxuICAgICAgfSwgdG9vbHRpcE9wdGlvbnMsIGNvbHVtbi5zaG93T3ZlcmZsb3dUb29sdGlwKTtcbiAgICAgIHJldHVybiBoKFwidGRcIiwge1xuICAgICAgICBzdHlsZTogZ2V0Q2VsbFN0eWxlKCRpbmRleCwgY2VsbEluZGV4LCByb3csIGNvbHVtbiksXG4gICAgICAgIGNsYXNzOiBnZXRDZWxsQ2xhc3MoJGluZGV4LCBjZWxsSW5kZXgsIHJvdywgY29sdW1uLCBjb2xzcGFuIC0gMSksXG4gICAgICAgIGtleTogYCR7cGF0Y2hLZXl9JHtiYXNlS2V5fWAsXG4gICAgICAgIHJvd3NwYW4sXG4gICAgICAgIGNvbHNwYW4sXG4gICAgICAgIG9uTW91c2VlbnRlcjogKCRldmVudCkgPT4gaGFuZGxlQ2VsbE1vdXNlRW50ZXIoJGV2ZW50LCByb3csIG1lcmdlZFRvb2x0aXBPcHRpb25zKSxcbiAgICAgICAgb25Nb3VzZWxlYXZlOiBoYW5kbGVDZWxsTW91c2VMZWF2ZVxuICAgICAgfSwgW3RkQ2hpbGRyZW5dKTtcbiAgICB9KSk7XG4gIH07XG4gIGNvbnN0IGNlbGxDaGlsZHJlbiA9IChjZWxsSW5kZXgsIGNvbHVtbiwgZGF0YSkgPT4ge1xuICAgIHJldHVybiBjb2x1bW4ucmVuZGVyQ2VsbChkYXRhKTtcbiAgfTtcbiAgY29uc3Qgd3JhcHBlZFJvd1JlbmRlciA9IChyb3csICRpbmRleCkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gcHJvcHMuc3RvcmU7XG4gICAgY29uc3QgeyBpc1Jvd0V4cGFuZGVkLCBhc3NlcnRSb3dLZXkgfSA9IHN0b3JlO1xuICAgIGNvbnN0IHsgdHJlZURhdGEsIGxhenlUcmVlTm9kZU1hcCwgY2hpbGRyZW5Db2x1bW5OYW1lLCByb3dLZXkgfSA9IHN0b3JlLnN0YXRlcztcbiAgICBjb25zdCBjb2x1bW5zID0gc3RvcmUuc3RhdGVzLmNvbHVtbnMudmFsdWU7XG4gICAgY29uc3QgaGFzRXhwYW5kQ29sdW1uID0gY29sdW1ucy5zb21lKCh7IHR5cGUgfSkgPT4gdHlwZSA9PT0gXCJleHBhbmRcIik7XG4gICAgaWYgKGhhc0V4cGFuZENvbHVtbikge1xuICAgICAgY29uc3QgZXhwYW5kZWQgPSBpc1Jvd0V4cGFuZGVkKHJvdyk7XG4gICAgICBjb25zdCB0ciA9IHJvd1JlbmRlcihyb3csICRpbmRleCwgdm9pZCAwLCBleHBhbmRlZCk7XG4gICAgICBjb25zdCByZW5kZXJFeHBhbmRlZCA9IHBhcmVudC5yZW5kZXJFeHBhbmRlZDtcbiAgICAgIGlmIChleHBhbmRlZCkge1xuICAgICAgICBpZiAoIXJlbmRlckV4cGFuZGVkKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIltFbGVtZW50IEVycm9yXXJlbmRlckV4cGFuZGVkIGlzIHJlcXVpcmVkLlwiKTtcbiAgICAgICAgICByZXR1cm4gdHI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBbXG4gICAgICAgICAgICB0cixcbiAgICAgICAgICAgIGgoXCJ0clwiLCB7XG4gICAgICAgICAgICAgIGtleTogYGV4cGFuZGVkLXJvd19fJHt0ci5rZXl9YFxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICBoKFwidGRcIiwge1xuICAgICAgICAgICAgICAgIGNvbHNwYW46IGNvbHVtbnMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGNsYXNzOiBgJHtucy5lKFwiY2VsbFwiKX0gJHtucy5lKFwiZXhwYW5kZWQtY2VsbFwiKX1gXG4gICAgICAgICAgICAgIH0sIFtyZW5kZXJFeHBhbmRlZCh7IHJvdywgJGluZGV4LCBzdG9yZSwgZXhwYW5kZWQgfSldKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgIF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW1t0cl1dO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmtleXModHJlZURhdGEudmFsdWUpLmxlbmd0aCkge1xuICAgICAgYXNzZXJ0Um93S2V5KCk7XG4gICAgICBjb25zdCBrZXkgPSBnZXRSb3dJZGVudGl0eShyb3csIHJvd0tleS52YWx1ZSk7XG4gICAgICBsZXQgY3VyID0gdHJlZURhdGEudmFsdWVba2V5XTtcbiAgICAgIGxldCB0cmVlUm93RGF0YSA9IG51bGw7XG4gICAgICBpZiAoY3VyKSB7XG4gICAgICAgIHRyZWVSb3dEYXRhID0ge1xuICAgICAgICAgIGV4cGFuZGVkOiBjdXIuZXhwYW5kZWQsXG4gICAgICAgICAgbGV2ZWw6IGN1ci5sZXZlbCxcbiAgICAgICAgICBkaXNwbGF5OiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2YgY3VyLmxhenkgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjdXIubG9hZGVkID09PSBcImJvb2xlYW5cIiAmJiBjdXIubG9hZGVkKSB7XG4gICAgICAgICAgICB0cmVlUm93RGF0YS5ub0xhenlDaGlsZHJlbiA9ICEoY3VyLmNoaWxkcmVuICYmIGN1ci5jaGlsZHJlbi5sZW5ndGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0cmVlUm93RGF0YS5sb2FkaW5nID0gY3VyLmxvYWRpbmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHRtcCA9IFtyb3dSZW5kZXIocm93LCAkaW5kZXgsIHRyZWVSb3dEYXRhKV07XG4gICAgICBpZiAoY3VyKSB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgY29uc3QgdHJhdmVyc2UgPSAoY2hpbGRyZW4sIHBhcmVudDIpID0+IHtcbiAgICAgICAgICBpZiAoIShjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGggJiYgcGFyZW50MikpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgY2hpbGRyZW4uZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5uZXJUcmVlUm93RGF0YSA9IHtcbiAgICAgICAgICAgICAgZGlzcGxheTogcGFyZW50Mi5kaXNwbGF5ICYmIHBhcmVudDIuZXhwYW5kZWQsXG4gICAgICAgICAgICAgIGxldmVsOiBwYXJlbnQyLmxldmVsICsgMSxcbiAgICAgICAgICAgICAgZXhwYW5kZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICBub0xhenlDaGlsZHJlbjogZmFsc2UsXG4gICAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgY2hpbGRLZXkgPSBnZXRSb3dJZGVudGl0eShub2RlLCByb3dLZXkudmFsdWUpO1xuICAgICAgICAgICAgaWYgKGNoaWxkS2V5ID09PSB2b2lkIDAgfHwgY2hpbGRLZXkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRm9yIG5lc3RlZCBkYXRhIGl0ZW0sIHJvdy1rZXkgaXMgcmVxdWlyZWQuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VyID0geyAuLi50cmVlRGF0YS52YWx1ZVtjaGlsZEtleV0gfTtcbiAgICAgICAgICAgIGlmIChjdXIpIHtcbiAgICAgICAgICAgICAgaW5uZXJUcmVlUm93RGF0YS5leHBhbmRlZCA9IGN1ci5leHBhbmRlZDtcbiAgICAgICAgICAgICAgY3VyLmxldmVsID0gY3VyLmxldmVsIHx8IGlubmVyVHJlZVJvd0RhdGEubGV2ZWw7XG4gICAgICAgICAgICAgIGN1ci5kaXNwbGF5ID0gISEoY3VyLmV4cGFuZGVkICYmIGlubmVyVHJlZVJvd0RhdGEuZGlzcGxheSk7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VyLmxhenkgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXIubG9hZGVkID09PSBcImJvb2xlYW5cIiAmJiBjdXIubG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgICBpbm5lclRyZWVSb3dEYXRhLm5vTGF6eUNoaWxkcmVuID0gIShjdXIuY2hpbGRyZW4gJiYgY3VyLmNoaWxkcmVuLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlubmVyVHJlZVJvd0RhdGEubG9hZGluZyA9IGN1ci5sb2FkaW5nO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB0bXAucHVzaChyb3dSZW5kZXIobm9kZSwgJGluZGV4ICsgaSwgaW5uZXJUcmVlUm93RGF0YSkpO1xuICAgICAgICAgICAgaWYgKGN1cikge1xuICAgICAgICAgICAgICBjb25zdCBub2RlczIgPSBsYXp5VHJlZU5vZGVNYXAudmFsdWVbY2hpbGRLZXldIHx8IG5vZGVbY2hpbGRyZW5Db2x1bW5OYW1lLnZhbHVlXTtcbiAgICAgICAgICAgICAgdHJhdmVyc2Uobm9kZXMyLCBjdXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBjdXIuZGlzcGxheSA9IHRydWU7XG4gICAgICAgIGNvbnN0IG5vZGVzID0gbGF6eVRyZWVOb2RlTWFwLnZhbHVlW2tleV0gfHwgcm93W2NoaWxkcmVuQ29sdW1uTmFtZS52YWx1ZV07XG4gICAgICAgIHRyYXZlcnNlKG5vZGVzLCBjdXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRtcDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJvd1JlbmRlcihyb3csICRpbmRleCwgdm9pZCAwKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgd3JhcHBlZFJvd1JlbmRlcixcbiAgICB0b29sdGlwQ29udGVudCxcbiAgICB0b29sdGlwVHJpZ2dlclxuICB9O1xufVxuXG5leHBvcnQgeyB1c2VSZW5kZXIgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVuZGVyLWhlbHBlci5tanMubWFwXG4iLCJpbXBvcnQgeyBpbmplY3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi9ob29rcy9pbmRleC5tanMnO1xuaW1wb3J0IHsgZ2V0Rml4ZWRDb2x1bW5PZmZzZXQsIGVuc3VyZVBvc2l0aW9uLCBnZXRGaXhlZENvbHVtbnNDbGFzcyB9IGZyb20gJy4uL3V0aWwubWpzJztcbmltcG9ydCB7IFRBQkxFX0lOSkVDVElPTl9LRVkgfSBmcm9tICcuLi90b2tlbnMubWpzJztcbmltcG9ydCB7IHVzZU5hbWVzcGFjZSB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZS1uYW1lc3BhY2UvaW5kZXgubWpzJztcblxuZnVuY3Rpb24gdXNlU3R5bGVzKHByb3BzKSB7XG4gIGNvbnN0IHBhcmVudCA9IGluamVjdChUQUJMRV9JTkpFQ1RJT05fS0VZKTtcbiAgY29uc3QgbnMgPSB1c2VOYW1lc3BhY2UoXCJ0YWJsZVwiKTtcbiAgY29uc3QgZ2V0Um93U3R5bGUgPSAocm93LCByb3dJbmRleCkgPT4ge1xuICAgIGNvbnN0IHJvd1N0eWxlID0gcGFyZW50ID09IG51bGwgPyB2b2lkIDAgOiBwYXJlbnQucHJvcHMucm93U3R5bGU7XG4gICAgaWYgKHR5cGVvZiByb3dTdHlsZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gcm93U3R5bGUuY2FsbChudWxsLCB7XG4gICAgICAgIHJvdyxcbiAgICAgICAgcm93SW5kZXhcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcm93U3R5bGUgfHwgbnVsbDtcbiAgfTtcbiAgY29uc3QgZ2V0Um93Q2xhc3MgPSAocm93LCByb3dJbmRleCkgPT4ge1xuICAgIGNvbnN0IGNsYXNzZXMgPSBbbnMuZShcInJvd1wiKV07XG4gICAgaWYgKChwYXJlbnQgPT0gbnVsbCA/IHZvaWQgMCA6IHBhcmVudC5wcm9wcy5oaWdobGlnaHRDdXJyZW50Um93KSAmJiByb3cgPT09IHByb3BzLnN0b3JlLnN0YXRlcy5jdXJyZW50Um93LnZhbHVlKSB7XG4gICAgICBjbGFzc2VzLnB1c2goXCJjdXJyZW50LXJvd1wiKTtcbiAgICB9XG4gICAgaWYgKHByb3BzLnN0cmlwZSAmJiByb3dJbmRleCAlIDIgPT09IDEpIHtcbiAgICAgIGNsYXNzZXMucHVzaChucy5lbShcInJvd1wiLCBcInN0cmlwZWRcIikpO1xuICAgIH1cbiAgICBjb25zdCByb3dDbGFzc05hbWUgPSBwYXJlbnQgPT0gbnVsbCA/IHZvaWQgMCA6IHBhcmVudC5wcm9wcy5yb3dDbGFzc05hbWU7XG4gICAgaWYgKHR5cGVvZiByb3dDbGFzc05hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNsYXNzZXMucHVzaChyb3dDbGFzc05hbWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHJvd0NsYXNzTmFtZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjbGFzc2VzLnB1c2gocm93Q2xhc3NOYW1lLmNhbGwobnVsbCwge1xuICAgICAgICByb3csXG4gICAgICAgIHJvd0luZGV4XG4gICAgICB9KSk7XG4gICAgfVxuICAgIHJldHVybiBjbGFzc2VzO1xuICB9O1xuICBjb25zdCBnZXRDZWxsU3R5bGUgPSAocm93SW5kZXgsIGNvbHVtbkluZGV4LCByb3csIGNvbHVtbikgPT4ge1xuICAgIGNvbnN0IGNlbGxTdHlsZSA9IHBhcmVudCA9PSBudWxsID8gdm9pZCAwIDogcGFyZW50LnByb3BzLmNlbGxTdHlsZTtcbiAgICBsZXQgY2VsbFN0eWxlcyA9IGNlbGxTdHlsZSAhPSBudWxsID8gY2VsbFN0eWxlIDoge307XG4gICAgaWYgKHR5cGVvZiBjZWxsU3R5bGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY2VsbFN0eWxlcyA9IGNlbGxTdHlsZS5jYWxsKG51bGwsIHtcbiAgICAgICAgcm93SW5kZXgsXG4gICAgICAgIGNvbHVtbkluZGV4LFxuICAgICAgICByb3csXG4gICAgICAgIGNvbHVtblxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGZpeGVkU3R5bGUgPSBnZXRGaXhlZENvbHVtbk9mZnNldChjb2x1bW5JbmRleCwgcHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHByb3BzLmZpeGVkLCBwcm9wcy5zdG9yZSk7XG4gICAgZW5zdXJlUG9zaXRpb24oZml4ZWRTdHlsZSwgXCJsZWZ0XCIpO1xuICAgIGVuc3VyZVBvc2l0aW9uKGZpeGVkU3R5bGUsIFwicmlnaHRcIik7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNlbGxTdHlsZXMsIGZpeGVkU3R5bGUpO1xuICB9O1xuICBjb25zdCBnZXRDZWxsQ2xhc3MgPSAocm93SW5kZXgsIGNvbHVtbkluZGV4LCByb3csIGNvbHVtbiwgb2Zmc2V0KSA9PiB7XG4gICAgY29uc3QgZml4ZWRDbGFzc2VzID0gZ2V0Rml4ZWRDb2x1bW5zQ2xhc3MobnMuYigpLCBjb2x1bW5JbmRleCwgcHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHByb3BzLmZpeGVkLCBwcm9wcy5zdG9yZSwgdm9pZCAwLCBvZmZzZXQpO1xuICAgIGNvbnN0IGNsYXNzZXMgPSBbY29sdW1uLmlkLCBjb2x1bW4uYWxpZ24sIGNvbHVtbi5jbGFzc05hbWUsIC4uLmZpeGVkQ2xhc3Nlc107XG4gICAgY29uc3QgY2VsbENsYXNzTmFtZSA9IHBhcmVudCA9PSBudWxsID8gdm9pZCAwIDogcGFyZW50LnByb3BzLmNlbGxDbGFzc05hbWU7XG4gICAgaWYgKHR5cGVvZiBjZWxsQ2xhc3NOYW1lID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjbGFzc2VzLnB1c2goY2VsbENsYXNzTmFtZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2VsbENsYXNzTmFtZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjbGFzc2VzLnB1c2goY2VsbENsYXNzTmFtZS5jYWxsKG51bGwsIHtcbiAgICAgICAgcm93SW5kZXgsXG4gICAgICAgIGNvbHVtbkluZGV4LFxuICAgICAgICByb3csXG4gICAgICAgIGNvbHVtblxuICAgICAgfSkpO1xuICAgIH1cbiAgICBjbGFzc2VzLnB1c2gobnMuZShcImNlbGxcIikpO1xuICAgIHJldHVybiBjbGFzc2VzLmZpbHRlcigoY2xhc3NOYW1lKSA9PiBCb29sZWFuKGNsYXNzTmFtZSkpLmpvaW4oXCIgXCIpO1xuICB9O1xuICBjb25zdCBnZXRTcGFuID0gKHJvdywgY29sdW1uLCByb3dJbmRleCwgY29sdW1uSW5kZXgpID0+IHtcbiAgICBsZXQgcm93c3BhbiA9IDE7XG4gICAgbGV0IGNvbHNwYW4gPSAxO1xuICAgIGNvbnN0IGZuID0gcGFyZW50ID09IG51bGwgPyB2b2lkIDAgOiBwYXJlbnQucHJvcHMuc3Bhbk1ldGhvZDtcbiAgICBpZiAodHlwZW9mIGZuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGZuKHtcbiAgICAgICAgcm93LFxuICAgICAgICBjb2x1bW4sXG4gICAgICAgIHJvd0luZGV4LFxuICAgICAgICBjb2x1bW5JbmRleFxuICAgICAgfSk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG4gICAgICAgIHJvd3NwYW4gPSByZXN1bHRbMF07XG4gICAgICAgIGNvbHNwYW4gPSByZXN1bHRbMV07XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcm93c3BhbiA9IHJlc3VsdC5yb3dzcGFuO1xuICAgICAgICBjb2xzcGFuID0gcmVzdWx0LmNvbHNwYW47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IHJvd3NwYW4sIGNvbHNwYW4gfTtcbiAgfTtcbiAgY29uc3QgZ2V0Q29sc3BhblJlYWxXaWR0aCA9IChjb2x1bW5zLCBjb2xzcGFuLCBpbmRleCkgPT4ge1xuICAgIGlmIChjb2xzcGFuIDwgMSkge1xuICAgICAgcmV0dXJuIGNvbHVtbnNbaW5kZXhdLnJlYWxXaWR0aDtcbiAgICB9XG4gICAgY29uc3Qgd2lkdGhBcnIgPSBjb2x1bW5zLm1hcCgoeyByZWFsV2lkdGgsIHdpZHRoIH0pID0+IHJlYWxXaWR0aCB8fCB3aWR0aCkuc2xpY2UoaW5kZXgsIGluZGV4ICsgY29sc3Bhbik7XG4gICAgcmV0dXJuIE51bWJlcih3aWR0aEFyci5yZWR1Y2UoKGFjYywgd2lkdGgpID0+IE51bWJlcihhY2MpICsgTnVtYmVyKHdpZHRoKSwgLTEpKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBnZXRSb3dTdHlsZSxcbiAgICBnZXRSb3dDbGFzcyxcbiAgICBnZXRDZWxsU3R5bGUsXG4gICAgZ2V0Q2VsbENsYXNzLFxuICAgIGdldFNwYW4sXG4gICAgZ2V0Q29sc3BhblJlYWxXaWR0aFxuICB9O1xufVxuXG5leHBvcnQgeyB1c2VTdHlsZXMgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVzLWhlbHBlci5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGdldEN1cnJlbnRJbnN0YW5jZSwgaW5qZWN0LCB3YXRjaCwgb25Vbm1vdW50ZWQsIGggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgaXNDbGllbnQgfSBmcm9tICdAdnVldXNlL2NvcmUnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi91dGlscy9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi9ob29rcy9pbmRleC5tanMnO1xuaW1wb3J0IHVzZUxheW91dE9ic2VydmVyIGZyb20gJy4uL2xheW91dC1vYnNlcnZlci5tanMnO1xuaW1wb3J0IHsgcmVtb3ZlUG9wcGVyIH0gZnJvbSAnLi4vdXRpbC5tanMnO1xuaW1wb3J0IHsgVEFCTEVfSU5KRUNUSU9OX0tFWSB9IGZyb20gJy4uL3Rva2Vucy5tanMnO1xuaW1wb3J0IHVzZVJlbmRlciBmcm9tICcuL3JlbmRlci1oZWxwZXIubWpzJztcbmltcG9ydCBkZWZhdWx0UHJvcHMgZnJvbSAnLi9kZWZhdWx0cy5tanMnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgcmVtb3ZlQ2xhc3MsIGFkZENsYXNzIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvZG9tL3N0eWxlLm1qcyc7XG5cbnZhciBUYWJsZUJvZHkgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkVsVGFibGVCb2R5XCIsXG4gIHByb3BzOiBkZWZhdWx0UHJvcHMsXG4gIHNldHVwKHByb3BzKSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBjb25zdCBwYXJlbnQgPSBpbmplY3QoVEFCTEVfSU5KRUNUSU9OX0tFWSk7XG4gICAgY29uc3QgbnMgPSB1c2VOYW1lc3BhY2UoXCJ0YWJsZVwiKTtcbiAgICBjb25zdCB7IHdyYXBwZWRSb3dSZW5kZXIsIHRvb2x0aXBDb250ZW50LCB0b29sdGlwVHJpZ2dlciB9ID0gdXNlUmVuZGVyKHByb3BzKTtcbiAgICBjb25zdCB7IG9uQ29sdW1uc0NoYW5nZSwgb25TY3JvbGxhYmxlQ2hhbmdlIH0gPSB1c2VMYXlvdXRPYnNlcnZlcihwYXJlbnQpO1xuICAgIHdhdGNoKHByb3BzLnN0b3JlLnN0YXRlcy5ob3ZlclJvdywgKG5ld1ZhbCwgb2xkVmFsKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLnN0b3JlLnN0YXRlcy5pc0NvbXBsZXgudmFsdWUgfHwgIWlzQ2xpZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICBsZXQgcmFmID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICAgIGlmICghcmFmKSB7XG4gICAgICAgIHJhZiA9IChmbikgPT4gd2luZG93LnNldFRpbWVvdXQoZm4sIDE2KTtcbiAgICAgIH1cbiAgICAgIHJhZigoKSA9PiB7XG4gICAgICAgIGNvbnN0IGVsID0gaW5zdGFuY2UgPT0gbnVsbCA/IHZvaWQgMCA6IGluc3RhbmNlLnZub2RlLmVsO1xuICAgICAgICBjb25zdCByb3dzID0gQXJyYXkuZnJvbSgoZWwgPT0gbnVsbCA/IHZvaWQgMCA6IGVsLmNoaWxkcmVuKSB8fCBbXSkuZmlsdGVyKChlKSA9PiBlID09IG51bGwgPyB2b2lkIDAgOiBlLmNsYXNzTGlzdC5jb250YWlucyhgJHtucy5lKFwicm93XCIpfWApKTtcbiAgICAgICAgY29uc3Qgb2xkUm93ID0gcm93c1tvbGRWYWxdO1xuICAgICAgICBjb25zdCBuZXdSb3cgPSByb3dzW25ld1ZhbF07XG4gICAgICAgIGlmIChvbGRSb3cpIHtcbiAgICAgICAgICByZW1vdmVDbGFzcyhvbGRSb3csIFwiaG92ZXItcm93XCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXdSb3cpIHtcbiAgICAgICAgICBhZGRDbGFzcyhuZXdSb3csIFwiaG92ZXItcm93XCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBvblVubW91bnRlZCgoKSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICAoX2EgPSByZW1vdmVQb3BwZXIpID09IG51bGwgPyB2b2lkIDAgOiBfYSgpO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBucyxcbiAgICAgIG9uQ29sdW1uc0NoYW5nZSxcbiAgICAgIG9uU2Nyb2xsYWJsZUNoYW5nZSxcbiAgICAgIHdyYXBwZWRSb3dSZW5kZXIsXG4gICAgICB0b29sdGlwQ29udGVudCxcbiAgICAgIHRvb2x0aXBUcmlnZ2VyXG4gICAgfTtcbiAgfSxcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgd3JhcHBlZFJvd1JlbmRlciwgc3RvcmUgfSA9IHRoaXM7XG4gICAgY29uc3QgZGF0YSA9IHN0b3JlLnN0YXRlcy5kYXRhLnZhbHVlIHx8IFtdO1xuICAgIHJldHVybiBoKFwidGJvZHlcIiwge30sIFtcbiAgICAgIGRhdGEucmVkdWNlKChhY2MsIHJvdykgPT4ge1xuICAgICAgICByZXR1cm4gYWNjLmNvbmNhdCh3cmFwcGVkUm93UmVuZGVyKHJvdywgYWNjLmxlbmd0aCkpO1xuICAgICAgfSwgW10pXG4gICAgXSk7XG4gIH1cbn0pO1xuXG5leHBvcnQgeyBUYWJsZUJvZHkgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIiwiY29uc3QgZGVmYXVsdFByb3BzID0ge1xuICBzdG9yZToge1xuICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIHR5cGU6IE9iamVjdFxuICB9LFxuICBzdHJpcGU6IEJvb2xlYW4sXG4gIHRvb2x0aXBFZmZlY3Q6IFN0cmluZyxcbiAgdG9vbHRpcE9wdGlvbnM6IHtcbiAgICB0eXBlOiBPYmplY3RcbiAgfSxcbiAgY29udGV4dDoge1xuICAgIGRlZmF1bHQ6ICgpID0+ICh7fSksXG4gICAgdHlwZTogT2JqZWN0XG4gIH0sXG4gIHJvd0NsYXNzTmFtZTogW1N0cmluZywgRnVuY3Rpb25dLFxuICByb3dTdHlsZTogW09iamVjdCwgRnVuY3Rpb25dLFxuICBmaXhlZDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiBcIlwiXG4gIH0sXG4gIGhpZ2hsaWdodDogQm9vbGVhblxufTtcblxuZXhwb3J0IHsgZGVmYXVsdFByb3BzIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRzLm1qcy5tYXBcbiIsImltcG9ydCB7IGggfSBmcm9tICd2dWUnO1xuXG5mdW5jdGlvbiBoQ29sZ3JvdXAocHJvcHMpIHtcbiAgY29uc3QgaXNBdXRvID0gcHJvcHMudGFibGVMYXlvdXQgPT09IFwiYXV0b1wiO1xuICBsZXQgY29sdW1ucyA9IHByb3BzLmNvbHVtbnMgfHwgW107XG4gIGlmIChpc0F1dG8pIHtcbiAgICBpZiAoY29sdW1ucy5ldmVyeSgoY29sdW1uKSA9PiBjb2x1bW4ud2lkdGggPT09IHZvaWQgMCkpIHtcbiAgICAgIGNvbHVtbnMgPSBbXTtcbiAgICB9XG4gIH1cbiAgY29uc3QgZ2V0UHJvcHNEYXRhID0gKGNvbHVtbikgPT4ge1xuICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgIGtleTogYCR7cHJvcHMudGFibGVMYXlvdXR9XyR7Y29sdW1uLmlkfWAsXG4gICAgICBzdHlsZToge30sXG4gICAgICBuYW1lOiB2b2lkIDBcbiAgICB9O1xuICAgIGlmIChpc0F1dG8pIHtcbiAgICAgIHByb3BzRGF0YS5zdHlsZSA9IHtcbiAgICAgICAgd2lkdGg6IGAke2NvbHVtbi53aWR0aH1weGBcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzRGF0YS5uYW1lID0gY29sdW1uLmlkO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcHNEYXRhO1xuICB9O1xuICByZXR1cm4gaChcImNvbGdyb3VwXCIsIHt9LCBjb2x1bW5zLm1hcCgoY29sdW1uKSA9PiBoKFwiY29sXCIsIGdldFByb3BzRGF0YShjb2x1bW4pKSkpO1xufVxuaENvbGdyb3VwLnByb3BzID0gW1wiY29sdW1uc1wiLCBcInRhYmxlTGF5b3V0XCJdO1xuXG5leHBvcnQgeyBoQ29sZ3JvdXAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWgtaGVscGVyLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCB7IGdldEZpeGVkQ29sdW1uc0NsYXNzLCBnZXRGaXhlZENvbHVtbk9mZnNldCwgZW5zdXJlUG9zaXRpb24gfSBmcm9tICcuLi91dGlsLm1qcyc7XG5pbXBvcnQgdXNlTWFwU3RhdGUgZnJvbSAnLi9tYXBTdGF0ZS1oZWxwZXIubWpzJztcbmltcG9ydCB7IHVzZU5hbWVzcGFjZSB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZS1uYW1lc3BhY2UvaW5kZXgubWpzJztcblxuZnVuY3Rpb24gdXNlU3R5bGUocHJvcHMpIHtcbiAgY29uc3QgeyBjb2x1bW5zIH0gPSB1c2VNYXBTdGF0ZSgpO1xuICBjb25zdCBucyA9IHVzZU5hbWVzcGFjZShcInRhYmxlXCIpO1xuICBjb25zdCBnZXRDZWxsQ2xhc3NlcyA9IChjb2x1bW5zMiwgY2VsbEluZGV4KSA9PiB7XG4gICAgY29uc3QgY29sdW1uID0gY29sdW1uczJbY2VsbEluZGV4XTtcbiAgICBjb25zdCBjbGFzc2VzID0gW1xuICAgICAgbnMuZShcImNlbGxcIiksXG4gICAgICBjb2x1bW4uaWQsXG4gICAgICBjb2x1bW4uYWxpZ24sXG4gICAgICBjb2x1bW4ubGFiZWxDbGFzc05hbWUsXG4gICAgICAuLi5nZXRGaXhlZENvbHVtbnNDbGFzcyhucy5iKCksIGNlbGxJbmRleCwgY29sdW1uLmZpeGVkLCBwcm9wcy5zdG9yZSlcbiAgICBdO1xuICAgIGlmIChjb2x1bW4uY2xhc3NOYW1lKSB7XG4gICAgICBjbGFzc2VzLnB1c2goY29sdW1uLmNsYXNzTmFtZSk7XG4gICAgfVxuICAgIGlmICghY29sdW1uLmNoaWxkcmVuKSB7XG4gICAgICBjbGFzc2VzLnB1c2gobnMuaXMoXCJsZWFmXCIpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzZXM7XG4gIH07XG4gIGNvbnN0IGdldENlbGxTdHlsZXMgPSAoY29sdW1uLCBjZWxsSW5kZXgpID0+IHtcbiAgICBjb25zdCBmaXhlZFN0eWxlID0gZ2V0Rml4ZWRDb2x1bW5PZmZzZXQoY2VsbEluZGV4LCBjb2x1bW4uZml4ZWQsIHByb3BzLnN0b3JlKTtcbiAgICBlbnN1cmVQb3NpdGlvbihmaXhlZFN0eWxlLCBcImxlZnRcIik7XG4gICAgZW5zdXJlUG9zaXRpb24oZml4ZWRTdHlsZSwgXCJyaWdodFwiKTtcbiAgICByZXR1cm4gZml4ZWRTdHlsZTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBnZXRDZWxsQ2xhc3NlcyxcbiAgICBnZXRDZWxsU3R5bGVzLFxuICAgIGNvbHVtbnNcbiAgfTtcbn1cblxuZXhwb3J0IHsgdXNlU3R5bGUgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGUtaGVscGVyLm1qcy5tYXBcbiIsImltcG9ydCB7IGluamVjdCwgY29tcHV0ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgVEFCTEVfSU5KRUNUSU9OX0tFWSB9IGZyb20gJy4uL3Rva2Vucy5tanMnO1xuXG5mdW5jdGlvbiB1c2VNYXBTdGF0ZSgpIHtcbiAgY29uc3QgdGFibGUgPSBpbmplY3QoVEFCTEVfSU5KRUNUSU9OX0tFWSk7XG4gIGNvbnN0IHN0b3JlID0gdGFibGUgPT0gbnVsbCA/IHZvaWQgMCA6IHRhYmxlLnN0b3JlO1xuICBjb25zdCBsZWZ0Rml4ZWRMZWFmQ291bnQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHN0b3JlLnN0YXRlcy5maXhlZExlYWZDb2x1bW5zTGVuZ3RoLnZhbHVlO1xuICB9KTtcbiAgY29uc3QgcmlnaHRGaXhlZExlYWZDb3VudCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gc3RvcmUuc3RhdGVzLnJpZ2h0Rml4ZWRDb2x1bW5zLnZhbHVlLmxlbmd0aDtcbiAgfSk7XG4gIGNvbnN0IGNvbHVtbnNDb3VudCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gc3RvcmUuc3RhdGVzLmNvbHVtbnMudmFsdWUubGVuZ3RoO1xuICB9KTtcbiAgY29uc3QgbGVmdEZpeGVkQ291bnQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHN0b3JlLnN0YXRlcy5maXhlZENvbHVtbnMudmFsdWUubGVuZ3RoO1xuICB9KTtcbiAgY29uc3QgcmlnaHRGaXhlZENvdW50ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBzdG9yZS5zdGF0ZXMucmlnaHRGaXhlZENvbHVtbnMudmFsdWUubGVuZ3RoO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0Rml4ZWRMZWFmQ291bnQsXG4gICAgcmlnaHRGaXhlZExlYWZDb3VudCxcbiAgICBjb2x1bW5zQ291bnQsXG4gICAgbGVmdEZpeGVkQ291bnQsXG4gICAgcmlnaHRGaXhlZENvdW50LFxuICAgIGNvbHVtbnM6IHN0b3JlLnN0YXRlcy5jb2x1bW5zXG4gIH07XG59XG5cbmV4cG9ydCB7IHVzZU1hcFN0YXRlIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcFN0YXRlLWhlbHBlci5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGggfSBmcm9tICd2dWUnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi9ob29rcy9pbmRleC5tanMnO1xuaW1wb3J0IHsgaENvbGdyb3VwIH0gZnJvbSAnLi4vaC1oZWxwZXIubWpzJztcbmltcG9ydCB1c2VTdHlsZSBmcm9tICcuL3N0eWxlLWhlbHBlci5tanMnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleC5tanMnO1xuXG52YXIgVGFibGVGb290ZXIgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkVsVGFibGVGb290ZXJcIixcbiAgcHJvcHM6IHtcbiAgICBmaXhlZDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogXCJcIlxuICAgIH0sXG4gICAgc3RvcmU6IHtcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfSxcbiAgICBzdW1tYXJ5TWV0aG9kOiBGdW5jdGlvbixcbiAgICBzdW1UZXh0OiBTdHJpbmcsXG4gICAgYm9yZGVyOiBCb29sZWFuLFxuICAgIGRlZmF1bHRTb3J0OiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiAoKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcHJvcDogXCJcIixcbiAgICAgICAgICBvcmRlcjogXCJcIlxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgc2V0dXAocHJvcHMpIHtcbiAgICBjb25zdCB7IGdldENlbGxDbGFzc2VzLCBnZXRDZWxsU3R5bGVzLCBjb2x1bW5zIH0gPSB1c2VTdHlsZShwcm9wcyk7XG4gICAgY29uc3QgbnMgPSB1c2VOYW1lc3BhY2UoXCJ0YWJsZVwiKTtcbiAgICByZXR1cm4ge1xuICAgICAgbnMsXG4gICAgICBnZXRDZWxsQ2xhc3NlcyxcbiAgICAgIGdldENlbGxTdHlsZXMsXG4gICAgICBjb2x1bW5zXG4gICAgfTtcbiAgfSxcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbHVtbnMsXG4gICAgICBnZXRDZWxsU3R5bGVzLFxuICAgICAgZ2V0Q2VsbENsYXNzZXMsXG4gICAgICBzdW1tYXJ5TWV0aG9kLFxuICAgICAgc3VtVGV4dCxcbiAgICAgIG5zXG4gICAgfSA9IHRoaXM7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuc3RvcmUuc3RhdGVzLmRhdGEudmFsdWU7XG4gICAgbGV0IHN1bXMgPSBbXTtcbiAgICBpZiAoc3VtbWFyeU1ldGhvZCkge1xuICAgICAgc3VtcyA9IHN1bW1hcnlNZXRob2Qoe1xuICAgICAgICBjb2x1bW5zLFxuICAgICAgICBkYXRhXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29sdW1ucy5mb3JFYWNoKChjb2x1bW4sIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgIHN1bXNbaW5kZXhdID0gc3VtVGV4dDtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWVzID0gZGF0YS5tYXAoKGl0ZW0pID0+IE51bWJlcihpdGVtW2NvbHVtbi5wcm9wZXJ0eV0pKTtcbiAgICAgICAgY29uc3QgcHJlY2lzaW9ucyA9IFtdO1xuICAgICAgICBsZXQgbm90TnVtYmVyID0gdHJ1ZTtcbiAgICAgICAgdmFsdWVzLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgICAgaWYgKCFOdW1iZXIuaXNOYU4oK3ZhbHVlKSkge1xuICAgICAgICAgICAgbm90TnVtYmVyID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBkZWNpbWFsID0gYCR7dmFsdWV9YC5zcGxpdChcIi5cIilbMV07XG4gICAgICAgICAgICBwcmVjaXNpb25zLnB1c2goZGVjaW1hbCA/IGRlY2ltYWwubGVuZ3RoIDogMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcHJlY2lzaW9uID0gTWF0aC5tYXguYXBwbHkobnVsbCwgcHJlY2lzaW9ucyk7XG4gICAgICAgIGlmICghbm90TnVtYmVyKSB7XG4gICAgICAgICAgc3Vtc1tpbmRleF0gPSB2YWx1ZXMucmVkdWNlKChwcmV2LCBjdXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IE51bWJlcihjdXJyKTtcbiAgICAgICAgICAgIGlmICghTnVtYmVyLmlzTmFOKCt2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIE51bWJlci5wYXJzZUZsb2F0KChwcmV2ICsgY3VycikudG9GaXhlZChNYXRoLm1pbihwcmVjaXNpb24sIDIwKSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3Vtc1tpbmRleF0gPSBcIlwiO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGgoXCJ0YWJsZVwiLCB7XG4gICAgICBjbGFzczogbnMuZShcImZvb3RlclwiKSxcbiAgICAgIGNlbGxzcGFjaW5nOiBcIjBcIixcbiAgICAgIGNlbGxwYWRkaW5nOiBcIjBcIixcbiAgICAgIGJvcmRlcjogXCIwXCJcbiAgICB9LCBbXG4gICAgICBoQ29sZ3JvdXAoe1xuICAgICAgICBjb2x1bW5zXG4gICAgICB9KSxcbiAgICAgIGgoXCJ0Ym9keVwiLCBbXG4gICAgICAgIGgoXCJ0clwiLCB7fSwgW1xuICAgICAgICAgIC4uLmNvbHVtbnMubWFwKChjb2x1bW4sIGNlbGxJbmRleCkgPT4gaChcInRkXCIsIHtcbiAgICAgICAgICAgIGtleTogY2VsbEluZGV4LFxuICAgICAgICAgICAgY29sc3BhbjogY29sdW1uLmNvbFNwYW4sXG4gICAgICAgICAgICByb3dzcGFuOiBjb2x1bW4ucm93U3BhbixcbiAgICAgICAgICAgIGNsYXNzOiBnZXRDZWxsQ2xhc3Nlcyhjb2x1bW5zLCBjZWxsSW5kZXgpLFxuICAgICAgICAgICAgc3R5bGU6IGdldENlbGxTdHlsZXMoY29sdW1uLCBjZWxsSW5kZXgpXG4gICAgICAgICAgfSwgW1xuICAgICAgICAgICAgaChcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzOiBbXCJjZWxsXCIsIGNvbHVtbi5sYWJlbENsYXNzTmFtZV1cbiAgICAgICAgICAgIH0sIFtzdW1zW2NlbGxJbmRleF1dKVxuICAgICAgICAgIF0pKVxuICAgICAgICBdKVxuICAgICAgXSlcbiAgICBdKTtcbiAgfVxufSk7XG5cbmV4cG9ydCB7IFRhYmxlRm9vdGVyIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiIsImltcG9ydCB7IHJlZiwgd2F0Y2hFZmZlY3QsIHdhdGNoLCB1bnJlZiwgY29tcHV0ZWQsIG9uTW91bnRlZCwgbmV4dFRpY2sgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgdXNlRXZlbnRMaXN0ZW5lciwgdXNlUmVzaXplT2JzZXJ2ZXIgfSBmcm9tICdAdnVldXNlL2NvcmUnO1xuaW1wb3J0ICcuLi8uLi8uLi9mb3JtL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VGb3JtU2l6ZSB9IGZyb20gJy4uLy4uLy4uL2Zvcm0vc3JjL2hvb2tzL3VzZS1mb3JtLWNvbW1vbi1wcm9wcy5tanMnO1xuXG5mdW5jdGlvbiB1c2VTdHlsZShwcm9wcywgbGF5b3V0LCBzdG9yZSwgdGFibGUpIHtcbiAgY29uc3QgaXNIaWRkZW4gPSByZWYoZmFsc2UpO1xuICBjb25zdCByZW5kZXJFeHBhbmRlZCA9IHJlZihudWxsKTtcbiAgY29uc3QgcmVzaXplUHJveHlWaXNpYmxlID0gcmVmKGZhbHNlKTtcbiAgY29uc3Qgc2V0RHJhZ1Zpc2libGUgPSAodmlzaWJsZSkgPT4ge1xuICAgIHJlc2l6ZVByb3h5VmlzaWJsZS52YWx1ZSA9IHZpc2libGU7XG4gIH07XG4gIGNvbnN0IHJlc2l6ZVN0YXRlID0gcmVmKHtcbiAgICB3aWR0aDogbnVsbCxcbiAgICBoZWlnaHQ6IG51bGwsXG4gICAgaGVhZGVySGVpZ2h0OiBudWxsXG4gIH0pO1xuICBjb25zdCBpc0dyb3VwID0gcmVmKGZhbHNlKTtcbiAgY29uc3Qgc2Nyb2xsYmFyVmlld1N0eWxlID0ge1xuICAgIGRpc3BsYXk6IFwiaW5saW5lLWJsb2NrXCIsXG4gICAgdmVydGljYWxBbGlnbjogXCJtaWRkbGVcIlxuICB9O1xuICBjb25zdCB0YWJsZVdpZHRoID0gcmVmKCk7XG4gIGNvbnN0IHRhYmxlU2Nyb2xsSGVpZ2h0ID0gcmVmKDApO1xuICBjb25zdCBib2R5U2Nyb2xsSGVpZ2h0ID0gcmVmKDApO1xuICBjb25zdCBoZWFkZXJTY3JvbGxIZWlnaHQgPSByZWYoMCk7XG4gIGNvbnN0IGZvb3RlclNjcm9sbEhlaWdodCA9IHJlZigwKTtcbiAgd2F0Y2hFZmZlY3QoKCkgPT4ge1xuICAgIGxheW91dC5zZXRIZWlnaHQocHJvcHMuaGVpZ2h0KTtcbiAgfSk7XG4gIHdhdGNoRWZmZWN0KCgpID0+IHtcbiAgICBsYXlvdXQuc2V0TWF4SGVpZ2h0KHByb3BzLm1heEhlaWdodCk7XG4gIH0pO1xuICB3YXRjaCgoKSA9PiBbcHJvcHMuY3VycmVudFJvd0tleSwgc3RvcmUuc3RhdGVzLnJvd0tleV0sIChbY3VycmVudFJvd0tleSwgcm93S2V5XSkgPT4ge1xuICAgIGlmICghdW5yZWYocm93S2V5KSB8fCAhdW5yZWYoY3VycmVudFJvd0tleSkpXG4gICAgICByZXR1cm47XG4gICAgc3RvcmUuc2V0Q3VycmVudFJvd0tleShgJHtjdXJyZW50Um93S2V5fWApO1xuICB9LCB7XG4gICAgaW1tZWRpYXRlOiB0cnVlXG4gIH0pO1xuICB3YXRjaCgoKSA9PiBwcm9wcy5kYXRhLCAoZGF0YSkgPT4ge1xuICAgIHRhYmxlLnN0b3JlLmNvbW1pdChcInNldERhdGFcIiwgZGF0YSk7XG4gIH0sIHtcbiAgICBpbW1lZGlhdGU6IHRydWUsXG4gICAgZGVlcDogdHJ1ZVxuICB9KTtcbiAgd2F0Y2hFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChwcm9wcy5leHBhbmRSb3dLZXlzKSB7XG4gICAgICBzdG9yZS5zZXRFeHBhbmRSb3dLZXlzQWRhcHRlcihwcm9wcy5leHBhbmRSb3dLZXlzKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVNb3VzZUxlYXZlID0gKCkgPT4ge1xuICAgIHRhYmxlLnN0b3JlLmNvbW1pdChcInNldEhvdmVyUm93XCIsIG51bGwpO1xuICAgIGlmICh0YWJsZS5ob3ZlclN0YXRlKVxuICAgICAgdGFibGUuaG92ZXJTdGF0ZSA9IG51bGw7XG4gIH07XG4gIGNvbnN0IGhhbmRsZUhlYWRlckZvb3Rlck1vdXNld2hlZWwgPSAoZXZlbnQsIGRhdGEpID0+IHtcbiAgICBjb25zdCB7IHBpeGVsWCwgcGl4ZWxZIH0gPSBkYXRhO1xuICAgIGlmIChNYXRoLmFicyhwaXhlbFgpID49IE1hdGguYWJzKHBpeGVsWSkpIHtcbiAgICAgIHRhYmxlLnJlZnMuYm9keVdyYXBwZXIuc2Nyb2xsTGVmdCArPSBkYXRhLnBpeGVsWCAvIDU7XG4gICAgfVxuICB9O1xuICBjb25zdCBzaG91bGRVcGRhdGVIZWlnaHQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHByb3BzLmhlaWdodCB8fCBwcm9wcy5tYXhIZWlnaHQgfHwgc3RvcmUuc3RhdGVzLmZpeGVkQ29sdW1ucy52YWx1ZS5sZW5ndGggPiAwIHx8IHN0b3JlLnN0YXRlcy5yaWdodEZpeGVkQ29sdW1ucy52YWx1ZS5sZW5ndGggPiAwO1xuICB9KTtcbiAgY29uc3QgdGFibGVCb2R5U3R5bGVzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogbGF5b3V0LmJvZHlXaWR0aC52YWx1ZSA/IGAke2xheW91dC5ib2R5V2lkdGgudmFsdWV9cHhgIDogXCJcIlxuICAgIH07XG4gIH0pO1xuICBjb25zdCBkb0xheW91dCA9ICgpID0+IHtcbiAgICBpZiAoc2hvdWxkVXBkYXRlSGVpZ2h0LnZhbHVlKSB7XG4gICAgICBsYXlvdXQudXBkYXRlRWxzSGVpZ2h0KCk7XG4gICAgfVxuICAgIGxheW91dC51cGRhdGVDb2x1bW5zV2lkdGgoKTtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3luY1Bvc2l0aW9uKTtcbiAgfTtcbiAgb25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgIHN0b3JlLnVwZGF0ZUNvbHVtbnMoKTtcbiAgICBiaW5kRXZlbnRzKCk7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRvTGF5b3V0KTtcbiAgICBjb25zdCBlbCA9IHRhYmxlLnZub2RlLmVsO1xuICAgIGNvbnN0IHRhYmxlSGVhZGVyID0gdGFibGUucmVmcy5oZWFkZXJXcmFwcGVyO1xuICAgIGlmIChwcm9wcy5mbGV4aWJsZSAmJiBlbCAmJiBlbC5wYXJlbnRFbGVtZW50KSB7XG4gICAgICBlbC5wYXJlbnRFbGVtZW50LnN0eWxlLm1pbldpZHRoID0gXCIwXCI7XG4gICAgfVxuICAgIHJlc2l6ZVN0YXRlLnZhbHVlID0ge1xuICAgICAgd2lkdGg6IHRhYmxlV2lkdGgudmFsdWUgPSBlbC5vZmZzZXRXaWR0aCxcbiAgICAgIGhlaWdodDogZWwub2Zmc2V0SGVpZ2h0LFxuICAgICAgaGVhZGVySGVpZ2h0OiBwcm9wcy5zaG93SGVhZGVyICYmIHRhYmxlSGVhZGVyID8gdGFibGVIZWFkZXIub2Zmc2V0SGVpZ2h0IDogbnVsbFxuICAgIH07XG4gICAgc3RvcmUuc3RhdGVzLmNvbHVtbnMudmFsdWUuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG4gICAgICBpZiAoY29sdW1uLmZpbHRlcmVkVmFsdWUgJiYgY29sdW1uLmZpbHRlcmVkVmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHRhYmxlLnN0b3JlLmNvbW1pdChcImZpbHRlckNoYW5nZVwiLCB7XG4gICAgICAgICAgY29sdW1uLFxuICAgICAgICAgIHZhbHVlczogY29sdW1uLmZpbHRlcmVkVmFsdWUsXG4gICAgICAgICAgc2lsZW50OiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRhYmxlLiRyZWFkeSA9IHRydWU7XG4gIH0pO1xuICBjb25zdCBzZXRTY3JvbGxDbGFzc0J5RWwgPSAoZWwsIGNsYXNzTmFtZSkgPT4ge1xuICAgIGlmICghZWwpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgY2xhc3NMaXN0ID0gQXJyYXkuZnJvbShlbC5jbGFzc0xpc3QpLmZpbHRlcigoaXRlbSkgPT4gIWl0ZW0uc3RhcnRzV2l0aChcImlzLXNjcm9sbGluZy1cIikpO1xuICAgIGNsYXNzTGlzdC5wdXNoKGxheW91dC5zY3JvbGxYLnZhbHVlID8gY2xhc3NOYW1lIDogXCJpcy1zY3JvbGxpbmctbm9uZVwiKTtcbiAgICBlbC5jbGFzc05hbWUgPSBjbGFzc0xpc3Quam9pbihcIiBcIik7XG4gIH07XG4gIGNvbnN0IHNldFNjcm9sbENsYXNzID0gKGNsYXNzTmFtZSkgPT4ge1xuICAgIGNvbnN0IHsgdGFibGVXcmFwcGVyIH0gPSB0YWJsZS5yZWZzO1xuICAgIHNldFNjcm9sbENsYXNzQnlFbCh0YWJsZVdyYXBwZXIsIGNsYXNzTmFtZSk7XG4gIH07XG4gIGNvbnN0IGhhc1Njcm9sbENsYXNzID0gKGNsYXNzTmFtZSkgPT4ge1xuICAgIGNvbnN0IHsgdGFibGVXcmFwcGVyIH0gPSB0YWJsZS5yZWZzO1xuICAgIHJldHVybiAhISh0YWJsZVdyYXBwZXIgJiYgdGFibGVXcmFwcGVyLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKTtcbiAgfTtcbiAgY29uc3Qgc3luY1Bvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0YWJsZS5yZWZzLnNjcm9sbEJhclJlZilcbiAgICAgIHJldHVybjtcbiAgICBpZiAoIWxheW91dC5zY3JvbGxYLnZhbHVlKSB7XG4gICAgICBjb25zdCBzY3JvbGxpbmdOb25lQ2xhc3MgPSBcImlzLXNjcm9sbGluZy1ub25lXCI7XG4gICAgICBpZiAoIWhhc1Njcm9sbENsYXNzKHNjcm9sbGluZ05vbmVDbGFzcykpIHtcbiAgICAgICAgc2V0U2Nyb2xsQ2xhc3Moc2Nyb2xsaW5nTm9uZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2Nyb2xsQ29udGFpbmVyID0gdGFibGUucmVmcy5zY3JvbGxCYXJSZWYud3JhcFJlZjtcbiAgICBpZiAoIXNjcm9sbENvbnRhaW5lcilcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCB7IHNjcm9sbExlZnQsIG9mZnNldFdpZHRoLCBzY3JvbGxXaWR0aCB9ID0gc2Nyb2xsQ29udGFpbmVyO1xuICAgIGNvbnN0IHsgaGVhZGVyV3JhcHBlciwgZm9vdGVyV3JhcHBlciB9ID0gdGFibGUucmVmcztcbiAgICBpZiAoaGVhZGVyV3JhcHBlcilcbiAgICAgIGhlYWRlcldyYXBwZXIuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgaWYgKGZvb3RlcldyYXBwZXIpXG4gICAgICBmb290ZXJXcmFwcGVyLnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0O1xuICAgIGNvbnN0IG1heFNjcm9sbExlZnRQb3NpdGlvbiA9IHNjcm9sbFdpZHRoIC0gb2Zmc2V0V2lkdGggLSAxO1xuICAgIGlmIChzY3JvbGxMZWZ0ID49IG1heFNjcm9sbExlZnRQb3NpdGlvbikge1xuICAgICAgc2V0U2Nyb2xsQ2xhc3MoXCJpcy1zY3JvbGxpbmctcmlnaHRcIik7XG4gICAgfSBlbHNlIGlmIChzY3JvbGxMZWZ0ID09PSAwKSB7XG4gICAgICBzZXRTY3JvbGxDbGFzcyhcImlzLXNjcm9sbGluZy1sZWZ0XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRTY3JvbGxDbGFzcyhcImlzLXNjcm9sbGluZy1taWRkbGVcIik7XG4gICAgfVxuICB9O1xuICBjb25zdCBiaW5kRXZlbnRzID0gKCkgPT4ge1xuICAgIGlmICghdGFibGUucmVmcy5zY3JvbGxCYXJSZWYpXG4gICAgICByZXR1cm47XG4gICAgaWYgKHRhYmxlLnJlZnMuc2Nyb2xsQmFyUmVmLndyYXBSZWYpIHtcbiAgICAgIHVzZUV2ZW50TGlzdGVuZXIodGFibGUucmVmcy5zY3JvbGxCYXJSZWYud3JhcFJlZiwgXCJzY3JvbGxcIiwgc3luY1Bvc2l0aW9uLCB7XG4gICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZml0KSB7XG4gICAgICB1c2VSZXNpemVPYnNlcnZlcih0YWJsZS52bm9kZS5lbCwgcmVzaXplTGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1c2VFdmVudExpc3RlbmVyKHdpbmRvdywgXCJyZXNpemVcIiwgcmVzaXplTGlzdGVuZXIpO1xuICAgIH1cbiAgICB1c2VSZXNpemVPYnNlcnZlcih0YWJsZS5yZWZzLmJvZHlXcmFwcGVyLCAoKSA9PiB7XG4gICAgICB2YXIgX2EsIF9iO1xuICAgICAgcmVzaXplTGlzdGVuZXIoKTtcbiAgICAgIChfYiA9IChfYSA9IHRhYmxlLnJlZnMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5zY3JvbGxCYXJSZWYpID09IG51bGwgPyB2b2lkIDAgOiBfYi51cGRhdGUoKTtcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgcmVzaXplTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgY29uc3QgZWwgPSB0YWJsZS52bm9kZS5lbDtcbiAgICBpZiAoIXRhYmxlLiRyZWFkeSB8fCAhZWwpXG4gICAgICByZXR1cm47XG4gICAgbGV0IHNob3VsZFVwZGF0ZUxheW91dCA9IGZhbHNlO1xuICAgIGNvbnN0IHtcbiAgICAgIHdpZHRoOiBvbGRXaWR0aCxcbiAgICAgIGhlaWdodDogb2xkSGVpZ2h0LFxuICAgICAgaGVhZGVySGVpZ2h0OiBvbGRIZWFkZXJIZWlnaHRcbiAgICB9ID0gcmVzaXplU3RhdGUudmFsdWU7XG4gICAgY29uc3Qgd2lkdGggPSB0YWJsZVdpZHRoLnZhbHVlID0gZWwub2Zmc2V0V2lkdGg7XG4gICAgaWYgKG9sZFdpZHRoICE9PSB3aWR0aCkge1xuICAgICAgc2hvdWxkVXBkYXRlTGF5b3V0ID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgaGVpZ2h0ID0gZWwub2Zmc2V0SGVpZ2h0O1xuICAgIGlmICgocHJvcHMuaGVpZ2h0IHx8IHNob3VsZFVwZGF0ZUhlaWdodC52YWx1ZSkgJiYgb2xkSGVpZ2h0ICE9PSBoZWlnaHQpIHtcbiAgICAgIHNob3VsZFVwZGF0ZUxheW91dCA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHRhYmxlSGVhZGVyID0gcHJvcHMudGFibGVMYXlvdXQgPT09IFwiZml4ZWRcIiA/IHRhYmxlLnJlZnMuaGVhZGVyV3JhcHBlciA6IChfYSA9IHRhYmxlLnJlZnMudGFibGVIZWFkZXJSZWYpID09IG51bGwgPyB2b2lkIDAgOiBfYS4kZWw7XG4gICAgaWYgKHByb3BzLnNob3dIZWFkZXIgJiYgKHRhYmxlSGVhZGVyID09IG51bGwgPyB2b2lkIDAgOiB0YWJsZUhlYWRlci5vZmZzZXRIZWlnaHQpICE9PSBvbGRIZWFkZXJIZWlnaHQpIHtcbiAgICAgIHNob3VsZFVwZGF0ZUxheW91dCA9IHRydWU7XG4gICAgfVxuICAgIHRhYmxlU2Nyb2xsSGVpZ2h0LnZhbHVlID0gKChfYiA9IHRhYmxlLnJlZnMudGFibGVXcmFwcGVyKSA9PSBudWxsID8gdm9pZCAwIDogX2Iuc2Nyb2xsSGVpZ2h0KSB8fCAwO1xuICAgIGhlYWRlclNjcm9sbEhlaWdodC52YWx1ZSA9ICh0YWJsZUhlYWRlciA9PSBudWxsID8gdm9pZCAwIDogdGFibGVIZWFkZXIuc2Nyb2xsSGVpZ2h0KSB8fCAwO1xuICAgIGZvb3RlclNjcm9sbEhlaWdodC52YWx1ZSA9ICgoX2MgPSB0YWJsZS5yZWZzLmZvb3RlcldyYXBwZXIpID09IG51bGwgPyB2b2lkIDAgOiBfYy5vZmZzZXRIZWlnaHQpIHx8IDA7XG4gICAgYm9keVNjcm9sbEhlaWdodC52YWx1ZSA9IHRhYmxlU2Nyb2xsSGVpZ2h0LnZhbHVlIC0gaGVhZGVyU2Nyb2xsSGVpZ2h0LnZhbHVlIC0gZm9vdGVyU2Nyb2xsSGVpZ2h0LnZhbHVlO1xuICAgIGlmIChzaG91bGRVcGRhdGVMYXlvdXQpIHtcbiAgICAgIHJlc2l6ZVN0YXRlLnZhbHVlID0ge1xuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0LFxuICAgICAgICBoZWFkZXJIZWlnaHQ6IHByb3BzLnNob3dIZWFkZXIgJiYgKHRhYmxlSGVhZGVyID09IG51bGwgPyB2b2lkIDAgOiB0YWJsZUhlYWRlci5vZmZzZXRIZWlnaHQpIHx8IDBcbiAgICAgIH07XG4gICAgICBkb0xheW91dCgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdGFibGVTaXplID0gdXNlRm9ybVNpemUoKTtcbiAgY29uc3QgYm9keVdpZHRoID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IHsgYm9keVdpZHRoOiBib2R5V2lkdGhfLCBzY3JvbGxZLCBndXR0ZXJXaWR0aCB9ID0gbGF5b3V0O1xuICAgIHJldHVybiBib2R5V2lkdGhfLnZhbHVlID8gYCR7Ym9keVdpZHRoXy52YWx1ZSAtIChzY3JvbGxZLnZhbHVlID8gZ3V0dGVyV2lkdGggOiAwKX1weGAgOiBcIlwiO1xuICB9KTtcbiAgY29uc3QgdGFibGVMYXlvdXQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKHByb3BzLm1heEhlaWdodClcbiAgICAgIHJldHVybiBcImZpeGVkXCI7XG4gICAgcmV0dXJuIHByb3BzLnRhYmxlTGF5b3V0O1xuICB9KTtcbiAgY29uc3QgZW1wdHlCbG9ja1N0eWxlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmIChwcm9wcy5kYXRhICYmIHByb3BzLmRhdGEubGVuZ3RoKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IGhlaWdodCA9IFwiMTAwJVwiO1xuICAgIGlmIChwcm9wcy5oZWlnaHQgJiYgYm9keVNjcm9sbEhlaWdodC52YWx1ZSkge1xuICAgICAgaGVpZ2h0ID0gYCR7Ym9keVNjcm9sbEhlaWdodC52YWx1ZX1weGA7XG4gICAgfVxuICAgIGNvbnN0IHdpZHRoID0gdGFibGVXaWR0aC52YWx1ZTtcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IHdpZHRoID8gYCR7d2lkdGh9cHhgIDogXCJcIixcbiAgICAgIGhlaWdodFxuICAgIH07XG4gIH0pO1xuICBjb25zdCB0YWJsZUlubmVyU3R5bGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKHByb3BzLmhlaWdodCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaGVpZ2h0OiAhTnVtYmVyLmlzTmFOKE51bWJlcihwcm9wcy5oZWlnaHQpKSA/IGAke3Byb3BzLmhlaWdodH1weGAgOiBwcm9wcy5oZWlnaHRcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChwcm9wcy5tYXhIZWlnaHQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1heEhlaWdodDogIU51bWJlci5pc05hTihOdW1iZXIocHJvcHMubWF4SGVpZ2h0KSkgPyBgJHtwcm9wcy5tYXhIZWlnaHR9cHhgIDogcHJvcHMubWF4SGVpZ2h0XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge307XG4gIH0pO1xuICBjb25zdCBzY3JvbGxiYXJTdHlsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBpZiAocHJvcHMuaGVpZ2h0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAocHJvcHMubWF4SGVpZ2h0KSB7XG4gICAgICBpZiAoIU51bWJlci5pc05hTihOdW1iZXIocHJvcHMubWF4SGVpZ2h0KSkpIHtcbiAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gcHJvcHMubWF4SGVpZ2h0O1xuICAgICAgICBjb25zdCByZWFjaE1heEhlaWdodCA9IHRhYmxlU2Nyb2xsSGVpZ2h0LnZhbHVlID49IE51bWJlcihtYXhIZWlnaHQpO1xuICAgICAgICBpZiAocmVhY2hNYXhIZWlnaHQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWF4SGVpZ2h0OiBgJHt0YWJsZVNjcm9sbEhlaWdodC52YWx1ZSAtIGhlYWRlclNjcm9sbEhlaWdodC52YWx1ZSAtIGZvb3RlclNjcm9sbEhlaWdodC52YWx1ZX1weGBcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1heEhlaWdodDogYGNhbGMoJHtwcm9wcy5tYXhIZWlnaHR9IC0gJHtoZWFkZXJTY3JvbGxIZWlnaHQudmFsdWUgKyBmb290ZXJTY3JvbGxIZWlnaHQudmFsdWV9cHgpYFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge307XG4gIH0pO1xuICBjb25zdCBoYW5kbGVGaXhlZE1vdXNld2hlZWwgPSAoZXZlbnQsIGRhdGEpID0+IHtcbiAgICBjb25zdCBib2R5V3JhcHBlciA9IHRhYmxlLnJlZnMuYm9keVdyYXBwZXI7XG4gICAgaWYgKE1hdGguYWJzKGRhdGEuc3BpblkpID4gMCkge1xuICAgICAgY29uc3QgY3VycmVudFNjcm9sbFRvcCA9IGJvZHlXcmFwcGVyLnNjcm9sbFRvcDtcbiAgICAgIGlmIChkYXRhLnBpeGVsWSA8IDAgJiYgY3VycmVudFNjcm9sbFRvcCAhPT0gMCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEucGl4ZWxZID4gMCAmJiBib2R5V3JhcHBlci5zY3JvbGxIZWlnaHQgLSBib2R5V3JhcHBlci5jbGllbnRIZWlnaHQgPiBjdXJyZW50U2Nyb2xsVG9wKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICBib2R5V3JhcHBlci5zY3JvbGxUb3AgKz0gTWF0aC5jZWlsKGRhdGEucGl4ZWxZIC8gNSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvZHlXcmFwcGVyLnNjcm9sbExlZnQgKz0gTWF0aC5jZWlsKGRhdGEucGl4ZWxYIC8gNSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgIGlzSGlkZGVuLFxuICAgIHJlbmRlckV4cGFuZGVkLFxuICAgIHNldERyYWdWaXNpYmxlLFxuICAgIGlzR3JvdXAsXG4gICAgaGFuZGxlTW91c2VMZWF2ZSxcbiAgICBoYW5kbGVIZWFkZXJGb290ZXJNb3VzZXdoZWVsLFxuICAgIHRhYmxlU2l6ZSxcbiAgICBlbXB0eUJsb2NrU3R5bGUsXG4gICAgaGFuZGxlRml4ZWRNb3VzZXdoZWVsLFxuICAgIHJlc2l6ZVByb3h5VmlzaWJsZSxcbiAgICBib2R5V2lkdGgsXG4gICAgcmVzaXplU3RhdGUsXG4gICAgZG9MYXlvdXQsXG4gICAgdGFibGVCb2R5U3R5bGVzLFxuICAgIHRhYmxlTGF5b3V0LFxuICAgIHNjcm9sbGJhclZpZXdTdHlsZSxcbiAgICB0YWJsZUlubmVyU3R5bGUsXG4gICAgc2Nyb2xsYmFyU3R5bGVcbiAgfTtcbn1cblxuZXhwb3J0IHsgdXNlU3R5bGUgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGUtaGVscGVyLm1qcy5tYXBcbiIsImltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvblVubW91bnRlZCB9IGZyb20gJ3Z1ZSc7XG5cbmZ1bmN0aW9uIHVzZUtleVJlbmRlcih0YWJsZSkge1xuICBjb25zdCBvYnNlcnZlciA9IHJlZigpO1xuICBjb25zdCBpbml0V2F0Y2hEb20gPSAoKSA9PiB7XG4gICAgY29uc3QgZWwgPSB0YWJsZS52bm9kZS5lbDtcbiAgICBjb25zdCBjb2x1bW5zV3JhcHBlciA9IGVsLnF1ZXJ5U2VsZWN0b3IoXCIuaGlkZGVuLWNvbHVtbnNcIik7XG4gICAgY29uc3QgY29uZmlnID0geyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfTtcbiAgICBjb25zdCB1cGRhdGVPcmRlckZucyA9IHRhYmxlLnN0b3JlLnN0YXRlcy51cGRhdGVPcmRlckZucztcbiAgICBvYnNlcnZlci52YWx1ZSA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcbiAgICAgIHVwZGF0ZU9yZGVyRm5zLmZvckVhY2goKGZuKSA9PiBmbigpKTtcbiAgICB9KTtcbiAgICBvYnNlcnZlci52YWx1ZS5vYnNlcnZlKGNvbHVtbnNXcmFwcGVyLCBjb25maWcpO1xuICB9O1xuICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgIGluaXRXYXRjaERvbSgpO1xuICB9KTtcbiAgb25Vbm1vdW50ZWQoKCkgPT4ge1xuICAgIHZhciBfYTtcbiAgICAoX2EgPSBvYnNlcnZlci52YWx1ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmRpc2Nvbm5lY3QoKTtcbiAgfSk7XG59XG5cbmV4cG9ydCB7IHVzZUtleVJlbmRlciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZXktcmVuZGVyLWhlbHBlci5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uLy4uLy4uL2hvb2tzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VTaXplUHJvcCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZS1zaXplL2luZGV4Lm1qcyc7XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGRhdGE6IHtcbiAgICB0eXBlOiBBcnJheSxcbiAgICBkZWZhdWx0OiAoKSA9PiBbXVxuICB9LFxuICBzaXplOiB1c2VTaXplUHJvcCxcbiAgd2lkdGg6IFtTdHJpbmcsIE51bWJlcl0sXG4gIGhlaWdodDogW1N0cmluZywgTnVtYmVyXSxcbiAgbWF4SGVpZ2h0OiBbU3RyaW5nLCBOdW1iZXJdLFxuICBmaXQ6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgc3RyaXBlOiBCb29sZWFuLFxuICBib3JkZXI6IEJvb2xlYW4sXG4gIHJvd0tleTogW1N0cmluZywgRnVuY3Rpb25dLFxuICBzaG93SGVhZGVyOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIHNob3dTdW1tYXJ5OiBCb29sZWFuLFxuICBzdW1UZXh0OiBTdHJpbmcsXG4gIHN1bW1hcnlNZXRob2Q6IEZ1bmN0aW9uLFxuICByb3dDbGFzc05hbWU6IFtTdHJpbmcsIEZ1bmN0aW9uXSxcbiAgcm93U3R5bGU6IFtPYmplY3QsIEZ1bmN0aW9uXSxcbiAgY2VsbENsYXNzTmFtZTogW1N0cmluZywgRnVuY3Rpb25dLFxuICBjZWxsU3R5bGU6IFtPYmplY3QsIEZ1bmN0aW9uXSxcbiAgaGVhZGVyUm93Q2xhc3NOYW1lOiBbU3RyaW5nLCBGdW5jdGlvbl0sXG4gIGhlYWRlclJvd1N0eWxlOiBbT2JqZWN0LCBGdW5jdGlvbl0sXG4gIGhlYWRlckNlbGxDbGFzc05hbWU6IFtTdHJpbmcsIEZ1bmN0aW9uXSxcbiAgaGVhZGVyQ2VsbFN0eWxlOiBbT2JqZWN0LCBGdW5jdGlvbl0sXG4gIGhpZ2hsaWdodEN1cnJlbnRSb3c6IEJvb2xlYW4sXG4gIGN1cnJlbnRSb3dLZXk6IFtTdHJpbmcsIE51bWJlcl0sXG4gIGVtcHR5VGV4dDogU3RyaW5nLFxuICBleHBhbmRSb3dLZXlzOiBBcnJheSxcbiAgZGVmYXVsdEV4cGFuZEFsbDogQm9vbGVhbixcbiAgZGVmYXVsdFNvcnQ6IE9iamVjdCxcbiAgdG9vbHRpcEVmZmVjdDogU3RyaW5nLFxuICB0b29sdGlwT3B0aW9uczogT2JqZWN0LFxuICBzcGFuTWV0aG9kOiBGdW5jdGlvbixcbiAgc2VsZWN0T25JbmRldGVybWluYXRlOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIGluZGVudDoge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZWZhdWx0OiAxNlxuICB9LFxuICB0cmVlUHJvcHM6IHtcbiAgICB0eXBlOiBPYmplY3QsXG4gICAgZGVmYXVsdDogKCkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaGFzQ2hpbGRyZW46IFwiaGFzQ2hpbGRyZW5cIixcbiAgICAgICAgY2hpbGRyZW46IFwiY2hpbGRyZW5cIlxuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gIGxhenk6IEJvb2xlYW4sXG4gIGxvYWQ6IEZ1bmN0aW9uLFxuICBzdHlsZToge1xuICAgIHR5cGU6IE9iamVjdCxcbiAgICBkZWZhdWx0OiAoKSA9PiAoe30pXG4gIH0sXG4gIGNsYXNzTmFtZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiBcIlwiXG4gIH0sXG4gIHRhYmxlTGF5b3V0OiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IFwiZml4ZWRcIlxuICB9LFxuICBzY3JvbGxiYXJBbHdheXNPbjoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSxcbiAgZmxleGlibGU6IEJvb2xlYW5cbn07XG5cbmV4cG9ydCB7IGRlZmF1bHRQcm9wcyBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0cy5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGdldEN1cnJlbnRJbnN0YW5jZSwgcHJvdmlkZSwgY29tcHV0ZWQsIHJlc29sdmVDb21wb25lbnQsIHJlc29sdmVEaXJlY3RpdmUsIG9wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrLCBub3JtYWxpemVDbGFzcywgbm9ybWFsaXplU3R5bGUsIGNyZWF0ZUVsZW1lbnRWTm9kZSwgcmVuZGVyU2xvdCwgd2l0aERpcmVjdGl2ZXMsIGNyZWF0ZVZOb2RlLCBjcmVhdGVDb21tZW50Vk5vZGUsIHdpdGhDdHgsIGNyZWF0ZUJsb2NrLCBjcmVhdGVUZXh0Vk5vZGUsIHRvRGlzcGxheVN0cmluZywgdlNob3cgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZGVib3VuY2UgfSBmcm9tICdsb2Rhc2gtdW5pZmllZCc7XG5pbXBvcnQgJy4uLy4uLy4uL2RpcmVjdGl2ZXMvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCB7IEVsU2Nyb2xsYmFyIH0gZnJvbSAnLi4vLi4vc2Nyb2xsYmFyL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVTdG9yZSB9IGZyb20gJy4vc3RvcmUvaGVscGVyLm1qcyc7XG5pbXBvcnQgVGFibGVMYXlvdXQgZnJvbSAnLi90YWJsZS1sYXlvdXQubWpzJztcbmltcG9ydCBUYWJsZUhlYWRlciBmcm9tICcuL3RhYmxlLWhlYWRlci9pbmRleC5tanMnO1xuaW1wb3J0IFRhYmxlQm9keSBmcm9tICcuL3RhYmxlLWJvZHkvaW5kZXgubWpzJztcbmltcG9ydCBUYWJsZUZvb3RlciBmcm9tICcuL3RhYmxlLWZvb3Rlci9pbmRleC5tanMnO1xuaW1wb3J0IHVzZVV0aWxzIGZyb20gJy4vdGFibGUvdXRpbHMtaGVscGVyLm1qcyc7XG5pbXBvcnQgdXNlU3R5bGUgZnJvbSAnLi90YWJsZS9zdHlsZS1oZWxwZXIubWpzJztcbmltcG9ydCB1c2VLZXlSZW5kZXIgZnJvbSAnLi90YWJsZS9rZXktcmVuZGVyLWhlbHBlci5tanMnO1xuaW1wb3J0IGRlZmF1bHRQcm9wcyBmcm9tICcuL3RhYmxlL2RlZmF1bHRzLm1qcyc7XG5pbXBvcnQgeyBUQUJMRV9JTkpFQ1RJT05fS0VZIH0gZnJvbSAnLi90b2tlbnMubWpzJztcbmltcG9ydCB7IGhDb2xncm91cCB9IGZyb20gJy4vaC1oZWxwZXIubWpzJztcbmltcG9ydCB7IHVzZVNjcm9sbGJhciB9IGZyb20gJy4vY29tcG9zYWJsZXMvdXNlLXNjcm9sbGJhci5tanMnO1xuaW1wb3J0IF9leHBvcnRfc2ZjIGZyb20gJy4uLy4uLy4uL192aXJ0dWFsL3BsdWdpbi12dWVfZXhwb3J0LWhlbHBlci5tanMnO1xuaW1wb3J0IE1vdXNld2hlZWwgZnJvbSAnLi4vLi4vLi4vZGlyZWN0aXZlcy9tb3VzZXdoZWVsL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2UtbG9jYWxlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VOYW1lc3BhY2UgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2UtbmFtZXNwYWNlL2luZGV4Lm1qcyc7XG5cbmxldCB0YWJsZUlkU2VlZCA9IDE7XG5jb25zdCBfc2ZjX21haW4gPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkVsVGFibGVcIixcbiAgZGlyZWN0aXZlczoge1xuICAgIE1vdXNld2hlZWxcbiAgfSxcbiAgY29tcG9uZW50czoge1xuICAgIFRhYmxlSGVhZGVyLFxuICAgIFRhYmxlQm9keSxcbiAgICBUYWJsZUZvb3RlcixcbiAgICBFbFNjcm9sbGJhcixcbiAgICBoQ29sZ3JvdXBcbiAgfSxcbiAgcHJvcHM6IGRlZmF1bHRQcm9wcyxcbiAgZW1pdHM6IFtcbiAgICBcInNlbGVjdFwiLFxuICAgIFwic2VsZWN0LWFsbFwiLFxuICAgIFwic2VsZWN0aW9uLWNoYW5nZVwiLFxuICAgIFwiY2VsbC1tb3VzZS1lbnRlclwiLFxuICAgIFwiY2VsbC1tb3VzZS1sZWF2ZVwiLFxuICAgIFwiY2VsbC1jb250ZXh0bWVudVwiLFxuICAgIFwiY2VsbC1jbGlja1wiLFxuICAgIFwiY2VsbC1kYmxjbGlja1wiLFxuICAgIFwicm93LWNsaWNrXCIsXG4gICAgXCJyb3ctY29udGV4dG1lbnVcIixcbiAgICBcInJvdy1kYmxjbGlja1wiLFxuICAgIFwiaGVhZGVyLWNsaWNrXCIsXG4gICAgXCJoZWFkZXItY29udGV4dG1lbnVcIixcbiAgICBcInNvcnQtY2hhbmdlXCIsXG4gICAgXCJmaWx0ZXItY2hhbmdlXCIsXG4gICAgXCJjdXJyZW50LWNoYW5nZVwiLFxuICAgIFwiaGVhZGVyLWRyYWdlbmRcIixcbiAgICBcImV4cGFuZC1jaGFuZ2VcIlxuICBdLFxuICBzZXR1cChwcm9wcykge1xuICAgIGNvbnN0IHsgdCB9ID0gdXNlTG9jYWxlKCk7XG4gICAgY29uc3QgbnMgPSB1c2VOYW1lc3BhY2UoXCJ0YWJsZVwiKTtcbiAgICBjb25zdCB0YWJsZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIHByb3ZpZGUoVEFCTEVfSU5KRUNUSU9OX0tFWSwgdGFibGUpO1xuICAgIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUodGFibGUsIHByb3BzKTtcbiAgICB0YWJsZS5zdG9yZSA9IHN0b3JlO1xuICAgIGNvbnN0IGxheW91dCA9IG5ldyBUYWJsZUxheW91dCh7XG4gICAgICBzdG9yZTogdGFibGUuc3RvcmUsXG4gICAgICB0YWJsZSxcbiAgICAgIGZpdDogcHJvcHMuZml0LFxuICAgICAgc2hvd0hlYWRlcjogcHJvcHMuc2hvd0hlYWRlclxuICAgIH0pO1xuICAgIHRhYmxlLmxheW91dCA9IGxheW91dDtcbiAgICBjb25zdCBpc0VtcHR5ID0gY29tcHV0ZWQoKCkgPT4gKHN0b3JlLnN0YXRlcy5kYXRhLnZhbHVlIHx8IFtdKS5sZW5ndGggPT09IDApO1xuICAgIGNvbnN0IHtcbiAgICAgIHNldEN1cnJlbnRSb3csXG4gICAgICBnZXRTZWxlY3Rpb25Sb3dzLFxuICAgICAgdG9nZ2xlUm93U2VsZWN0aW9uLFxuICAgICAgY2xlYXJTZWxlY3Rpb24sXG4gICAgICBjbGVhckZpbHRlcixcbiAgICAgIHRvZ2dsZUFsbFNlbGVjdGlvbixcbiAgICAgIHRvZ2dsZVJvd0V4cGFuc2lvbixcbiAgICAgIGNsZWFyU29ydCxcbiAgICAgIHNvcnRcbiAgICB9ID0gdXNlVXRpbHMoc3RvcmUpO1xuICAgIGNvbnN0IHtcbiAgICAgIGlzSGlkZGVuLFxuICAgICAgcmVuZGVyRXhwYW5kZWQsXG4gICAgICBzZXREcmFnVmlzaWJsZSxcbiAgICAgIGlzR3JvdXAsXG4gICAgICBoYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgaGFuZGxlSGVhZGVyRm9vdGVyTW91c2V3aGVlbCxcbiAgICAgIHRhYmxlU2l6ZSxcbiAgICAgIGVtcHR5QmxvY2tTdHlsZSxcbiAgICAgIGhhbmRsZUZpeGVkTW91c2V3aGVlbCxcbiAgICAgIHJlc2l6ZVByb3h5VmlzaWJsZSxcbiAgICAgIGJvZHlXaWR0aCxcbiAgICAgIHJlc2l6ZVN0YXRlLFxuICAgICAgZG9MYXlvdXQsXG4gICAgICB0YWJsZUJvZHlTdHlsZXMsXG4gICAgICB0YWJsZUxheW91dCxcbiAgICAgIHNjcm9sbGJhclZpZXdTdHlsZSxcbiAgICAgIHRhYmxlSW5uZXJTdHlsZSxcbiAgICAgIHNjcm9sbGJhclN0eWxlXG4gICAgfSA9IHVzZVN0eWxlKHByb3BzLCBsYXlvdXQsIHN0b3JlLCB0YWJsZSk7XG4gICAgY29uc3QgeyBzY3JvbGxCYXJSZWYsIHNjcm9sbFRvLCBzZXRTY3JvbGxMZWZ0LCBzZXRTY3JvbGxUb3AgfSA9IHVzZVNjcm9sbGJhcigpO1xuICAgIGNvbnN0IGRlYm91bmNlZFVwZGF0ZUxheW91dCA9IGRlYm91bmNlKGRvTGF5b3V0LCA1MCk7XG4gICAgY29uc3QgdGFibGVJZCA9IGAke25zLm5hbWVzcGFjZS52YWx1ZX0tdGFibGVfJHt0YWJsZUlkU2VlZCsrfWA7XG4gICAgdGFibGUudGFibGVJZCA9IHRhYmxlSWQ7XG4gICAgdGFibGUuc3RhdGUgPSB7XG4gICAgICBpc0dyb3VwLFxuICAgICAgcmVzaXplU3RhdGUsXG4gICAgICBkb0xheW91dCxcbiAgICAgIGRlYm91bmNlZFVwZGF0ZUxheW91dFxuICAgIH07XG4gICAgY29uc3QgY29tcHV0ZWRTdW1UZXh0ID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuc3VtVGV4dCB8fCB0KFwiZWwudGFibGUuc3VtVGV4dFwiKSk7XG4gICAgY29uc3QgY29tcHV0ZWRFbXB0eVRleHQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMuZW1wdHlUZXh0IHx8IHQoXCJlbC50YWJsZS5lbXB0eVRleHRcIik7XG4gICAgfSk7XG4gICAgdXNlS2V5UmVuZGVyKHRhYmxlKTtcbiAgICByZXR1cm4ge1xuICAgICAgbnMsXG4gICAgICBsYXlvdXQsXG4gICAgICBzdG9yZSxcbiAgICAgIGhhbmRsZUhlYWRlckZvb3Rlck1vdXNld2hlZWwsXG4gICAgICBoYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgdGFibGVJZCxcbiAgICAgIHRhYmxlU2l6ZSxcbiAgICAgIGlzSGlkZGVuLFxuICAgICAgaXNFbXB0eSxcbiAgICAgIHJlbmRlckV4cGFuZGVkLFxuICAgICAgcmVzaXplUHJveHlWaXNpYmxlLFxuICAgICAgcmVzaXplU3RhdGUsXG4gICAgICBpc0dyb3VwLFxuICAgICAgYm9keVdpZHRoLFxuICAgICAgdGFibGVCb2R5U3R5bGVzLFxuICAgICAgZW1wdHlCbG9ja1N0eWxlLFxuICAgICAgZGVib3VuY2VkVXBkYXRlTGF5b3V0LFxuICAgICAgaGFuZGxlRml4ZWRNb3VzZXdoZWVsLFxuICAgICAgc2V0Q3VycmVudFJvdyxcbiAgICAgIGdldFNlbGVjdGlvblJvd3MsXG4gICAgICB0b2dnbGVSb3dTZWxlY3Rpb24sXG4gICAgICBjbGVhclNlbGVjdGlvbixcbiAgICAgIGNsZWFyRmlsdGVyLFxuICAgICAgdG9nZ2xlQWxsU2VsZWN0aW9uLFxuICAgICAgdG9nZ2xlUm93RXhwYW5zaW9uLFxuICAgICAgY2xlYXJTb3J0LFxuICAgICAgZG9MYXlvdXQsXG4gICAgICBzb3J0LFxuICAgICAgdCxcbiAgICAgIHNldERyYWdWaXNpYmxlLFxuICAgICAgY29udGV4dDogdGFibGUsXG4gICAgICBjb21wdXRlZFN1bVRleHQsXG4gICAgICBjb21wdXRlZEVtcHR5VGV4dCxcbiAgICAgIHRhYmxlTGF5b3V0LFxuICAgICAgc2Nyb2xsYmFyVmlld1N0eWxlLFxuICAgICAgdGFibGVJbm5lclN0eWxlLFxuICAgICAgc2Nyb2xsYmFyU3R5bGUsXG4gICAgICBzY3JvbGxCYXJSZWYsXG4gICAgICBzY3JvbGxUbyxcbiAgICAgIHNldFNjcm9sbExlZnQsXG4gICAgICBzZXRTY3JvbGxUb3BcbiAgICB9O1xuICB9XG59KTtcbmNvbnN0IF9ob2lzdGVkXzEgPSBbXCJkYXRhLXByZWZpeFwiXTtcbmNvbnN0IF9ob2lzdGVkXzIgPSB7XG4gIHJlZjogXCJoaWRkZW5Db2x1bW5zXCIsXG4gIGNsYXNzOiBcImhpZGRlbi1jb2x1bW5zXCJcbn07XG5mdW5jdGlvbiBfc2ZjX3JlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHtcbiAgY29uc3QgX2NvbXBvbmVudF9oQ29sZ3JvdXAgPSByZXNvbHZlQ29tcG9uZW50KFwiaENvbGdyb3VwXCIpO1xuICBjb25zdCBfY29tcG9uZW50X3RhYmxlX2hlYWRlciA9IHJlc29sdmVDb21wb25lbnQoXCJ0YWJsZS1oZWFkZXJcIik7XG4gIGNvbnN0IF9jb21wb25lbnRfdGFibGVfYm9keSA9IHJlc29sdmVDb21wb25lbnQoXCJ0YWJsZS1ib2R5XCIpO1xuICBjb25zdCBfY29tcG9uZW50X2VsX3Njcm9sbGJhciA9IHJlc29sdmVDb21wb25lbnQoXCJlbC1zY3JvbGxiYXJcIik7XG4gIGNvbnN0IF9jb21wb25lbnRfdGFibGVfZm9vdGVyID0gcmVzb2x2ZUNvbXBvbmVudChcInRhYmxlLWZvb3RlclwiKTtcbiAgY29uc3QgX2RpcmVjdGl2ZV9tb3VzZXdoZWVsID0gcmVzb2x2ZURpcmVjdGl2ZShcIm1vdXNld2hlZWxcIik7XG4gIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIHtcbiAgICByZWY6IFwidGFibGVXcmFwcGVyXCIsXG4gICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFtcbiAgICAgIHtcbiAgICAgICAgW19jdHgubnMubShcImZpdFwiKV06IF9jdHguZml0LFxuICAgICAgICBbX2N0eC5ucy5tKFwic3RyaXBlZFwiKV06IF9jdHguc3RyaXBlLFxuICAgICAgICBbX2N0eC5ucy5tKFwiYm9yZGVyXCIpXTogX2N0eC5ib3JkZXIgfHwgX2N0eC5pc0dyb3VwLFxuICAgICAgICBbX2N0eC5ucy5tKFwiaGlkZGVuXCIpXTogX2N0eC5pc0hpZGRlbixcbiAgICAgICAgW19jdHgubnMubShcImdyb3VwXCIpXTogX2N0eC5pc0dyb3VwLFxuICAgICAgICBbX2N0eC5ucy5tKFwiZmx1aWQtaGVpZ2h0XCIpXTogX2N0eC5tYXhIZWlnaHQsXG4gICAgICAgIFtfY3R4Lm5zLm0oXCJzY3JvbGxhYmxlLXhcIildOiBfY3R4LmxheW91dC5zY3JvbGxYLnZhbHVlLFxuICAgICAgICBbX2N0eC5ucy5tKFwic2Nyb2xsYWJsZS15XCIpXTogX2N0eC5sYXlvdXQuc2Nyb2xsWS52YWx1ZSxcbiAgICAgICAgW19jdHgubnMubShcImVuYWJsZS1yb3ctaG92ZXJcIildOiAhX2N0eC5zdG9yZS5zdGF0ZXMuaXNDb21wbGV4LnZhbHVlLFxuICAgICAgICBbX2N0eC5ucy5tKFwiZW5hYmxlLXJvdy10cmFuc2l0aW9uXCIpXTogKF9jdHguc3RvcmUuc3RhdGVzLmRhdGEudmFsdWUgfHwgW10pLmxlbmd0aCAhPT0gMCAmJiAoX2N0eC5zdG9yZS5zdGF0ZXMuZGF0YS52YWx1ZSB8fCBbXSkubGVuZ3RoIDwgMTAwLFxuICAgICAgICBcImhhcy1mb290ZXJcIjogX2N0eC5zaG93U3VtbWFyeVxuICAgICAgfSxcbiAgICAgIF9jdHgubnMubShfY3R4LnRhYmxlU2l6ZSksXG4gICAgICBfY3R4LmNsYXNzTmFtZSxcbiAgICAgIF9jdHgubnMuYigpLFxuICAgICAgX2N0eC5ucy5tKGBsYXlvdXQtJHtfY3R4LnRhYmxlTGF5b3V0fWApXG4gICAgXSksXG4gICAgc3R5bGU6IG5vcm1hbGl6ZVN0eWxlKF9jdHguc3R5bGUpLFxuICAgIFwiZGF0YS1wcmVmaXhcIjogX2N0eC5ucy5uYW1lc3BhY2UudmFsdWUsXG4gICAgb25Nb3VzZWxlYXZlOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9ICguLi5hcmdzKSA9PiBfY3R4LmhhbmRsZU1vdXNlTGVhdmUgJiYgX2N0eC5oYW5kbGVNb3VzZUxlYXZlKC4uLmFyZ3MpKVxuICB9LCBbXG4gICAgY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhfY3R4Lm5zLmUoXCJpbm5lci13cmFwcGVyXCIpKSxcbiAgICAgIHN0eWxlOiBub3JtYWxpemVTdHlsZShfY3R4LnRhYmxlSW5uZXJTdHlsZSlcbiAgICB9LCBbXG4gICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwgX2hvaXN0ZWRfMiwgW1xuICAgICAgICByZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcImRlZmF1bHRcIilcbiAgICAgIF0sIDUxMiksXG4gICAgICBfY3R4LnNob3dIZWFkZXIgJiYgX2N0eC50YWJsZUxheW91dCA9PT0gXCJmaXhlZFwiID8gd2l0aERpcmVjdGl2ZXMoKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJkaXZcIiwge1xuICAgICAgICBrZXk6IDAsXG4gICAgICAgIHJlZjogXCJoZWFkZXJXcmFwcGVyXCIsXG4gICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhfY3R4Lm5zLmUoXCJoZWFkZXItd3JhcHBlclwiKSlcbiAgICAgIH0sIFtcbiAgICAgICAgY3JlYXRlRWxlbWVudFZOb2RlKFwidGFibGVcIiwge1xuICAgICAgICAgIHJlZjogXCJ0YWJsZUhlYWRlclwiLFxuICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhfY3R4Lm5zLmUoXCJoZWFkZXJcIikpLFxuICAgICAgICAgIHN0eWxlOiBub3JtYWxpemVTdHlsZShfY3R4LnRhYmxlQm9keVN0eWxlcyksXG4gICAgICAgICAgYm9yZGVyOiBcIjBcIixcbiAgICAgICAgICBjZWxscGFkZGluZzogXCIwXCIsXG4gICAgICAgICAgY2VsbHNwYWNpbmc6IFwiMFwiXG4gICAgICAgIH0sIFtcbiAgICAgICAgICBjcmVhdGVWTm9kZShfY29tcG9uZW50X2hDb2xncm91cCwge1xuICAgICAgICAgICAgY29sdW1uczogX2N0eC5zdG9yZS5zdGF0ZXMuY29sdW1ucy52YWx1ZSxcbiAgICAgICAgICAgIFwidGFibGUtbGF5b3V0XCI6IF9jdHgudGFibGVMYXlvdXRcbiAgICAgICAgICB9LCBudWxsLCA4LCBbXCJjb2x1bW5zXCIsIFwidGFibGUtbGF5b3V0XCJdKSxcbiAgICAgICAgICBjcmVhdGVWTm9kZShfY29tcG9uZW50X3RhYmxlX2hlYWRlciwge1xuICAgICAgICAgICAgcmVmOiBcInRhYmxlSGVhZGVyUmVmXCIsXG4gICAgICAgICAgICBib3JkZXI6IF9jdHguYm9yZGVyLFxuICAgICAgICAgICAgXCJkZWZhdWx0LXNvcnRcIjogX2N0eC5kZWZhdWx0U29ydCxcbiAgICAgICAgICAgIHN0b3JlOiBfY3R4LnN0b3JlLFxuICAgICAgICAgICAgb25TZXREcmFnVmlzaWJsZTogX2N0eC5zZXREcmFnVmlzaWJsZVxuICAgICAgICAgIH0sIG51bGwsIDgsIFtcImJvcmRlclwiLCBcImRlZmF1bHQtc29ydFwiLCBcInN0b3JlXCIsIFwib25TZXREcmFnVmlzaWJsZVwiXSlcbiAgICAgICAgXSwgNilcbiAgICAgIF0sIDIpKSwgW1xuICAgICAgICBbX2RpcmVjdGl2ZV9tb3VzZXdoZWVsLCBfY3R4LmhhbmRsZUhlYWRlckZvb3Rlck1vdXNld2hlZWxdXG4gICAgICBdKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSksXG4gICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgICByZWY6IFwiYm9keVdyYXBwZXJcIixcbiAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKF9jdHgubnMuZShcImJvZHktd3JhcHBlclwiKSlcbiAgICAgIH0sIFtcbiAgICAgICAgY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9zY3JvbGxiYXIsIHtcbiAgICAgICAgICByZWY6IFwic2Nyb2xsQmFyUmVmXCIsXG4gICAgICAgICAgXCJ2aWV3LXN0eWxlXCI6IF9jdHguc2Nyb2xsYmFyVmlld1N0eWxlLFxuICAgICAgICAgIFwid3JhcC1zdHlsZVwiOiBfY3R4LnNjcm9sbGJhclN0eWxlLFxuICAgICAgICAgIGFsd2F5czogX2N0eC5zY3JvbGxiYXJBbHdheXNPblxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJ0YWJsZVwiLCB7XG4gICAgICAgICAgICAgIHJlZjogXCJ0YWJsZUJvZHlcIixcbiAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKF9jdHgubnMuZShcImJvZHlcIikpLFxuICAgICAgICAgICAgICBjZWxsc3BhY2luZzogXCIwXCIsXG4gICAgICAgICAgICAgIGNlbGxwYWRkaW5nOiBcIjBcIixcbiAgICAgICAgICAgICAgYm9yZGVyOiBcIjBcIixcbiAgICAgICAgICAgICAgc3R5bGU6IG5vcm1hbGl6ZVN0eWxlKHtcbiAgICAgICAgICAgICAgICB3aWR0aDogX2N0eC5ib2R5V2lkdGgsXG4gICAgICAgICAgICAgICAgdGFibGVMYXlvdXQ6IF9jdHgudGFibGVMYXlvdXRcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9oQ29sZ3JvdXAsIHtcbiAgICAgICAgICAgICAgICBjb2x1bW5zOiBfY3R4LnN0b3JlLnN0YXRlcy5jb2x1bW5zLnZhbHVlLFxuICAgICAgICAgICAgICAgIFwidGFibGUtbGF5b3V0XCI6IF9jdHgudGFibGVMYXlvdXRcbiAgICAgICAgICAgICAgfSwgbnVsbCwgOCwgW1wiY29sdW1uc1wiLCBcInRhYmxlLWxheW91dFwiXSksXG4gICAgICAgICAgICAgIF9jdHguc2hvd0hlYWRlciAmJiBfY3R4LnRhYmxlTGF5b3V0ID09PSBcImF1dG9cIiA/IChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2soX2NvbXBvbmVudF90YWJsZV9oZWFkZXIsIHtcbiAgICAgICAgICAgICAgICBrZXk6IDAsXG4gICAgICAgICAgICAgICAgcmVmOiBcInRhYmxlSGVhZGVyUmVmXCIsXG4gICAgICAgICAgICAgICAgYm9yZGVyOiBfY3R4LmJvcmRlcixcbiAgICAgICAgICAgICAgICBcImRlZmF1bHQtc29ydFwiOiBfY3R4LmRlZmF1bHRTb3J0LFxuICAgICAgICAgICAgICAgIHN0b3JlOiBfY3R4LnN0b3JlLFxuICAgICAgICAgICAgICAgIG9uU2V0RHJhZ1Zpc2libGU6IF9jdHguc2V0RHJhZ1Zpc2libGVcbiAgICAgICAgICAgICAgfSwgbnVsbCwgOCwgW1wiYm9yZGVyXCIsIFwiZGVmYXVsdC1zb3J0XCIsIFwic3RvcmVcIiwgXCJvblNldERyYWdWaXNpYmxlXCJdKSkgOiBjcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpLFxuICAgICAgICAgICAgICBjcmVhdGVWTm9kZShfY29tcG9uZW50X3RhYmxlX2JvZHksIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0OiBfY3R4LmNvbnRleHQsXG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0OiBfY3R4LmhpZ2hsaWdodEN1cnJlbnRSb3csXG4gICAgICAgICAgICAgICAgXCJyb3ctY2xhc3MtbmFtZVwiOiBfY3R4LnJvd0NsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICBcInRvb2x0aXAtZWZmZWN0XCI6IF9jdHgudG9vbHRpcEVmZmVjdCxcbiAgICAgICAgICAgICAgICBcInRvb2x0aXAtb3B0aW9uc1wiOiBfY3R4LnRvb2x0aXBPcHRpb25zLFxuICAgICAgICAgICAgICAgIFwicm93LXN0eWxlXCI6IF9jdHgucm93U3R5bGUsXG4gICAgICAgICAgICAgICAgc3RvcmU6IF9jdHguc3RvcmUsXG4gICAgICAgICAgICAgICAgc3RyaXBlOiBfY3R4LnN0cmlwZVxuICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbXCJjb250ZXh0XCIsIFwiaGlnaGxpZ2h0XCIsIFwicm93LWNsYXNzLW5hbWVcIiwgXCJ0b29sdGlwLWVmZmVjdFwiLCBcInRvb2x0aXAtb3B0aW9uc1wiLCBcInJvdy1zdHlsZVwiLCBcInN0b3JlXCIsIFwic3RyaXBlXCJdKVxuICAgICAgICAgICAgXSwgNiksXG4gICAgICAgICAgICBfY3R4LmlzRW1wdHkgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgICAgcmVmOiBcImVtcHR5QmxvY2tcIixcbiAgICAgICAgICAgICAgc3R5bGU6IG5vcm1hbGl6ZVN0eWxlKF9jdHguZW1wdHlCbG9ja1N0eWxlKSxcbiAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKF9jdHgubnMuZShcImVtcHR5LWJsb2NrXCIpKVxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoX2N0eC5ucy5lKFwiZW1wdHktdGV4dFwiKSlcbiAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgIHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwiZW1wdHlcIiwge30sICgpID0+IFtcbiAgICAgICAgICAgICAgICAgIGNyZWF0ZVRleHRWTm9kZSh0b0Rpc3BsYXlTdHJpbmcoX2N0eC5jb21wdXRlZEVtcHR5VGV4dCksIDEpXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgXSwgMilcbiAgICAgICAgICAgIF0sIDYpKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSksXG4gICAgICAgICAgICBfY3R4LiRzbG90cy5hcHBlbmQgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGtleTogMSxcbiAgICAgICAgICAgICAgcmVmOiBcImFwcGVuZFdyYXBwZXJcIixcbiAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKF9jdHgubnMuZShcImFwcGVuZC13cmFwcGVyXCIpKVxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICByZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcImFwcGVuZFwiKVxuICAgICAgICAgICAgXSwgMikpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF86IDNcbiAgICAgICAgfSwgOCwgW1widmlldy1zdHlsZVwiLCBcIndyYXAtc3R5bGVcIiwgXCJhbHdheXNcIl0pXG4gICAgICBdLCAyKSxcbiAgICAgIF9jdHguc2hvd1N1bW1hcnkgPyB3aXRoRGlyZWN0aXZlcygob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCB7XG4gICAgICAgIGtleTogMSxcbiAgICAgICAgcmVmOiBcImZvb3RlcldyYXBwZXJcIixcbiAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKF9jdHgubnMuZShcImZvb3Rlci13cmFwcGVyXCIpKVxuICAgICAgfSwgW1xuICAgICAgICBjcmVhdGVWTm9kZShfY29tcG9uZW50X3RhYmxlX2Zvb3Rlciwge1xuICAgICAgICAgIGJvcmRlcjogX2N0eC5ib3JkZXIsXG4gICAgICAgICAgXCJkZWZhdWx0LXNvcnRcIjogX2N0eC5kZWZhdWx0U29ydCxcbiAgICAgICAgICBzdG9yZTogX2N0eC5zdG9yZSxcbiAgICAgICAgICBzdHlsZTogbm9ybWFsaXplU3R5bGUoX2N0eC50YWJsZUJvZHlTdHlsZXMpLFxuICAgICAgICAgIFwic3VtLXRleHRcIjogX2N0eC5jb21wdXRlZFN1bVRleHQsXG4gICAgICAgICAgXCJzdW1tYXJ5LW1ldGhvZFwiOiBfY3R4LnN1bW1hcnlNZXRob2RcbiAgICAgICAgfSwgbnVsbCwgOCwgW1wiYm9yZGVyXCIsIFwiZGVmYXVsdC1zb3J0XCIsIFwic3RvcmVcIiwgXCJzdHlsZVwiLCBcInN1bS10ZXh0XCIsIFwic3VtbWFyeS1tZXRob2RcIl0pXG4gICAgICBdLCAyKSksIFtcbiAgICAgICAgW3ZTaG93LCAhX2N0eC5pc0VtcHR5XSxcbiAgICAgICAgW19kaXJlY3RpdmVfbW91c2V3aGVlbCwgX2N0eC5oYW5kbGVIZWFkZXJGb290ZXJNb3VzZXdoZWVsXVxuICAgICAgXSkgOiBjcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpLFxuICAgICAgX2N0eC5ib3JkZXIgfHwgX2N0eC5pc0dyb3VwID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJkaXZcIiwge1xuICAgICAgICBrZXk6IDIsXG4gICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhfY3R4Lm5zLmUoXCJib3JkZXItbGVmdC1wYXRjaFwiKSlcbiAgICAgIH0sIG51bGwsIDIpKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSlcbiAgICBdLCA2KSxcbiAgICB3aXRoRGlyZWN0aXZlcyhjcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgcmVmOiBcInJlc2l6ZVByb3h5XCIsXG4gICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoX2N0eC5ucy5lKFwiY29sdW1uLXJlc2l6ZS1wcm94eVwiKSlcbiAgICB9LCBudWxsLCAyKSwgW1xuICAgICAgW3ZTaG93LCBfY3R4LnJlc2l6ZVByb3h5VmlzaWJsZV1cbiAgICBdKVxuICBdLCA0NiwgX2hvaXN0ZWRfMSk7XG59XG52YXIgVGFibGUgPSAvKiBAX19QVVJFX18gKi8gX2V4cG9ydF9zZmMoX3NmY19tYWluLCBbW1wicmVuZGVyXCIsIF9zZmNfcmVuZGVyXSwgW1wiX19maWxlXCIsIFwiL2hvbWUvcnVubmVyL3dvcmsvZWxlbWVudC1wbHVzL2VsZW1lbnQtcGx1cy9wYWNrYWdlcy9jb21wb25lbnRzL3RhYmxlL3NyYy90YWJsZS52dWVcIl1dKTtcblxuZXhwb3J0IHsgVGFibGUgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFibGUubWpzLm1hcFxuIiwiZnVuY3Rpb24gdXNlVXRpbHMoc3RvcmUpIHtcbiAgY29uc3Qgc2V0Q3VycmVudFJvdyA9IChyb3cpID0+IHtcbiAgICBzdG9yZS5jb21taXQoXCJzZXRDdXJyZW50Um93XCIsIHJvdyk7XG4gIH07XG4gIGNvbnN0IGdldFNlbGVjdGlvblJvd3MgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHN0b3JlLmdldFNlbGVjdGlvblJvd3MoKTtcbiAgfTtcbiAgY29uc3QgdG9nZ2xlUm93U2VsZWN0aW9uID0gKHJvdywgc2VsZWN0ZWQpID0+IHtcbiAgICBzdG9yZS50b2dnbGVSb3dTZWxlY3Rpb24ocm93LCBzZWxlY3RlZCwgZmFsc2UpO1xuICAgIHN0b3JlLnVwZGF0ZUFsbFNlbGVjdGVkKCk7XG4gIH07XG4gIGNvbnN0IGNsZWFyU2VsZWN0aW9uID0gKCkgPT4ge1xuICAgIHN0b3JlLmNsZWFyU2VsZWN0aW9uKCk7XG4gIH07XG4gIGNvbnN0IGNsZWFyRmlsdGVyID0gKGNvbHVtbktleXMpID0+IHtcbiAgICBzdG9yZS5jbGVhckZpbHRlcihjb2x1bW5LZXlzKTtcbiAgfTtcbiAgY29uc3QgdG9nZ2xlQWxsU2VsZWN0aW9uID0gKCkgPT4ge1xuICAgIHN0b3JlLmNvbW1pdChcInRvZ2dsZUFsbFNlbGVjdGlvblwiKTtcbiAgfTtcbiAgY29uc3QgdG9nZ2xlUm93RXhwYW5zaW9uID0gKHJvdywgZXhwYW5kZWQpID0+IHtcbiAgICBzdG9yZS50b2dnbGVSb3dFeHBhbnNpb25BZGFwdGVyKHJvdywgZXhwYW5kZWQpO1xuICB9O1xuICBjb25zdCBjbGVhclNvcnQgPSAoKSA9PiB7XG4gICAgc3RvcmUuY2xlYXJTb3J0KCk7XG4gIH07XG4gIGNvbnN0IHNvcnQgPSAocHJvcCwgb3JkZXIpID0+IHtcbiAgICBzdG9yZS5jb21taXQoXCJzb3J0XCIsIHsgcHJvcCwgb3JkZXIgfSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgc2V0Q3VycmVudFJvdyxcbiAgICBnZXRTZWxlY3Rpb25Sb3dzLFxuICAgIHRvZ2dsZVJvd1NlbGVjdGlvbixcbiAgICBjbGVhclNlbGVjdGlvbixcbiAgICBjbGVhckZpbHRlcixcbiAgICB0b2dnbGVBbGxTZWxlY3Rpb24sXG4gICAgdG9nZ2xlUm93RXhwYW5zaW9uLFxuICAgIGNsZWFyU29ydCxcbiAgICBzb3J0XG4gIH07XG59XG5cbmV4cG9ydCB7IHVzZVV0aWxzIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLWhlbHBlci5tanMubWFwXG4iLCJpbXBvcnQgeyByZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi91dGlscy9pbmRleC5tanMnO1xuaW1wb3J0IHsgaXNOdW1iZXIgfSBmcm9tICdAdnVldXNlL2NvcmUnO1xuXG5jb25zdCB1c2VTY3JvbGxiYXIgPSAoKSA9PiB7XG4gIGNvbnN0IHNjcm9sbEJhclJlZiA9IHJlZigpO1xuICBjb25zdCBzY3JvbGxUbyA9IChvcHRpb25zLCB5Q29vcmQpID0+IHtcbiAgICBjb25zdCBzY3JvbGxiYXIgPSBzY3JvbGxCYXJSZWYudmFsdWU7XG4gICAgaWYgKHNjcm9sbGJhcikge1xuICAgICAgc2Nyb2xsYmFyLnNjcm9sbFRvKG9wdGlvbnMsIHlDb29yZCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXRTY3JvbGxQb3NpdGlvbiA9IChwb3NpdGlvbiwgb2Zmc2V0KSA9PiB7XG4gICAgY29uc3Qgc2Nyb2xsYmFyID0gc2Nyb2xsQmFyUmVmLnZhbHVlO1xuICAgIGlmIChzY3JvbGxiYXIgJiYgaXNOdW1iZXIob2Zmc2V0KSAmJiBbXCJUb3BcIiwgXCJMZWZ0XCJdLmluY2x1ZGVzKHBvc2l0aW9uKSkge1xuICAgICAgc2Nyb2xsYmFyW2BzZXRTY3JvbGwke3Bvc2l0aW9ufWBdKG9mZnNldCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXRTY3JvbGxUb3AgPSAodG9wKSA9PiBzZXRTY3JvbGxQb3NpdGlvbihcIlRvcFwiLCB0b3ApO1xuICBjb25zdCBzZXRTY3JvbGxMZWZ0ID0gKGxlZnQpID0+IHNldFNjcm9sbFBvc2l0aW9uKFwiTGVmdFwiLCBsZWZ0KTtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxCYXJSZWYsXG4gICAgc2Nyb2xsVG8sXG4gICAgc2V0U2Nyb2xsVG9wLFxuICAgIHNldFNjcm9sbExlZnRcbiAgfTtcbn07XG5cbmV4cG9ydCB7IHVzZVNjcm9sbGJhciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLXNjcm9sbGJhci5tanMubWFwXG4iLCJpbXBvcnQgeyBoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IEVsQ2hlY2tib3ggfSBmcm9tICcuLi8uLi9jaGVja2JveC9pbmRleC5tanMnO1xuaW1wb3J0IHsgRWxJY29uIH0gZnJvbSAnLi4vLi4vaWNvbi9pbmRleC5tanMnO1xuaW1wb3J0IHsgQXJyb3dSaWdodCwgTG9hZGluZyB9IGZyb20gJ0BlbGVtZW50LXBsdXMvaWNvbnMtdnVlJztcbmltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCB7IGdldFByb3AgfSBmcm9tICcuLi8uLi8uLi91dGlscy9vYmplY3RzLm1qcyc7XG5cbmNvbnN0IGRlZmF1bHRDbGFzc05hbWVzID0ge1xuICBzZWxlY3Rpb246IFwidGFibGUtY29sdW1uLS1zZWxlY3Rpb25cIixcbiAgZXhwYW5kOiBcInRhYmxlX19leHBhbmQtY29sdW1uXCJcbn07XG5jb25zdCBjZWxsU3RhcnRzID0ge1xuICBkZWZhdWx0OiB7XG4gICAgb3JkZXI6IFwiXCJcbiAgfSxcbiAgc2VsZWN0aW9uOiB7XG4gICAgd2lkdGg6IDQ4LFxuICAgIG1pbldpZHRoOiA0OCxcbiAgICByZWFsV2lkdGg6IDQ4LFxuICAgIG9yZGVyOiBcIlwiXG4gIH0sXG4gIGV4cGFuZDoge1xuICAgIHdpZHRoOiA0OCxcbiAgICBtaW5XaWR0aDogNDgsXG4gICAgcmVhbFdpZHRoOiA0OCxcbiAgICBvcmRlcjogXCJcIlxuICB9LFxuICBpbmRleDoge1xuICAgIHdpZHRoOiA0OCxcbiAgICBtaW5XaWR0aDogNDgsXG4gICAgcmVhbFdpZHRoOiA0OCxcbiAgICBvcmRlcjogXCJcIlxuICB9XG59O1xuY29uc3QgZ2V0RGVmYXVsdENsYXNzTmFtZSA9ICh0eXBlKSA9PiB7XG4gIHJldHVybiBkZWZhdWx0Q2xhc3NOYW1lc1t0eXBlXSB8fCBcIlwiO1xufTtcbmNvbnN0IGNlbGxGb3JjZWQgPSB7XG4gIHNlbGVjdGlvbjoge1xuICAgIHJlbmRlckhlYWRlcih7IHN0b3JlIH0pIHtcbiAgICAgIGZ1bmN0aW9uIGlzRGlzYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiBzdG9yZS5zdGF0ZXMuZGF0YS52YWx1ZSAmJiBzdG9yZS5zdGF0ZXMuZGF0YS52YWx1ZS5sZW5ndGggPT09IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gaChFbENoZWNrYm94LCB7XG4gICAgICAgIGRpc2FibGVkOiBpc0Rpc2FibGVkKCksXG4gICAgICAgIHNpemU6IHN0b3JlLnN0YXRlcy50YWJsZVNpemUudmFsdWUsXG4gICAgICAgIGluZGV0ZXJtaW5hdGU6IHN0b3JlLnN0YXRlcy5zZWxlY3Rpb24udmFsdWUubGVuZ3RoID4gMCAmJiAhc3RvcmUuc3RhdGVzLmlzQWxsU2VsZWN0ZWQudmFsdWUsXG4gICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiBzdG9yZS50b2dnbGVBbGxTZWxlY3Rpb24sXG4gICAgICAgIG1vZGVsVmFsdWU6IHN0b3JlLnN0YXRlcy5pc0FsbFNlbGVjdGVkLnZhbHVlXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlbmRlckNlbGwoe1xuICAgICAgcm93LFxuICAgICAgY29sdW1uLFxuICAgICAgc3RvcmUsXG4gICAgICAkaW5kZXhcbiAgICB9KSB7XG4gICAgICByZXR1cm4gaChFbENoZWNrYm94LCB7XG4gICAgICAgIGRpc2FibGVkOiBjb2x1bW4uc2VsZWN0YWJsZSA/ICFjb2x1bW4uc2VsZWN0YWJsZS5jYWxsKG51bGwsIHJvdywgJGluZGV4KSA6IGZhbHNlLFxuICAgICAgICBzaXplOiBzdG9yZS5zdGF0ZXMudGFibGVTaXplLnZhbHVlLFxuICAgICAgICBvbkNoYW5nZTogKCkgPT4ge1xuICAgICAgICAgIHN0b3JlLmNvbW1pdChcInJvd1NlbGVjdGVkQ2hhbmdlZFwiLCByb3cpO1xuICAgICAgICB9LFxuICAgICAgICBvbkNsaWNrOiAoZXZlbnQpID0+IGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpLFxuICAgICAgICBtb2RlbFZhbHVlOiBzdG9yZS5pc1NlbGVjdGVkKHJvdylcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc29ydGFibGU6IGZhbHNlLFxuICAgIHJlc2l6YWJsZTogZmFsc2VcbiAgfSxcbiAgaW5kZXg6IHtcbiAgICByZW5kZXJIZWFkZXIoeyBjb2x1bW4gfSkge1xuICAgICAgcmV0dXJuIGNvbHVtbi5sYWJlbCB8fCBcIiNcIjtcbiAgICB9LFxuICAgIHJlbmRlckNlbGwoe1xuICAgICAgY29sdW1uLFxuICAgICAgJGluZGV4XG4gICAgfSkge1xuICAgICAgbGV0IGkgPSAkaW5kZXggKyAxO1xuICAgICAgY29uc3QgaW5kZXggPSBjb2x1bW4uaW5kZXg7XG4gICAgICBpZiAodHlwZW9mIGluZGV4ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGkgPSAkaW5kZXggKyBpbmRleDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGluZGV4ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgaSA9IGluZGV4KCRpbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaChcImRpdlwiLCB7fSwgW2ldKTtcbiAgICB9LFxuICAgIHNvcnRhYmxlOiBmYWxzZVxuICB9LFxuICBleHBhbmQ6IHtcbiAgICByZW5kZXJIZWFkZXIoeyBjb2x1bW4gfSkge1xuICAgICAgcmV0dXJuIGNvbHVtbi5sYWJlbCB8fCBcIlwiO1xuICAgIH0sXG4gICAgcmVuZGVyQ2VsbCh7XG4gICAgICByb3csXG4gICAgICBzdG9yZSxcbiAgICAgIGV4cGFuZGVkXG4gICAgfSkge1xuICAgICAgY29uc3QgeyBucyB9ID0gc3RvcmU7XG4gICAgICBjb25zdCBjbGFzc2VzID0gW25zLmUoXCJleHBhbmQtaWNvblwiKV07XG4gICAgICBpZiAoZXhwYW5kZWQpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKG5zLmVtKFwiZXhwYW5kLWljb25cIiwgXCJleHBhbmRlZFwiKSk7XG4gICAgICB9XG4gICAgICBjb25zdCBjYWxsYmFjayA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgc3RvcmUudG9nZ2xlUm93RXhwYW5zaW9uKHJvdyk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGgoXCJkaXZcIiwge1xuICAgICAgICBjbGFzczogY2xhc3NlcyxcbiAgICAgICAgb25DbGljazogY2FsbGJhY2tcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4ge1xuICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBoKEVsSWNvbiwgbnVsbCwge1xuICAgICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtoKEFycm93UmlnaHQpXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHNvcnRhYmxlOiBmYWxzZSxcbiAgICByZXNpemFibGU6IGZhbHNlXG4gIH1cbn07XG5mdW5jdGlvbiBkZWZhdWx0UmVuZGVyQ2VsbCh7XG4gIHJvdyxcbiAgY29sdW1uLFxuICAkaW5kZXhcbn0pIHtcbiAgdmFyIF9hO1xuICBjb25zdCBwcm9wZXJ0eSA9IGNvbHVtbi5wcm9wZXJ0eTtcbiAgY29uc3QgdmFsdWUgPSBwcm9wZXJ0eSAmJiBnZXRQcm9wKHJvdywgcHJvcGVydHkpLnZhbHVlO1xuICBpZiAoY29sdW1uICYmIGNvbHVtbi5mb3JtYXR0ZXIpIHtcbiAgICByZXR1cm4gY29sdW1uLmZvcm1hdHRlcihyb3csIGNvbHVtbiwgdmFsdWUsICRpbmRleCk7XG4gIH1cbiAgcmV0dXJuICgoX2EgPSB2YWx1ZSA9PSBudWxsID8gdm9pZCAwIDogdmFsdWUudG9TdHJpbmcpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKHZhbHVlKSkgfHwgXCJcIjtcbn1cbmZ1bmN0aW9uIHRyZWVDZWxsUHJlZml4KHtcbiAgcm93LFxuICB0cmVlTm9kZSxcbiAgc3RvcmVcbn0sIGNyZWF0ZVBsYWNlaG9sZGVyID0gZmFsc2UpIHtcbiAgY29uc3QgeyBucyB9ID0gc3RvcmU7XG4gIGlmICghdHJlZU5vZGUpIHtcbiAgICBpZiAoY3JlYXRlUGxhY2Vob2xkZXIpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIGgoXCJzcGFuXCIsIHtcbiAgICAgICAgICBjbGFzczogbnMuZShcInBsYWNlaG9sZGVyXCIpXG4gICAgICAgIH0pXG4gICAgICBdO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBlbGUgPSBbXTtcbiAgY29uc3QgY2FsbGJhY2sgPSBmdW5jdGlvbihlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAodHJlZU5vZGUubG9hZGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdG9yZS5sb2FkT3JUb2dnbGUocm93KTtcbiAgfTtcbiAgaWYgKHRyZWVOb2RlLmluZGVudCkge1xuICAgIGVsZS5wdXNoKGgoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzOiBucy5lKFwiaW5kZW50XCIpLFxuICAgICAgc3R5bGU6IHsgXCJwYWRkaW5nLWxlZnRcIjogYCR7dHJlZU5vZGUuaW5kZW50fXB4YCB9XG4gICAgfSkpO1xuICB9XG4gIGlmICh0eXBlb2YgdHJlZU5vZGUuZXhwYW5kZWQgPT09IFwiYm9vbGVhblwiICYmICF0cmVlTm9kZS5ub0xhenlDaGlsZHJlbikge1xuICAgIGNvbnN0IGV4cGFuZENsYXNzZXMgPSBbXG4gICAgICBucy5lKFwiZXhwYW5kLWljb25cIiksXG4gICAgICB0cmVlTm9kZS5leHBhbmRlZCA/IG5zLmVtKFwiZXhwYW5kLWljb25cIiwgXCJleHBhbmRlZFwiKSA6IFwiXCJcbiAgICBdO1xuICAgIGxldCBpY29uID0gQXJyb3dSaWdodDtcbiAgICBpZiAodHJlZU5vZGUubG9hZGluZykge1xuICAgICAgaWNvbiA9IExvYWRpbmc7XG4gICAgfVxuICAgIGVsZS5wdXNoKGgoXCJkaXZcIiwge1xuICAgICAgY2xhc3M6IGV4cGFuZENsYXNzZXMsXG4gICAgICBvbkNsaWNrOiBjYWxsYmFja1xuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBoKEVsSWNvbiwgeyBjbGFzczogeyBbbnMuaXMoXCJsb2FkaW5nXCIpXTogdHJlZU5vZGUubG9hZGluZyB9IH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtoKGljb24pXVxuICAgICAgICAgIH0pXG4gICAgICAgIF07XG4gICAgICB9XG4gICAgfSkpO1xuICB9IGVsc2Uge1xuICAgIGVsZS5wdXNoKGgoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzOiBucy5lKFwicGxhY2Vob2xkZXJcIilcbiAgICB9KSk7XG4gIH1cbiAgcmV0dXJuIGVsZTtcbn1cblxuZXhwb3J0IHsgY2VsbEZvcmNlZCwgY2VsbFN0YXJ0cywgZGVmYXVsdFJlbmRlckNlbGwsIGdldERlZmF1bHRDbGFzc05hbWUsIHRyZWVDZWxsUHJlZml4IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcubWpzLm1hcFxuIiwiaW1wb3J0IHsgZ2V0Q3VycmVudEluc3RhbmNlLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBwYXJzZVdpZHRoLCBwYXJzZU1pbldpZHRoIH0gZnJvbSAnLi4vdXRpbC5tanMnO1xuaW1wb3J0IHsgaGFzT3duIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5mdW5jdGlvbiBnZXRBbGxBbGlhc2VzKHByb3BzLCBhbGlhc2VzKSB7XG4gIHJldHVybiBwcm9wcy5yZWR1Y2UoKHByZXYsIGN1cikgPT4ge1xuICAgIHByZXZbY3VyXSA9IGN1cjtcbiAgICByZXR1cm4gcHJldjtcbiAgfSwgYWxpYXNlcyk7XG59XG5mdW5jdGlvbiB1c2VXYXRjaGVyKG93bmVyLCBwcm9wc18pIHtcbiAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgY29uc3QgcmVnaXN0ZXJDb21wbGV4V2F0Y2hlcnMgPSAoKSA9PiB7XG4gICAgY29uc3QgcHJvcHMgPSBbXCJmaXhlZFwiXTtcbiAgICBjb25zdCBhbGlhc2VzID0ge1xuICAgICAgcmVhbFdpZHRoOiBcIndpZHRoXCIsXG4gICAgICByZWFsTWluV2lkdGg6IFwibWluV2lkdGhcIlxuICAgIH07XG4gICAgY29uc3QgYWxsQWxpYXNlcyA9IGdldEFsbEFsaWFzZXMocHJvcHMsIGFsaWFzZXMpO1xuICAgIE9iamVjdC5rZXlzKGFsbEFsaWFzZXMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgY29uc3QgY29sdW1uS2V5ID0gYWxpYXNlc1trZXldO1xuICAgICAgaWYgKGhhc093bihwcm9wc18sIGNvbHVtbktleSkpIHtcbiAgICAgICAgd2F0Y2goKCkgPT4gcHJvcHNfW2NvbHVtbktleV0sIChuZXdWYWwpID0+IHtcbiAgICAgICAgICBsZXQgdmFsdWUgPSBuZXdWYWw7XG4gICAgICAgICAgaWYgKGNvbHVtbktleSA9PT0gXCJ3aWR0aFwiICYmIGtleSA9PT0gXCJyZWFsV2lkdGhcIikge1xuICAgICAgICAgICAgdmFsdWUgPSBwYXJzZVdpZHRoKG5ld1ZhbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb2x1bW5LZXkgPT09IFwibWluV2lkdGhcIiAmJiBrZXkgPT09IFwicmVhbE1pbldpZHRoXCIpIHtcbiAgICAgICAgICAgIHZhbHVlID0gcGFyc2VNaW5XaWR0aChuZXdWYWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbnN0YW5jZS5jb2x1bW5Db25maWcudmFsdWVbY29sdW1uS2V5XSA9IHZhbHVlO1xuICAgICAgICAgIGluc3RhbmNlLmNvbHVtbkNvbmZpZy52YWx1ZVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgY29uc3QgdXBkYXRlQ29sdW1ucyA9IGNvbHVtbktleSA9PT0gXCJmaXhlZFwiO1xuICAgICAgICAgIG93bmVyLnZhbHVlLnN0b3JlLnNjaGVkdWxlTGF5b3V0KHVwZGF0ZUNvbHVtbnMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgcmVnaXN0ZXJOb3JtYWxXYXRjaGVycyA9ICgpID0+IHtcbiAgICBjb25zdCBwcm9wcyA9IFtcbiAgICAgIFwibGFiZWxcIixcbiAgICAgIFwiZmlsdGVyc1wiLFxuICAgICAgXCJmaWx0ZXJNdWx0aXBsZVwiLFxuICAgICAgXCJzb3J0YWJsZVwiLFxuICAgICAgXCJpbmRleFwiLFxuICAgICAgXCJmb3JtYXR0ZXJcIixcbiAgICAgIFwiY2xhc3NOYW1lXCIsXG4gICAgICBcImxhYmVsQ2xhc3NOYW1lXCIsXG4gICAgICBcInNob3dPdmVyZmxvd1Rvb2x0aXBcIlxuICAgIF07XG4gICAgY29uc3QgYWxpYXNlcyA9IHtcbiAgICAgIHByb3BlcnR5OiBcInByb3BcIixcbiAgICAgIGFsaWduOiBcInJlYWxBbGlnblwiLFxuICAgICAgaGVhZGVyQWxpZ246IFwicmVhbEhlYWRlckFsaWduXCJcbiAgICB9O1xuICAgIGNvbnN0IGFsbEFsaWFzZXMgPSBnZXRBbGxBbGlhc2VzKHByb3BzLCBhbGlhc2VzKTtcbiAgICBPYmplY3Qua2V5cyhhbGxBbGlhc2VzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGNvbnN0IGNvbHVtbktleSA9IGFsaWFzZXNba2V5XTtcbiAgICAgIGlmIChoYXNPd24ocHJvcHNfLCBjb2x1bW5LZXkpKSB7XG4gICAgICAgIHdhdGNoKCgpID0+IHByb3BzX1tjb2x1bW5LZXldLCAobmV3VmFsKSA9PiB7XG4gICAgICAgICAgaW5zdGFuY2UuY29sdW1uQ29uZmlnLnZhbHVlW2tleV0gPSBuZXdWYWw7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICByZXR1cm4ge1xuICAgIHJlZ2lzdGVyQ29tcGxleFdhdGNoZXJzLFxuICAgIHJlZ2lzdGVyTm9ybWFsV2F0Y2hlcnNcbiAgfTtcbn1cblxuZXhwb3J0IHsgdXNlV2F0Y2hlciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13YXRjaGVyLWhlbHBlci5tanMubWFwXG4iLCJpbXBvcnQgeyBnZXRDdXJyZW50SW5zdGFuY2UsIHJlZiwgd2F0Y2hFZmZlY3QsIGNvbXB1dGVkLCB1bnJlZiwgaCwgQ29tbWVudCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL2hvb2tzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBjZWxsRm9yY2VkLCBnZXREZWZhdWx0Q2xhc3NOYW1lLCBkZWZhdWx0UmVuZGVyQ2VsbCwgdHJlZUNlbGxQcmVmaXggfSBmcm9tICcuLi9jb25maWcubWpzJztcbmltcG9ydCB7IHBhcnNlV2lkdGgsIHBhcnNlTWluV2lkdGggfSBmcm9tICcuLi91dGlsLm1qcyc7XG5pbXBvcnQgeyB1c2VOYW1lc3BhY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2UtbmFtZXNwYWNlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBkZWJ1Z1dhcm4gfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9lcnJvci5tanMnO1xuXG5mdW5jdGlvbiB1c2VSZW5kZXIocHJvcHMsIHNsb3RzLCBvd25lcikge1xuICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBjb25zdCBjb2x1bW5JZCA9IHJlZihcIlwiKTtcbiAgY29uc3QgaXNTdWJDb2x1bW4gPSByZWYoZmFsc2UpO1xuICBjb25zdCByZWFsQWxpZ24gPSByZWYoKTtcbiAgY29uc3QgcmVhbEhlYWRlckFsaWduID0gcmVmKCk7XG4gIGNvbnN0IG5zID0gdXNlTmFtZXNwYWNlKFwidGFibGVcIik7XG4gIHdhdGNoRWZmZWN0KCgpID0+IHtcbiAgICByZWFsQWxpZ24udmFsdWUgPSBwcm9wcy5hbGlnbiA/IGBpcy0ke3Byb3BzLmFsaWdufWAgOiBudWxsO1xuICAgIHJlYWxBbGlnbi52YWx1ZTtcbiAgfSk7XG4gIHdhdGNoRWZmZWN0KCgpID0+IHtcbiAgICByZWFsSGVhZGVyQWxpZ24udmFsdWUgPSBwcm9wcy5oZWFkZXJBbGlnbiA/IGBpcy0ke3Byb3BzLmhlYWRlckFsaWdufWAgOiByZWFsQWxpZ24udmFsdWU7XG4gICAgcmVhbEhlYWRlckFsaWduLnZhbHVlO1xuICB9KTtcbiAgY29uc3QgY29sdW1uT3JUYWJsZVBhcmVudCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBsZXQgcGFyZW50ID0gaW5zdGFuY2Uudm5vZGUudlBhcmVudCB8fCBpbnN0YW5jZS5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCAmJiAhcGFyZW50LnRhYmxlSWQgJiYgIXBhcmVudC5jb2x1bW5JZCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LnZub2RlLnZQYXJlbnQgfHwgcGFyZW50LnBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIHBhcmVudDtcbiAgfSk7XG4gIGNvbnN0IGhhc1RyZWVDb2x1bW4gPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgeyBzdG9yZSB9ID0gaW5zdGFuY2UucGFyZW50O1xuICAgIGlmICghc3RvcmUpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgeyB0cmVlRGF0YSB9ID0gc3RvcmUuc3RhdGVzO1xuICAgIGNvbnN0IHRyZWVEYXRhVmFsdWUgPSB0cmVlRGF0YS52YWx1ZTtcbiAgICByZXR1cm4gdHJlZURhdGFWYWx1ZSAmJiBPYmplY3Qua2V5cyh0cmVlRGF0YVZhbHVlKS5sZW5ndGggPiAwO1xuICB9KTtcbiAgY29uc3QgcmVhbFdpZHRoID0gcmVmKHBhcnNlV2lkdGgocHJvcHMud2lkdGgpKTtcbiAgY29uc3QgcmVhbE1pbldpZHRoID0gcmVmKHBhcnNlTWluV2lkdGgocHJvcHMubWluV2lkdGgpKTtcbiAgY29uc3Qgc2V0Q29sdW1uV2lkdGggPSAoY29sdW1uKSA9PiB7XG4gICAgaWYgKHJlYWxXaWR0aC52YWx1ZSlcbiAgICAgIGNvbHVtbi53aWR0aCA9IHJlYWxXaWR0aC52YWx1ZTtcbiAgICBpZiAocmVhbE1pbldpZHRoLnZhbHVlKSB7XG4gICAgICBjb2x1bW4ubWluV2lkdGggPSByZWFsTWluV2lkdGgudmFsdWU7XG4gICAgfVxuICAgIGlmICghcmVhbFdpZHRoLnZhbHVlICYmIHJlYWxNaW5XaWR0aC52YWx1ZSkge1xuICAgICAgY29sdW1uLndpZHRoID0gdm9pZCAwO1xuICAgIH1cbiAgICBpZiAoIWNvbHVtbi5taW5XaWR0aCkge1xuICAgICAgY29sdW1uLm1pbldpZHRoID0gODA7XG4gICAgfVxuICAgIGNvbHVtbi5yZWFsV2lkdGggPSBOdW1iZXIoY29sdW1uLndpZHRoID09PSB2b2lkIDAgPyBjb2x1bW4ubWluV2lkdGggOiBjb2x1bW4ud2lkdGgpO1xuICAgIHJldHVybiBjb2x1bW47XG4gIH07XG4gIGNvbnN0IHNldENvbHVtbkZvcmNlZFByb3BzID0gKGNvbHVtbikgPT4ge1xuICAgIGNvbnN0IHR5cGUgPSBjb2x1bW4udHlwZTtcbiAgICBjb25zdCBzb3VyY2UgPSBjZWxsRm9yY2VkW3R5cGVdIHx8IHt9O1xuICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBzb3VyY2VbcHJvcF07XG4gICAgICBpZiAocHJvcCAhPT0gXCJjbGFzc05hbWVcIiAmJiB2YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGNvbHVtbltwcm9wXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGNsYXNzTmFtZSA9IGdldERlZmF1bHRDbGFzc05hbWUodHlwZSk7XG4gICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgY29uc3QgZm9yY2VDbGFzcyA9IGAke3VucmVmKG5zLm5hbWVzcGFjZSl9LSR7Y2xhc3NOYW1lfWA7XG4gICAgICBjb2x1bW4uY2xhc3NOYW1lID0gY29sdW1uLmNsYXNzTmFtZSA/IGAke2NvbHVtbi5jbGFzc05hbWV9ICR7Zm9yY2VDbGFzc31gIDogZm9yY2VDbGFzcztcbiAgICB9XG4gICAgcmV0dXJuIGNvbHVtbjtcbiAgfTtcbiAgY29uc3QgY2hlY2tTdWJDb2x1bW4gPSAoY2hpbGRyZW4pID0+IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiBjaGVjayhjaGlsZCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGVjayhjaGlsZHJlbik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNoZWNrKGl0ZW0pIHtcbiAgICAgIHZhciBfYTtcbiAgICAgIGlmICgoKF9hID0gaXRlbSA9PSBudWxsID8gdm9pZCAwIDogaXRlbS50eXBlKSA9PSBudWxsID8gdm9pZCAwIDogX2EubmFtZSkgPT09IFwiRWxUYWJsZUNvbHVtblwiKSB7XG4gICAgICAgIGl0ZW0udlBhcmVudCA9IGluc3RhbmNlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3Qgc2V0Q29sdW1uUmVuZGVycyA9IChjb2x1bW4pID0+IHtcbiAgICBpZiAocHJvcHMucmVuZGVySGVhZGVyKSB7XG4gICAgICBkZWJ1Z1dhcm4oXCJUYWJsZUNvbHVtblwiLCBcIkNvbXBhcmluZyB0byByZW5kZXItaGVhZGVyLCBzY29wZWQtc2xvdCBoZWFkZXIgaXMgZWFzaWVyIHRvIHVzZS4gV2UgcmVjb21tZW5kIHVzZXJzIHRvIHVzZSBzY29wZWQtc2xvdCBoZWFkZXIuXCIpO1xuICAgIH0gZWxzZSBpZiAoY29sdW1uLnR5cGUgIT09IFwic2VsZWN0aW9uXCIpIHtcbiAgICAgIGNvbHVtbi5yZW5kZXJIZWFkZXIgPSAoc2NvcGUpID0+IHtcbiAgICAgICAgaW5zdGFuY2UuY29sdW1uQ29uZmlnLnZhbHVlW1wibGFiZWxcIl07XG4gICAgICAgIGNvbnN0IHJlbmRlckhlYWRlciA9IHNsb3RzLmhlYWRlcjtcbiAgICAgICAgcmV0dXJuIHJlbmRlckhlYWRlciA/IHJlbmRlckhlYWRlcihzY29wZSkgOiBjb2x1bW4ubGFiZWw7XG4gICAgICB9O1xuICAgIH1cbiAgICBsZXQgb3JpZ2luUmVuZGVyQ2VsbCA9IGNvbHVtbi5yZW5kZXJDZWxsO1xuICAgIGlmIChjb2x1bW4udHlwZSA9PT0gXCJleHBhbmRcIikge1xuICAgICAgY29sdW1uLnJlbmRlckNlbGwgPSAoZGF0YSkgPT4gaChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzOiBcImNlbGxcIlxuICAgICAgfSwgW29yaWdpblJlbmRlckNlbGwoZGF0YSldKTtcbiAgICAgIG93bmVyLnZhbHVlLnJlbmRlckV4cGFuZGVkID0gKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIHNsb3RzLmRlZmF1bHQgPyBzbG90cy5kZWZhdWx0KGRhdGEpIDogc2xvdHMuZGVmYXVsdDtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIG9yaWdpblJlbmRlckNlbGwgPSBvcmlnaW5SZW5kZXJDZWxsIHx8IGRlZmF1bHRSZW5kZXJDZWxsO1xuICAgICAgY29sdW1uLnJlbmRlckNlbGwgPSAoZGF0YSkgPT4ge1xuICAgICAgICBsZXQgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgICBpZiAoc2xvdHMuZGVmYXVsdCkge1xuICAgICAgICAgIGNvbnN0IHZub2RlcyA9IHNsb3RzLmRlZmF1bHQoZGF0YSk7XG4gICAgICAgICAgY2hpbGRyZW4gPSB2bm9kZXMuc29tZSgodikgPT4gdi50eXBlICE9PSBDb21tZW50KSA/IHZub2RlcyA6IG9yaWdpblJlbmRlckNlbGwoZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hpbGRyZW4gPSBvcmlnaW5SZW5kZXJDZWxsKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgY29sdW1ucyB9ID0gb3duZXIudmFsdWUuc3RvcmUuc3RhdGVzO1xuICAgICAgICBjb25zdCBmaXJzdFVzZXJDb2x1bW5JbmRleCA9IGNvbHVtbnMudmFsdWUuZmluZEluZGV4KChpdGVtKSA9PiBpdGVtLnR5cGUgPT09IFwiZGVmYXVsdFwiKTtcbiAgICAgICAgY29uc3Qgc2hvdWxkQ3JlYXRlUGxhY2Vob2xkZXIgPSBoYXNUcmVlQ29sdW1uLnZhbHVlICYmIGRhdGEuY2VsbEluZGV4ID09PSBmaXJzdFVzZXJDb2x1bW5JbmRleDtcbiAgICAgICAgY29uc3QgcHJlZml4ID0gdHJlZUNlbGxQcmVmaXgoZGF0YSwgc2hvdWxkQ3JlYXRlUGxhY2Vob2xkZXIpO1xuICAgICAgICBjb25zdCBwcm9wczIgPSB7XG4gICAgICAgICAgY2xhc3M6IFwiY2VsbFwiLFxuICAgICAgICAgIHN0eWxlOiB7fVxuICAgICAgICB9O1xuICAgICAgICBpZiAoY29sdW1uLnNob3dPdmVyZmxvd1Rvb2x0aXApIHtcbiAgICAgICAgICBwcm9wczIuY2xhc3MgPSBgJHtwcm9wczIuY2xhc3N9ICR7dW5yZWYobnMubmFtZXNwYWNlKX0tdG9vbHRpcGA7XG4gICAgICAgICAgcHJvcHMyLnN0eWxlID0ge1xuICAgICAgICAgICAgd2lkdGg6IGAkeyhkYXRhLmNvbHVtbi5yZWFsV2lkdGggfHwgTnVtYmVyKGRhdGEuY29sdW1uLndpZHRoKSkgLSAxfXB4YFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2hlY2tTdWJDb2x1bW4oY2hpbGRyZW4pO1xuICAgICAgICByZXR1cm4gaChcImRpdlwiLCBwcm9wczIsIFtwcmVmaXgsIGNoaWxkcmVuXSk7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gY29sdW1uO1xuICB9O1xuICBjb25zdCBnZXRQcm9wc0RhdGEgPSAoLi4ucHJvcHNLZXkpID0+IHtcbiAgICByZXR1cm4gcHJvcHNLZXkucmVkdWNlKChwcmV2LCBjdXIpID0+IHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGN1cikpIHtcbiAgICAgICAgY3VyLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgIHByZXZba2V5XSA9IHByb3BzW2tleV07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByZXY7XG4gICAgfSwge30pO1xuICB9O1xuICBjb25zdCBnZXRDb2x1bW5FbEluZGV4ID0gKGNoaWxkcmVuLCBjaGlsZCkgPT4ge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGNoaWxkcmVuLCBjaGlsZCk7XG4gIH07XG4gIGNvbnN0IHVwZGF0ZUNvbHVtbk9yZGVyID0gKCkgPT4ge1xuICAgIG93bmVyLnZhbHVlLnN0b3JlLmNvbW1pdChcInVwZGF0ZUNvbHVtbk9yZGVyXCIsIGluc3RhbmNlLmNvbHVtbkNvbmZpZy52YWx1ZSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgY29sdW1uSWQsXG4gICAgcmVhbEFsaWduLFxuICAgIGlzU3ViQ29sdW1uLFxuICAgIHJlYWxIZWFkZXJBbGlnbixcbiAgICBjb2x1bW5PclRhYmxlUGFyZW50LFxuICAgIHNldENvbHVtbldpZHRoLFxuICAgIHNldENvbHVtbkZvcmNlZFByb3BzLFxuICAgIHNldENvbHVtblJlbmRlcnMsXG4gICAgZ2V0UHJvcHNEYXRhLFxuICAgIGdldENvbHVtbkVsSW5kZXgsXG4gICAgdXBkYXRlQ29sdW1uT3JkZXJcbiAgfTtcbn1cblxuZXhwb3J0IHsgdXNlUmVuZGVyIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlbmRlci1oZWxwZXIubWpzLm1hcFxuIiwidmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgdHlwZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiBcImRlZmF1bHRcIlxuICB9LFxuICBsYWJlbDogU3RyaW5nLFxuICBjbGFzc05hbWU6IFN0cmluZyxcbiAgbGFiZWxDbGFzc05hbWU6IFN0cmluZyxcbiAgcHJvcGVydHk6IFN0cmluZyxcbiAgcHJvcDogU3RyaW5nLFxuICB3aWR0aDoge1xuICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgZGVmYXVsdDogXCJcIlxuICB9LFxuICBtaW5XaWR0aDoge1xuICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgZGVmYXVsdDogXCJcIlxuICB9LFxuICByZW5kZXJIZWFkZXI6IEZ1bmN0aW9uLFxuICBzb3J0YWJsZToge1xuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH0sXG4gIHNvcnRNZXRob2Q6IEZ1bmN0aW9uLFxuICBzb3J0Qnk6IFtTdHJpbmcsIEZ1bmN0aW9uLCBBcnJheV0sXG4gIHJlc2l6YWJsZToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBjb2x1bW5LZXk6IFN0cmluZyxcbiAgYWxpZ246IFN0cmluZyxcbiAgaGVhZGVyQWxpZ246IFN0cmluZyxcbiAgc2hvd092ZXJmbG93VG9vbHRpcDogW0Jvb2xlYW4sIE9iamVjdF0sXG4gIGZpeGVkOiBbQm9vbGVhbiwgU3RyaW5nXSxcbiAgZm9ybWF0dGVyOiBGdW5jdGlvbixcbiAgc2VsZWN0YWJsZTogRnVuY3Rpb24sXG4gIHJlc2VydmVTZWxlY3Rpb246IEJvb2xlYW4sXG4gIGZpbHRlck1ldGhvZDogRnVuY3Rpb24sXG4gIGZpbHRlcmVkVmFsdWU6IEFycmF5LFxuICBmaWx0ZXJzOiBBcnJheSxcbiAgZmlsdGVyUGxhY2VtZW50OiBTdHJpbmcsXG4gIGZpbHRlck11bHRpcGxlOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIGluZGV4OiBbTnVtYmVyLCBGdW5jdGlvbl0sXG4gIHNvcnRPcmRlcnM6IHtcbiAgICB0eXBlOiBBcnJheSxcbiAgICBkZWZhdWx0OiAoKSA9PiB7XG4gICAgICByZXR1cm4gW1wiYXNjZW5kaW5nXCIsIFwiZGVzY2VuZGluZ1wiLCBudWxsXTtcbiAgICB9LFxuICAgIHZhbGlkYXRvcjogKHZhbCkgPT4ge1xuICAgICAgcmV0dXJuIHZhbC5ldmVyeSgob3JkZXIpID0+IFtcImFzY2VuZGluZ1wiLCBcImRlc2NlbmRpbmdcIiwgbnVsbF0uaW5jbHVkZXMob3JkZXIpKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCB7IGRlZmF1bHRQcm9wcyBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0cy5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGdldEN1cnJlbnRJbnN0YW5jZSwgcmVmLCBjb21wdXRlZCwgb25CZWZvcmVNb3VudCwgb25Nb3VudGVkLCBvbkJlZm9yZVVubW91bnQsIEZyYWdtZW50LCBoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IEVsQ2hlY2tib3ggfSBmcm9tICcuLi8uLi8uLi9jaGVja2JveC9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi91dGlscy9pbmRleC5tanMnO1xuaW1wb3J0IHsgY2VsbFN0YXJ0cyB9IGZyb20gJy4uL2NvbmZpZy5tanMnO1xuaW1wb3J0IHsgbWVyZ2VPcHRpb25zLCBjb21wb3NlIH0gZnJvbSAnLi4vdXRpbC5tanMnO1xuaW1wb3J0IHVzZVdhdGNoZXIgZnJvbSAnLi93YXRjaGVyLWhlbHBlci5tanMnO1xuaW1wb3J0IHVzZVJlbmRlciBmcm9tICcuL3JlbmRlci1oZWxwZXIubWpzJztcbmltcG9ydCBkZWZhdWx0UHJvcHMgZnJvbSAnLi9kZWZhdWx0cy5tanMnO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmxldCBjb2x1bW5JZFNlZWQgPSAxO1xudmFyIEVsVGFibGVDb2x1bW4gPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkVsVGFibGVDb2x1bW5cIixcbiAgY29tcG9uZW50czoge1xuICAgIEVsQ2hlY2tib3hcbiAgfSxcbiAgcHJvcHM6IGRlZmF1bHRQcm9wcyxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xuICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgY29uc3QgY29sdW1uQ29uZmlnID0gcmVmKHt9KTtcbiAgICBjb25zdCBvd25lciA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGxldCBwYXJlbnQyID0gaW5zdGFuY2UucGFyZW50O1xuICAgICAgd2hpbGUgKHBhcmVudDIgJiYgIXBhcmVudDIudGFibGVJZCkge1xuICAgICAgICBwYXJlbnQyID0gcGFyZW50Mi5wYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyZW50MjtcbiAgICB9KTtcbiAgICBjb25zdCB7IHJlZ2lzdGVyTm9ybWFsV2F0Y2hlcnMsIHJlZ2lzdGVyQ29tcGxleFdhdGNoZXJzIH0gPSB1c2VXYXRjaGVyKG93bmVyLCBwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgY29sdW1uSWQsXG4gICAgICBpc1N1YkNvbHVtbixcbiAgICAgIHJlYWxIZWFkZXJBbGlnbixcbiAgICAgIGNvbHVtbk9yVGFibGVQYXJlbnQsXG4gICAgICBzZXRDb2x1bW5XaWR0aCxcbiAgICAgIHNldENvbHVtbkZvcmNlZFByb3BzLFxuICAgICAgc2V0Q29sdW1uUmVuZGVycyxcbiAgICAgIGdldFByb3BzRGF0YSxcbiAgICAgIGdldENvbHVtbkVsSW5kZXgsXG4gICAgICByZWFsQWxpZ24sXG4gICAgICB1cGRhdGVDb2x1bW5PcmRlclxuICAgIH0gPSB1c2VSZW5kZXIocHJvcHMsIHNsb3RzLCBvd25lcik7XG4gICAgY29uc3QgcGFyZW50ID0gY29sdW1uT3JUYWJsZVBhcmVudC52YWx1ZTtcbiAgICBjb2x1bW5JZC52YWx1ZSA9IGAke3BhcmVudC50YWJsZUlkIHx8IHBhcmVudC5jb2x1bW5JZH1fY29sdW1uXyR7Y29sdW1uSWRTZWVkKyt9YDtcbiAgICBvbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgICAgIGlzU3ViQ29sdW1uLnZhbHVlID0gb3duZXIudmFsdWUgIT09IHBhcmVudDtcbiAgICAgIGNvbnN0IHR5cGUgPSBwcm9wcy50eXBlIHx8IFwiZGVmYXVsdFwiO1xuICAgICAgY29uc3Qgc29ydGFibGUgPSBwcm9wcy5zb3J0YWJsZSA9PT0gXCJcIiA/IHRydWUgOiBwcm9wcy5zb3J0YWJsZTtcbiAgICAgIGNvbnN0IGRlZmF1bHRzID0ge1xuICAgICAgICAuLi5jZWxsU3RhcnRzW3R5cGVdLFxuICAgICAgICBpZDogY29sdW1uSWQudmFsdWUsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHByb3BlcnR5OiBwcm9wcy5wcm9wIHx8IHByb3BzLnByb3BlcnR5LFxuICAgICAgICBhbGlnbjogcmVhbEFsaWduLFxuICAgICAgICBoZWFkZXJBbGlnbjogcmVhbEhlYWRlckFsaWduLFxuICAgICAgICBzaG93T3ZlcmZsb3dUb29sdGlwOiBwcm9wcy5zaG93T3ZlcmZsb3dUb29sdGlwLFxuICAgICAgICBmaWx0ZXJhYmxlOiBwcm9wcy5maWx0ZXJzIHx8IHByb3BzLmZpbHRlck1ldGhvZCxcbiAgICAgICAgZmlsdGVyZWRWYWx1ZTogW10sXG4gICAgICAgIGZpbHRlclBsYWNlbWVudDogXCJcIixcbiAgICAgICAgaXNDb2x1bW5Hcm91cDogZmFsc2UsXG4gICAgICAgIGlzU3ViQ29sdW1uOiBmYWxzZSxcbiAgICAgICAgZmlsdGVyT3BlbmVkOiBmYWxzZSxcbiAgICAgICAgc29ydGFibGUsXG4gICAgICAgIGluZGV4OiBwcm9wcy5pbmRleCxcbiAgICAgICAgcmF3Q29sdW1uS2V5OiBpbnN0YW5jZS52bm9kZS5rZXlcbiAgICAgIH07XG4gICAgICBjb25zdCBiYXNpY1Byb3BzID0gW1xuICAgICAgICBcImNvbHVtbktleVwiLFxuICAgICAgICBcImxhYmVsXCIsXG4gICAgICAgIFwiY2xhc3NOYW1lXCIsXG4gICAgICAgIFwibGFiZWxDbGFzc05hbWVcIixcbiAgICAgICAgXCJ0eXBlXCIsXG4gICAgICAgIFwicmVuZGVySGVhZGVyXCIsXG4gICAgICAgIFwiZm9ybWF0dGVyXCIsXG4gICAgICAgIFwiZml4ZWRcIixcbiAgICAgICAgXCJyZXNpemFibGVcIlxuICAgICAgXTtcbiAgICAgIGNvbnN0IHNvcnRQcm9wcyA9IFtcInNvcnRNZXRob2RcIiwgXCJzb3J0QnlcIiwgXCJzb3J0T3JkZXJzXCJdO1xuICAgICAgY29uc3Qgc2VsZWN0UHJvcHMgPSBbXCJzZWxlY3RhYmxlXCIsIFwicmVzZXJ2ZVNlbGVjdGlvblwiXTtcbiAgICAgIGNvbnN0IGZpbHRlclByb3BzID0gW1xuICAgICAgICBcImZpbHRlck1ldGhvZFwiLFxuICAgICAgICBcImZpbHRlcnNcIixcbiAgICAgICAgXCJmaWx0ZXJNdWx0aXBsZVwiLFxuICAgICAgICBcImZpbHRlck9wZW5lZFwiLFxuICAgICAgICBcImZpbHRlcmVkVmFsdWVcIixcbiAgICAgICAgXCJmaWx0ZXJQbGFjZW1lbnRcIlxuICAgICAgXTtcbiAgICAgIGxldCBjb2x1bW4gPSBnZXRQcm9wc0RhdGEoYmFzaWNQcm9wcywgc29ydFByb3BzLCBzZWxlY3RQcm9wcywgZmlsdGVyUHJvcHMpO1xuICAgICAgY29sdW1uID0gbWVyZ2VPcHRpb25zKGRlZmF1bHRzLCBjb2x1bW4pO1xuICAgICAgY29uc3QgY2hhaW5zID0gY29tcG9zZShzZXRDb2x1bW5SZW5kZXJzLCBzZXRDb2x1bW5XaWR0aCwgc2V0Q29sdW1uRm9yY2VkUHJvcHMpO1xuICAgICAgY29sdW1uID0gY2hhaW5zKGNvbHVtbik7XG4gICAgICBjb2x1bW5Db25maWcudmFsdWUgPSBjb2x1bW47XG4gICAgICByZWdpc3Rlck5vcm1hbFdhdGNoZXJzKCk7XG4gICAgICByZWdpc3RlckNvbXBsZXhXYXRjaGVycygpO1xuICAgIH0pO1xuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICBjb25zdCBwYXJlbnQyID0gY29sdW1uT3JUYWJsZVBhcmVudC52YWx1ZTtcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gaXNTdWJDb2x1bW4udmFsdWUgPyBwYXJlbnQyLnZub2RlLmVsLmNoaWxkcmVuIDogKF9hID0gcGFyZW50Mi5yZWZzLmhpZGRlbkNvbHVtbnMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jaGlsZHJlbjtcbiAgICAgIGNvbnN0IGdldENvbHVtbkluZGV4ID0gKCkgPT4gZ2V0Q29sdW1uRWxJbmRleChjaGlsZHJlbiB8fCBbXSwgaW5zdGFuY2Uudm5vZGUuZWwpO1xuICAgICAgY29sdW1uQ29uZmlnLnZhbHVlLmdldENvbHVtbkluZGV4ID0gZ2V0Q29sdW1uSW5kZXg7XG4gICAgICBjb25zdCBjb2x1bW5JbmRleCA9IGdldENvbHVtbkluZGV4KCk7XG4gICAgICBjb2x1bW5JbmRleCA+IC0xICYmIG93bmVyLnZhbHVlLnN0b3JlLmNvbW1pdChcImluc2VydENvbHVtblwiLCBjb2x1bW5Db25maWcudmFsdWUsIGlzU3ViQ29sdW1uLnZhbHVlID8gcGFyZW50Mi5jb2x1bW5Db25maWcudmFsdWUgOiBudWxsLCB1cGRhdGVDb2x1bW5PcmRlcik7XG4gICAgfSk7XG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgIG93bmVyLnZhbHVlLnN0b3JlLmNvbW1pdChcInJlbW92ZUNvbHVtblwiLCBjb2x1bW5Db25maWcudmFsdWUsIGlzU3ViQ29sdW1uLnZhbHVlID8gcGFyZW50LmNvbHVtbkNvbmZpZy52YWx1ZSA6IG51bGwsIHVwZGF0ZUNvbHVtbk9yZGVyKTtcbiAgICB9KTtcbiAgICBpbnN0YW5jZS5jb2x1bW5JZCA9IGNvbHVtbklkLnZhbHVlO1xuICAgIGluc3RhbmNlLmNvbHVtbkNvbmZpZyA9IGNvbHVtbkNvbmZpZztcbiAgICByZXR1cm47XG4gIH0sXG4gIHJlbmRlcigpIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVuZGVyRGVmYXVsdCA9IChfYiA9IChfYSA9IHRoaXMuJHNsb3RzKS5kZWZhdWx0KSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChfYSwge1xuICAgICAgICByb3c6IHt9LFxuICAgICAgICBjb2x1bW46IHt9LFxuICAgICAgICAkaW5kZXg6IC0xXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gW107XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZW5kZXJEZWZhdWx0KSkge1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkTm9kZSBvZiByZW5kZXJEZWZhdWx0KSB7XG4gICAgICAgICAgaWYgKCgoX2MgPSBjaGlsZE5vZGUudHlwZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLm5hbWUpID09PSBcIkVsVGFibGVDb2x1bW5cIiB8fCBjaGlsZE5vZGUuc2hhcGVGbGFnICYgMikge1xuICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZE5vZGUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGROb2RlLnR5cGUgPT09IEZyYWdtZW50ICYmIEFycmF5LmlzQXJyYXkoY2hpbGROb2RlLmNoaWxkcmVuKSkge1xuICAgICAgICAgICAgY2hpbGROb2RlLmNoaWxkcmVuLmZvckVhY2goKHZub2RlMikgPT4ge1xuICAgICAgICAgICAgICBpZiAoKHZub2RlMiA9PSBudWxsID8gdm9pZCAwIDogdm5vZGUyLnBhdGNoRmxhZykgIT09IDEwMjQgJiYgIWlzU3RyaW5nKHZub2RlMiA9PSBudWxsID8gdm9pZCAwIDogdm5vZGUyLmNoaWxkcmVuKSkge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2godm5vZGUyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCB2bm9kZSA9IGgoXCJkaXZcIiwgY2hpbGRyZW4pO1xuICAgICAgcmV0dXJuIHZub2RlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBoKFwiZGl2XCIsIFtdKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5leHBvcnQgeyBFbFRhYmxlQ29sdW1uIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCBUYWJsZSBmcm9tICcuL3NyYy90YWJsZS5tanMnO1xuaW1wb3J0ICcuL3NyYy90YWJsZUNvbHVtbi5tanMnO1xuaW1wb3J0IHsgd2l0aEluc3RhbGwsIHdpdGhOb29wSW5zdGFsbCB9IGZyb20gJy4uLy4uL3V0aWxzL3Z1ZS9pbnN0YWxsLm1qcyc7XG5pbXBvcnQgRWxUYWJsZUNvbHVtbiQxIGZyb20gJy4vc3JjL3RhYmxlLWNvbHVtbi9pbmRleC5tanMnO1xuXG5jb25zdCBFbFRhYmxlID0gd2l0aEluc3RhbGwoVGFibGUsIHtcbiAgVGFibGVDb2x1bW46IEVsVGFibGVDb2x1bW4kMVxufSk7XG5jb25zdCBFbFRhYmxlQ29sdW1uID0gd2l0aE5vb3BJbnN0YWxsKEVsVGFibGVDb2x1bW4kMSk7XG5cbmV4cG9ydCB7IEVsVGFibGUsIEVsVGFibGVDb2x1bW4sIEVsVGFibGUgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIiwiPHNjcmlwdCBsYW5nPVwidHN4XCI+XG5pbXBvcnQgeyBFbFRhYmxlLCBFbFRhYmxlQ29sdW1uLCBFbFBhZ2luYXRpb24gfSBmcm9tICdlbGVtZW50LXBsdXMnXG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIFByb3BUeXBlLCByZWYsIGNvbXB1dGVkLCB1bnJlZiwgd2F0Y2gsIG9uTW91bnRlZCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IHByb3BUeXBlcyB9IGZyb20gJ0AvdXRpbHMvcHJvcFR5cGVzJ1xuaW1wb3J0IHsgc2V0SW5kZXggfSBmcm9tICcuL2hlbHBlcidcbmltcG9ydCB7IGdldFNsb3QgfSBmcm9tICdAL3V0aWxzL3RzeEhlbHBlcidcbmltcG9ydCB0eXBlIHsgVGFibGVQcm9wcyB9IGZyb20gJy4vdHlwZXMnXG5pbXBvcnQgeyBzZXQgfSBmcm9tICdsb2Rhc2gtZXMnXG5pbXBvcnQgeyBUYWJsZUNvbHVtbiwgVGFibGVTbG90RGVmYXVsdCwgUGFnaW5hdGlvbiwgVGFibGVTZXRQcm9wc1R5cGUgfSBmcm9tICcuLi8uLi8uLi90eXBlcy90YWJsZSdcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ1RhYmxlJyxcbiAgcHJvcHM6IHtcbiAgICBwYWdlU2l6ZTogcHJvcFR5cGVzLm51bWJlci5kZWYoMTApLFxuICAgIGN1cnJlbnRQYWdlOiBwcm9wVHlwZXMubnVtYmVyLmRlZigxKSxcbiAgICAvLyDmmK/lkKblpJrpgIlcbiAgICBzZWxlY3Rpb246IHByb3BUeXBlcy5ib29sLmRlZih0cnVlKSxcbiAgICAvLyDmmK/lkKbmiYDmnInnmoTotoXlh7rpmpDol4/vvIzkvJjlhYjnuqfkvY7kuo5zY2hlbWHkuK3nmoRzaG93T3ZlcmZsb3dUb29sdGlwLFxuICAgIHNob3dPdmVyZmxvd1Rvb2x0aXA6IHByb3BUeXBlcy5ib29sLmRlZih0cnVlKSxcbiAgICAvLyDooajlpLRcbiAgICBjb2x1bW5zOiB7XG4gICAgICB0eXBlOiBBcnJheSBhcyBQcm9wVHlwZTxUYWJsZUNvbHVtbltdPixcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gICAgfSxcbiAgICAvLyDlsZXlvIDooYxcbiAgICBleHBhbmQ6IHByb3BUeXBlcy5ib29sLmRlZihmYWxzZSksXG4gICAgLy8g5piv5ZCm5bGV56S65YiG6aG1XG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgdHlwZTogT2JqZWN0IGFzIFByb3BUeXBlPFBhZ2luYXRpb24+LFxuICAgICAgZGVmYXVsdDogKCk6IFBhZ2luYXRpb24gfCB1bmRlZmluZWQgPT4gdW5kZWZpbmVkXG4gICAgfSxcbiAgICAvLyDku4Xlr7kgdHlwZT1zZWxlY3Rpb24g55qE5YiX5pyJ5pWI77yM57G75Z6L5Li6IEJvb2xlYW7vvIzkuLogdHJ1ZSDliJnkvJrlnKjmlbDmja7mm7TmlrDkuYvlkI7kv53nlZnkuYvliY3pgInkuK3nmoTmlbDmja7vvIjpnIDmjIflrpogcm93LWtlee+8iVxuICAgIHJlc2VydmVTZWxlY3Rpb246IHByb3BUeXBlcy5ib29sLmRlZihmYWxzZSksXG4gICAgLy8g5Yqg6L2954q25oCBXG4gICAgbG9hZGluZzogcHJvcFR5cGVzLmJvb2wuZGVmKGZhbHNlKSxcbiAgICAvLyDmmK/lkKblj6DliqDntKLlvJVcbiAgICByZXNlcnZlSW5kZXg6IHByb3BUeXBlcy5ib29sLmRlZihmYWxzZSksXG4gICAgLy8g5a+56b2Q5pa55byPXG4gICAgYWxpZ246IHByb3BUeXBlcy5zdHJpbmdcbiAgICAgIC52YWxpZGF0ZSgodjogc3RyaW5nKSA9PiBbJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0J10uaW5jbHVkZXModikpXG4gICAgICAuZGVmKCdsZWZ0JyksXG4gICAgLy8g6KGo5aS05a+56b2Q5pa55byPXG4gICAgaGVhZGVyQWxpZ246IHByb3BUeXBlcy5zdHJpbmdcbiAgICAgIC52YWxpZGF0ZSgodjogc3RyaW5nKSA9PiBbJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0J10uaW5jbHVkZXModikpXG4gICAgICAuZGVmKCdsZWZ0JyksXG4gICAgZGF0YToge1xuICAgICAgdHlwZTogQXJyYXkgYXMgUHJvcFR5cGU8UmVjb3JkYWJsZVtdPixcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gICAgfVxuICB9LFxuICBlbWl0czogWyd1cGRhdGU6cGFnZVNpemUnLCAndXBkYXRlOmN1cnJlbnRQYWdlJywgJ3JlZ2lzdGVyJ10sXG4gIHNldHVwKHByb3BzLCB7IGF0dHJzLCBzbG90cywgZW1pdCwgZXhwb3NlIH0pIHtcbiAgICBjb25zdCBlbFRhYmxlUmVmID0gcmVmPENvbXBvbmVudFJlZjx0eXBlb2YgRWxUYWJsZT4+KClcblxuICAgIC8vIOazqOWGjFxuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICBjb25zdCB0YWJsZVJlZiA9IHVucmVmKGVsVGFibGVSZWYpXG4gICAgICBlbWl0KCdyZWdpc3RlcicsIHRhYmxlUmVmPy4kcGFyZW50LCBlbFRhYmxlUmVmKVxuICAgIH0pXG5cbiAgICBjb25zdCBwYWdlU2l6ZVJlZiA9IHJlZihwcm9wcy5wYWdlU2l6ZSlcblxuICAgIGNvbnN0IGN1cnJlbnRQYWdlUmVmID0gcmVmKHByb3BzLmN1cnJlbnRQYWdlKVxuXG4gICAgLy8gdXNlVGFibGXkvKDlhaXnmoRwcm9wc1xuICAgIGNvbnN0IG91dHNpZGVQcm9wcyA9IHJlZjxUYWJsZVByb3BzPih7fSlcblxuICAgIGNvbnN0IG1lcmdlUHJvcHMgPSByZWY8VGFibGVQcm9wcz4oe30pXG5cbiAgICBjb25zdCBnZXRQcm9wcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzT2JqID0geyAuLi5wcm9wcyB9XG4gICAgICBPYmplY3QuYXNzaWduKHByb3BzT2JqLCB1bnJlZihtZXJnZVByb3BzKSlcbiAgICAgIHJldHVybiBwcm9wc09ialxuICAgIH0pXG5cbiAgICBjb25zdCBzZXRQcm9wcyA9IChwcm9wczogVGFibGVQcm9wcyA9IHt9KSA9PiB7XG4gICAgICBtZXJnZVByb3BzLnZhbHVlID0gT2JqZWN0LmFzc2lnbih1bnJlZihtZXJnZVByb3BzKSwgcHJvcHMpXG4gICAgICBvdXRzaWRlUHJvcHMudmFsdWUgPSBwcm9wc1xuICAgIH1cblxuICAgIGNvbnN0IHNldENvbHVtbiA9IChjb2x1bW5Qcm9wczogVGFibGVTZXRQcm9wc1R5cGVbXSwgY29sdW1uc0NoaWxkcmVuPzogVGFibGVDb2x1bW5bXSkgPT4ge1xuICAgICAgY29uc3QgeyBjb2x1bW5zIH0gPSB1bnJlZihnZXRQcm9wcylcbiAgICAgIGZvciAoY29uc3QgdiBvZiBjb2x1bW5zQ2hpbGRyZW4gfHwgY29sdW1ucykge1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgY29sdW1uUHJvcHMpIHtcbiAgICAgICAgICBpZiAodi5maWVsZCA9PT0gaXRlbS5maWVsZCkge1xuICAgICAgICAgICAgc2V0KHYsIGl0ZW0ucGF0aCwgaXRlbS52YWx1ZSlcbiAgICAgICAgICB9IGVsc2UgaWYgKHYuY2hpbGRyZW4/Lmxlbmd0aCkge1xuICAgICAgICAgICAgc2V0Q29sdW1uKGNvbHVtblByb3BzLCB2LmNoaWxkcmVuKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHNlbGVjdGlvbnMgPSByZWY8UmVjb3JkYWJsZVtdPihbXSlcblxuICAgIGNvbnN0IHNlbGVjdGlvbkNoYW5nZSA9IChzZWxlY3Rpb246IFJlY29yZGFibGVbXSkgPT4ge1xuICAgICAgc2VsZWN0aW9ucy52YWx1ZSA9IHNlbGVjdGlvblxuICAgIH1cblxuICAgIGV4cG9zZSh7XG4gICAgICBzZXRQcm9wcyxcbiAgICAgIHNldENvbHVtbixcbiAgICAgIHNlbGVjdGlvbnMsXG4gICAgICBlbFRhYmxlUmVmXG4gICAgfSlcblxuICAgIGNvbnN0IHBhZ2luYXRpb24gPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihcbiAgICAgICAge1xuICAgICAgICAgIHNtYWxsOiBmYWxzZSxcbiAgICAgICAgICBiYWNrZ3JvdW5kOiBmYWxzZSxcbiAgICAgICAgICBwYWdlckNvdW50OiA3LFxuICAgICAgICAgIGxheW91dDogJ3NpemVzLCBwcmV2LCBwYWdlciwgbmV4dCwganVtcGVyLCAtPiwgdG90YWwnLFxuICAgICAgICAgIHBhZ2VTaXplczogWzEwLCAyMCwgMzAsIDQwLCA1MCwgMTAwXSxcbiAgICAgICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICAgICAgaGlkZU9uU2luZ2xlUGFnZTogZmFsc2UsXG4gICAgICAgICAgdG90YWw6IDEwXG4gICAgICAgIH0sXG4gICAgICAgIHVucmVmKGdldFByb3BzKS5wYWdpbmF0aW9uXG4gICAgICApXG4gICAgfSlcblxuICAgIHdhdGNoKFxuICAgICAgKCkgPT4gdW5yZWYoZ2V0UHJvcHMpLnBhZ2VTaXplLFxuICAgICAgKHZhbDogbnVtYmVyKSA9PiB7XG4gICAgICAgIHBhZ2VTaXplUmVmLnZhbHVlID0gdmFsXG4gICAgICB9XG4gICAgKVxuXG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiB1bnJlZihnZXRQcm9wcykuY3VycmVudFBhZ2UsXG4gICAgICAodmFsOiBudW1iZXIpID0+IHtcbiAgICAgICAgY3VycmVudFBhZ2VSZWYudmFsdWUgPSB2YWxcbiAgICAgIH1cbiAgICApXG5cbiAgICB3YXRjaChcbiAgICAgICgpID0+IHBhZ2VTaXplUmVmLnZhbHVlLFxuICAgICAgKHZhbDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGVtaXQoJ3VwZGF0ZTpwYWdlU2l6ZScsIHZhbClcbiAgICAgIH1cbiAgICApXG5cbiAgICB3YXRjaChcbiAgICAgICgpID0+IGN1cnJlbnRQYWdlUmVmLnZhbHVlLFxuICAgICAgKHZhbDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGVtaXQoJ3VwZGF0ZTpjdXJyZW50UGFnZScsIHZhbClcbiAgICAgIH1cbiAgICApXG5cbiAgICBjb25zdCBnZXRCaW5kVmFsdWUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBiaW5kVmFsdWU6IFJlY29yZGFibGUgPSB7IC4uLmF0dHJzLCAuLi5wcm9wcyB9XG4gICAgICBkZWxldGUgYmluZFZhbHVlLmNvbHVtbnNcbiAgICAgIGRlbGV0ZSBiaW5kVmFsdWUuZGF0YVxuICAgICAgcmV0dXJuIGJpbmRWYWx1ZVxuICAgIH0pXG5cbiAgICBjb25zdCByZW5kZXJUYWJsZVNlbGVjdGlvbiA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHsgc2VsZWN0aW9uLCByZXNlcnZlU2VsZWN0aW9uLCBhbGlnbiwgaGVhZGVyQWxpZ24gfSA9IHVucmVmKGdldFByb3BzKVxuICAgICAgLy8g5riy5p+T5aSa6YCJXG4gICAgICByZXR1cm4gc2VsZWN0aW9uID8gKFxuICAgICAgICA8RWxUYWJsZUNvbHVtblxuICAgICAgICAgIHR5cGU9XCJzZWxlY3Rpb25cIlxuICAgICAgICAgIHJlc2VydmVTZWxlY3Rpb249e3Jlc2VydmVTZWxlY3Rpb259XG4gICAgICAgICAgYWxpZ249e2FsaWdufVxuICAgICAgICAgIGhlYWRlckFsaWduPXtoZWFkZXJBbGlnbn1cbiAgICAgICAgICB3aWR0aD1cIjUwXCJcbiAgICAgICAgPjwvRWxUYWJsZUNvbHVtbj5cbiAgICAgICkgOiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBjb25zdCByZW5kZXJUYWJsZUV4cGFuZCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHsgYWxpZ24sIGhlYWRlckFsaWduLCBleHBhbmQgfSA9IHVucmVmKGdldFByb3BzKVxuICAgICAgLy8g5riy5p+T5bGV5byA6KGMXG4gICAgICByZXR1cm4gZXhwYW5kID8gKFxuICAgICAgICA8RWxUYWJsZUNvbHVtbiB0eXBlPVwiZXhwYW5kXCIgYWxpZ249e2FsaWdufSBoZWFkZXJBbGlnbj17aGVhZGVyQWxpZ259PlxuICAgICAgICAgIHt7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBkZWZhdWx0OiAoZGF0YTogVGFibGVTbG90RGVmYXVsdCkgPT4gZ2V0U2xvdChzbG90cywgJ2V4cGFuZCcsIGRhdGEpXG4gICAgICAgICAgfX1cbiAgICAgICAgPC9FbFRhYmxlQ29sdW1uPlxuICAgICAgKSA6IHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGNvbnN0IHJuZGVyVHJlZVRhYmxlQ29sdW1uID0gKGNvbHVtbnNDaGlsZHJlbjogVGFibGVDb2x1bW5bXSkgPT4ge1xuICAgICAgY29uc3QgeyBhbGlnbiwgaGVhZGVyQWxpZ24sIHNob3dPdmVyZmxvd1Rvb2x0aXAgfSA9IHVucmVmKGdldFByb3BzKVxuICAgICAgcmV0dXJuIGNvbHVtbnNDaGlsZHJlbi5tYXAoKHYpID0+IHtcbiAgICAgICAgY29uc3QgcHJvcHMgPSB7IC4uLnYgfVxuICAgICAgICBpZiAocHJvcHMuY2hpbGRyZW4pIGRlbGV0ZSBwcm9wcy5jaGlsZHJlblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxFbFRhYmxlQ29sdW1uXG4gICAgICAgICAgICBzaG93T3ZlcmZsb3dUb29sdGlwPXtzaG93T3ZlcmZsb3dUb29sdGlwfVxuICAgICAgICAgICAgYWxpZ249e2FsaWdufVxuICAgICAgICAgICAgaGVhZGVyQWxpZ249e2hlYWRlckFsaWdufVxuICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgcHJvcD17di5maWVsZH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7e1xuICAgICAgICAgICAgICBkZWZhdWx0OiAoZGF0YTogVGFibGVTbG90RGVmYXVsdCkgPT5cbiAgICAgICAgICAgICAgICB2LmNoaWxkcmVuICYmIHYuY2hpbGRyZW4ubGVuZ3RoXG4gICAgICAgICAgICAgICAgICA/IHJuZGVyVGFibGVDb2x1bW4odi5jaGlsZHJlbilcbiAgICAgICAgICAgICAgICAgIDogLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBnZXRTbG90KHNsb3RzLCB2LmZpZWxkLCBkYXRhKSB8fFxuICAgICAgICAgICAgICAgICAgICB2Py5mb3JtYXR0ZXI/LihkYXRhLnJvdywgZGF0YS5jb2x1bW4sIGRhdGEucm93W3YuZmllbGRdLCBkYXRhLiRpbmRleCkgfHxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5yb3dbdi5maWVsZF0sXG4gICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgaGVhZGVyOiBnZXRTbG90KHNsb3RzLCBgJHt2LmZpZWxkfS1oZWFkZXJgKVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA8L0VsVGFibGVDb2x1bW4+XG4gICAgICAgIClcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3Qgcm5kZXJUYWJsZUNvbHVtbiA9IChjb2x1bW5zQ2hpbGRyZW4/OiBUYWJsZUNvbHVtbltdKSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGNvbHVtbnMsXG4gICAgICAgIHJlc2VydmVJbmRleCxcbiAgICAgICAgcGFnZVNpemUsXG4gICAgICAgIGN1cnJlbnRQYWdlLFxuICAgICAgICBhbGlnbixcbiAgICAgICAgaGVhZGVyQWxpZ24sXG4gICAgICAgIHNob3dPdmVyZmxvd1Rvb2x0aXBcbiAgICAgIH0gPSB1bnJlZihnZXRQcm9wcylcbiAgICAgIHJldHVybiBbLi4uW3JlbmRlclRhYmxlRXhwYW5kKCldLCAuLi5bcmVuZGVyVGFibGVTZWxlY3Rpb24oKV1dLmNvbmNhdChcbiAgICAgICAgKGNvbHVtbnNDaGlsZHJlbiB8fCBjb2x1bW5zKS5tYXAoKHYpID0+IHtcbiAgICAgICAgICAvLyDoh6rlrprnlJ/miJDluo/lj7dcbiAgICAgICAgICBpZiAodi50eXBlID09PSAnaW5kZXgnKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8RWxUYWJsZUNvbHVtblxuICAgICAgICAgICAgICAgIHR5cGU9XCJpbmRleFwiXG4gICAgICAgICAgICAgICAgaW5kZXg9e1xuICAgICAgICAgICAgICAgICAgdi5pbmRleFxuICAgICAgICAgICAgICAgICAgICA/IHYuaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgOiAoaW5kZXgpID0+IHNldEluZGV4KHJlc2VydmVJbmRleCwgaW5kZXgsIHBhZ2VTaXplLCBjdXJyZW50UGFnZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWxpZ249e3YuYWxpZ24gfHwgYWxpZ259XG4gICAgICAgICAgICAgICAgaGVhZGVyQWxpZ249e3YuaGVhZGVyQWxpZ24gfHwgaGVhZGVyQWxpZ259XG4gICAgICAgICAgICAgICAgbGFiZWw9e3YubGFiZWx9XG4gICAgICAgICAgICAgICAgd2lkdGg9XCI2NXB4XCJcbiAgICAgICAgICAgICAgPjwvRWxUYWJsZUNvbHVtbj5cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcHJvcHMgPSB7IC4uLnYgfVxuICAgICAgICAgICAgaWYgKHByb3BzLmNoaWxkcmVuKSBkZWxldGUgcHJvcHMuY2hpbGRyZW5cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxFbFRhYmxlQ29sdW1uXG4gICAgICAgICAgICAgICAgc2hvd092ZXJmbG93VG9vbHRpcD17c2hvd092ZXJmbG93VG9vbHRpcH1cbiAgICAgICAgICAgICAgICBhbGlnbj17YWxpZ259XG4gICAgICAgICAgICAgICAgaGVhZGVyQWxpZ249e2hlYWRlckFsaWdufVxuICAgICAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgICAgICBwcm9wPXt2LmZpZWxkfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3tcbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IChkYXRhOiBUYWJsZVNsb3REZWZhdWx0KSA9PlxuICAgICAgICAgICAgICAgICAgICB2LmNoaWxkcmVuICYmIHYuY2hpbGRyZW4ubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgPyBybmRlclRyZWVUYWJsZUNvbHVtbih2LmNoaWxkcmVuKVxuICAgICAgICAgICAgICAgICAgICAgIDogLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U2xvdChzbG90cywgdi5maWVsZCwgZGF0YSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHY/LmZvcm1hdHRlcj8uKGRhdGEucm93LCBkYXRhLmNvbHVtbiwgZGF0YS5yb3dbdi5maWVsZF0sIGRhdGEuJGluZGV4KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5yb3dbdi5maWVsZF0sXG4gICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICBoZWFkZXI6ICgpID0+IGdldFNsb3Qoc2xvdHMsIGAke3YuZmllbGR9LWhlYWRlcmApIHx8IHYubGFiZWxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA8L0VsVGFibGVDb2x1bW4+XG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiAoXG4gICAgICA8ZGl2IHYtbG9hZGluZz17dW5yZWYoZ2V0UHJvcHMpLmxvYWRpbmd9PlxuICAgICAgICA8RWxUYWJsZVxuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICByZWY9e2VsVGFibGVSZWZ9XG4gICAgICAgICAgZGF0YT17dW5yZWYoZ2V0UHJvcHMpLmRhdGF9XG4gICAgICAgICAgb25TZWxlY3Rpb24tY2hhbmdlPXtzZWxlY3Rpb25DaGFuZ2V9XG4gICAgICAgICAgey4uLnVucmVmKGdldEJpbmRWYWx1ZSl9XG4gICAgICAgID5cbiAgICAgICAgICB7e1xuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gcm5kZXJUYWJsZUNvbHVtbigpLFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgYXBwZW5kOiAoKSA9PiBnZXRTbG90KHNsb3RzLCAnYXBwZW5kJylcbiAgICAgICAgICB9fVxuICAgICAgICA8L0VsVGFibGU+XG4gICAgICAgIHt1bnJlZihnZXRQcm9wcykucGFnaW5hdGlvbiA/IChcbiAgICAgICAgICA8RWxQYWdpbmF0aW9uXG4gICAgICAgICAgICB2LW1vZGVsOnBhZ2VTaXplPXtwYWdlU2l6ZVJlZi52YWx1ZX1cbiAgICAgICAgICAgIHYtbW9kZWw6Y3VycmVudFBhZ2U9e2N1cnJlbnRQYWdlUmVmLnZhbHVlfVxuICAgICAgICAgICAgY2xhc3M9XCJtdC0xMHB4XCJcbiAgICAgICAgICAgIHsuLi51bnJlZihwYWdpbmF0aW9uKX1cbiAgICAgICAgICA+PC9FbFBhZ2luYXRpb24+XG4gICAgICAgICkgOiB1bmRlZmluZWR9XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn0pXG48L3NjcmlwdD5cbiIsImV4cG9ydCBjb25zdCBzZXRJbmRleCA9IChyZXNlcnZlSW5kZXg6IGJvb2xlYW4sIGluZGV4OiBudW1iZXIsIHNpemU6IG51bWJlciwgY3VycmVudDogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IG5ld0luZGV4ID0gaW5kZXggKyAxXG4gIGlmIChyZXNlcnZlSW5kZXgpIHtcbiAgICByZXR1cm4gc2l6ZSAqIChjdXJyZW50IC0gMSkgKyBuZXdJbmRleFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXdJbmRleFxuICB9XG59XG4iXSwibmFtZXMiOlsiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJDT01QQVJFX1VOT1JERVJFRF9GTEFHIiwiaXNTdHJpY3RDb21wYXJhYmxlIiwidmFsdWUiLCJpc09iamVjdCIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwia2V5Iiwic3JjVmFsdWUiLCJvYmplY3QiLCJPYmplY3QiLCJiYXNlTWF0Y2hlcyIsInNvdXJjZSIsIm1hdGNoRGF0YSIsInJlc3VsdCIsImtleXMiLCJsZW5ndGgiLCJnZXRNYXRjaERhdGEiLCJjdXN0b21pemVyIiwiaW5kZXgiLCJub0N1c3RvbWl6ZXIiLCJkYXRhIiwib2JqVmFsdWUiLCJzdGFjayIsIlN0YWNrIiwiYmFzZUlzRXF1YWwiLCJiYXNlSXNNYXRjaCIsImZyb21SaWdodCIsInByb3BlcnR5IiwicGF0aCIsImlzS2V5IiwidG9LZXkiLCJiYXNlR2V0IiwiYmFzZVByb3BlcnR5RGVlcCIsImJhc2VJdGVyYXRlZSIsImlkZW50aXR5IiwiaXNBcnJheSIsImdldCIsImhhc0luIiwiYmFzZUZvciQxIiwiaXRlcmF0ZWUiLCJrZXlzRnVuYyIsIml0ZXJhYmxlIiwicHJvcHMiLCJiYXNlRWFjaCIsImVhY2hGdW5jIiwiY29sbGVjdGlvbiIsImlzQXJyYXlMaWtlIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yIiwiYmFzZUVhY2gkMSIsImFzc2lnbk1lcmdlVmFsdWUiLCJlcSIsImJhc2VBc3NpZ25WYWx1ZSIsInNhZmVHZXQiLCJiYXNlTWVyZ2VEZWVwIiwic3JjSW5kZXgiLCJtZXJnZUZ1bmMiLCJzdGFja2VkIiwibmV3VmFsdWUiLCJpc0NvbW1vbiIsImlzQXJyIiwiaXNCdWZmIiwiaXNCdWZmZXIiLCJpc1R5cGVkIiwiaXNUeXBlZEFycmF5IiwiaXNBcnJheUxpa2VPYmplY3QiLCJjb3B5QXJyYXkiLCJjbG9uZUJ1ZmZlciIsImNsb25lVHlwZWRBcnJheSIsImlzUGxhaW5PYmplY3QiLCJpc0FyZ3VtZW50cyIsImNvcHlPYmplY3QiLCJrZXlzSW4iLCJpc0Z1bmN0aW9uIiwiaW5pdENsb25lT2JqZWN0Iiwic2V0IiwiYmFzZU1lcmdlIiwiYmFzZU1hcCIsIkFycmF5IiwiZmxhdE1hcCIsImJhc2VGbGF0dGVuIiwiYXJyYXlNYXAiLCJtYXAiLCJhc3NpZ25lciIsIm1lcmdlJDEiLCJiYXNlUmVzdCIsInNvdXJjZXMiLCJndWFyZCIsInR5cGUiLCJpc0luZGV4IiwiaXNJdGVyYXRlZUNhbGwiLCJvIiwiZiIsInMiLCJ1IiwiZCIsIk4iLCJsIiwicCIsIm0iLCJ3IiwiRCIsIngiLCJFIiwiTSIsIkYiLCJ2IiwiYSIsImUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJuIiwiZXhlYyIsImkiLCJwYXJzZUZsb2F0IiwiTmFOIiwiZG9jdW1lbnQiLCJkb2N1bWVudE1vZGUiLCJyIiwidCIsInJlcGxhY2UiLCJYIiwiXyIsImllIiwiaWVDb21wYXRpYmlsaXR5TW9kZSIsImllNjQiLCJmaXJlZm94Iiwib3BlcmEiLCJ3ZWJraXQiLCJzYWZhcmkiLCJjaHJvbWUiLCJ3aW5kb3dzIiwib3N4IiwibGludXgiLCJpcGhvbmUiLCJtb2JpbGUiLCJuYXRpdmVBcHAiLCJhbmRyb2lkIiwiaXBhZCIsIkEiLCJjIiwid2luZG93IiwiY3JlYXRlRWxlbWVudCIsImgiLCJjYW5Vc2VET00iLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJpbXBsZW1lbnRhdGlvbiIsImhhc0ZlYXR1cmUiLCJiIiwic2V0QXR0cmlidXRlIiwiVCIsImRldGFpbCIsIndoZWVsRGVsdGEiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGFYIiwiYXhpcyIsIkhPUklaT05UQUxfQVhJUyIsImRlbHRhWSIsImRlbHRhWCIsImRlbHRhTW9kZSIsInNwaW5YIiwic3BpblkiLCJwaXhlbFgiLCJwaXhlbFkiLCJnZXRFdmVudFR5cGUiLCJZIiwiTW91c2V3aGVlbCIsImJlZm9yZU1vdW50IiwiZWwiLCJiaW5kaW5nIiwiZWxlbWVudCIsImNhbGxiYWNrIiwiZm4iLCJldmVudCIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVXaGVlbCIsIlJlZmxlY3QiLCJhcHBseSIsInRoaXMiLCJwYXNzaXZlIiwibW91c2V3aGVlbCIsImVsUGFnaW5hdGlvbktleSIsIlN5bWJvbCIsInBhZ2luYXRpb25QcmV2UHJvcHMiLCJidWlsZFByb3BzIiwiZGlzYWJsZWQiLCJCb29sZWFuIiwiY3VycmVudFBhZ2UiLCJOdW1iZXIiLCJkZWZhdWx0IiwicHJldlRleHQiLCJTdHJpbmciLCJwcmV2SWNvbiIsImljb25Qcm9wVHlwZSIsInBhZ2luYXRpb25QcmV2RW1pdHMiLCJjbGljayIsImV2dCIsIk1vdXNlRXZlbnQiLCJfaG9pc3RlZF8xIiwiX2hvaXN0ZWRfMiIsIl9fZGVmYXVsdF9fIiwiZGVmaW5lQ29tcG9uZW50IiwibmFtZSIsIlByZXYiLCJlbWl0cyIsInNldHVwIiwiX19wcm9wcyIsInVzZUxvY2FsZSIsImludGVybmFsRGlzYWJsZWQiLCJjb21wdXRlZCIsIl9jdHgiLCJfY2FjaGUiLCJvcGVuQmxvY2siLCJjcmVhdGVFbGVtZW50QmxvY2siLCJjbGFzcyIsInVucmVmIiwib25DbGljayIsIiRldmVudCIsIiRlbWl0IiwidG9EaXNwbGF5U3RyaW5nIiwiY3JlYXRlQmxvY2siLCJFbEljb24iLCJ3aXRoQ3R4IiwicmVzb2x2ZUR5bmFtaWNDb21wb25lbnQiLCJwYWdpbmF0aW9uTmV4dFByb3BzIiwicGFnZUNvdW50IiwibmV4dFRleHQiLCJuZXh0SWNvbiIsIk5leHQiLCJ1c2VQYWdpbmF0aW9uIiwiaW5qZWN0IiwicGFnaW5hdGlvblNpemVzUHJvcHMiLCJwYWdlU2l6ZSIsInJlcXVpcmVkIiwicGFnZVNpemVzIiwiZGVmaW5lUHJvcFR5cGUiLCJtdXRhYmxlIiwicG9wcGVyQ2xhc3MiLCJzaXplIiwidmFsdWVzIiwiY29tcG9uZW50U2l6ZXMiLCJTaXplcyIsImVtaXQiLCJucyIsInVzZU5hbWVzcGFjZSIsInBhZ2luYXRpb24iLCJpbm5lclBhZ2VTaXplIiwicmVmIiwid2F0Y2giLCJuZXdWYWwiLCJvbGRWYWwiLCJpc0VxdWFsIiwiaW5jbHVkZXMiLCJpbm5lclBhZ2VTaXplcyIsImhhbmRsZUNoYW5nZSIsInZhbCIsIl9hIiwiaGFuZGxlU2l6ZUNoYW5nZSIsImNhbGwiLCJub3JtYWxpemVDbGFzcyIsImNyZWF0ZVZOb2RlIiwiRWxTZWxlY3QiLCJvbkNoYW5nZSIsIkZyYWdtZW50IiwicmVuZGVyTGlzdCIsIml0ZW0iLCJFbE9wdGlvbiIsImxhYmVsIiwicGFnaW5hdGlvbkp1bXBlclByb3BzIiwiSnVtcGVyIiwiY2hhbmdlRXZlbnQiLCJ1c2VySW5wdXQiLCJpbm5lclZhbHVlIiwiaGFuZGxlSW5wdXQiLCJNYXRoIiwidHJ1bmMiLCJjcmVhdGVFbGVtZW50Vk5vZGUiLCJFbElucHV0IiwiaXMiLCJtaW4iLCJtYXgiLCJwYWdpbmF0aW9uVG90YWxQcm9wcyIsInRvdGFsIiwiVG90YWwiLCJwYWdpbmF0aW9uUGFnZXJQcm9wcyIsInBhZ2VyQ291bnQiLCJfaG9pc3RlZF8zIiwiX2hvaXN0ZWRfNCIsIl9ob2lzdGVkXzUiLCJfaG9pc3RlZF82IiwiUGFnZXIiLCJuc1BhZ2VyIiwibnNJY29uIiwic2hvd1ByZXZNb3JlIiwic2hvd05leHRNb3JlIiwicXVpY2tQcmV2SG92ZXIiLCJxdWlja05leHRIb3ZlciIsInF1aWNrUHJldkZvY3VzIiwicXVpY2tOZXh0Rm9jdXMiLCJwYWdlcnMiLCJoYWxmUGFnZXJDb3VudCIsInNob3dQcmV2TW9yZTIiLCJzaG93TmV4dE1vcmUyIiwiYXJyYXkiLCJwdXNoIiwib2Zmc2V0IiwiZmxvb3IiLCJ0YWJpbmRleCIsIm9uTW91c2VFbnRlciIsImZvcndhcmQiLCJvbkZvY3VzIiwib25FbnRlciIsInRhcmdldCIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsImZyb20iLCJjbGFzc0xpc3QiLCJuZXdQYWdlIiwidGV4dENvbnRlbnQiLCJvblBhZ2VyQ2xpY2siLCJwYWdlckNvdW50T2Zmc2V0IiwiY2xhc3NOYW1lIiwiaXNOYU4iLCJ3YXRjaEVmZmVjdCIsIm9uS2V5dXAiLCJ3aXRoS2V5cyIsInBhZ2VyIiwiY3JlYXRlQ29tbWVudFZOb2RlIiwib25Nb3VzZWVudGVyIiwib25Nb3VzZWxlYXZlIiwib25CbHVyIiwiTW9yZUZpbGxlZCIsIkRBcnJvd0xlZnQiLCJEQXJyb3dSaWdodCIsImlzQWJzZW50IiwicGFnaW5hdGlvblByb3BzIiwiZGVmYXVsdFBhZ2VTaXplIiwiZGVmYXVsdEN1cnJlbnRQYWdlIiwidmFsaWRhdG9yIiwiaXNOdW1iZXIiLCJsYXlvdXQiLCJqb2luIiwiQXJyb3dMZWZ0IiwiQXJyb3dSaWdodCIsInNtYWxsIiwiYmFja2dyb3VuZCIsImhpZGVPblNpbmdsZVBhZ2UiLCJjb21wb25lbnROYW1lIiwiRWxQYWdpbmF0aW9uIiwid2l0aEluc3RhbGwiLCJzbG90cyIsInZub2RlUHJvcHMiLCJnZXRDdXJyZW50SW5zdGFuY2UiLCJ2bm9kZSIsImhhc0N1cnJlbnRQYWdlTGlzdGVuZXIiLCJoYXNQYWdlU2l6ZUxpc3RlbmVyIiwiYXNzZXJ0VmFsaWRVc2FnZSIsImlubmVyQ3VycmVudFBhZ2UiLCJwYWdlU2l6ZUJyaWRnZSIsInBhZ2VDb3VudEJyaWRnZSIsImNlaWwiLCJjdXJyZW50UGFnZUJyaWRnZSIsIm5ld0N1cnJlbnRQYWdlIiwiaGFuZGxlQ3VycmVudENoYW5nZSIsInByZXYiLCJuZXh0IiwiYWRkQ2xhc3MiLCJjbHMiLCJwcm92aWRlIiwibmV3UGFnZUNvdW50IiwiX2IiLCJkZWJ1Z1dhcm4iLCJyb290Q2hpbGRyZW4iLCJyaWdodFdyYXBwZXJDaGlsZHJlbiIsInJpZ2h0V3JhcHBlclJvb3QiLCJURU1QTEFURV9NQVAiLCJqdW1wZXIiLCJzaXplcyIsInNsb3QiLCJjb21wb25lbnRzIiwic3BsaXQiLCJ0cmltIiwiaGF2ZVJpZ2h0V3JhcHBlciIsImZvckVhY2giLCJtYXRjaEh0bWxSZWdFeHAiLCJlc2NhcGVIdG1sXzEiLCJzdHJpbmciLCJlc2NhcGUiLCJzdHIiLCJtYXRjaCIsImh0bWwiLCJsYXN0SW5kZXgiLCJjaGFyQ29kZUF0Iiwic3Vic3RyaW5nIiwiZ2V0Q2VsbCIsImNsb3Nlc3QiLCJvcmRlckJ5Iiwic29ydEtleSIsInJldmVyc2UiLCJzb3J0TWV0aG9kIiwic29ydEJ5IiwiZ2V0S2V5IiwiYnkiLCIkdmFsdWUiLCJzb3J0Iiwib3JkZXIiLCJsZW4iLCJjb21wYXJlIiwiZ2V0Q29sdW1uQnlJZCIsInRhYmxlIiwiY29sdW1uSWQiLCJjb2x1bW4iLCJjb2x1bW5zIiwiaWQiLCJnZXRDb2x1bW5CeUtleSIsImNvbHVtbktleSIsInRocm93RXJyb3IiLCJnZXRDb2x1bW5CeUNlbGwiLCJjZWxsIiwibmFtZXNwYWNlIiwibWF0Y2hlcyIsIlJlZ0V4cCIsImdldFJvd0lkZW50aXR5Iiwicm93Iiwicm93S2V5IiwiRXJyb3IiLCJjdXJyZW50IiwiZ2V0S2V5c01hcCIsInBhcnNlV2lkdGgiLCJ3aWR0aCIsInBhcnNlSW50IiwicGFyc2VNaW5XaWR0aCIsIm1pbldpZHRoIiwidG9nZ2xlUm93U3RhdHVzIiwic3RhdHVzQXJyIiwiY2hhbmdlZCIsImluZGV4T2YiLCJpbmNsdWRlZCIsInRvZ2dsZVN0YXR1cyIsInNwbGljZSIsImNoaWxkcmVuIiwiaXNCb29sZWFuIiwid2Fsa1RyZWVOb2RlIiwicm9vdCIsImNiIiwiY2hpbGRyZW5LZXkiLCJsYXp5S2V5IiwiaXNOaWwiLCJfd2Fsa2VyIiwicGFyZW50IiwibGV2ZWwiLCJjaGlsZHJlbjIiLCJyZW1vdmVQb3BwZXIiLCJnZXRDdXJyZW50Q29sdW1ucyIsImdldENvbFNwYW4iLCJjb2xTcGFuIiwiaXNGaXhlZENvbHVtbiIsImZpeGVkIiwic3RvcmUiLCJyZWFsQ29sdW1ucyIsInN0YXJ0IiwiYWZ0ZXIiLCJzdGF0ZXMiLCJjdXJDb2x1bW5zIiwic2xpY2UiLCJyZWR1Y2UiLCJmaXhlZExheW91dCIsImZpeGVkTGVhZkNvbHVtbnNMZW5ndGgiLCJyaWdodEZpeGVkTGVhZkNvbHVtbnNMZW5ndGgiLCJkaXJlY3Rpb24iLCJnZXRGaXhlZENvbHVtbnNDbGFzcyIsImNsYXNzZXMiLCJpc0xlZnQiLCJnZXRPZmZzZXQiLCJyZWFsV2lkdGgiLCJnZXRGaXhlZENvbHVtbk9mZnNldCIsInN0eWxlcyIsImxlZnQiLCJyaWdodCIsImVuc3VyZVBvc2l0aW9uIiwic3R5bGUiLCJzb3J0RGF0YSIsInNvcnRpbmdDb2x1bW4iLCJzb3J0YWJsZSIsInNvcnRQcm9wIiwic29ydE9yZGVyIiwiZG9GbGF0dGVuQ29sdW1ucyIsInVzZVdhdGNoZXIiLCJpbnN0YW5jZSIsInRhYmxlU2l6ZSIsInRvUmVmcyIsInByb3h5IiwiJHByb3BzIiwiX2RhdGEiLCJpc0NvbXBsZXgiLCJfY29sdW1ucyIsIm9yaWdpbkNvbHVtbnMiLCJmaXhlZENvbHVtbnMiLCJyaWdodEZpeGVkQ29sdW1ucyIsImxlYWZDb2x1bW5zIiwiZml4ZWRMZWFmQ29sdW1ucyIsInJpZ2h0Rml4ZWRMZWFmQ29sdW1ucyIsImxlYWZDb2x1bW5zTGVuZ3RoIiwiaXNBbGxTZWxlY3RlZCIsInNlbGVjdGlvbiIsInJlc2VydmVTZWxlY3Rpb24iLCJzZWxlY3RPbkluZGV0ZXJtaW5hdGUiLCJzZWxlY3RhYmxlIiwiZmlsdGVycyIsImZpbHRlcmVkRGF0YSIsImhvdmVyUm93Iiwic3RhdGUiLCJzY2hlZHVsZUxheW91dCIsImRlZXAiLCJ1cGRhdGVDaGlsZEZpeGVkIiwiX2EyIiwiY2hpbGRDb2x1bW4iLCJ1cGRhdGVDb2x1bW5zIiwiZmlsdGVyIiwidW5zaGlmdCIsIm5vdEZpeGVkQ29sdW1ucyIsImNvbmNhdCIsImxlYWZDb2x1bW5zMiIsImZpeGVkTGVhZkNvbHVtbnMyIiwicmlnaHRGaXhlZExlYWZDb2x1bW5zMiIsIm5lZWRVcGRhdGVDb2x1bW5zIiwiaW1tZWRpYXRlIiwiZG9MYXlvdXQiLCJkZWJvdW5jZWRVcGRhdGVMYXlvdXQiLCJnZXRDaGlsZHJlbkNvdW50Iiwicm93S2V5MiIsInRyZWVEYXRhIiwiY291bnQiLCJjaGlsZEtleSIsInVwZGF0ZVNvcnQiLCJwcm9wIiwiZXhlY0ZpbHRlciIsInNvdXJjZURhdGEiLCJmaWx0ZXJNZXRob2QiLCJzb21lIiwiZXhlY1NvcnQiLCJzZXRFeHBhbmRSb3dLZXlzIiwidG9nZ2xlUm93RXhwYW5zaW9uIiwidXBkYXRlRXhwYW5kUm93cyIsImV4cGFuZFN0YXRlcyIsImlzUm93RXhwYW5kZWQiLCJ3YXRjaGVyRGF0YSIsImRlZmF1bHRFeHBhbmRBbGwiLCJleHBhbmRSb3dzIiwiZXhwYW5kUm93c01hcCIsInJvd0lkIiwiZXhwYW5kZWQiLCJyb3dLZXlzIiwiYXNzZXJ0Um93S2V5Iiwia2V5c01hcCIsImN1ciIsImluZm8iLCJ1c2VFeHBhbmQiLCJ1cGRhdGVUcmVlRXhwYW5kS2V5cyIsInRvZ2dsZVRyZWVFeHBhbnNpb24iLCJ1cGRhdGVUcmVlRGF0YSIsImxvYWRPclRvZ2dsZSIsInRyZWVTdGF0ZXMiLCJleHBhbmRSb3dLZXlzIiwiaW5kZW50IiwibGF6eSIsImxhenlUcmVlTm9kZU1hcCIsImxhenlDb2x1bW5JZGVudGlmaWVyIiwiY2hpbGRyZW5Db2x1bW5OYW1lIiwibm9ybWFsaXplZERhdGEiLCJub3JtYWxpemUiLCJub3JtYWxpemVkTGF6eU5vZGUiLCJyZXMiLCJjdXJyZW50Um93S2V5IiwicGFyZW50SWQiLCJpZkNoYW5nZUV4cGFuZFJvd0tleXMiLCJpZkV4cGFuZEFsbCIsIm5lc3RlZCIsIm5vcm1hbGl6ZWRMYXp5Tm9kZV8iLCJuZXdUcmVlRGF0YSIsIm9sZFRyZWVEYXRhIiwicm9vdExhenlSb3dLZXlzIiwiZ2V0RXhwYW5kZWQiLCJvbGRWYWx1ZSIsImxvYWRlZCIsImxvYWRpbmciLCJsYXp5S2V5cyIsImxhenlOb2RlQ2hpbGRyZW4iLCJ1cGRhdGVUYWJsZVNjcm9sbFkiLCJvbGRFeHBhbmRlZCIsImxvYWREYXRhIiwidHJlZU5vZGUiLCJsb2FkIiwiVHlwZUVycm9yIiwidXNlVHJlZSIsInVwZGF0ZUN1cnJlbnRSb3dEYXRhIiwidXBkYXRlQ3VycmVudFJvdyIsInNldEN1cnJlbnRSb3dLZXkiLCJjdXJyZW50RGF0YSIsIl9jdXJyZW50Um93S2V5IiwiY3VycmVudFJvdyIsInJlc3RvcmVDdXJyZW50Um93S2V5Iiwic2V0Q3VycmVudFJvd0J5S2V5IiwiX2N1cnJlbnRSb3ciLCJmaW5kIiwib2xkQ3VycmVudFJvdyIsInVzZUN1cnJlbnQiLCJpc1NlbGVjdGVkIiwiY2xlYXJTZWxlY3Rpb24iLCJjbGVhblNlbGVjdGlvbiIsImRlbGV0ZWQiLCJzZWxlY3RlZE1hcCIsImRhdGFNYXAiLCJoYXNPd24iLCJuZXdTZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb25Sb3dzIiwidG9nZ2xlUm93U2VsZWN0aW9uIiwic2VsZWN0ZWQiLCJlbWl0Q2hhbmdlIiwiX3RvZ2dsZUFsbFNlbGVjdGlvbiIsInNlbGVjdGlvbkNoYW5nZWQiLCJjaGlsZHJlbkNvdW50Iiwicm93SW5kZXgiLCJ0b2dnbGVBbGxTZWxlY3Rpb24iLCJ1cGRhdGVTZWxlY3Rpb25CeVJvd0tleSIsInJvd0luZm8iLCJ1cGRhdGVBbGxTZWxlY3RlZCIsIl9jIiwiaXNBbGxTZWxlY3RlZF8iLCJzZWxlY3RlZENvdW50IiwiaiIsImtleVByb3AiLCJpc1Jvd1NlbGVjdGFibGUiLCJ1cGRhdGVGaWx0ZXJzIiwiY29sdW1uczIiLCJmaWx0ZXJzXyIsImNvbCIsImV4ZWNRdWVyeSIsImlnbm9yZSIsImNsZWFyRmlsdGVyIiwiY29sdW1uS2V5cyIsInRhYmxlSGVhZGVyUmVmIiwicmVmcyIsInBhbmVscyIsImFzc2lnbiIsImZpbHRlclBhbmVscyIsImNvbHVtbnNfIiwiZmlsdGVyZWRWYWx1ZSIsImNvbW1pdCIsInNpbGVudCIsIm11bHRpIiwiY2xlYXJTb3J0Iiwic2V0RXhwYW5kUm93S2V5c0FkYXB0ZXIiLCJ0b2dnbGVSb3dFeHBhbnNpb25BZGFwdGVyIiwidXBkYXRlT3JkZXJGbnMiLCJyZXBsYWNlQ29sdW1uIiwic29ydENvbHVtbiIsIm5vIiwiZ2V0Q29sdW1uSW5kZXgiLCJwcmUiLCJJbml0aWFsU3RhdGVNYXAiLCJjcmVhdGVTdG9yZSIsIndhdGNoZXIiLCJtdXRhdGlvbnMiLCJzZXREYXRhIiwiZGF0YUluc3RhbmNlQ2hhbmdlZCIsIiRyZWFkeSIsImluc2VydENvbHVtbiIsInVwZGF0ZUNvbHVtbk9yZGVyIiwibmV3Q29sdW1ucyIsInJlbW92ZUNvbHVtbiIsImZpbmRJbmRleCIsIm5leHRUaWNrIiwidXBkYXRlRm5JbmRleCIsIm9wdGlvbnMiLCJpbml0IiwiY29sdW1uMiIsImNoYW5nZVNvcnRDb25kaXRpb24iLCJjb2x1bW5WYWx1ZSIsInByb3BWYWx1ZSIsIm9yZGVyVmFsdWUiLCJmaWx0ZXJDaGFuZ2UiLCJfc3RhdGVzIiwibmV3RmlsdGVycyIsInJvd1NlbGVjdGVkQ2hhbmdlZCIsInNldEhvdmVyUm93Iiwic2V0Q3VycmVudFJvdyIsImFyZ3MiLCJtdXRhdGlvbnMyIiwidXBkYXRlU2Nyb2xsWSIsInVzZVN0b3JlIiwiZGVib3VuY2UiLCJoYW5kbGVWYWx1ZSIsImdldEFycktleXNWYWx1ZSIsInByb3h5VGFibGVQcm9wcyIsInByb3BzS2V5Iiwic3RvcmVLZXkiLCJrZXlMaXN0IiwiVGFibGVMYXlvdXQiLCJjb25zdHJ1Y3RvciIsIm9ic2VydmVycyIsImZpdCIsInNob3dIZWFkZXIiLCJoZWlnaHQiLCJzY3JvbGxYIiwic2Nyb2xsWSIsImJvZHlXaWR0aCIsImZpeGVkV2lkdGgiLCJyaWdodEZpeGVkV2lkdGgiLCJndXR0ZXJXaWR0aCIsImlzUmVmIiwic2Nyb2xsQmFyUmVmIiwid3JhcFJlZiIsInByZXZTY3JvbGxZIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0Iiwic2V0SGVpZ2h0IiwiaXNDbGllbnQiLCJ0ZXN0IiwidXBkYXRlRWxzSGVpZ2h0Iiwic2V0TWF4SGVpZ2h0IiwiZ2V0RmxhdHRlbkNvbHVtbnMiLCJmbGF0dGVuQ29sdW1ucyIsImlzQ29sdW1uR3JvdXAiLCJub3RpZnlPYnNlcnZlcnMiLCJoZWFkZXJEaXNwbGF5Tm9uZSIsImVsbSIsImhlYWRlckNoaWxkIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImRpc3BsYXkiLCJwYXJlbnRFbGVtZW50IiwidXBkYXRlQ29sdW1uc1dpZHRoIiwiY2xpZW50V2lkdGgiLCJib2R5TWluV2lkdGgiLCJmbGV4Q29sdW1ucyIsInRvdGFsRmxleFdpZHRoIiwiZmxleFdpZHRoUGVyUGl4ZWwiLCJub25lRmlyc3RXaWR0aCIsImZsZXhXaWR0aCIsInJlc2l6ZVN0YXRlIiwiYWRkT2JzZXJ2ZXIiLCJvYnNlcnZlciIsInJlbW92ZU9ic2VydmVyIiwib25Db2x1bW5zQ2hhbmdlIiwib25TY3JvbGxhYmxlQ2hhbmdlIiwiQ2hlY2tib3hHcm91cCIsIkVsQ2hlY2tib3hHcm91cCIsIkVsQ2hlY2tib3giLCJfc2ZjX21haW4iLCJFbFNjcm9sbGJhciIsIkVsVG9vbHRpcCIsIkFycm93RG93biIsIkFycm93VXAiLCJkaXJlY3RpdmVzIiwiQ2xpY2tPdXRzaWRlIiwicGxhY2VtZW50IiwidXBEYXRhQ29sdW1uIiwiRnVuY3Rpb24iLCJ0b29sdGlwVmlzaWJsZSIsInRvb2x0aXAiLCJmaWx0ZXJWYWx1ZSIsIm11bHRpcGxlIiwiZmlsdGVyTXVsdGlwbGUiLCJoaWRkZW4iLCJjb25maXJtRmlsdGVyIiwiZmlsdGVyZWRWYWx1ZTIiLCJwb3BwZXJQYW5lUmVmIiwicG9wcGVyUmVmIiwiY29udGVudFJlZiIsImhhbmRsZUNvbmZpcm0iLCJoYW5kbGVSZXNldCIsImhhbmRsZVNlbGVjdCIsIl9maWx0ZXJWYWx1ZSIsImlzQWN0aXZlIiwic2hvd0ZpbHRlclBhbmVsIiwic3RvcFByb3BhZ2F0aW9uIiwiaGlkZUZpbHRlclBhbmVsIiwiRmlsdGVyUGFuZWwiLCJfZXhwb3J0X3NmYyIsIiRzZXR1cCIsIiRkYXRhIiwiJG9wdGlvbnMiLCJfY29tcG9uZW50X2VsX2NoZWNrYm94IiwicmVzb2x2ZUNvbXBvbmVudCIsIl9jb21wb25lbnRfZWxfY2hlY2tib3hfZ3JvdXAiLCJfY29tcG9uZW50X2VsX3Njcm9sbGJhciIsIl9jb21wb25lbnRfYXJyb3dfdXAiLCJfY29tcG9uZW50X2Fycm93X2Rvd24iLCJfY29tcG9uZW50X2VsX2ljb24iLCJfY29tcG9uZW50X2VsX3Rvb2x0aXAiLCJfZGlyZWN0aXZlX2NsaWNrX291dHNpZGUiLCJyZXNvbHZlRGlyZWN0aXZlIiwidmlzaWJsZSIsInRlbGVwb3J0ZWQiLCJlZmZlY3QiLCJwdXJlIiwicGVyc2lzdGVudCIsImNvbnRlbnQiLCJtb2RlbFZhbHVlIiwiY3JlYXRlVGV4dFZOb2RlIiwidGV4dCIsIndpdGhEaXJlY3RpdmVzIiwiZmlsdGVyT3BlbmVkIiwidXNlTGF5b3V0T2JzZXJ2ZXIiLCJvbkJlZm9yZU1vdW50IiwidGFibGVMYXlvdXQiLCJvbk1vdW50ZWQiLCJvblVwZGF0ZWQiLCJvblVubW91bnRlZCIsImNvbHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY29sdW1uc01hcCIsImdldEF0dHJpYnV0ZSIsInRocyIsInRoIiwiVEFCTEVfSU5KRUNUSU9OX0tFWSIsImdldEFsbENvbHVtbnMiLCJ1c2VVdGlscyIsImNvbHVtblJvd3MiLCJtYXhMZXZlbCIsInRyYXZlcnNlIiwic3ViQ29sdW1uIiwicm93cyIsInJvd1NwYW4iLCJpc1N1YkNvbHVtbiIsImNvbnZlcnRUb1Jvd3MiLCJpc0dyb3VwIiwiVGFibGVIZWFkZXIiLCJib3JkZXIiLCJkZWZhdWx0U29ydCIsImFzeW5jIiwiaGFuZGxlSGVhZGVyQ2xpY2siLCJoYW5kbGVIZWFkZXJDb250ZXh0TWVudSIsImhhbmRsZU1vdXNlRG93biIsImhhbmRsZU1vdXNlTW92ZSIsImhhbmRsZU1vdXNlT3V0IiwiaGFuZGxlU29ydENsaWNrIiwiaGFuZGxlRmlsdGVyQ2xpY2siLCJkcmFnZ2luZ0NvbHVtbiIsImRyYWdnaW5nIiwiZHJhZ1N0YXRlIiwiZ2l2ZW5PcmRlciIsInNvcnRPcmRlcnMiLCJ0b2dnbGVPcmRlciIsImhhc0NsYXNzIiwicmVtb3ZlQ2xhc3MiLCJmaWx0ZXJhYmxlIiwidGFibGVMZWZ0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY29sdW1uRWwiLCJxdWVyeVNlbGVjdG9yIiwiY29sdW1uUmVjdCIsIm1pbkxlZnQiLCJzdGFydE1vdXNlTGVmdCIsImNsaWVudFgiLCJzdGFydExlZnQiLCJzdGFydENvbHVtbkxlZnQiLCJyZXNpemVQcm94eSIsIm9uc2VsZWN0c3RhcnQiLCJvbmRyYWdzdGFydCIsImhhbmRsZU1vdXNlTW92ZTIiLCJldmVudDIiLCJkZWx0YUxlZnQiLCJwcm94eUxlZnQiLCJoYW5kbGVNb3VzZVVwIiwiY29sdW1uV2lkdGgiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJib2R5IiwiY3Vyc29yIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldFRpbWVvdXQiLCJyZXNpemFibGUiLCJyZWN0IiwiYm9keVN0eWxlIiwicGFnZVgiLCJ1c2VFdmVudCIsImdldEhlYWRlclJvd1N0eWxlIiwiZ2V0SGVhZGVyUm93Q2xhc3MiLCJnZXRIZWFkZXJDZWxsU3R5bGUiLCJnZXRIZWFkZXJDZWxsQ2xhc3MiLCJoZWFkZXJSb3dTdHlsZSIsImhlYWRlclJvd0NsYXNzTmFtZSIsImNvbHVtbkluZGV4IiwiaGVhZGVyQ2VsbFN0eWxlcyIsImhlYWRlckNlbGxTdHlsZSIsImZpeGVkU3R5bGUiLCJmaXhlZENsYXNzZXMiLCJoZWFkZXJBbGlnbiIsImxhYmVsQ2xhc3NOYW1lIiwiaGVhZGVyQ2VsbENsYXNzTmFtZSIsInVzZVN0eWxlIiwicmVuZGVyIiwiJHBhcmVudCIsInN1YkNvbHVtbnMiLCJjZWxsSW5kZXgiLCJjb2xzcGFuIiwicm93c3BhbiIsIm9uQ29udGV4dG1lbnUiLCJvbk1vdXNlZG93biIsIm9uTW91c2Vtb3ZlIiwib25Nb3VzZW91dCIsInJlbmRlckhlYWRlciIsIiRpbmRleCIsIl9zZWxmIiwiZmlsdGVyUGxhY2VtZW50IiwidXNlRXZlbnRzIiwidG9vbHRpcENvbnRlbnQiLCJ0b29sdGlwVHJpZ2dlciIsIm5leHRaSW5kZXgiLCJ1c2VaSW5kZXgiLCJoYW5kbGVFdmVudCIsImRhdGFzZXQiLCJwcmVmaXgiLCJoYW5kbGVEb3VibGVDbGljayIsImhhbmRsZUNsaWNrIiwiaGFuZGxlQ29udGV4dE1lbnUiLCJoYW5kbGVNb3VzZUVudGVyIiwiaGFuZGxlTW91c2VMZWF2ZSIsImhhbmRsZUNlbGxNb3VzZUVudGVyIiwidG9vbHRpcE9wdGlvbnMiLCJob3ZlclN0YXRlIiwiY2VsbENoaWxkIiwiY2hpbGROb2RlcyIsInJhbmdlIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInNldEVuZCIsInJvdW5kIiwiZ2V0U3R5bGUiLCJvZmZzZXRXaWR0aCIsInNjcm9sbFdpZHRoIiwicGFyZW50Tm9kZSIsInRyaWdnZXIiLCJwb3BwZXJDb250ZW50IiwibWVyZ2UiLCJlbnRlcmFibGUiLCJzaG93QXJyb3ciLCJzY3JvbGxDb250YWluZXIiLCJzaG93UG9wcGVyIiwicG9wcGVySW5zdGFuY2UiLCJ1cGRhdGUiLCJkZXN0cm95IiwicmVtb3ZlQ2hpbGQiLCJvbk9wZW4iLCJvbkNsb3NlIiwidXNlRGVsYXllZFRvZ2dsZSIsInNob3dBZnRlciIsImhpZGVBZnRlciIsIm9wZW4iLCJjbG9zZSIsImlzTGlnaHQiLCJjb250ZW50MiIsImVzY2FwZUh0bWwiLCJpbm5lckhUTUwiLCJ6SW5kZXgiLCJhcHBlbmRDaGlsZCIsInJlbmRlckNvbnRlbnQiLCJvbm1vdXNlZW50ZXIiLCJvbm1vdXNlbGVhdmUiLCJtb2RpZmllcnMiLCJhcnJvdyIsInJlbmRlckFycm93IiwicGFkZGluZyIsInBvcHBlck9wdGlvbnMiLCJjcmVhdGVQb3BwZXIiLCJzdHJhdGVneSIsImNyZWF0ZVRhYmxlUG9wcGVyIiwidGFibGVXcmFwcGVyIiwiaW5uZXJUZXh0IiwiaGFuZGxlQ2VsbE1vdXNlTGVhdmUiLCJvbGRIb3ZlclN0YXRlIiwidXNlUmVuZGVyIiwiZ2V0Um93U3R5bGUiLCJnZXRSb3dDbGFzcyIsImdldENlbGxTdHlsZSIsImdldENlbGxDbGFzcyIsImdldFNwYW4iLCJnZXRDb2xzcGFuUmVhbFdpZHRoIiwicm93U3R5bGUiLCJoaWdobGlnaHRDdXJyZW50Um93Iiwic3RyaXBlIiwiZW0iLCJyb3dDbGFzc05hbWUiLCJjZWxsU3R5bGUiLCJjZWxsU3R5bGVzIiwiYWxpZ24iLCJjZWxsQ2xhc3NOYW1lIiwic3Bhbk1ldGhvZCIsIndpZHRoQXJyIiwiYWNjIiwidXNlU3R5bGVzIiwiZmlyc3REZWZhdWx0Q29sdW1uSW5kZXgiLCJnZXRLZXlPZlJvdyIsInJvd1JlbmRlciIsInRyZWVSb3dEYXRhIiwidG9vbHRpcEVmZmVjdCIsInJvd0NsYXNzZXMiLCJvbkRibGNsaWNrIiwiY29sdW1uRGF0YSIsImNvbnRleHQiLCJub0xhenlDaGlsZHJlbiIsImJhc2VLZXkiLCJwYXRjaEtleSIsInJhd0NvbHVtbktleSIsInRkQ2hpbGRyZW4iLCJjZWxsQ2hpbGRyZW4iLCJtZXJnZWRUb29sdGlwT3B0aW9ucyIsInNob3dPdmVyZmxvd1Rvb2x0aXAiLCJyZW5kZXJDZWxsIiwid3JhcHBlZFJvd1JlbmRlciIsInRyIiwicmVuZGVyRXhwYW5kZWQiLCJjb25zb2xlIiwiZXJyb3IiLCJ0bXAiLCJwYXJlbnQyIiwibm9kZSIsImlubmVyVHJlZVJvd0RhdGEiLCJub2RlczIiLCJub2RlcyIsIlRhYmxlQm9keSIsImhpZ2hsaWdodCIsInJhZiIsImNvbnRhaW5zIiwib2xkUm93IiwibmV3Um93IiwiaENvbGdyb3VwIiwiaXNBdXRvIiwiZXZlcnkiLCJwcm9wc0RhdGEiLCJnZXRQcm9wc0RhdGEiLCJsZWZ0Rml4ZWRMZWFmQ291bnQiLCJyaWdodEZpeGVkTGVhZkNvdW50IiwiY29sdW1uc0NvdW50IiwibGVmdEZpeGVkQ291bnQiLCJyaWdodEZpeGVkQ291bnQiLCJ1c2VNYXBTdGF0ZSIsImdldENlbGxDbGFzc2VzIiwiZ2V0Q2VsbFN0eWxlcyIsIlRhYmxlRm9vdGVyIiwic3VtbWFyeU1ldGhvZCIsInN1bVRleHQiLCJzdW1zIiwicHJlY2lzaW9ucyIsIm5vdE51bWJlciIsImRlY2ltYWwiLCJwcmVjaXNpb24iLCJjdXJyIiwidG9GaXhlZCIsImNlbGxzcGFjaW5nIiwiY2VsbHBhZGRpbmciLCJpc0hpZGRlbiIsInJlc2l6ZVByb3h5VmlzaWJsZSIsImhlYWRlckhlaWdodCIsInRhYmxlV2lkdGgiLCJ0YWJsZVNjcm9sbEhlaWdodCIsImJvZHlTY3JvbGxIZWlnaHQiLCJoZWFkZXJTY3JvbGxIZWlnaHQiLCJmb290ZXJTY3JvbGxIZWlnaHQiLCJtYXhIZWlnaHQiLCJzaG91bGRVcGRhdGVIZWlnaHQiLCJ0YWJsZUJvZHlTdHlsZXMiLCJzeW5jUG9zaXRpb24iLCJ0YWJsZUhlYWRlciIsImhlYWRlcldyYXBwZXIiLCJmbGV4aWJsZSIsIm9mZnNldEhlaWdodCIsInNldFNjcm9sbENsYXNzIiwic3RhcnRzV2l0aCIsInNldFNjcm9sbENsYXNzQnlFbCIsInNjcm9sbGluZ05vbmVDbGFzcyIsImhhc1Njcm9sbENsYXNzIiwic2Nyb2xsTGVmdCIsImZvb3RlcldyYXBwZXIiLCJiaW5kRXZlbnRzIiwidXNlRXZlbnRMaXN0ZW5lciIsInVzZVJlc2l6ZU9ic2VydmVyIiwicmVzaXplTGlzdGVuZXIiLCJib2R5V3JhcHBlciIsInNob3VsZFVwZGF0ZUxheW91dCIsIm9sZFdpZHRoIiwib2xkSGVpZ2h0Iiwib2xkSGVhZGVySGVpZ2h0IiwiJGVsIiwidXNlRm9ybVNpemUiLCJib2R5V2lkdGhfIiwiZW1wdHlCbG9ja1N0eWxlIiwidGFibGVJbm5lclN0eWxlIiwic2Nyb2xsYmFyU3R5bGUiLCJzZXREcmFnVmlzaWJsZSIsImhhbmRsZUhlYWRlckZvb3Rlck1vdXNld2hlZWwiLCJhYnMiLCJoYW5kbGVGaXhlZE1vdXNld2hlZWwiLCJjdXJyZW50U2Nyb2xsVG9wIiwic2Nyb2xsVG9wIiwicHJldmVudERlZmF1bHQiLCJzY3JvbGxiYXJWaWV3U3R5bGUiLCJ2ZXJ0aWNhbEFsaWduIiwidXNlS2V5UmVuZGVyIiwiY29sdW1uc1dyYXBwZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJkaXNjb25uZWN0IiwiZGVmYXVsdFByb3BzIiwidXNlU2l6ZVByb3AiLCJzaG93U3VtbWFyeSIsImVtcHR5VGV4dCIsInRyZWVQcm9wcyIsImhhc0NoaWxkcmVuIiwic2Nyb2xsYmFyQWx3YXlzT24iLCJ0YWJsZUlkU2VlZCIsImlzRW1wdHkiLCJzY3JvbGxUbyIsInNldFNjcm9sbExlZnQiLCJzZXRTY3JvbGxUb3AiLCJzZXRTY3JvbGxQb3NpdGlvbiIsInBvc2l0aW9uIiwic2Nyb2xsYmFyIiwieUNvb3JkIiwidG9wIiwidXNlU2Nyb2xsYmFyIiwidGFibGVJZCIsImNvbXB1dGVkU3VtVGV4dCIsImNvbXB1dGVkRW1wdHlUZXh0IiwiVGFibGUiLCJfY29tcG9uZW50X2hDb2xncm91cCIsIl9jb21wb25lbnRfdGFibGVfaGVhZGVyIiwiX2NvbXBvbmVudF90YWJsZV9ib2R5IiwiX2NvbXBvbmVudF90YWJsZV9mb290ZXIiLCJfZGlyZWN0aXZlX21vdXNld2hlZWwiLCJub3JtYWxpemVTdHlsZSIsInJlbmRlclNsb3QiLCIkc2xvdHMiLCJvblNldERyYWdWaXNpYmxlIiwiYWx3YXlzIiwiYXBwZW5kIiwidlNob3ciLCJkZWZhdWx0Q2xhc3NOYW1lcyIsImV4cGFuZCIsImNlbGxTdGFydHMiLCJjZWxsRm9yY2VkIiwiaW5kZXRlcm1pbmF0ZSIsImRlZmF1bHRSZW5kZXJDZWxsIiwiZ2V0UHJvcCIsImZvcm1hdHRlciIsInRvU3RyaW5nIiwiZ2V0QWxsQWxpYXNlcyIsImFsaWFzZXMiLCJvd25lciIsInJlYWxBbGlnbiIsInJlYWxIZWFkZXJBbGlnbiIsImNvbHVtbk9yVGFibGVQYXJlbnQiLCJ2UGFyZW50IiwiaGFzVHJlZUNvbHVtbiIsInRyZWVEYXRhVmFsdWUiLCJyZWFsTWluV2lkdGgiLCJzZXRDb2x1bW5XaWR0aCIsInNldENvbHVtbkZvcmNlZFByb3BzIiwiZ2V0RGVmYXVsdENsYXNzTmFtZSIsImZvcmNlQ2xhc3MiLCJzZXRDb2x1bW5SZW5kZXJzIiwic2NvcGUiLCJjb2x1bW5Db25maWciLCJoZWFkZXIiLCJvcmlnaW5SZW5kZXJDZWxsIiwidm5vZGVzIiwiQ29tbWVudCIsImZpcnN0VXNlckNvbHVtbkluZGV4IiwiY3JlYXRlUGxhY2Vob2xkZXIiLCJlbGUiLCJleHBhbmRDbGFzc2VzIiwiaWNvbiIsIkxvYWRpbmciLCJ0cmVlQ2VsbFByZWZpeCIsInByb3BzMiIsImNoZWNrIiwiY2hpbGQiLCJjaGVja1N1YkNvbHVtbiIsImdldENvbHVtbkVsSW5kZXgiLCJwcm90b3R5cGUiLCJjb2x1bW5JZFNlZWQiLCJFbFRhYmxlQ29sdW1uIiwicmVnaXN0ZXJOb3JtYWxXYXRjaGVycyIsInJlZ2lzdGVyQ29tcGxleFdhdGNoZXJzIiwicHJvcHNfIiwiYWxsQWxpYXNlcyIsImRlZmF1bHRzIiwiY29uZmlnIiwibWVyZ2VPcHRpb25zIiwiZnVuY3MiLCJhcmciLCJjb21wb3NlIiwiY2hhaW5zIiwiaGlkZGVuQ29sdW1ucyIsIm9uQmVmb3JlVW5tb3VudCIsInJlbmRlckRlZmF1bHQiLCJjaGlsZE5vZGUiLCJzaGFwZUZsYWciLCJ2bm9kZTIiLCJwYXRjaEZsYWciLCJpc1N0cmluZyIsIkVsVGFibGUiLCJUYWJsZUNvbHVtbiIsIkVsVGFibGVDb2x1bW4kMSIsIndpdGhOb29wSW5zdGFsbCIsInByb3BUeXBlcyIsIm51bWJlciIsImRlZiIsImJvb2wiLCJyZXNlcnZlSW5kZXgiLCJ2YWxpZGF0ZSIsImF0dHJzIiwiZXhwb3NlIiwiZWxUYWJsZVJlZiIsInRhYmxlUmVmIiwicGFnZVNpemVSZWYiLCJjdXJyZW50UGFnZVJlZiIsIm91dHNpZGVQcm9wcyIsIm1lcmdlUHJvcHMiLCJnZXRQcm9wcyIsInByb3BzT2JqIiwic2V0Q29sdW1uIiwiY29sdW1uUHJvcHMiLCJjb2x1bW5zQ2hpbGRyZW4iLCJmaWVsZCIsInNlbGVjdGlvbnMiLCJzZWxlY3Rpb25DaGFuZ2UiLCJzZXRQcm9wcyIsImdldEJpbmRWYWx1ZSIsImJpbmRWYWx1ZSIsInJlbmRlclRhYmxlU2VsZWN0aW9uIiwidW5kZWZpbmVkIiwicmVuZGVyVGFibGVFeHBhbmQiLCJfY3JlYXRlVk5vZGUiLCJnZXRTbG90Iiwicm5kZXJUYWJsZUNvbHVtbiIsIm5ld0luZGV4Iiwic2V0SW5kZXgiLCJfbWVyZ2VQcm9wcyIsInJuZGVyVHJlZVRhYmxlQ29sdW1uIiwiX3dpdGhEaXJl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ckMsR0FDaEJyL0IsRUFBTXUvQixJQUFhLENBR3JCamhDLFFBQVNBLElBQU13aEMsSUFFZnBHLE9BQVFBLElBQU1tRyxHQUFRdDNCLEVBQU8sWUFHaEN2SSxFQUFNOCtCLEdBQVVoOUIsV0FBUzg5QixFQUFBdjNCLEdBQUE0M0IsR0FBQSxDQUFBaC9CLFNBRUp5OUIsRUFBWXJzQyxNQUFLLG9CQUFqQnFzQyxHQUFBQSxFQUFZcnNDLE1BQUs2TixFQUFBOUIsWUFDZHVnQyxFQUFldHNDLE1BQUssdUJBQXBCc3NDLEdBQUFBLEVBQWV0c0MsTUFBSzZOLEVBQUFILE1BQUEsV0FFckNDLEVBQU04QixlQUVWNDlCLElBQVMsQ0FBQSxDQUFBVSxHQUFBLFdBckJDcGdDLEVBQU04K0IsR0FBVTVuQixVQXdCcEMiLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMCwxLDIsMyw0LDUsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOSwyMCwyMSwyMiwyMywyNCwyNSwyNiwyNywyOCwyOSwzMCwzMSwzMiwzMywzNCwzNSwzNiwzNywzOCwzOSw0MCw0MSw0Miw0Myw0NCw0NSw0Niw0Nyw0OCw0OSw1MCw1MSw1Miw1Myw1NCw1NSw1Niw1Nyw1OCw1OSw2MCw2MSw2Miw2Myw2NCw2NSw2Niw2Nyw2OCw2OSw3MCw3MSw3Miw3Myw3NCw3NSw3Niw3Nyw3OCw3OSw4MF19
