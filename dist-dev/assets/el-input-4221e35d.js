import{a$ as e,x as a,aI as t,bO as o,r as n,N as l,K as s,bk as i,L as r,aF as u,M as p,b1 as d,d as c,bc as v,b7 as f,S as m,W as y,bH as b,bP as x,bQ as g,b6 as h,X as w,Y as S,b2 as k,E as z,aC as C,a8 as I,a9 as $,o as E,c as F,G as P,F as j,n as M,a as V,aa as _,e as B,h as N,w as A,a5 as H,$ as O,ai as R,g as K,bj as T,_ as W,ba as L,t as Y,Z,ac as D,bb as G,ag as Q}from"./index-ec301f65.js";import{U}from"./event-5568c9d8.js";import{u as X,a as q}from"./use-form-item-f00b3d1a.js";import{u as J,a as ee}from"./use-form-common-props-12176987.js";import{i as ae}from"./el-popper-12ece89c.js";const te=()=>e&&/firefox/i.test(window.navigator.userAgent),oe=e=>/([(\uAC00-\uD7AF)|(\u3130-\u318F)])+/gi.test(e),ne=["class","style"],le=/^on[A-Z]/,se=(e={})=>{const{excludeListeners:n=!1,excludeKeys:l}=e,s=a((()=>((null==l?void 0:l.value)||[]).concat(ne))),i=t();return a(i?()=>{var e;return o(Object.entries(null==(e=i.proxy)?void 0:e.$attrs).filter((([e])=>!(s.value.includes(e)||n&&le.test(e)))))}:()=>({}))};let ie;const re=`\n  height:0 !important;\n  visibility:hidden !important;\n  ${te()?"":"overflow:hidden !important;"}\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important;\n`,ue=["letter-spacing","line-height","padding-top","padding-bottom","font-family","font-weight","font-size","text-rendering","text-transform","width","text-indent","padding-left","padding-right","border-width","box-sizing"];function pe(e,a=1,t){var o;ie||(ie=document.createElement("textarea"),document.body.appendChild(ie));const{paddingSize:n,borderSize:s,boxSizing:i,contextStyle:r}=function(e){const a=window.getComputedStyle(e),t=a.getPropertyValue("box-sizing"),o=Number.parseFloat(a.getPropertyValue("padding-bottom"))+Number.parseFloat(a.getPropertyValue("padding-top")),n=Number.parseFloat(a.getPropertyValue("border-bottom-width"))+Number.parseFloat(a.getPropertyValue("border-top-width"));return{contextStyle:ue.map((e=>`${e}:${a.getPropertyValue(e)}`)).join(";"),paddingSize:o,borderSize:n,boxSizing:t}}(e);ie.setAttribute("style",`${r};${re}`),ie.value=e.value||e.placeholder||"";let u=ie.scrollHeight;const p={};"border-box"===i?u+=s:"content-box"===i&&(u-=n),ie.value="";const d=ie.scrollHeight-n;if(l(a)){let e=d*a;"border-box"===i&&(e=e+n+s),u=Math.max(e,u),p.minHeight=`${e}px`}if(l(t)){let e=d*t;"border-box"===i&&(e=e+n+s),u=Math.min(e,u)}return p.height=`${u}px`,null==(o=ie.parentNode)||o.removeChild(ie),ie=void 0,p}const de=s({id:{type:String,default:void 0},size:i,disabled:Boolean,modelValue:{type:r([String,Number,Object]),default:""},type:{type:String,default:"text"},resize:{type:String,values:["none","both","horizontal","vertical"]},autosize:{type:r([Boolean,Object]),default:!1},autocomplete:{type:String,default:"off"},formatter:{type:Function},parser:{type:Function},placeholder:{type:String},form:{type:String},readonly:{type:Boolean,default:!1},clearable:{type:Boolean,default:!1},showPassword:{type:Boolean,default:!1},showWordLimit:{type:Boolean,default:!1},suffixIcon:{type:u},prefixIcon:{type:u},containerRole:{type:String,default:void 0},label:{type:String,default:void 0},tabindex:{type:[String,Number],default:0},validateEvent:{type:Boolean,default:!0},inputStyle:{type:r([Object,Array,String]),default:()=>p({})}}),ce={[U]:e=>d(e),input:e=>d(e),change:e=>d(e),focus:e=>e instanceof FocusEvent,blur:e=>e instanceof FocusEvent,clear:()=>!0,mouseleave:e=>e instanceof MouseEvent,mouseenter:e=>e instanceof MouseEvent,keydown:e=>e instanceof Event,compositionstart:e=>e instanceof CompositionEvent,compositionupdate:e=>e instanceof CompositionEvent,compositionend:e=>e instanceof CompositionEvent},ve=["role"],fe=["id","type","disabled","formatter","parser","readonly","autocomplete","tabindex","aria-label","placeholder","form"],me=["id","tabindex","disabled","readonly","autocomplete","aria-label","placeholder","form"],ye=c({name:"ElInput",inheritAttrs:!1});const be=Q(D(c({...ye,props:de,emits:ce,setup(t,{expose:o,emit:l}){const s=t,i=v(),r=f(),u=a((()=>{const e={};return"combobox"===s.containerRole&&(e["aria-haspopup"]=i["aria-haspopup"],e["aria-owns"]=i["aria-owns"],e["aria-expanded"]=i["aria-expanded"]),e})),p=a((()=>["textarea"===s.type?re.b():ie.b(),ie.m(ne.value),ie.is("disabled",le.value),ie.is("exceed",Ve.value),{[ie.b("group")]:r.prepend||r.append,[ie.bm("group","append")]:r.append,[ie.bm("group","prepend")]:r.prepend,[ie.m("prefix")]:r.prefix||s.prefixIcon,[ie.m("suffix")]:r.suffix||s.suffixIcon||s.clearable||s.showPassword,[ie.bm("suffix","password-clear")]:Fe.value&&Pe.value},i.class])),d=a((()=>[ie.e("wrapper"),ie.is("focus",ce.value)])),c=se({excludeKeys:a((()=>Object.keys(u.value)))}),{form:D,formItem:Q}=X(),{inputId:te}=q(s,{formItemContext:Q}),ne=J(),le=ee(),ie=m("input"),re=m("textarea"),ue=y(),de=y(),ce=n(!1),ye=n(!1),be=n(!1),xe=n(!1),ge=n(),he=y(s.inputStyle),we=a((()=>ue.value||de.value)),Se=a((()=>{var e;return null!=(e=null==D?void 0:D.statusIcon)&&e})),ke=a((()=>(null==Q?void 0:Q.validateState)||"")),ze=a((()=>ke.value&&b[ke.value])),Ce=a((()=>xe.value?x:g)),Ie=a((()=>[i.style,s.inputStyle])),$e=a((()=>[s.inputStyle,he.value,{resize:s.resize}])),Ee=a((()=>ae(s.modelValue)?"":String(s.modelValue))),Fe=a((()=>s.clearable&&!le.value&&!s.readonly&&!!Ee.value&&(ce.value||ye.value))),Pe=a((()=>s.showPassword&&!le.value&&!s.readonly&&!!Ee.value&&(!!Ee.value||ce.value))),je=a((()=>s.showWordLimit&&!!c.value.maxlength&&("text"===s.type||"textarea"===s.type)&&!le.value&&!s.readonly&&!s.showPassword)),Me=a((()=>Ee.value.length)),Ve=a((()=>!!je.value&&Me.value>Number(c.value.maxlength))),_e=a((()=>!!r.suffix||!!s.suffixIcon||Fe.value||s.showPassword||je.value||!!ke.value&&Se.value)),[Be,Ne]=function(e){const a=n();return[function(){if(null==e.value)return;const{selectionStart:t,selectionEnd:o,value:n}=e.value;if(null==t||null==o)return;const l=n.slice(0,Math.max(0,t)),s=n.slice(Math.max(0,o));a.value={selectionStart:t,selectionEnd:o,value:n,beforeTxt:l,afterTxt:s}},function(){if(null==e.value||null==a.value)return;const{value:t}=e.value,{beforeTxt:o,afterTxt:n,selectionStart:l}=a.value;if(null==o||null==n||null==l)return;let s=t.length;if(t.endsWith(n))s=t.length-n.length;else if(t.startsWith(o))s=o.length;else{const e=o[l-1],a=t.indexOf(e,l-1);-1!==a&&(s=a+1)}e.value.setSelectionRange(s,s)}]}(ue);h(de,(e=>{if(He(),!je.value||"both"!==s.resize)return;const a=e[0],{width:t}=a.contentRect;ge.value={right:`calc(100% - ${t+15+6}px)`}}));const Ae=()=>{const{type:a,autosize:t}=s;if(e&&"textarea"===a&&de.value)if(t){const e=G(t)?t.minRows:void 0,a=G(t)?t.maxRows:void 0,o=pe(de.value,e,a);he.value={overflowY:"hidden",...o},S((()=>{de.value.offsetHeight,he.value=o}))}else he.value={minHeight:pe(de.value).minHeight}},He=(e=>{let a=!1;return()=>{var t;if(a||!s.autosize)return;null===(null==(t=de.value)?void 0:t.offsetParent)||(e(),a=!0)}})(Ae),Oe=()=>{const e=we.value;e&&e.value!==Ee.value&&(e.value=Ee.value)},Re=async e=>{Be();let{value:a}=e.target;s.formatter&&(a=s.parser?s.parser(a):a,a=s.formatter(a)),be.value||(a!==Ee.value?(l(U,a),l("input",a),await S(),Oe(),Ne()):Oe())},Ke=e=>{l("change",e.target.value)},Te=e=>{l("compositionstart",e),be.value=!0},We=e=>{var a;l("compositionupdate",e);const t=null==(a=e.target)?void 0:a.value,o=t[t.length-1]||"";be.value=!oe(o)},Le=e=>{l("compositionend",e),be.value&&(be.value=!1,Re(e))},Ye=()=>{xe.value=!xe.value,Ze()},Ze=async()=>{var e;await S(),null==(e=we.value)||e.focus()},De=e=>{ce.value=!0,l("focus",e)},Ge=e=>{var a;ce.value=!1,l("blur",e),s.validateEvent&&(null==(a=null==Q?void 0:Q.validate)||a.call(Q,"blur").catch((e=>k())))},Qe=e=>{ye.value=!1,l("mouseleave",e)},Ue=e=>{ye.value=!0,l("mouseenter",e)},Xe=e=>{l("keydown",e)},qe=()=>{l(U,""),l("change",""),l("clear"),l("input","")};return w((()=>s.modelValue),(()=>{var e;S((()=>Ae())),s.validateEvent&&(null==(e=null==Q?void 0:Q.validate)||e.call(Q,"change").catch((e=>k())))})),w(Ee,(()=>Oe())),w((()=>s.type),(async()=>{await S(),Oe(),Ae()})),z((()=>{!s.formatter&&s.parser,Oe(),S(Ae)})),o({input:ue,textarea:de,ref:we,textareaStyle:$e,autosize:C(s,"autosize"),focus:Ze,blur:()=>{var e;return null==(e=we.value)?void 0:e.blur()},select:()=>{var e;null==(e=we.value)||e.select()},clear:qe,resizeTextarea:Ae}),(e,a)=>I((E(),F("div",R(V(u),{class:V(p),style:V(Ie),role:e.containerRole,onMouseenter:Ue,onMouseleave:Qe}),[P(" input "),"textarea"!==e.type?(E(),F(j,{key:0},[P(" prepend slot "),e.$slots.prepend?(E(),F("div",{key:0,class:M(V(ie).be("group","prepend"))},[_(e.$slots,"prepend")],2)):P("v-if",!0),B("div",{class:M(V(d))},[P(" prefix slot "),e.$slots.prefix||e.prefixIcon?(E(),F("span",{key:0,class:M(V(ie).e("prefix"))},[B("span",{class:M(V(ie).e("prefix-inner")),onClick:Ze},[_(e.$slots,"prefix"),e.prefixIcon?(E(),N(V(O),{key:0,class:M(V(ie).e("icon"))},{default:A((()=>[(E(),N(H(e.prefixIcon)))])),_:1},8,["class"])):P("v-if",!0)],2)],2)):P("v-if",!0),B("input",R({id:V(te),ref_key:"input",ref:ue,class:V(ie).e("inner")},V(c),{type:e.showPassword?xe.value?"text":"password":e.type,disabled:V(le),formatter:e.formatter,parser:e.parser,readonly:e.readonly,autocomplete:e.autocomplete,tabindex:e.tabindex,"aria-label":e.label,placeholder:e.placeholder,style:e.inputStyle,form:s.form,onCompositionstart:Te,onCompositionupdate:We,onCompositionend:Le,onInput:Re,onFocus:De,onBlur:Ge,onChange:Ke,onKeydown:Xe}),null,16,fe),P(" suffix slot "),V(_e)?(E(),F("span",{key:1,class:M(V(ie).e("suffix"))},[B("span",{class:M(V(ie).e("suffix-inner")),onClick:Ze},[V(Fe)&&V(Pe)&&V(je)?P("v-if",!0):(E(),F(j,{key:0},[_(e.$slots,"suffix"),e.suffixIcon?(E(),N(V(O),{key:0,class:M(V(ie).e("icon"))},{default:A((()=>[(E(),N(H(e.suffixIcon)))])),_:1},8,["class"])):P("v-if",!0)],64)),V(Fe)?(E(),N(V(O),{key:1,class:M([V(ie).e("icon"),V(ie).e("clear")]),onMousedown:W(V(L),["prevent"]),onClick:qe},{default:A((()=>[K(V(T))])),_:1},8,["class","onMousedown"])):P("v-if",!0),V(Pe)?(E(),N(V(O),{key:2,class:M([V(ie).e("icon"),V(ie).e("password")]),onClick:Ye},{default:A((()=>[(E(),N(H(V(Ce))))])),_:1},8,["class"])):P("v-if",!0),V(je)?(E(),F("span",{key:3,class:M(V(ie).e("count"))},[B("span",{class:M(V(ie).e("count-inner"))},Y(V(Me))+" / "+Y(V(c).maxlength),3)],2)):P("v-if",!0),V(ke)&&V(ze)&&V(Se)?(E(),N(V(O),{key:4,class:M([V(ie).e("icon"),V(ie).e("validateIcon"),V(ie).is("loading","validating"===V(ke))])},{default:A((()=>[(E(),N(H(V(ze))))])),_:1},8,["class"])):P("v-if",!0)],2)],2)):P("v-if",!0)],2),P(" append slot "),e.$slots.append?(E(),F("div",{key:1,class:M(V(ie).be("group","append"))},[_(e.$slots,"append")],2)):P("v-if",!0)],64)):(E(),F(j,{key:1},[P(" textarea "),B("textarea",R({id:V(te),ref_key:"textarea",ref:de,class:V(re).e("inner")},V(c),{tabindex:e.tabindex,disabled:V(le),readonly:e.readonly,autocomplete:e.autocomplete,style:V($e),"aria-label":e.label,placeholder:e.placeholder,form:s.form,onCompositionstart:Te,onCompositionupdate:We,onCompositionend:Le,onInput:Re,onFocus:De,onBlur:Ge,onChange:Ke,onKeydown:Xe}),null,16,me),V(je)?(E(),F("span",{key:0,style:Z(ge.value),class:M(V(ie).e("count"))},Y(V(Me))+" / "+Y(V(c).maxlength),7)):P("v-if",!0)],64))],16,ve)),[[$,"hidden"!==e.type]])}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/input/src/input.vue"]]));export{be as E,te as a,oe as i,se as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
