import{bE as e,L as t,aI as n,x as o,b4 as r,X as a,E as i,a$ as s,ar as l,a as u,W as p,r as c,al as f,bO as d,bR as v,ae as m,bS as g,bT as h,K as y,N as b,az as w,d as x,aa as O,ac as E,S as R,aA as A,o as T,c as k,n as S,Z as C,ba as L,a8 as P,bU as F,bb as j,F as B,bN as M,bV as I,g as D,bW as _,bX as H,h as N,w as W,ai as $,G as q,Y as K,b1 as U,U as z,ag as V,aJ as Z,aC as X,a9 as Y,i as G,ab as J,bd as Q,aB as ee,bY as te,t as ne}from"./index-ec301f65.js";import{b as oe,a as re,u as ae}from"./constants-4fd7b236.js";const ie=(e,t,{checkForDefaultPrevented:n=!0}={})=>o=>{const r=null==e?void 0:e(o);if(!1===n||!r)return null==t?void 0:t(o)},se=e=>t=>"mouse"===t.pointerType?e(t):void 0;function le(e){return null==e}const ue=e({type:t(Boolean),default:null}),pe=e({type:t(Function)}),ce=e=>{const t=`update:${e}`,u=`onUpdate:${e}`;return{useModelToggle:({indicator:p,toggleReason:c,shouldHideWhenRouteChanges:f,shouldProceed:d,onShow:v,onHide:m})=>{const g=n(),{emit:h}=g,y=g.props,b=o((()=>r(y[u]))),w=o((()=>null===y[e])),x=e=>{!0!==p.value&&(p.value=!0,c&&(c.value=e),r(v)&&v(e))},O=e=>{!1!==p.value&&(p.value=!1,c&&(c.value=e),r(m)&&m(e))},E=e=>{if(!0===y.disabled||r(d)&&!d())return;const n=b.value&&s;n&&h(t,!0),!w.value&&n||x(e)},R=e=>{if(!0===y.disabled||!s)return;const n=b.value&&s;n&&h(t,!1),!w.value&&n||O(e)},A=e=>{l(e)&&(y.disabled&&e?b.value&&h(t,!1):p.value!==e&&(e?x():O()))};return a((()=>y[e]),A),f&&void 0!==g.appContext.config.globalProperties.$route&&a((()=>({...g.proxy.$route})),(()=>{f.value&&p.value&&R()})),i((()=>{A(y[e])})),{hide:R,show:E,toggle:()=>{p.value?R():E()},hasUpdateHandler:b}},useModelToggleProps:{[e]:ue,[u]:pe},useModelToggleEmits:[t]}};ce("modelValue");var fe="top",de="bottom",ve="right",me="left",ge="auto",he=[fe,de,ve,me],ye="start",be="end",we="clippingParents",xe="viewport",Oe="popper",Ee="reference",Re=he.reduce((function(e,t){return e.concat([t+"-"+ye,t+"-"+be])}),[]),Ae=[].concat(he,[ge]).reduce((function(e,t){return e.concat([t,t+"-"+ye,t+"-"+be])}),[]),Te=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function ke(e){return e?(e.nodeName||"").toLowerCase():null}function Se(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function Ce(e){return e instanceof Se(e).Element||e instanceof Element}function Le(e){return e instanceof Se(e).HTMLElement||e instanceof HTMLElement}function Pe(e){return"undefined"!=typeof ShadowRoot&&(e instanceof Se(e).ShadowRoot||e instanceof ShadowRoot)}var Fe={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},o=t.attributes[e]||{},r=t.elements[e];!Le(r)||!ke(r)||(Object.assign(r.style,n),Object.keys(o).forEach((function(e){var t=o[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var o=t.elements[e],r=t.attributes[e]||{},a=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});!Le(o)||!ke(o)||(Object.assign(o.style,a),Object.keys(r).forEach((function(e){o.removeAttribute(e)})))}))}},requires:["computeStyles"]};function je(e){return e.split("-")[0]}var Be=Math.max,Me=Math.min,Ie=Math.round;function De(e,t){void 0===t&&(t=!1);var n=e.getBoundingClientRect(),o=1,r=1;if(Le(e)&&t){var a=e.offsetHeight,i=e.offsetWidth;i>0&&(o=Ie(n.width)/i||1),a>0&&(r=Ie(n.height)/a||1)}return{width:n.width/o,height:n.height/r,top:n.top/r,right:n.right/o,bottom:n.bottom/r,left:n.left/o,x:n.left/o,y:n.top/r}}function _e(e){var t=De(e),n=e.offsetWidth,o=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-o)<=1&&(o=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:o}}function He(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&Pe(n)){var o=t;do{if(o&&e.isSameNode(o))return!0;o=o.parentNode||o.host}while(o)}return!1}function Ne(e){return Se(e).getComputedStyle(e)}function We(e){return["table","td","th"].indexOf(ke(e))>=0}function $e(e){return((Ce(e)?e.ownerDocument:e.document)||window.document).documentElement}function qe(e){return"html"===ke(e)?e:e.assignedSlot||e.parentNode||(Pe(e)?e.host:null)||$e(e)}function Ke(e){return Le(e)&&"fixed"!==Ne(e).position?e.offsetParent:null}function Ue(e){for(var t=Se(e),n=Ke(e);n&&We(n)&&"static"===Ne(n).position;)n=Ke(n);return n&&("html"===ke(n)||"body"===ke(n)&&"static"===Ne(n).position)?t:n||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&Le(e)&&"fixed"===Ne(e).position)return null;var n=qe(e);for(Pe(n)&&(n=n.host);Le(n)&&["html","body"].indexOf(ke(n))<0;){var o=Ne(n);if("none"!==o.transform||"none"!==o.perspective||"paint"===o.contain||-1!==["transform","perspective"].indexOf(o.willChange)||t&&"filter"===o.willChange||t&&o.filter&&"none"!==o.filter)return n;n=n.parentNode}return null}(e)||t}function ze(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function Ve(e,t,n){return Be(e,Me(t,n))}function Ze(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function Xe(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}var Ye={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,o=e.name,r=e.options,a=n.elements.arrow,i=n.modifiersData.popperOffsets,s=je(n.placement),l=ze(s),u=[me,ve].indexOf(s)>=0?"height":"width";if(a&&i){var p=function(e,t){return Ze("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:Xe(e,he))}(r.padding,n),c=_e(a),f="y"===l?fe:me,d="y"===l?de:ve,v=n.rects.reference[u]+n.rects.reference[l]-i[l]-n.rects.popper[u],m=i[l]-n.rects.reference[l],g=Ue(a),h=g?"y"===l?g.clientHeight||0:g.clientWidth||0:0,y=v/2-m/2,b=p[f],w=h-c[u]-p[d],x=h/2-c[u]/2+y,O=Ve(b,x,w),E=l;n.modifiersData[o]=((t={})[E]=O,t.centerOffset=O-x,t)}},effect:function(e){var t=e.state,n=e.options.element,o=void 0===n?"[data-popper-arrow]":n;null!=o&&("string"==typeof o&&!(o=t.elements.popper.querySelector(o))||!He(t.elements.popper,o)||(t.elements.arrow=o))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Ge(e){return e.split("-")[1]}var Je={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Qe(e){var t,n=e.popper,o=e.popperRect,r=e.placement,a=e.variation,i=e.offsets,s=e.position,l=e.gpuAcceleration,u=e.adaptive,p=e.roundOffsets,c=e.isFixed,f=i.x,d=void 0===f?0:f,v=i.y,m=void 0===v?0:v,g="function"==typeof p?p({x:d,y:m}):{x:d,y:m};d=g.x,m=g.y;var h=i.hasOwnProperty("x"),y=i.hasOwnProperty("y"),b=me,w=fe,x=window;if(u){var O=Ue(n),E="clientHeight",R="clientWidth";if(O===Se(n)&&("static"!==Ne(O=$e(n)).position&&"absolute"===s&&(E="scrollHeight",R="scrollWidth")),r===fe||(r===me||r===ve)&&a===be)w=de,m-=(c&&O===x&&x.visualViewport?x.visualViewport.height:O[E])-o.height,m*=l?1:-1;if(r===me||(r===fe||r===de)&&a===be)b=ve,d-=(c&&O===x&&x.visualViewport?x.visualViewport.width:O[R])-o.width,d*=l?1:-1}var A,T=Object.assign({position:s},u&&Je),k=!0===p?function(e){var t=e.x,n=e.y,o=window.devicePixelRatio||1;return{x:Ie(t*o)/o||0,y:Ie(n*o)/o||0}}({x:d,y:m}):{x:d,y:m};return d=k.x,m=k.y,l?Object.assign({},T,((A={})[w]=y?"0":"",A[b]=h?"0":"",A.transform=(x.devicePixelRatio||1)<=1?"translate("+d+"px, "+m+"px)":"translate3d("+d+"px, "+m+"px, 0)",A)):Object.assign({},T,((t={})[w]=y?m+"px":"",t[b]=h?d+"px":"",t.transform="",t))}var et={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,o=n.gpuAcceleration,r=void 0===o||o,a=n.adaptive,i=void 0===a||a,s=n.roundOffsets,l=void 0===s||s,u={placement:je(t.placement),variation:Ge(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:r,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,Qe(Object.assign({},u,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:i,roundOffsets:l})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,Qe(Object.assign({},u,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},tt={passive:!0};var nt={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,o=e.options,r=o.scroll,a=void 0===r||r,i=o.resize,s=void 0===i||i,l=Se(t.elements.popper),u=[].concat(t.scrollParents.reference,t.scrollParents.popper);return a&&u.forEach((function(e){e.addEventListener("scroll",n.update,tt)})),s&&l.addEventListener("resize",n.update,tt),function(){a&&u.forEach((function(e){e.removeEventListener("scroll",n.update,tt)})),s&&l.removeEventListener("resize",n.update,tt)}},data:{}},ot={left:"right",right:"left",bottom:"top",top:"bottom"};function rt(e){return e.replace(/left|right|bottom|top/g,(function(e){return ot[e]}))}var at={start:"end",end:"start"};function it(e){return e.replace(/start|end/g,(function(e){return at[e]}))}function st(e){var t=Se(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function lt(e){return De($e(e)).left+st(e).scrollLeft}function ut(e){var t=Ne(e),n=t.overflow,o=t.overflowX,r=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+r+o)}function pt(e){return["html","body","#document"].indexOf(ke(e))>=0?e.ownerDocument.body:Le(e)&&ut(e)?e:pt(qe(e))}function ct(e,t){var n;void 0===t&&(t=[]);var o=pt(e),r=o===(null==(n=e.ownerDocument)?void 0:n.body),a=Se(o),i=r?[a].concat(a.visualViewport||[],ut(o)?o:[]):o,s=t.concat(i);return r?s:s.concat(ct(qe(i)))}function ft(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function dt(e,t){return t===xe?ft(function(e){var t=Se(e),n=$e(e),o=t.visualViewport,r=n.clientWidth,a=n.clientHeight,i=0,s=0;return o&&(r=o.width,a=o.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(i=o.offsetLeft,s=o.offsetTop)),{width:r,height:a,x:i+lt(e),y:s}}(e)):Ce(t)?function(e){var t=De(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):ft(function(e){var t,n=$e(e),o=st(e),r=null==(t=e.ownerDocument)?void 0:t.body,a=Be(n.scrollWidth,n.clientWidth,r?r.scrollWidth:0,r?r.clientWidth:0),i=Be(n.scrollHeight,n.clientHeight,r?r.scrollHeight:0,r?r.clientHeight:0),s=-o.scrollLeft+lt(e),l=-o.scrollTop;return"rtl"===Ne(r||n).direction&&(s+=Be(n.clientWidth,r?r.clientWidth:0)-a),{width:a,height:i,x:s,y:l}}($e(e)))}function vt(e,t,n){var o="clippingParents"===t?function(e){var t=ct(qe(e)),n=["absolute","fixed"].indexOf(Ne(e).position)>=0&&Le(e)?Ue(e):e;return Ce(n)?t.filter((function(e){return Ce(e)&&He(e,n)&&"body"!==ke(e)})):[]}(e):[].concat(t),r=[].concat(o,[n]),a=r[0],i=r.reduce((function(t,n){var o=dt(e,n);return t.top=Be(o.top,t.top),t.right=Me(o.right,t.right),t.bottom=Me(o.bottom,t.bottom),t.left=Be(o.left,t.left),t}),dt(e,a));return i.width=i.right-i.left,i.height=i.bottom-i.top,i.x=i.left,i.y=i.top,i}function mt(e){var t,n=e.reference,o=e.element,r=e.placement,a=r?je(r):null,i=r?Ge(r):null,s=n.x+n.width/2-o.width/2,l=n.y+n.height/2-o.height/2;switch(a){case fe:t={x:s,y:n.y-o.height};break;case de:t={x:s,y:n.y+n.height};break;case ve:t={x:n.x+n.width,y:l};break;case me:t={x:n.x-o.width,y:l};break;default:t={x:n.x,y:n.y}}var u=a?ze(a):null;if(null!=u){var p="y"===u?"height":"width";switch(i){case ye:t[u]=t[u]-(n[p]/2-o[p]/2);break;case be:t[u]=t[u]+(n[p]/2-o[p]/2)}}return t}function gt(e,t){void 0===t&&(t={});var n=t,o=n.placement,r=void 0===o?e.placement:o,a=n.boundary,i=void 0===a?we:a,s=n.rootBoundary,l=void 0===s?xe:s,u=n.elementContext,p=void 0===u?Oe:u,c=n.altBoundary,f=void 0!==c&&c,d=n.padding,v=void 0===d?0:d,m=Ze("number"!=typeof v?v:Xe(v,he)),g=p===Oe?Ee:Oe,h=e.rects.popper,y=e.elements[f?g:p],b=vt(Ce(y)?y:y.contextElement||$e(e.elements.popper),i,l),w=De(e.elements.reference),x=mt({reference:w,element:h,strategy:"absolute",placement:r}),O=ft(Object.assign({},h,x)),E=p===Oe?O:w,R={top:b.top-E.top+m.top,bottom:E.bottom-b.bottom+m.bottom,left:b.left-E.left+m.left,right:E.right-b.right+m.right},A=e.modifiersData.offset;if(p===Oe&&A){var T=A[r];Object.keys(R).forEach((function(e){var t=[ve,de].indexOf(e)>=0?1:-1,n=[fe,de].indexOf(e)>=0?"y":"x";R[e]+=T[n]*t}))}return R}var ht={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,o=e.name;if(!t.modifiersData[o]._skip){for(var r=n.mainAxis,a=void 0===r||r,i=n.altAxis,s=void 0===i||i,l=n.fallbackPlacements,u=n.padding,p=n.boundary,c=n.rootBoundary,f=n.altBoundary,d=n.flipVariations,v=void 0===d||d,m=n.allowedAutoPlacements,g=t.options.placement,h=je(g),y=l||(h===g||!v?[rt(g)]:function(e){if(je(e)===ge)return[];var t=rt(e);return[it(e),t,it(t)]}(g)),b=[g].concat(y).reduce((function(e,n){return e.concat(je(n)===ge?function(e,t){void 0===t&&(t={});var n=t,o=n.placement,r=n.boundary,a=n.rootBoundary,i=n.padding,s=n.flipVariations,l=n.allowedAutoPlacements,u=void 0===l?Ae:l,p=Ge(o),c=p?s?Re:Re.filter((function(e){return Ge(e)===p})):he,f=c.filter((function(e){return u.indexOf(e)>=0}));0===f.length&&(f=c);var d=f.reduce((function(t,n){return t[n]=gt(e,{placement:n,boundary:r,rootBoundary:a,padding:i})[je(n)],t}),{});return Object.keys(d).sort((function(e,t){return d[e]-d[t]}))}(t,{placement:n,boundary:p,rootBoundary:c,padding:u,flipVariations:v,allowedAutoPlacements:m}):n)}),[]),w=t.rects.reference,x=t.rects.popper,O=new Map,E=!0,R=b[0],A=0;A<b.length;A++){var T=b[A],k=je(T),S=Ge(T)===ye,C=[fe,de].indexOf(k)>=0,L=C?"width":"height",P=gt(t,{placement:T,boundary:p,rootBoundary:c,altBoundary:f,padding:u}),F=C?S?ve:me:S?de:fe;w[L]>x[L]&&(F=rt(F));var j=rt(F),B=[];if(a&&B.push(P[k]<=0),s&&B.push(P[F]<=0,P[j]<=0),B.every((function(e){return e}))){R=T,E=!1;break}O.set(T,B)}if(E)for(var M=function(e){var t=b.find((function(t){var n=O.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return R=t,"break"},I=v?3:1;I>0;I--){if("break"===M(I))break}t.placement!==R&&(t.modifiersData[o]._skip=!0,t.placement=R,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function yt(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function bt(e){return[fe,ve,de,me].some((function(t){return e[t]>=0}))}var wt={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,o=t.rects.reference,r=t.rects.popper,a=t.modifiersData.preventOverflow,i=gt(t,{elementContext:"reference"}),s=gt(t,{altBoundary:!0}),l=yt(i,o),u=yt(s,r,a),p=bt(l),c=bt(u);t.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:u,isReferenceHidden:p,hasPopperEscaped:c},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":p,"data-popper-escaped":c})}};var xt={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,o=e.name,r=n.offset,a=void 0===r?[0,0]:r,i=Ae.reduce((function(e,n){return e[n]=function(e,t,n){var o=je(e),r=[me,fe].indexOf(o)>=0?-1:1,a="function"==typeof n?n(Object.assign({},t,{placement:e})):n,i=a[0],s=a[1];return i=i||0,s=(s||0)*r,[me,ve].indexOf(o)>=0?{x:s,y:i}:{x:i,y:s}}(n,t.rects,a),e}),{}),s=i[t.placement],l=s.x,u=s.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=l,t.modifiersData.popperOffsets.y+=u),t.modifiersData[o]=i}};var Ot={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=mt({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}};var Et={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,o=e.name,r=n.mainAxis,a=void 0===r||r,i=n.altAxis,s=void 0!==i&&i,l=n.boundary,u=n.rootBoundary,p=n.altBoundary,c=n.padding,f=n.tether,d=void 0===f||f,v=n.tetherOffset,m=void 0===v?0:v,g=gt(t,{boundary:l,rootBoundary:u,padding:c,altBoundary:p}),h=je(t.placement),y=Ge(t.placement),b=!y,w=ze(h),x=function(e){return"x"===e?"y":"x"}(w),O=t.modifiersData.popperOffsets,E=t.rects.reference,R=t.rects.popper,A="function"==typeof m?m(Object.assign({},t.rects,{placement:t.placement})):m,T="number"==typeof A?{mainAxis:A,altAxis:A}:Object.assign({mainAxis:0,altAxis:0},A),k=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,S={x:0,y:0};if(O){if(a){var C,L="y"===w?fe:me,P="y"===w?de:ve,F="y"===w?"height":"width",j=O[w],B=j+g[L],M=j-g[P],I=d?-R[F]/2:0,D=y===ye?E[F]:R[F],_=y===ye?-R[F]:-E[F],H=t.elements.arrow,N=d&&H?_e(H):{width:0,height:0},W=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},$=W[L],q=W[P],K=Ve(0,E[F],N[F]),U=b?E[F]/2-I-K-$-T.mainAxis:D-K-$-T.mainAxis,z=b?-E[F]/2+I+K+q+T.mainAxis:_+K+q+T.mainAxis,V=t.elements.arrow&&Ue(t.elements.arrow),Z=V?"y"===w?V.clientTop||0:V.clientLeft||0:0,X=null!=(C=null==k?void 0:k[w])?C:0,Y=j+z-X,G=Ve(d?Me(B,j+U-X-Z):B,j,d?Be(M,Y):M);O[w]=G,S[w]=G-j}if(s){var J,Q="x"===w?fe:me,ee="x"===w?de:ve,te=O[x],ne="y"===x?"height":"width",oe=te+g[Q],re=te-g[ee],ae=-1!==[fe,me].indexOf(h),ie=null!=(J=null==k?void 0:k[x])?J:0,se=ae?oe:te-E[ne]-R[ne]-ie+T.altAxis,le=ae?te+E[ne]+R[ne]-ie-T.altAxis:re,ue=d&&ae?function(e,t,n){var o=Ve(e,t,n);return o>n?n:o}(se,te,le):Ve(d?se:oe,te,d?le:re);O[x]=ue,S[x]=ue-te}t.modifiersData[o]=S}},requiresIfExists:["offset"]};function Rt(e,t,n){void 0===n&&(n=!1);var o=Le(t),r=Le(t)&&function(e){var t=e.getBoundingClientRect(),n=Ie(t.width)/e.offsetWidth||1,o=Ie(t.height)/e.offsetHeight||1;return 1!==n||1!==o}(t),a=$e(t),i=De(e,r),s={scrollLeft:0,scrollTop:0},l={x:0,y:0};return(o||!o&&!n)&&(("body"!==ke(t)||ut(a))&&(s=function(e){return e!==Se(e)&&Le(e)?function(e){return{scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}}(e):st(e)}(t)),Le(t)?((l=De(t,!0)).x+=t.clientLeft,l.y+=t.clientTop):a&&(l.x=lt(a))),{x:i.left+s.scrollLeft-l.x,y:i.top+s.scrollTop-l.y,width:i.width,height:i.height}}function At(e){var t=new Map,n=new Set,o=[];function r(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var o=t.get(e);o&&r(o)}})),o.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||r(e)})),o}function Tt(e){var t;return function(){return t||(t=new Promise((function(n){Promise.resolve().then((function(){t=void 0,n(e())}))}))),t}}var kt={placement:"bottom",modifiers:[],strategy:"absolute"};function St(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Ct(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,o=void 0===n?[]:n,r=t.defaultOptions,a=void 0===r?kt:r;return function(e,t,n){void 0===n&&(n=a);var r={placement:"bottom",orderedModifiers:[],options:Object.assign({},kt,a),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},i=[],s=!1,l={state:r,setOptions:function(n){var s="function"==typeof n?n(r.options):n;u(),r.options=Object.assign({},a,r.options,s),r.scrollParents={reference:Ce(e)?ct(e):e.contextElement?ct(e.contextElement):[],popper:ct(t)};var p=function(e){var t=At(e);return Te.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}(function(e){var t=e.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{});return Object.keys(t).map((function(e){return t[e]}))}([].concat(o,r.options.modifiers)));return r.orderedModifiers=p.filter((function(e){return e.enabled})),r.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,o=void 0===n?{}:n,a=e.effect;if("function"==typeof a){var s=a({state:r,name:t,instance:l,options:o}),u=function(){};i.push(s||u)}})),l.update()},forceUpdate:function(){if(!s){var e=r.elements,t=e.reference,n=e.popper;if(St(t,n)){r.rects={reference:Rt(t,Ue(n),"fixed"===r.options.strategy),popper:_e(n)},r.reset=!1,r.placement=r.options.placement,r.orderedModifiers.forEach((function(e){return r.modifiersData[e.name]=Object.assign({},e.data)}));for(var o=0;o<r.orderedModifiers.length;o++)if(!0!==r.reset){var a=r.orderedModifiers[o],i=a.fn,u=a.options,p=void 0===u?{}:u,c=a.name;"function"==typeof i&&(r=i({state:r,options:p,name:c,instance:l})||r)}else r.reset=!1,o=-1}}},update:Tt((function(){return new Promise((function(e){l.forceUpdate(),e(r)}))})),destroy:function(){u(),s=!0}};if(!St(e,t))return l;function u(){i.forEach((function(e){return e()})),i=[]}return l.setOptions(n).then((function(e){!s&&n.onFirstUpdate&&n.onFirstUpdate(e)})),l}}Ct(),Ct({defaultModifiers:[nt,Ot,et,Fe]});var Lt=Ct({defaultModifiers:[nt,Ot,et,Fe,xt,ht,Et,Ye,wt]});const Pt=(e,t,n={})=>{const r={name:"updateState",enabled:!0,phase:"write",fn:({state:e})=>{const t=function(e){const t=Object.keys(e.elements),n=d(t.map((t=>[t,e.styles[t]||{}]))),o=d(t.map((t=>[t,e.attributes[t]])));return{styles:n,attributes:o}}(e);Object.assign(l.value,t)},requires:["computeStyles"]},i=o((()=>{const{onFirstUpdate:e,placement:t,strategy:o,modifiers:a}=u(n);return{onFirstUpdate:e,placement:t||"bottom",strategy:o||"absolute",modifiers:[...a||[],r,{name:"applyStyles",enabled:!1}]}})),s=p(),l=c({styles:{popper:{position:u(i).strategy,left:"0",top:"0"},arrow:{position:"absolute"}},attributes:{}}),v=()=>{s.value&&(s.value.destroy(),s.value=void 0)};return a(i,(e=>{const t=u(s);t&&t.setOptions(e)}),{deep:!0}),a([e,t],(([e,t])=>{v(),e&&t&&(s.value=Lt(e,t,u(i)))})),f((()=>{v()})),{state:o((()=>{var e;return{...(null==(e=u(s))?void 0:e.state)||{}}})),styles:o((()=>u(l).styles)),attributes:o((()=>u(l).attributes)),update:()=>{var e;return null==(e=u(s))?void 0:e.update()},forceUpdate:()=>{var e;return null==(e=u(s))?void 0:e.forceUpdate()},instanceRef:o((()=>u(s)))}};function Ft(){let e;const t=()=>window.clearTimeout(e);return v((()=>t())),{registerTimeout:(n,o)=>{t(),e=window.setTimeout(n,o)},cancelTimeout:t}}let jt=[];const Bt=e=>{const t=e;t.key===m.esc&&jt.forEach((e=>e(t)))};let Mt;const It=()=>{const e=h(),t=oe(),n=o((()=>`${e.value}-popper-container-${t.prefix}`)),r=o((()=>`#${n.value}`));return{id:n,selector:r}},Dt=()=>{const{id:e,selector:t}=It();return g((()=>{s&&(Mt||document.body.querySelector(t.value)||(Mt=(e=>{const t=document.createElement("div");return t.id=e,document.body.appendChild(t),t})(e.value)))})),{id:e,selector:t}},_t=y({showAfter:{type:Number,default:0},hideAfter:{type:Number,default:200},autoClose:{type:Number,default:0}}),Ht=({showAfter:e,hideAfter:t,autoClose:n,open:o,close:r})=>{const{registerTimeout:a}=Ft(),{registerTimeout:i,cancelTimeout:s}=Ft();return{onOpen:t=>{a((()=>{o(t);const e=u(n);b(e)&&e>0&&i((()=>{r(t)}),e)}),u(e))},onClose:e=>{s(),a((()=>{r(e)}),u(t))}}},Nt=Symbol("elForwardRef"),Wt=Symbol("popper"),$t=Symbol("popperContent"),qt=y({role:{type:String,values:["dialog","grid","group","listbox","menu","navigation","tooltip","tree"],default:"tooltip"}}),Kt=x({name:"ElPopper",inheritAttrs:!1});var Ut=E(x({...Kt,props:qt,setup(e,{expose:t}){const n=e,r={triggerRef:c(),popperInstanceRef:c(),contentRef:c(),referenceRef:c(),role:o((()=>n.role))};return t(r),w(Wt,r),(e,t)=>O(e.$slots,"default")}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/popper/src/popper.vue"]]);const zt=y({arrowOffset:{type:Number,default:5}}),Vt=x({name:"ElPopperArrow",inheritAttrs:!1});var Zt=E(x({...Vt,props:zt,setup(e,{expose:t}){const n=e,o=R("popper"),{arrowOffset:r,arrowRef:i,arrowStyle:s}=A($t,void 0);return a((()=>n.arrowOffset),(e=>{r.value=e})),f((()=>{i.value=void 0})),t({arrowRef:i}),(e,t)=>(T(),k("span",{ref_key:"arrowRef",ref:i,class:S(u(o).e("arrow")),style:C(u(s)),"data-popper-arrow":""},null,6))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/popper/src/arrow.vue"]]);const Xt=x({name:"ElOnlyChild",setup(e,{slots:t,attrs:n}){var o;const r=A(Nt),a=(i=null!=(o=null==r?void 0:r.setForwardRef)?o:L,{mounted(e){i(e)},updated(e){i(e)},unmounted(){i(null)}});var i;return()=>{var e;const o=null==(e=t.default)?void 0:e.call(t,n);if(!o)return null;if(o.length>1)return null;const r=Yt(o);return r?P(F(r,n),[[a]]):null}}});function Yt(e){if(!e)return null;const t=e;for(const n of t){if(j(n))switch(n.type){case I:continue;case M:case"svg":return Gt(n);case B:return Yt(n.children);default:return n}return Gt(n)}return null}function Gt(e){const t=R("only-child");return D("span",{class:t.e("content")},[e])}const Jt=y({virtualRef:{type:t(Object)},virtualTriggering:Boolean,onMouseenter:{type:t(Function)},onMouseleave:{type:t(Function)},onClick:{type:t(Function)},onKeydown:{type:t(Function)},onFocus:{type:t(Function)},onBlur:{type:t(Function)},onContextmenu:{type:t(Function)},id:String,open:Boolean}),Qt=x({name:"ElPopperTrigger",inheritAttrs:!1});var en=E(x({...Qt,props:Jt,setup(e,{expose:t}){const n=e,{role:r,triggerRef:s}=A(Wt,void 0);var l;l=s,w(Nt,{setForwardRef:e=>{l.value=e}});const p=o((()=>d.value?n.id:void 0)),c=o((()=>{if(r&&"tooltip"===r.value)return n.open&&n.id?n.id:void 0})),d=o((()=>{if(r&&"tooltip"!==r.value)return r.value})),v=o((()=>d.value?`${n.open}`:void 0));let m;return i((()=>{a((()=>n.virtualRef),(e=>{e&&(s.value=_(e))}),{immediate:!0}),a(s,((e,t)=>{null==m||m(),m=void 0,H(e)&&(["onMouseenter","onMouseleave","onClick","onKeydown","onFocus","onBlur","onContextmenu"].forEach((o=>{var r;const a=n[o];a&&(e.addEventListener(o.slice(2).toLowerCase(),a),null==(r=null==t?void 0:t.removeEventListener)||r.call(t,o.slice(2).toLowerCase(),a))})),m=a([p,c,d,v],(t=>{["aria-controls","aria-describedby","aria-haspopup","aria-expanded"].forEach(((n,o)=>{le(t[o])?e.removeAttribute(n):e.setAttribute(n,t[o])}))}),{immediate:!0})),H(t)&&["aria-controls","aria-describedby","aria-haspopup","aria-expanded"].forEach((e=>t.removeAttribute(e)))}),{immediate:!0})})),f((()=>{null==m||m(),m=void 0})),t({triggerRef:s}),(e,t)=>e.virtualTriggering?q("v-if",!0):(T(),N(u(Xt),$({key:0},e.$attrs,{"aria-controls":u(p),"aria-describedby":u(c),"aria-expanded":u(v),"aria-haspopup":u(d)}),{default:W((()=>[O(e.$slots,"default")])),_:3},16,["aria-controls","aria-describedby","aria-expanded","aria-haspopup"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/popper/src/trigger.vue"]]);const tn="focus-trap.focus-after-trapped",nn="focus-trap.focus-after-released",on={cancelable:!0,bubbles:!1},rn={cancelable:!0,bubbles:!1},an="focusAfterTrapped",sn="focusAfterReleased",ln=Symbol("elFocusTrap"),un=c(),pn=c(0),cn=c(0);let fn=0;const dn=e=>{const t=[],n=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT,{acceptNode:e=>{const t="INPUT"===e.tagName&&"hidden"===e.type;return e.disabled||e.hidden||t?NodeFilter.FILTER_SKIP:e.tabIndex>=0||e===document.activeElement?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP}});for(;n.nextNode();)t.push(n.currentNode);return t},vn=(e,t)=>{for(const n of e)if(!mn(n,t))return n},mn=(e,t)=>{if("hidden"===getComputedStyle(e).visibility)return!0;for(;e;){if(t&&e===t)return!1;if("none"===getComputedStyle(e).display)return!0;e=e.parentElement}return!1},gn=(e,t)=>{if(e&&e.focus){const n=document.activeElement;e.focus({preventScroll:!0}),cn.value=window.performance.now(),e!==n&&(e=>e instanceof HTMLInputElement&&"select"in e)(e)&&t&&e.select()}};function hn(e,t){const n=[...e],o=e.indexOf(t);return-1!==o&&n.splice(o,1),n}const yn=(()=>{let e=[];return{push:t=>{const n=e[0];n&&t!==n&&n.pause(),e=hn(e,t),e.unshift(t)},remove:t=>{var n,o;e=hn(e,t),null==(o=null==(n=e[0])?void 0:n.resume)||o.call(n)}}})(),bn=()=>{un.value="pointer",pn.value=window.performance.now()},wn=()=>{un.value="keyboard",pn.value=window.performance.now()},xn=e=>new CustomEvent("focus-trap.focusout-prevented",{...rn,detail:e});var On=E(x({name:"ElFocusTrap",inheritAttrs:!1,props:{loop:Boolean,trapped:Boolean,focusTrapEl:Object,focusStartEl:{type:[Object,String],default:"first"}},emits:[an,sn,"focusin","focusout","focusout-prevented","release-requested"],setup(e,{emit:t}){const n=c();let o,r;const{focusReason:l}=(i((()=>{0===fn&&(document.addEventListener("mousedown",bn),document.addEventListener("touchstart",bn),document.addEventListener("keydown",wn)),fn++})),f((()=>{fn--,fn<=0&&(document.removeEventListener("mousedown",bn),document.removeEventListener("touchstart",bn),document.removeEventListener("keydown",wn))})),{focusReason:un,lastUserFocusTimestamp:pn,lastAutomatedFocusTimestamp:cn});var p;p=n=>{e.trapped&&!d.paused&&t("release-requested",n)},i((()=>{0===jt.length&&document.addEventListener("keydown",Bt),s&&jt.push(p)})),f((()=>{jt=jt.filter((e=>e!==p)),0===jt.length&&s&&document.removeEventListener("keydown",Bt)}));const d={paused:!1,pause(){this.paused=!0},resume(){this.paused=!1}},v=n=>{if(!e.loop&&!e.trapped)return;if(d.paused)return;const{key:o,altKey:r,ctrlKey:a,metaKey:i,currentTarget:s,shiftKey:u}=n,{loop:p}=e,c=o===m.tab&&!r&&!a&&!i,f=document.activeElement;if(c&&f){const e=s,[o,r]=(e=>{const t=dn(e);return[vn(t,e),vn(t.reverse(),e)]})(e);if(o&&r)if(u||f!==r){if(u&&[o,e].includes(f)){const e=xn({focusReason:l.value});t("focusout-prevented",e),e.defaultPrevented||(n.preventDefault(),p&&gn(r,!0))}}else{const e=xn({focusReason:l.value});t("focusout-prevented",e),e.defaultPrevented||(n.preventDefault(),p&&gn(o,!0))}else if(f===e){const e=xn({focusReason:l.value});t("focusout-prevented",e),e.defaultPrevented||n.preventDefault()}}};w(ln,{focusTrapRef:n,onKeydown:v}),a((()=>e.focusTrapEl),(e=>{e&&(n.value=e)}),{immediate:!0}),a([n],(([e],[t])=>{e&&(e.addEventListener("keydown",v),e.addEventListener("focusin",y),e.addEventListener("focusout",b)),t&&(t.removeEventListener("keydown",v),t.removeEventListener("focusin",y),t.removeEventListener("focusout",b))}));const g=e=>{t(an,e)},h=e=>t(sn,e),y=a=>{const i=u(n);if(!i)return;const s=a.target,l=a.relatedTarget,p=s&&i.contains(s);if(!e.trapped){l&&i.contains(l)||(o=l)}p&&t("focusin",a),d.paused||e.trapped&&(p?r=s:gn(r,!0))},b=o=>{const a=u(n);if(!d.paused&&a)if(e.trapped){const n=o.relatedTarget;le(n)||a.contains(n)||setTimeout((()=>{if(!d.paused&&e.trapped){const e=xn({focusReason:l.value});t("focusout-prevented",e),e.defaultPrevented||gn(r,!0)}}),0)}else{const e=o.target;e&&a.contains(e)||t("focusout",o)}};async function x(){await K();const t=u(n);if(t){yn.push(d);const n=t.contains(document.activeElement)?o:document.activeElement;o=n;if(!t.contains(n)){const o=new Event(tn,on);t.addEventListener(tn,g),t.dispatchEvent(o),o.defaultPrevented||K((()=>{let o=e.focusStartEl;U(o)||(gn(o),document.activeElement!==o&&(o="first")),"first"===o&&((e,t=!1)=>{const n=document.activeElement;for(const o of e)if(gn(o,t),document.activeElement!==n)return})(dn(t),!0),document.activeElement!==n&&"container"!==o||gn(t)}))}}}function O(){const e=u(n);if(e){e.removeEventListener(tn,g);const t=new CustomEvent(nn,{...on,detail:{focusReason:l.value}});e.addEventListener(nn,h),e.dispatchEvent(t),t.defaultPrevented||"keyboard"!=l.value&&pn.value>cn.value&&!e.contains(document.activeElement)||gn(null!=o?o:document.body),e.removeEventListener(nn,g),yn.remove(d)}}return i((()=>{e.trapped&&x(),a((()=>e.trapped),(e=>{e?x():O()}))})),f((()=>{e.trapped&&O()})),{onKeydown:v}}}),[["render",function(e,t,n,o,r,a){return O(e.$slots,"default",{handleKeydown:e.onKeydown})}],["__file","/home/runner/work/element-plus/element-plus/packages/components/focus-trap/src/focus-trap.vue"]]);const En=y({boundariesPadding:{type:Number,default:0},fallbackPlacements:{type:t(Array),default:void 0},gpuAcceleration:{type:Boolean,default:!0},offset:{type:Number,default:12},placement:{type:String,values:Ae,default:"bottom"},popperOptions:{type:t(Object),default:()=>({})},strategy:{type:String,values:["fixed","absolute"],default:"absolute"}}),Rn=y({...En,id:String,style:{type:t([String,Array,Object])},className:{type:t([String,Array,Object])},effect:{type:String,default:"dark"},visible:Boolean,enterable:{type:Boolean,default:!0},pure:Boolean,focusOnShow:{type:Boolean,default:!1},trapping:{type:Boolean,default:!1},popperClass:{type:t([String,Array,Object])},popperStyle:{type:t([String,Array,Object])},referenceEl:{type:t(Object)},triggerTargetEl:{type:t(Object)},stopPopperMouseEvent:{type:Boolean,default:!0},ariaLabel:{type:String,default:void 0},virtualTriggering:Boolean,zIndex:Number}),An={mouseenter:e=>e instanceof MouseEvent,mouseleave:e=>e instanceof MouseEvent,focus:()=>!0,blur:()=>!0,close:()=>!0},Tn=(e,t=[])=>{const{placement:n,strategy:o,popperOptions:r}=e,a={placement:n,strategy:o,...r,modifiers:[...kn(e),...t]};return function(e,t){t&&(e.modifiers=[...e.modifiers,...null!=t?t:[]])}(a,null==r?void 0:r.modifiers),a};function kn(e){const{offset:t,gpuAcceleration:n,fallbackPlacements:o}=e;return[{name:"offset",options:{offset:[0,null!=t?t:12]}},{name:"preventOverflow",options:{padding:{top:2,bottom:2,left:5,right:5}}},{name:"flip",options:{padding:5,fallbackPlacements:o}},{name:"computeStyles",options:{gpuAcceleration:n}}]}const Sn=e=>{const{popperInstanceRef:t,contentRef:n,triggerRef:r,role:l}=A(Wt,void 0),p=c(),f=c(),d=o((()=>({name:"eventListeners",enabled:!!e.visible}))),v=o((()=>{var e;const t=u(p),n=null!=(e=u(f))?e:0;return{name:"arrow",enabled:(o=t,!(void 0===o)),options:{element:t,padding:n}};var o})),m=o((()=>({onFirstUpdate:()=>{w()},...Tn(e,[u(v),u(d)])}))),g=o((()=>(e=>{if(s)return _(e)})(e.referenceEl)||u(r))),{attributes:h,state:y,styles:b,update:w,forceUpdate:x,instanceRef:O}=Pt(g,n,m);return a(O,(e=>t.value=e)),i((()=>{a((()=>{var e;return null==(e=u(g))?void 0:e.getBoundingClientRect()}),(()=>{w()}))})),{attributes:h,arrowRef:p,contentRef:n,instanceRef:O,state:y,styles:b,role:l,forceUpdate:x,update:w}},Cn=x({name:"ElPopperContent"});var Ln=E(x({...Cn,props:Rn,emits:An,setup(e,{expose:t,emit:n}){const r=e,{focusStartRef:s,trapped:l,onFocusAfterReleased:p,onFocusAfterTrapped:d,onFocusInTrap:v,onFocusoutPrevented:m,onReleaseRequested:g}=((e,t)=>{const n=c(!1),o=c();return{focusStartRef:o,trapped:n,onFocusAfterReleased:e=>{var n;"pointer"!==(null==(n=e.detail)?void 0:n.focusReason)&&(o.value="first",t("blur"))},onFocusAfterTrapped:()=>{t("focus")},onFocusInTrap:t=>{e.visible&&!n.value&&(t.target&&(o.value=t.target),n.value=!0)},onFocusoutPrevented:t=>{e.trapping||("pointer"===t.detail.focusReason&&t.preventDefault(),n.value=!1)},onReleaseRequested:()=>{n.value=!1,t("close")}}})(r,n),{attributes:h,arrowRef:y,contentRef:b,styles:x,instanceRef:E,role:S,update:C}=Sn(r),{ariaModal:P,arrowStyle:F,contentAttrs:j,contentClass:B,contentStyle:M,updateZIndex:I}=((e,{attributes:t,styles:n,role:r})=>{const{nextZIndex:a}=z(),i=R("popper"),s=o((()=>u(t).popper)),l=c(e.zIndex||a()),p=o((()=>[i.b(),i.is("pure",e.pure),i.is(e.effect),e.popperClass])),f=o((()=>[{zIndex:u(l)},e.popperStyle||{},u(n).popper]));return{ariaModal:o((()=>"dialog"===r.value?"false":void 0)),arrowStyle:o((()=>u(n).arrow||{})),contentAttrs:s,contentClass:p,contentStyle:f,contentZIndex:l,updateZIndex:()=>{l.value=e.zIndex||a()}}})(r,{styles:x,attributes:h,role:S}),_=A(re,void 0),N=c();let q;w($t,{arrowStyle:F,arrowRef:y,arrowOffset:N}),_&&(_.addInputId||_.removeInputId)&&w(re,{..._,addInputId:L,removeInputId:L});const K=(e=!0)=>{C(),e&&I()},U=()=>{K(!1),r.visible&&r.focusOnShow?l.value=!0:!1===r.visible&&(l.value=!1)};return i((()=>{a((()=>r.triggerTargetEl),((e,t)=>{null==q||q(),q=void 0;const n=u(e||b.value),o=u(t||b.value);H(n)&&(q=a([S,()=>r.ariaLabel,P,()=>r.id],(e=>{["role","aria-label","aria-modal","id"].forEach(((t,o)=>{le(e[o])?n.removeAttribute(t):n.setAttribute(t,e[o])}))}),{immediate:!0})),o!==n&&H(o)&&["role","aria-label","aria-modal","id"].forEach((e=>{o.removeAttribute(e)}))}),{immediate:!0}),a((()=>r.visible),U,{immediate:!0})})),f((()=>{null==q||q(),q=void 0})),t({popperContentRef:b,popperInstanceRef:E,updatePopper:K,contentStyle:M}),(e,t)=>(T(),k("div",$({ref_key:"contentRef",ref:b},u(j),{style:u(M),class:u(B),tabindex:"-1",onMouseenter:t[0]||(t[0]=t=>e.$emit("mouseenter",t)),onMouseleave:t[1]||(t[1]=t=>e.$emit("mouseleave",t))}),[D(u(On),{trapped:u(l),"trap-on-focus-in":!0,"focus-trap-el":u(b),"focus-start-el":u(s),onFocusAfterTrapped:u(d),onFocusAfterReleased:u(p),onFocusin:u(v),onFocusoutPrevented:u(m),onReleaseRequested:u(g)},{default:W((()=>[O(e.$slots,"default")])),_:3},8,["trapped","focus-trap-el","focus-start-el","onFocusAfterTrapped","onFocusAfterReleased","onFocusin","onFocusoutPrevented","onReleaseRequested"])],16))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/popper/src/content.vue"]]);const Pn=V(Ut),Fn=Symbol("elTooltip"),jn=y({..._t,...Rn,appendTo:{type:t([String,Object])},content:{type:String,default:""},rawContent:{type:Boolean,default:!1},persistent:Boolean,ariaLabel:String,visible:{type:t(Boolean),default:null},transition:String,teleported:{type:Boolean,default:!0},disabled:Boolean}),Bn=y({...Jt,disabled:Boolean,trigger:{type:t([String,Array]),default:"hover"},triggerKeys:{type:t(Array),default:()=>[m.enter,m.space]}}),{useModelToggleProps:Mn,useModelToggleEmits:In,useModelToggle:Dn}=ce("visible"),_n=y({...qt,...Mn,...jn,...Bn,...zt,showArrow:{type:Boolean,default:!0}}),Hn=[...In,"before-show","before-hide","show","hide","open","close"],Nn=(e,t,n)=>o=>{((e,t)=>Z(e)?e.includes(t):e===t)(u(e),t)&&n(o)},Wn=x({name:"ElTooltipTrigger"});var $n=E(x({...Wn,props:Bn,setup(e,{expose:t}){const n=e,o=R("tooltip"),{controlled:r,id:a,open:i,onOpen:s,onClose:l,onToggle:p}=A(Fn,void 0),f=c(null),d=()=>{if(u(r)||n.disabled)return!0},v=X(n,"trigger"),m=ie(d,Nn(v,"hover",s)),g=ie(d,Nn(v,"hover",l)),h=ie(d,Nn(v,"click",(e=>{0===e.button&&p(e)}))),y=ie(d,Nn(v,"focus",s)),b=ie(d,Nn(v,"focus",l)),w=ie(d,Nn(v,"contextmenu",(e=>{e.preventDefault(),p(e)}))),x=ie(d,(e=>{const{code:t}=e;n.triggerKeys.includes(t)&&(e.preventDefault(),p(e))}));return t({triggerRef:f}),(e,t)=>(T(),N(u(en),{id:u(a),"virtual-ref":e.virtualRef,open:u(i),"virtual-triggering":e.virtualTriggering,class:S(u(o).e("trigger")),onBlur:u(b),onClick:u(h),onContextmenu:u(w),onFocus:u(y),onMouseenter:u(m),onMouseleave:u(g),onKeydown:u(x)},{default:W((()=>[O(e.$slots,"default")])),_:3},8,["id","virtual-ref","open","virtual-triggering","class","onBlur","onClick","onContextmenu","onFocus","onMouseenter","onMouseleave","onKeydown"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/tooltip/src/trigger.vue"]]);const qn=x({name:"ElTooltipContent",inheritAttrs:!1});var Kn=E(x({...qn,props:jn,setup(e,{expose:t}){const n=e,{selector:r}=It(),i=R("tooltip"),s=c(null),l=c(!1),{controlled:p,id:d,open:v,trigger:m,onClose:g,onOpen:h,onShow:y,onHide:b,onBeforeShow:w,onBeforeHide:x}=A(Fn,void 0),E=o((()=>n.transition||`${i.namespace.value}-fade-in-linear`)),k=o((()=>n.persistent));f((()=>{l.value=!0}));const S=o((()=>!!u(k)||u(v))),C=o((()=>!n.disabled&&u(v))),L=o((()=>n.appendTo||r.value)),F=o((()=>{var e;return null!=(e=n.style)?e:{}})),j=o((()=>!u(v))),B=()=>{b()},M=()=>{if(u(p))return!0},I=ie(M,(()=>{n.enterable&&"hover"===u(m)&&h()})),_=ie(M,(()=>{"hover"===u(m)&&g()})),H=()=>{var e,t;null==(t=null==(e=s.value)?void 0:e.updatePopper)||t.call(e),null==w||w()},K=()=>{null==x||x()},U=()=>{y(),V=Q(o((()=>{var e;return null==(e=s.value)?void 0:e.popperContentRef})),(()=>{if(u(p))return;"hover"!==u(m)&&g()}))},z=()=>{n.virtualTriggering||g()};let V;return a((()=>u(v)),(e=>{e||null==V||V()}),{flush:"post"}),a((()=>n.content),(()=>{var e,t;null==(t=null==(e=s.value)?void 0:e.updatePopper)||t.call(e)})),t({contentRef:s}),(e,t)=>(T(),N(J,{disabled:!e.teleported,to:u(L)},[D(G,{name:u(E),onAfterLeave:B,onBeforeEnter:H,onAfterEnter:U,onBeforeLeave:K},{default:W((()=>[u(S)?P((T(),N(u(Ln),$({key:0,id:u(d),ref_key:"contentRef",ref:s},e.$attrs,{"aria-label":e.ariaLabel,"aria-hidden":u(j),"boundaries-padding":e.boundariesPadding,"fallback-placements":e.fallbackPlacements,"gpu-acceleration":e.gpuAcceleration,offset:e.offset,placement:e.placement,"popper-options":e.popperOptions,strategy:e.strategy,effect:e.effect,enterable:e.enterable,pure:e.pure,"popper-class":e.popperClass,"popper-style":[e.popperStyle,u(F)],"reference-el":e.referenceEl,"trigger-target-el":e.triggerTargetEl,visible:u(C),"z-index":e.zIndex,onMouseenter:u(I),onMouseleave:u(_),onBlur:z,onClose:u(g)}),{default:W((()=>[l.value?q("v-if",!0):O(e.$slots,"default",{key:0})])),_:3},16,["id","aria-label","aria-hidden","boundaries-padding","fallback-placements","gpu-acceleration","offset","placement","popper-options","strategy","effect","enterable","pure","popper-class","popper-style","reference-el","trigger-target-el","visible","z-index","onMouseenter","onMouseleave","onClose"])),[[Y,u(C)]]):q("v-if",!0)])),_:3},8,["name"])],8,["disabled","to"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/tooltip/src/content.vue"]]);const Un=["innerHTML"],zn={key:1},Vn=x({name:"ElTooltip"});const Zn=V(E(x({...Vn,props:_n,emits:Hn,setup(e,{expose:t,emit:n}){const r=e;Dt();const i=ae(),s=c(),p=c(),f=()=>{var e;const t=u(s);t&&(null==(e=t.popperInstanceRef)||e.update())},d=c(!1),v=c(),{show:m,hide:g,hasUpdateHandler:h}=Dn({indicator:d,toggleReason:v}),{onOpen:y,onClose:b}=Ht({showAfter:X(r,"showAfter"),hideAfter:X(r,"hideAfter"),autoClose:X(r,"autoClose"),open:m,close:g}),x=o((()=>l(r.visible)&&!h.value));w(Fn,{controlled:x,id:i,open:ee(d),trigger:X(r,"trigger"),onOpen:e=>{y(e)},onClose:e=>{b(e)},onToggle:e=>{u(d)?b(e):y(e)},onShow:()=>{n("show",v.value)},onHide:()=>{n("hide",v.value)},onBeforeShow:()=>{n("before-show",v.value)},onBeforeHide:()=>{n("before-hide",v.value)},updatePopper:f}),a((()=>r.disabled),(e=>{e&&d.value&&(d.value=!1)}));return te((()=>d.value&&g())),t({popperRef:s,contentRef:p,isFocusInsideContent:()=>{var e,t;const n=null==(t=null==(e=p.value)?void 0:e.contentRef)?void 0:t.popperContentRef;return n&&n.contains(document.activeElement)},updatePopper:f,onOpen:y,onClose:b,hide:g}),(e,t)=>(T(),N(u(Pn),{ref_key:"popperRef",ref:s,role:e.role},{default:W((()=>[D($n,{disabled:e.disabled,trigger:e.trigger,"trigger-keys":e.triggerKeys,"virtual-ref":e.virtualRef,"virtual-triggering":e.virtualTriggering},{default:W((()=>[e.$slots.default?O(e.$slots,"default",{key:0}):q("v-if",!0)])),_:3},8,["disabled","trigger","trigger-keys","virtual-ref","virtual-triggering"]),D(Kn,{ref_key:"contentRef",ref:p,"aria-label":e.ariaLabel,"boundaries-padding":e.boundariesPadding,content:e.content,disabled:e.disabled,effect:e.effect,enterable:e.enterable,"fallback-placements":e.fallbackPlacements,"hide-after":e.hideAfter,"gpu-acceleration":e.gpuAcceleration,offset:e.offset,persistent:e.persistent,"popper-class":e.popperClass,"popper-style":e.popperStyle,placement:e.placement,"popper-options":e.popperOptions,pure:e.pure,"raw-content":e.rawContent,"reference-el":e.referenceEl,"trigger-target-el":e.triggerTargetEl,"show-after":e.showAfter,strategy:e.strategy,teleported:e.teleported,transition:e.transition,"virtual-triggering":e.virtualTriggering,"z-index":e.zIndex,"append-to":e.appendTo},{default:W((()=>[O(e.$slots,"content",{},(()=>[e.rawContent?(T(),k("span",{key:0,innerHTML:e.content},null,8,Un)):(T(),k("span",zn,ne(e.content),1))])),e.showArrow?(T(),N(u(Zt),{key:0,"arrow-offset":e.arrowOffset},null,8,["arrow-offset"])):q("v-if",!0)])),_:3},8,["aria-label","boundaries-padding","content","disabled","effect","enterable","fallback-placements","hide-after","gpu-acceleration","offset","persistent","popper-class","popper-style","placement","popper-options","pure","raw-content","reference-el","trigger-target-el","show-after","strategy","teleported","transition","virtual-triggering","z-index","append-to"])])),_:3},8,["role"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/tooltip/src/tooltip.vue"]]));export{Zn as E,ln as F,Xt as O,Fn as T,jn as a,Ae as b,ie as c,Ht as d,On as e,le as i,Bn as u,se as w,Lt as y};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWwtcG9wcGVyLTEyZWNlODljLmpzIiwic291cmNlcyI6WyIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL3V0aWxzL2RvbS9ldmVudC5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStsb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzTmlsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMy4zX3Z1ZUAzLjIuNDcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9ob29rcy91c2UtbW9kZWwtdG9nZ2xlL2luZGV4Lm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK0BzeHp6K3BvcHBlcmpzLWVzQDIuMTEuNy9ub2RlX21vZHVsZXMvQHN4enovcG9wcGVyanMtZXMvZGlzdC9pbmRleC5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2hvb2tzL3VzZS1wb3BwZXIvaW5kZXgubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMy4zX3Z1ZUAzLjIuNDcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9ob29rcy91c2UtdGltZW91dC9pbmRleC5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2hvb2tzL3VzZS1lc2NhcGUta2V5ZG93bi9pbmRleC5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2hvb2tzL3VzZS1wb3BwZXItY29udGFpbmVyL2luZGV4Lm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvaG9va3MvdXNlLWRlbGF5ZWQtdG9nZ2xlL2luZGV4Lm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvaG9va3MvdXNlLWZvcndhcmQtcmVmL2luZGV4Lm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9wb3BwZXIvc3JjL2NvbnN0YW50cy5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvcG9wcGVyL3NyYy9wb3BwZXIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMy4zX3Z1ZUAzLjIuNDcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3BvcHBlci9zcmMvcG9wcGVyMi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvcG9wcGVyL3NyYy9hcnJvdy5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvcG9wcGVyL3NyYy9hcnJvdzIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMy4zX3Z1ZUAzLjIuNDcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3Nsb3Qvc3JjL29ubHktY2hpbGQubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMy4zX3Z1ZUAzLjIuNDcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3BvcHBlci9zcmMvdHJpZ2dlci5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvcG9wcGVyL3NyYy90cmlnZ2VyMi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvZm9jdXMtdHJhcC9zcmMvdG9rZW5zLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9mb2N1cy10cmFwL3NyYy91dGlscy5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvZm9jdXMtdHJhcC9zcmMvZm9jdXMtdHJhcC5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvcG9wcGVyL3NyYy9jb250ZW50Lm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9wb3BwZXIvc3JjL3V0aWxzLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9wb3BwZXIvc3JjL2NvbXBvc2FibGVzL3VzZS1jb250ZW50Lm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNVbmRlZmluZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvcG9wcGVyL3NyYy9jb250ZW50Mi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvcG9wcGVyL3NyYy9jb21wb3NhYmxlcy91c2UtZm9jdXMtdHJhcC5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvcG9wcGVyL3NyYy9jb21wb3NhYmxlcy91c2UtY29udGVudC1kb20ubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMy4zX3Z1ZUAzLjIuNDcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3BvcHBlci9pbmRleC5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvdG9vbHRpcC9zcmMvY29uc3RhbnRzLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90b29sdGlwL3NyYy9jb250ZW50Lm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90b29sdGlwL3NyYy90cmlnZ2VyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90b29sdGlwL3NyYy90b29sdGlwLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90b29sdGlwL3NyYy91dGlscy5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvdG9vbHRpcC9zcmMvdHJpZ2dlcjIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMy4zX3Z1ZUAzLjIuNDcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3Rvb2x0aXAvc3JjL2NvbnRlbnQyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjMuM192dWVAMy4yLjQ3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90b29sdGlwL3NyYy90b29sdGlwMi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4zLjNfdnVlQDMuMi40Ny9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvdG9vbHRpcC9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29tcG9zZUV2ZW50SGFuZGxlcnMgPSAodGhlaXJzSGFuZGxlciwgb3Vyc0hhbmRsZXIsIHsgY2hlY2tGb3JEZWZhdWx0UHJldmVudGVkID0gdHJ1ZSB9ID0ge30pID0+IHtcbiAgY29uc3QgaGFuZGxlRXZlbnQgPSAoZXZlbnQpID0+IHtcbiAgICBjb25zdCBzaG91bGRQcmV2ZW50ID0gdGhlaXJzSGFuZGxlciA9PSBudWxsID8gdm9pZCAwIDogdGhlaXJzSGFuZGxlcihldmVudCk7XG4gICAgaWYgKGNoZWNrRm9yRGVmYXVsdFByZXZlbnRlZCA9PT0gZmFsc2UgfHwgIXNob3VsZFByZXZlbnQpIHtcbiAgICAgIHJldHVybiBvdXJzSGFuZGxlciA9PSBudWxsID8gdm9pZCAwIDogb3Vyc0hhbmRsZXIoZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhhbmRsZUV2ZW50O1xufTtcbmNvbnN0IHdoZW5Nb3VzZSA9IChoYW5kbGVyKSA9PiB7XG4gIHJldHVybiAoZSkgPT4gZS5wb2ludGVyVHlwZSA9PT0gXCJtb3VzZVwiID8gaGFuZGxlcihlKSA6IHZvaWQgMDtcbn07XG5cbmV4cG9ydCB7IGNvbXBvc2VFdmVudEhhbmRsZXJzLCB3aGVuTW91c2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50Lm1qcy5tYXBcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG51bGxpc2gsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc05pbChudWxsKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTmlsKHZvaWQgMCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc05pbChOYU4pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOaWwodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTmlsO1xuIiwiaW1wb3J0IHsgZ2V0Q3VycmVudEluc3RhbmNlLCBjb21wdXRlZCwgd2F0Y2gsIG9uTW91bnRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuaW1wb3J0IHsgaXNDbGllbnQsIGlzQm9vbGVhbiB9IGZyb20gJ0B2dWV1c2UvY29yZSc7XG5pbXBvcnQgJy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBidWlsZFByb3AsIGRlZmluZVByb3BUeXBlIH0gZnJvbSAnLi4vLi4vdXRpbHMvdnVlL3Byb3BzL3J1bnRpbWUubWpzJztcblxuY29uc3QgX3Byb3AgPSBidWlsZFByb3Aoe1xuICB0eXBlOiBkZWZpbmVQcm9wVHlwZShCb29sZWFuKSxcbiAgZGVmYXVsdDogbnVsbFxufSk7XG5jb25zdCBfZXZlbnQgPSBidWlsZFByb3Aoe1xuICB0eXBlOiBkZWZpbmVQcm9wVHlwZShGdW5jdGlvbilcbn0pO1xuY29uc3QgY3JlYXRlTW9kZWxUb2dnbGVDb21wb3NhYmxlID0gKG5hbWUpID0+IHtcbiAgY29uc3QgdXBkYXRlRXZlbnRLZXkgPSBgdXBkYXRlOiR7bmFtZX1gO1xuICBjb25zdCB1cGRhdGVFdmVudEtleVJhdyA9IGBvblVwZGF0ZToke25hbWV9YDtcbiAgY29uc3QgdXNlTW9kZWxUb2dnbGVFbWl0czIgPSBbdXBkYXRlRXZlbnRLZXldO1xuICBjb25zdCB1c2VNb2RlbFRvZ2dsZVByb3BzMiA9IHtcbiAgICBbbmFtZV06IF9wcm9wLFxuICAgIFt1cGRhdGVFdmVudEtleVJhd106IF9ldmVudFxuICB9O1xuICBjb25zdCB1c2VNb2RlbFRvZ2dsZTIgPSAoe1xuICAgIGluZGljYXRvcixcbiAgICB0b2dnbGVSZWFzb24sXG4gICAgc2hvdWxkSGlkZVdoZW5Sb3V0ZUNoYW5nZXMsXG4gICAgc2hvdWxkUHJvY2VlZCxcbiAgICBvblNob3csXG4gICAgb25IaWRlXG4gIH0pID0+IHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IHsgZW1pdCB9ID0gaW5zdGFuY2U7XG4gICAgY29uc3QgcHJvcHMgPSBpbnN0YW5jZS5wcm9wcztcbiAgICBjb25zdCBoYXNVcGRhdGVIYW5kbGVyID0gY29tcHV0ZWQoKCkgPT4gaXNGdW5jdGlvbihwcm9wc1t1cGRhdGVFdmVudEtleVJhd10pKTtcbiAgICBjb25zdCBpc01vZGVsQmluZGluZ0Fic2VudCA9IGNvbXB1dGVkKCgpID0+IHByb3BzW25hbWVdID09PSBudWxsKTtcbiAgICBjb25zdCBkb1Nob3cgPSAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChpbmRpY2F0b3IudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaW5kaWNhdG9yLnZhbHVlID0gdHJ1ZTtcbiAgICAgIGlmICh0b2dnbGVSZWFzb24pIHtcbiAgICAgICAgdG9nZ2xlUmVhc29uLnZhbHVlID0gZXZlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoaXNGdW5jdGlvbihvblNob3cpKSB7XG4gICAgICAgIG9uU2hvdyhldmVudCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBkb0hpZGUgPSAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChpbmRpY2F0b3IudmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGluZGljYXRvci52YWx1ZSA9IGZhbHNlO1xuICAgICAgaWYgKHRvZ2dsZVJlYXNvbikge1xuICAgICAgICB0b2dnbGVSZWFzb24udmFsdWUgPSBldmVudDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9uSGlkZSkpIHtcbiAgICAgICAgb25IaWRlKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNob3cgPSAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChwcm9wcy5kaXNhYmxlZCA9PT0gdHJ1ZSB8fCBpc0Z1bmN0aW9uKHNob3VsZFByb2NlZWQpICYmICFzaG91bGRQcm9jZWVkKCkpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHNob3VsZEVtaXQgPSBoYXNVcGRhdGVIYW5kbGVyLnZhbHVlICYmIGlzQ2xpZW50O1xuICAgICAgaWYgKHNob3VsZEVtaXQpIHtcbiAgICAgICAgZW1pdCh1cGRhdGVFdmVudEtleSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNNb2RlbEJpbmRpbmdBYnNlbnQudmFsdWUgfHwgIXNob3VsZEVtaXQpIHtcbiAgICAgICAgZG9TaG93KGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhpZGUgPSAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChwcm9wcy5kaXNhYmxlZCA9PT0gdHJ1ZSB8fCAhaXNDbGllbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHNob3VsZEVtaXQgPSBoYXNVcGRhdGVIYW5kbGVyLnZhbHVlICYmIGlzQ2xpZW50O1xuICAgICAgaWYgKHNob3VsZEVtaXQpIHtcbiAgICAgICAgZW1pdCh1cGRhdGVFdmVudEtleSwgZmFsc2UpO1xuICAgICAgfVxuICAgICAgaWYgKGlzTW9kZWxCaW5kaW5nQWJzZW50LnZhbHVlIHx8ICFzaG91bGRFbWl0KSB7XG4gICAgICAgIGRvSGlkZShldmVudCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBvbkNoYW5nZSA9ICh2YWwpID0+IHtcbiAgICAgIGlmICghaXNCb29sZWFuKHZhbCkpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGlmIChwcm9wcy5kaXNhYmxlZCAmJiB2YWwpIHtcbiAgICAgICAgaWYgKGhhc1VwZGF0ZUhhbmRsZXIudmFsdWUpIHtcbiAgICAgICAgICBlbWl0KHVwZGF0ZUV2ZW50S2V5LCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaW5kaWNhdG9yLnZhbHVlICE9PSB2YWwpIHtcbiAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgIGRvU2hvdygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRvSGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGUgPSAoKSA9PiB7XG4gICAgICBpZiAoaW5kaWNhdG9yLnZhbHVlKSB7XG4gICAgICAgIGhpZGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNob3coKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdhdGNoKCgpID0+IHByb3BzW25hbWVdLCBvbkNoYW5nZSk7XG4gICAgaWYgKHNob3VsZEhpZGVXaGVuUm91dGVDaGFuZ2VzICYmIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuJHJvdXRlICE9PSB2b2lkIDApIHtcbiAgICAgIHdhdGNoKCgpID0+ICh7XG4gICAgICAgIC4uLmluc3RhbmNlLnByb3h5LiRyb3V0ZVxuICAgICAgfSksICgpID0+IHtcbiAgICAgICAgaWYgKHNob3VsZEhpZGVXaGVuUm91dGVDaGFuZ2VzLnZhbHVlICYmIGluZGljYXRvci52YWx1ZSkge1xuICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICBvbkNoYW5nZShwcm9wc1tuYW1lXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhpZGUsXG4gICAgICBzaG93LFxuICAgICAgdG9nZ2xlLFxuICAgICAgaGFzVXBkYXRlSGFuZGxlclxuICAgIH07XG4gIH07XG4gIHJldHVybiB7XG4gICAgdXNlTW9kZWxUb2dnbGU6IHVzZU1vZGVsVG9nZ2xlMixcbiAgICB1c2VNb2RlbFRvZ2dsZVByb3BzOiB1c2VNb2RlbFRvZ2dsZVByb3BzMixcbiAgICB1c2VNb2RlbFRvZ2dsZUVtaXRzOiB1c2VNb2RlbFRvZ2dsZUVtaXRzMlxuICB9O1xufTtcbmNvbnN0IHsgdXNlTW9kZWxUb2dnbGUsIHVzZU1vZGVsVG9nZ2xlUHJvcHMsIHVzZU1vZGVsVG9nZ2xlRW1pdHMgfSA9IGNyZWF0ZU1vZGVsVG9nZ2xlQ29tcG9zYWJsZShcIm1vZGVsVmFsdWVcIik7XG5cbmV4cG9ydCB7IGNyZWF0ZU1vZGVsVG9nZ2xlQ29tcG9zYWJsZSwgdXNlTW9kZWxUb2dnbGUsIHVzZU1vZGVsVG9nZ2xlRW1pdHMsIHVzZU1vZGVsVG9nZ2xlUHJvcHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiIsInZhciBFPVwidG9wXCIsUj1cImJvdHRvbVwiLFc9XCJyaWdodFwiLFA9XCJsZWZ0XCIsbWU9XCJhdXRvXCIsRz1bRSxSLFcsUF0sVT1cInN0YXJ0XCIsSj1cImVuZFwiLFhlPVwiY2xpcHBpbmdQYXJlbnRzXCIsamU9XCJ2aWV3cG9ydFwiLEs9XCJwb3BwZXJcIixZZT1cInJlZmVyZW5jZVwiLERlPUcucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuY29uY2F0KFtlK1wiLVwiK1UsZStcIi1cIitKXSl9LFtdKSxFZT1bXS5jb25jYXQoRyxbbWVdKS5yZWR1Y2UoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5jb25jYXQoW2UsZStcIi1cIitVLGUrXCItXCIrSl0pfSxbXSksR2U9XCJiZWZvcmVSZWFkXCIsSmU9XCJyZWFkXCIsS2U9XCJhZnRlclJlYWRcIixRZT1cImJlZm9yZU1haW5cIixaZT1cIm1haW5cIixldD1cImFmdGVyTWFpblwiLHR0PVwiYmVmb3JlV3JpdGVcIixudD1cIndyaXRlXCIscnQ9XCJhZnRlcldyaXRlXCIsb3Q9W0dlLEplLEtlLFFlLFplLGV0LHR0LG50LHJ0XTtmdW5jdGlvbiBDKHQpe3JldHVybiB0Pyh0Lm5vZGVOYW1lfHxcIlwiKS50b0xvd2VyQ2FzZSgpOm51bGx9ZnVuY3Rpb24gSCh0KXtpZih0PT1udWxsKXJldHVybiB3aW5kb3c7aWYodC50b1N0cmluZygpIT09XCJbb2JqZWN0IFdpbmRvd11cIil7dmFyIGU9dC5vd25lckRvY3VtZW50O3JldHVybiBlJiZlLmRlZmF1bHRWaWV3fHx3aW5kb3d9cmV0dXJuIHR9ZnVuY3Rpb24gUSh0KXt2YXIgZT1IKHQpLkVsZW1lbnQ7cmV0dXJuIHQgaW5zdGFuY2VvZiBlfHx0IGluc3RhbmNlb2YgRWxlbWVudH1mdW5jdGlvbiBCKHQpe3ZhciBlPUgodCkuSFRNTEVsZW1lbnQ7cmV0dXJuIHQgaW5zdGFuY2VvZiBlfHx0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnR9ZnVuY3Rpb24gUGUodCl7aWYodHlwZW9mIFNoYWRvd1Jvb3Q9PVwidW5kZWZpbmVkXCIpcmV0dXJuITE7dmFyIGU9SCh0KS5TaGFkb3dSb290O3JldHVybiB0IGluc3RhbmNlb2YgZXx8dCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3R9ZnVuY3Rpb24gTXQodCl7dmFyIGU9dC5zdGF0ZTtPYmplY3Qua2V5cyhlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe3ZhciByPWUuc3R5bGVzW25dfHx7fSxvPWUuYXR0cmlidXRlc1tuXXx8e30saT1lLmVsZW1lbnRzW25dOyFCKGkpfHwhQyhpKXx8KE9iamVjdC5hc3NpZ24oaS5zdHlsZSxyKSxPYmplY3Qua2V5cyhvKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBzPW9bYV07cz09PSExP2kucmVtb3ZlQXR0cmlidXRlKGEpOmkuc2V0QXR0cmlidXRlKGEscz09PSEwP1wiXCI6cyl9KSl9KX1mdW5jdGlvbiBSdCh0KXt2YXIgZT10LnN0YXRlLG49e3BvcHBlcjp7cG9zaXRpb246ZS5vcHRpb25zLnN0cmF0ZWd5LGxlZnQ6XCIwXCIsdG9wOlwiMFwiLG1hcmdpbjpcIjBcIn0sYXJyb3c6e3Bvc2l0aW9uOlwiYWJzb2x1dGVcIn0scmVmZXJlbmNlOnt9fTtyZXR1cm4gT2JqZWN0LmFzc2lnbihlLmVsZW1lbnRzLnBvcHBlci5zdHlsZSxuLnBvcHBlciksZS5zdHlsZXM9bixlLmVsZW1lbnRzLmFycm93JiZPYmplY3QuYXNzaWduKGUuZWxlbWVudHMuYXJyb3cuc3R5bGUsbi5hcnJvdyksZnVuY3Rpb24oKXtPYmplY3Qua2V5cyhlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uKHIpe3ZhciBvPWUuZWxlbWVudHNbcl0saT1lLmF0dHJpYnV0ZXNbcl18fHt9LGE9T2JqZWN0LmtleXMoZS5zdHlsZXMuaGFzT3duUHJvcGVydHkocik/ZS5zdHlsZXNbcl06bltyXSkscz1hLnJlZHVjZShmdW5jdGlvbihmLGMpe3JldHVybiBmW2NdPVwiXCIsZn0se30pOyFCKG8pfHwhQyhvKXx8KE9iamVjdC5hc3NpZ24oby5zdHlsZSxzKSxPYmplY3Qua2V5cyhpKS5mb3JFYWNoKGZ1bmN0aW9uKGYpe28ucmVtb3ZlQXR0cmlidXRlKGYpfSkpfSl9fXZhciBBZT17bmFtZTpcImFwcGx5U3R5bGVzXCIsZW5hYmxlZDohMCxwaGFzZTpcIndyaXRlXCIsZm46TXQsZWZmZWN0OlJ0LHJlcXVpcmVzOltcImNvbXB1dGVTdHlsZXNcIl19O2Z1bmN0aW9uIHEodCl7cmV0dXJuIHQuc3BsaXQoXCItXCIpWzBdfXZhciBYPU1hdGgubWF4LHZlPU1hdGgubWluLFo9TWF0aC5yb3VuZDtmdW5jdGlvbiBlZSh0LGUpe2U9PT12b2lkIDAmJihlPSExKTt2YXIgbj10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLHI9MSxvPTE7aWYoQih0KSYmZSl7dmFyIGk9dC5vZmZzZXRIZWlnaHQsYT10Lm9mZnNldFdpZHRoO2E+MCYmKHI9WihuLndpZHRoKS9hfHwxKSxpPjAmJihvPVoobi5oZWlnaHQpL2l8fDEpfXJldHVybnt3aWR0aDpuLndpZHRoL3IsaGVpZ2h0Om4uaGVpZ2h0L28sdG9wOm4udG9wL28scmlnaHQ6bi5yaWdodC9yLGJvdHRvbTpuLmJvdHRvbS9vLGxlZnQ6bi5sZWZ0L3IseDpuLmxlZnQvcix5Om4udG9wL299fWZ1bmN0aW9uIGtlKHQpe3ZhciBlPWVlKHQpLG49dC5vZmZzZXRXaWR0aCxyPXQub2Zmc2V0SGVpZ2h0O3JldHVybiBNYXRoLmFicyhlLndpZHRoLW4pPD0xJiYobj1lLndpZHRoKSxNYXRoLmFicyhlLmhlaWdodC1yKTw9MSYmKHI9ZS5oZWlnaHQpLHt4OnQub2Zmc2V0TGVmdCx5OnQub2Zmc2V0VG9wLHdpZHRoOm4saGVpZ2h0OnJ9fWZ1bmN0aW9uIGl0KHQsZSl7dmFyIG49ZS5nZXRSb290Tm9kZSYmZS5nZXRSb290Tm9kZSgpO2lmKHQuY29udGFpbnMoZSkpcmV0dXJuITA7aWYobiYmUGUobikpe3ZhciByPWU7ZG97aWYociYmdC5pc1NhbWVOb2RlKHIpKXJldHVybiEwO3I9ci5wYXJlbnROb2RlfHxyLmhvc3R9d2hpbGUocil9cmV0dXJuITF9ZnVuY3Rpb24gTih0KXtyZXR1cm4gSCh0KS5nZXRDb21wdXRlZFN0eWxlKHQpfWZ1bmN0aW9uIFd0KHQpe3JldHVybltcInRhYmxlXCIsXCJ0ZFwiLFwidGhcIl0uaW5kZXhPZihDKHQpKT49MH1mdW5jdGlvbiBJKHQpe3JldHVybigoUSh0KT90Lm93bmVyRG9jdW1lbnQ6dC5kb2N1bWVudCl8fHdpbmRvdy5kb2N1bWVudCkuZG9jdW1lbnRFbGVtZW50fWZ1bmN0aW9uIGdlKHQpe3JldHVybiBDKHQpPT09XCJodG1sXCI/dDp0LmFzc2lnbmVkU2xvdHx8dC5wYXJlbnROb2RlfHwoUGUodCk/dC5ob3N0Om51bGwpfHxJKHQpfWZ1bmN0aW9uIGF0KHQpe3JldHVybiFCKHQpfHxOKHQpLnBvc2l0aW9uPT09XCJmaXhlZFwiP251bGw6dC5vZmZzZXRQYXJlbnR9ZnVuY3Rpb24gQnQodCl7dmFyIGU9bmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJmaXJlZm94XCIpIT09LTEsbj1uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJUcmlkZW50XCIpIT09LTE7aWYobiYmQih0KSl7dmFyIHI9Tih0KTtpZihyLnBvc2l0aW9uPT09XCJmaXhlZFwiKXJldHVybiBudWxsfXZhciBvPWdlKHQpO2ZvcihQZShvKSYmKG89by5ob3N0KTtCKG8pJiZbXCJodG1sXCIsXCJib2R5XCJdLmluZGV4T2YoQyhvKSk8MDspe3ZhciBpPU4obyk7aWYoaS50cmFuc2Zvcm0hPT1cIm5vbmVcInx8aS5wZXJzcGVjdGl2ZSE9PVwibm9uZVwifHxpLmNvbnRhaW49PT1cInBhaW50XCJ8fFtcInRyYW5zZm9ybVwiLFwicGVyc3BlY3RpdmVcIl0uaW5kZXhPZihpLndpbGxDaGFuZ2UpIT09LTF8fGUmJmkud2lsbENoYW5nZT09PVwiZmlsdGVyXCJ8fGUmJmkuZmlsdGVyJiZpLmZpbHRlciE9PVwibm9uZVwiKXJldHVybiBvO289by5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIHNlKHQpe2Zvcih2YXIgZT1IKHQpLG49YXQodCk7biYmV3QobikmJk4obikucG9zaXRpb249PT1cInN0YXRpY1wiOyluPWF0KG4pO3JldHVybiBuJiYoQyhuKT09PVwiaHRtbFwifHxDKG4pPT09XCJib2R5XCImJk4obikucG9zaXRpb249PT1cInN0YXRpY1wiKT9lOm58fEJ0KHQpfHxlfWZ1bmN0aW9uIExlKHQpe3JldHVybltcInRvcFwiLFwiYm90dG9tXCJdLmluZGV4T2YodCk+PTA/XCJ4XCI6XCJ5XCJ9ZnVuY3Rpb24gZmUodCxlLG4pe3JldHVybiBYKHQsdmUoZSxuKSl9ZnVuY3Rpb24gU3QodCxlLG4pe3ZhciByPWZlKHQsZSxuKTtyZXR1cm4gcj5uP246cn1mdW5jdGlvbiBzdCgpe3JldHVybnt0b3A6MCxyaWdodDowLGJvdHRvbTowLGxlZnQ6MH19ZnVuY3Rpb24gZnQodCl7cmV0dXJuIE9iamVjdC5hc3NpZ24oe30sc3QoKSx0KX1mdW5jdGlvbiBjdCh0LGUpe3JldHVybiBlLnJlZHVjZShmdW5jdGlvbihuLHIpe3JldHVybiBuW3JdPXQsbn0se30pfXZhciBUdD1mdW5jdGlvbih0LGUpe3JldHVybiB0PXR5cGVvZiB0PT1cImZ1bmN0aW9uXCI/dChPYmplY3QuYXNzaWduKHt9LGUucmVjdHMse3BsYWNlbWVudDplLnBsYWNlbWVudH0pKTp0LGZ0KHR5cGVvZiB0IT1cIm51bWJlclwiP3Q6Y3QodCxHKSl9O2Z1bmN0aW9uIEh0KHQpe3ZhciBlLG49dC5zdGF0ZSxyPXQubmFtZSxvPXQub3B0aW9ucyxpPW4uZWxlbWVudHMuYXJyb3csYT1uLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyxzPXEobi5wbGFjZW1lbnQpLGY9TGUocyksYz1bUCxXXS5pbmRleE9mKHMpPj0wLHU9Yz9cImhlaWdodFwiOlwid2lkdGhcIjtpZighKCFpfHwhYSkpe3ZhciBtPVR0KG8ucGFkZGluZyxuKSx2PWtlKGkpLGw9Zj09PVwieVwiP0U6UCxoPWY9PT1cInlcIj9SOlcscD1uLnJlY3RzLnJlZmVyZW5jZVt1XStuLnJlY3RzLnJlZmVyZW5jZVtmXS1hW2ZdLW4ucmVjdHMucG9wcGVyW3VdLGc9YVtmXS1uLnJlY3RzLnJlZmVyZW5jZVtmXSx4PXNlKGkpLHk9eD9mPT09XCJ5XCI/eC5jbGllbnRIZWlnaHR8fDA6eC5jbGllbnRXaWR0aHx8MDowLCQ9cC8yLWcvMixkPW1bbF0sYj15LXZbdV0tbVtoXSx3PXkvMi12W3VdLzIrJCxPPWZlKGQsdyxiKSxqPWY7bi5tb2RpZmllcnNEYXRhW3JdPShlPXt9LGVbal09TyxlLmNlbnRlck9mZnNldD1PLXcsZSl9fWZ1bmN0aW9uIEN0KHQpe3ZhciBlPXQuc3RhdGUsbj10Lm9wdGlvbnMscj1uLmVsZW1lbnQsbz1yPT09dm9pZCAwP1wiW2RhdGEtcG9wcGVyLWFycm93XVwiOnI7byE9bnVsbCYmKHR5cGVvZiBvPT1cInN0cmluZ1wiJiYobz1lLmVsZW1lbnRzLnBvcHBlci5xdWVyeVNlbGVjdG9yKG8pLCFvKXx8IWl0KGUuZWxlbWVudHMucG9wcGVyLG8pfHwoZS5lbGVtZW50cy5hcnJvdz1vKSl9dmFyIHB0PXtuYW1lOlwiYXJyb3dcIixlbmFibGVkOiEwLHBoYXNlOlwibWFpblwiLGZuOkh0LGVmZmVjdDpDdCxyZXF1aXJlczpbXCJwb3BwZXJPZmZzZXRzXCJdLHJlcXVpcmVzSWZFeGlzdHM6W1wicHJldmVudE92ZXJmbG93XCJdfTtmdW5jdGlvbiB0ZSh0KXtyZXR1cm4gdC5zcGxpdChcIi1cIilbMV19dmFyIHF0PXt0b3A6XCJhdXRvXCIscmlnaHQ6XCJhdXRvXCIsYm90dG9tOlwiYXV0b1wiLGxlZnQ6XCJhdXRvXCJ9O2Z1bmN0aW9uIFZ0KHQpe3ZhciBlPXQueCxuPXQueSxyPXdpbmRvdyxvPXIuZGV2aWNlUGl4ZWxSYXRpb3x8MTtyZXR1cm57eDpaKGUqbykvb3x8MCx5OloobipvKS9vfHwwfX1mdW5jdGlvbiB1dCh0KXt2YXIgZSxuPXQucG9wcGVyLHI9dC5wb3BwZXJSZWN0LG89dC5wbGFjZW1lbnQsaT10LnZhcmlhdGlvbixhPXQub2Zmc2V0cyxzPXQucG9zaXRpb24sZj10LmdwdUFjY2VsZXJhdGlvbixjPXQuYWRhcHRpdmUsdT10LnJvdW5kT2Zmc2V0cyxtPXQuaXNGaXhlZCx2PWEueCxsPXY9PT12b2lkIDA/MDp2LGg9YS55LHA9aD09PXZvaWQgMD8wOmgsZz10eXBlb2YgdT09XCJmdW5jdGlvblwiP3Uoe3g6bCx5OnB9KTp7eDpsLHk6cH07bD1nLngscD1nLnk7dmFyIHg9YS5oYXNPd25Qcm9wZXJ0eShcInhcIikseT1hLmhhc093blByb3BlcnR5KFwieVwiKSwkPVAsZD1FLGI9d2luZG93O2lmKGMpe3ZhciB3PXNlKG4pLE89XCJjbGllbnRIZWlnaHRcIixqPVwiY2xpZW50V2lkdGhcIjtpZih3PT09SChuKSYmKHc9SShuKSxOKHcpLnBvc2l0aW9uIT09XCJzdGF0aWNcIiYmcz09PVwiYWJzb2x1dGVcIiYmKE89XCJzY3JvbGxIZWlnaHRcIixqPVwic2Nyb2xsV2lkdGhcIikpLHc9dyxvPT09RXx8KG89PT1QfHxvPT09VykmJmk9PT1KKXtkPVI7dmFyIEE9bSYmdz09PWImJmIudmlzdWFsVmlld3BvcnQ/Yi52aXN1YWxWaWV3cG9ydC5oZWlnaHQ6d1tPXTtwLT1BLXIuaGVpZ2h0LHAqPWY/MTotMX1pZihvPT09UHx8KG89PT1FfHxvPT09UikmJmk9PT1KKXskPVc7dmFyIGs9bSYmdz09PWImJmIudmlzdWFsVmlld3BvcnQ/Yi52aXN1YWxWaWV3cG9ydC53aWR0aDp3W2pdO2wtPWstci53aWR0aCxsKj1mPzE6LTF9fXZhciBEPU9iamVjdC5hc3NpZ24oe3Bvc2l0aW9uOnN9LGMmJnF0KSxTPXU9PT0hMD9WdCh7eDpsLHk6cH0pOnt4OmwseTpwfTtpZihsPVMueCxwPVMueSxmKXt2YXIgTDtyZXR1cm4gT2JqZWN0LmFzc2lnbih7fSxELChMPXt9LExbZF09eT9cIjBcIjpcIlwiLExbJF09eD9cIjBcIjpcIlwiLEwudHJhbnNmb3JtPShiLmRldmljZVBpeGVsUmF0aW98fDEpPD0xP1widHJhbnNsYXRlKFwiK2wrXCJweCwgXCIrcCtcInB4KVwiOlwidHJhbnNsYXRlM2QoXCIrbCtcInB4LCBcIitwK1wicHgsIDApXCIsTCkpfXJldHVybiBPYmplY3QuYXNzaWduKHt9LEQsKGU9e30sZVtkXT15P3ArXCJweFwiOlwiXCIsZVskXT14P2wrXCJweFwiOlwiXCIsZS50cmFuc2Zvcm09XCJcIixlKSl9ZnVuY3Rpb24gTnQodCl7dmFyIGU9dC5zdGF0ZSxuPXQub3B0aW9ucyxyPW4uZ3B1QWNjZWxlcmF0aW9uLG89cj09PXZvaWQgMD8hMDpyLGk9bi5hZGFwdGl2ZSxhPWk9PT12b2lkIDA/ITA6aSxzPW4ucm91bmRPZmZzZXRzLGY9cz09PXZvaWQgMD8hMDpzLGM9e3BsYWNlbWVudDpxKGUucGxhY2VtZW50KSx2YXJpYXRpb246dGUoZS5wbGFjZW1lbnQpLHBvcHBlcjplLmVsZW1lbnRzLnBvcHBlcixwb3BwZXJSZWN0OmUucmVjdHMucG9wcGVyLGdwdUFjY2VsZXJhdGlvbjpvLGlzRml4ZWQ6ZS5vcHRpb25zLnN0cmF0ZWd5PT09XCJmaXhlZFwifTtlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyE9bnVsbCYmKGUuc3R5bGVzLnBvcHBlcj1PYmplY3QuYXNzaWduKHt9LGUuc3R5bGVzLnBvcHBlcix1dChPYmplY3QuYXNzaWduKHt9LGMse29mZnNldHM6ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMscG9zaXRpb246ZS5vcHRpb25zLnN0cmF0ZWd5LGFkYXB0aXZlOmEscm91bmRPZmZzZXRzOmZ9KSkpKSxlLm1vZGlmaWVyc0RhdGEuYXJyb3chPW51bGwmJihlLnN0eWxlcy5hcnJvdz1PYmplY3QuYXNzaWduKHt9LGUuc3R5bGVzLmFycm93LHV0KE9iamVjdC5hc3NpZ24oe30sYyx7b2Zmc2V0czplLm1vZGlmaWVyc0RhdGEuYXJyb3cscG9zaXRpb246XCJhYnNvbHV0ZVwiLGFkYXB0aXZlOiExLHJvdW5kT2Zmc2V0czpmfSkpKSksZS5hdHRyaWJ1dGVzLnBvcHBlcj1PYmplY3QuYXNzaWduKHt9LGUuYXR0cmlidXRlcy5wb3BwZXIse1wiZGF0YS1wb3BwZXItcGxhY2VtZW50XCI6ZS5wbGFjZW1lbnR9KX12YXIgTWU9e25hbWU6XCJjb21wdXRlU3R5bGVzXCIsZW5hYmxlZDohMCxwaGFzZTpcImJlZm9yZVdyaXRlXCIsZm46TnQsZGF0YTp7fX0seWU9e3Bhc3NpdmU6ITB9O2Z1bmN0aW9uIEl0KHQpe3ZhciBlPXQuc3RhdGUsbj10Lmluc3RhbmNlLHI9dC5vcHRpb25zLG89ci5zY3JvbGwsaT1vPT09dm9pZCAwPyEwOm8sYT1yLnJlc2l6ZSxzPWE9PT12b2lkIDA/ITA6YSxmPUgoZS5lbGVtZW50cy5wb3BwZXIpLGM9W10uY29uY2F0KGUuc2Nyb2xsUGFyZW50cy5yZWZlcmVuY2UsZS5zY3JvbGxQYXJlbnRzLnBvcHBlcik7cmV0dXJuIGkmJmMuZm9yRWFjaChmdW5jdGlvbih1KXt1LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIixuLnVwZGF0ZSx5ZSl9KSxzJiZmLmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixuLnVwZGF0ZSx5ZSksZnVuY3Rpb24oKXtpJiZjLmZvckVhY2goZnVuY3Rpb24odSl7dS5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsbi51cGRhdGUseWUpfSkscyYmZi5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsbi51cGRhdGUseWUpfX12YXIgUmU9e25hbWU6XCJldmVudExpc3RlbmVyc1wiLGVuYWJsZWQ6ITAscGhhc2U6XCJ3cml0ZVwiLGZuOmZ1bmN0aW9uKCl7fSxlZmZlY3Q6SXQsZGF0YTp7fX0sX3Q9e2xlZnQ6XCJyaWdodFwiLHJpZ2h0OlwibGVmdFwiLGJvdHRvbTpcInRvcFwiLHRvcDpcImJvdHRvbVwifTtmdW5jdGlvbiBiZSh0KXtyZXR1cm4gdC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZyxmdW5jdGlvbihlKXtyZXR1cm4gX3RbZV19KX12YXIgenQ9e3N0YXJ0OlwiZW5kXCIsZW5kOlwic3RhcnRcIn07ZnVuY3Rpb24gbHQodCl7cmV0dXJuIHQucmVwbGFjZSgvc3RhcnR8ZW5kL2csZnVuY3Rpb24oZSl7cmV0dXJuIHp0W2VdfSl9ZnVuY3Rpb24gV2UodCl7dmFyIGU9SCh0KSxuPWUucGFnZVhPZmZzZXQscj1lLnBhZ2VZT2Zmc2V0O3JldHVybntzY3JvbGxMZWZ0Om4sc2Nyb2xsVG9wOnJ9fWZ1bmN0aW9uIEJlKHQpe3JldHVybiBlZShJKHQpKS5sZWZ0K1dlKHQpLnNjcm9sbExlZnR9ZnVuY3Rpb24gRnQodCl7dmFyIGU9SCh0KSxuPUkodCkscj1lLnZpc3VhbFZpZXdwb3J0LG89bi5jbGllbnRXaWR0aCxpPW4uY2xpZW50SGVpZ2h0LGE9MCxzPTA7cmV0dXJuIHImJihvPXIud2lkdGgsaT1yLmhlaWdodCwvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpfHwoYT1yLm9mZnNldExlZnQscz1yLm9mZnNldFRvcCkpLHt3aWR0aDpvLGhlaWdodDppLHg6YStCZSh0KSx5OnN9fWZ1bmN0aW9uIFV0KHQpe3ZhciBlLG49SSh0KSxyPVdlKHQpLG89KGU9dC5vd25lckRvY3VtZW50KT09bnVsbD92b2lkIDA6ZS5ib2R5LGk9WChuLnNjcm9sbFdpZHRoLG4uY2xpZW50V2lkdGgsbz9vLnNjcm9sbFdpZHRoOjAsbz9vLmNsaWVudFdpZHRoOjApLGE9WChuLnNjcm9sbEhlaWdodCxuLmNsaWVudEhlaWdodCxvP28uc2Nyb2xsSGVpZ2h0OjAsbz9vLmNsaWVudEhlaWdodDowKSxzPS1yLnNjcm9sbExlZnQrQmUodCksZj0tci5zY3JvbGxUb3A7cmV0dXJuIE4ob3x8bikuZGlyZWN0aW9uPT09XCJydGxcIiYmKHMrPVgobi5jbGllbnRXaWR0aCxvP28uY2xpZW50V2lkdGg6MCktaSkse3dpZHRoOmksaGVpZ2h0OmEseDpzLHk6Zn19ZnVuY3Rpb24gU2UodCl7dmFyIGU9Tih0KSxuPWUub3ZlcmZsb3cscj1lLm92ZXJmbG93WCxvPWUub3ZlcmZsb3dZO3JldHVybi9hdXRvfHNjcm9sbHxvdmVybGF5fGhpZGRlbi8udGVzdChuK28rcil9ZnVuY3Rpb24gZHQodCl7cmV0dXJuW1wiaHRtbFwiLFwiYm9keVwiLFwiI2RvY3VtZW50XCJdLmluZGV4T2YoQyh0KSk+PTA/dC5vd25lckRvY3VtZW50LmJvZHk6Qih0KSYmU2UodCk/dDpkdChnZSh0KSl9ZnVuY3Rpb24gY2UodCxlKXt2YXIgbjtlPT09dm9pZCAwJiYoZT1bXSk7dmFyIHI9ZHQodCksbz1yPT09KChuPXQub3duZXJEb2N1bWVudCk9PW51bGw/dm9pZCAwOm4uYm9keSksaT1IKHIpLGE9bz9baV0uY29uY2F0KGkudmlzdWFsVmlld3BvcnR8fFtdLFNlKHIpP3I6W10pOnIscz1lLmNvbmNhdChhKTtyZXR1cm4gbz9zOnMuY29uY2F0KGNlKGdlKGEpKSl9ZnVuY3Rpb24gVGUodCl7cmV0dXJuIE9iamVjdC5hc3NpZ24oe30sdCx7bGVmdDp0LngsdG9wOnQueSxyaWdodDp0LngrdC53aWR0aCxib3R0b206dC55K3QuaGVpZ2h0fSl9ZnVuY3Rpb24gWHQodCl7dmFyIGU9ZWUodCk7cmV0dXJuIGUudG9wPWUudG9wK3QuY2xpZW50VG9wLGUubGVmdD1lLmxlZnQrdC5jbGllbnRMZWZ0LGUuYm90dG9tPWUudG9wK3QuY2xpZW50SGVpZ2h0LGUucmlnaHQ9ZS5sZWZ0K3QuY2xpZW50V2lkdGgsZS53aWR0aD10LmNsaWVudFdpZHRoLGUuaGVpZ2h0PXQuY2xpZW50SGVpZ2h0LGUueD1lLmxlZnQsZS55PWUudG9wLGV9ZnVuY3Rpb24gaHQodCxlKXtyZXR1cm4gZT09PWplP1RlKEZ0KHQpKTpRKGUpP1h0KGUpOlRlKFV0KEkodCkpKX1mdW5jdGlvbiBZdCh0KXt2YXIgZT1jZShnZSh0KSksbj1bXCJhYnNvbHV0ZVwiLFwiZml4ZWRcIl0uaW5kZXhPZihOKHQpLnBvc2l0aW9uKT49MCxyPW4mJkIodCk/c2UodCk6dDtyZXR1cm4gUShyKT9lLmZpbHRlcihmdW5jdGlvbihvKXtyZXR1cm4gUShvKSYmaXQobyxyKSYmQyhvKSE9PVwiYm9keVwifSk6W119ZnVuY3Rpb24gR3QodCxlLG4pe3ZhciByPWU9PT1cImNsaXBwaW5nUGFyZW50c1wiP1l0KHQpOltdLmNvbmNhdChlKSxvPVtdLmNvbmNhdChyLFtuXSksaT1vWzBdLGE9by5yZWR1Y2UoZnVuY3Rpb24ocyxmKXt2YXIgYz1odCh0LGYpO3JldHVybiBzLnRvcD1YKGMudG9wLHMudG9wKSxzLnJpZ2h0PXZlKGMucmlnaHQscy5yaWdodCkscy5ib3R0b209dmUoYy5ib3R0b20scy5ib3R0b20pLHMubGVmdD1YKGMubGVmdCxzLmxlZnQpLHN9LGh0KHQsaSkpO3JldHVybiBhLndpZHRoPWEucmlnaHQtYS5sZWZ0LGEuaGVpZ2h0PWEuYm90dG9tLWEudG9wLGEueD1hLmxlZnQsYS55PWEudG9wLGF9ZnVuY3Rpb24gbXQodCl7dmFyIGU9dC5yZWZlcmVuY2Usbj10LmVsZW1lbnQscj10LnBsYWNlbWVudCxvPXI/cShyKTpudWxsLGk9cj90ZShyKTpudWxsLGE9ZS54K2Uud2lkdGgvMi1uLndpZHRoLzIscz1lLnkrZS5oZWlnaHQvMi1uLmhlaWdodC8yLGY7c3dpdGNoKG8pe2Nhc2UgRTpmPXt4OmEseTplLnktbi5oZWlnaHR9O2JyZWFrO2Nhc2UgUjpmPXt4OmEseTplLnkrZS5oZWlnaHR9O2JyZWFrO2Nhc2UgVzpmPXt4OmUueCtlLndpZHRoLHk6c307YnJlYWs7Y2FzZSBQOmY9e3g6ZS54LW4ud2lkdGgseTpzfTticmVhaztkZWZhdWx0OmY9e3g6ZS54LHk6ZS55fX12YXIgYz1vP0xlKG8pOm51bGw7aWYoYyE9bnVsbCl7dmFyIHU9Yz09PVwieVwiP1wiaGVpZ2h0XCI6XCJ3aWR0aFwiO3N3aXRjaChpKXtjYXNlIFU6ZltjXT1mW2NdLShlW3VdLzItblt1XS8yKTticmVhaztjYXNlIEo6ZltjXT1mW2NdKyhlW3VdLzItblt1XS8yKTticmVha319cmV0dXJuIGZ9ZnVuY3Rpb24gbmUodCxlKXtlPT09dm9pZCAwJiYoZT17fSk7dmFyIG49ZSxyPW4ucGxhY2VtZW50LG89cj09PXZvaWQgMD90LnBsYWNlbWVudDpyLGk9bi5ib3VuZGFyeSxhPWk9PT12b2lkIDA/WGU6aSxzPW4ucm9vdEJvdW5kYXJ5LGY9cz09PXZvaWQgMD9qZTpzLGM9bi5lbGVtZW50Q29udGV4dCx1PWM9PT12b2lkIDA/SzpjLG09bi5hbHRCb3VuZGFyeSx2PW09PT12b2lkIDA/ITE6bSxsPW4ucGFkZGluZyxoPWw9PT12b2lkIDA/MDpsLHA9ZnQodHlwZW9mIGghPVwibnVtYmVyXCI/aDpjdChoLEcpKSxnPXU9PT1LP1llOksseD10LnJlY3RzLnBvcHBlcix5PXQuZWxlbWVudHNbdj9nOnVdLCQ9R3QoUSh5KT95OnkuY29udGV4dEVsZW1lbnR8fEkodC5lbGVtZW50cy5wb3BwZXIpLGEsZiksZD1lZSh0LmVsZW1lbnRzLnJlZmVyZW5jZSksYj1tdCh7cmVmZXJlbmNlOmQsZWxlbWVudDp4LHN0cmF0ZWd5OlwiYWJzb2x1dGVcIixwbGFjZW1lbnQ6b30pLHc9VGUoT2JqZWN0LmFzc2lnbih7fSx4LGIpKSxPPXU9PT1LP3c6ZCxqPXt0b3A6JC50b3AtTy50b3ArcC50b3AsYm90dG9tOk8uYm90dG9tLSQuYm90dG9tK3AuYm90dG9tLGxlZnQ6JC5sZWZ0LU8ubGVmdCtwLmxlZnQscmlnaHQ6Ty5yaWdodC0kLnJpZ2h0K3AucmlnaHR9LEE9dC5tb2RpZmllcnNEYXRhLm9mZnNldDtpZih1PT09SyYmQSl7dmFyIGs9QVtvXTtPYmplY3Qua2V5cyhqKS5mb3JFYWNoKGZ1bmN0aW9uKEQpe3ZhciBTPVtXLFJdLmluZGV4T2YoRCk+PTA/MTotMSxMPVtFLFJdLmluZGV4T2YoRCk+PTA/XCJ5XCI6XCJ4XCI7altEXSs9a1tMXSpTfSl9cmV0dXJuIGp9ZnVuY3Rpb24gSnQodCxlKXtlPT09dm9pZCAwJiYoZT17fSk7dmFyIG49ZSxyPW4ucGxhY2VtZW50LG89bi5ib3VuZGFyeSxpPW4ucm9vdEJvdW5kYXJ5LGE9bi5wYWRkaW5nLHM9bi5mbGlwVmFyaWF0aW9ucyxmPW4uYWxsb3dlZEF1dG9QbGFjZW1lbnRzLGM9Zj09PXZvaWQgMD9FZTpmLHU9dGUociksbT11P3M/RGU6RGUuZmlsdGVyKGZ1bmN0aW9uKGgpe3JldHVybiB0ZShoKT09PXV9KTpHLHY9bS5maWx0ZXIoZnVuY3Rpb24oaCl7cmV0dXJuIGMuaW5kZXhPZihoKT49MH0pO3YubGVuZ3RoPT09MCYmKHY9bSk7dmFyIGw9di5yZWR1Y2UoZnVuY3Rpb24oaCxwKXtyZXR1cm4gaFtwXT1uZSh0LHtwbGFjZW1lbnQ6cCxib3VuZGFyeTpvLHJvb3RCb3VuZGFyeTppLHBhZGRpbmc6YX0pW3EocCldLGh9LHt9KTtyZXR1cm4gT2JqZWN0LmtleXMobCkuc29ydChmdW5jdGlvbihoLHApe3JldHVybiBsW2hdLWxbcF19KX1mdW5jdGlvbiBLdCh0KXtpZihxKHQpPT09bWUpcmV0dXJuW107dmFyIGU9YmUodCk7cmV0dXJuW2x0KHQpLGUsbHQoZSldfWZ1bmN0aW9uIFF0KHQpe3ZhciBlPXQuc3RhdGUsbj10Lm9wdGlvbnMscj10Lm5hbWU7aWYoIWUubW9kaWZpZXJzRGF0YVtyXS5fc2tpcCl7Zm9yKHZhciBvPW4ubWFpbkF4aXMsaT1vPT09dm9pZCAwPyEwOm8sYT1uLmFsdEF4aXMscz1hPT09dm9pZCAwPyEwOmEsZj1uLmZhbGxiYWNrUGxhY2VtZW50cyxjPW4ucGFkZGluZyx1PW4uYm91bmRhcnksbT1uLnJvb3RCb3VuZGFyeSx2PW4uYWx0Qm91bmRhcnksbD1uLmZsaXBWYXJpYXRpb25zLGg9bD09PXZvaWQgMD8hMDpsLHA9bi5hbGxvd2VkQXV0b1BsYWNlbWVudHMsZz1lLm9wdGlvbnMucGxhY2VtZW50LHg9cShnKSx5PXg9PT1nLCQ9Znx8KHl8fCFoP1tiZShnKV06S3QoZykpLGQ9W2ddLmNvbmNhdCgkKS5yZWR1Y2UoZnVuY3Rpb24oeixWKXtyZXR1cm4gei5jb25jYXQocShWKT09PW1lP0p0KGUse3BsYWNlbWVudDpWLGJvdW5kYXJ5OnUscm9vdEJvdW5kYXJ5Om0scGFkZGluZzpjLGZsaXBWYXJpYXRpb25zOmgsYWxsb3dlZEF1dG9QbGFjZW1lbnRzOnB9KTpWKX0sW10pLGI9ZS5yZWN0cy5yZWZlcmVuY2Usdz1lLnJlY3RzLnBvcHBlcixPPW5ldyBNYXAsaj0hMCxBPWRbMF0saz0wO2s8ZC5sZW5ndGg7aysrKXt2YXIgRD1kW2tdLFM9cShEKSxMPXRlKEQpPT09VSxyZT1bRSxSXS5pbmRleE9mKFMpPj0wLG9lPXJlP1wid2lkdGhcIjpcImhlaWdodFwiLE09bmUoZSx7cGxhY2VtZW50OkQsYm91bmRhcnk6dSxyb290Qm91bmRhcnk6bSxhbHRCb3VuZGFyeTp2LHBhZGRpbmc6Y30pLFQ9cmU/TD9XOlA6TD9SOkU7YltvZV0+d1tvZV0mJihUPWJlKFQpKTt2YXIgcGU9YmUoVCksXz1bXTtpZihpJiZfLnB1c2goTVtTXTw9MCkscyYmXy5wdXNoKE1bVF08PTAsTVtwZV08PTApLF8uZXZlcnkoZnVuY3Rpb24oeil7cmV0dXJuIHp9KSl7QT1ELGo9ITE7YnJlYWt9Ty5zZXQoRCxfKX1pZihqKWZvcih2YXIgdWU9aD8zOjEseGU9ZnVuY3Rpb24oeil7dmFyIFY9ZC5maW5kKGZ1bmN0aW9uKGRlKXt2YXIgYWU9Ty5nZXQoZGUpO2lmKGFlKXJldHVybiBhZS5zbGljZSgwLHopLmV2ZXJ5KGZ1bmN0aW9uKFkpe3JldHVybiBZfSl9KTtpZihWKXJldHVybiBBPVYsXCJicmVha1wifSxpZT11ZTtpZT4wO2llLS0pe3ZhciBsZT14ZShpZSk7aWYobGU9PT1cImJyZWFrXCIpYnJlYWt9ZS5wbGFjZW1lbnQhPT1BJiYoZS5tb2RpZmllcnNEYXRhW3JdLl9za2lwPSEwLGUucGxhY2VtZW50PUEsZS5yZXNldD0hMCl9fXZhciB2dD17bmFtZTpcImZsaXBcIixlbmFibGVkOiEwLHBoYXNlOlwibWFpblwiLGZuOlF0LHJlcXVpcmVzSWZFeGlzdHM6W1wib2Zmc2V0XCJdLGRhdGE6e19za2lwOiExfX07ZnVuY3Rpb24gZ3QodCxlLG4pe3JldHVybiBuPT09dm9pZCAwJiYobj17eDowLHk6MH0pLHt0b3A6dC50b3AtZS5oZWlnaHQtbi55LHJpZ2h0OnQucmlnaHQtZS53aWR0aCtuLngsYm90dG9tOnQuYm90dG9tLWUuaGVpZ2h0K24ueSxsZWZ0OnQubGVmdC1lLndpZHRoLW4ueH19ZnVuY3Rpb24geXQodCl7cmV0dXJuW0UsVyxSLFBdLnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV0+PTB9KX1mdW5jdGlvbiBadCh0KXt2YXIgZT10LnN0YXRlLG49dC5uYW1lLHI9ZS5yZWN0cy5yZWZlcmVuY2Usbz1lLnJlY3RzLnBvcHBlcixpPWUubW9kaWZpZXJzRGF0YS5wcmV2ZW50T3ZlcmZsb3csYT1uZShlLHtlbGVtZW50Q29udGV4dDpcInJlZmVyZW5jZVwifSkscz1uZShlLHthbHRCb3VuZGFyeTohMH0pLGY9Z3QoYSxyKSxjPWd0KHMsbyxpKSx1PXl0KGYpLG09eXQoYyk7ZS5tb2RpZmllcnNEYXRhW25dPXtyZWZlcmVuY2VDbGlwcGluZ09mZnNldHM6Zixwb3BwZXJFc2NhcGVPZmZzZXRzOmMsaXNSZWZlcmVuY2VIaWRkZW46dSxoYXNQb3BwZXJFc2NhcGVkOm19LGUuYXR0cmlidXRlcy5wb3BwZXI9T2JqZWN0LmFzc2lnbih7fSxlLmF0dHJpYnV0ZXMucG9wcGVyLHtcImRhdGEtcG9wcGVyLXJlZmVyZW5jZS1oaWRkZW5cIjp1LFwiZGF0YS1wb3BwZXItZXNjYXBlZFwiOm19KX12YXIgYnQ9e25hbWU6XCJoaWRlXCIsZW5hYmxlZDohMCxwaGFzZTpcIm1haW5cIixyZXF1aXJlc0lmRXhpc3RzOltcInByZXZlbnRPdmVyZmxvd1wiXSxmbjpadH07ZnVuY3Rpb24gZW4odCxlLG4pe3ZhciByPXEodCksbz1bUCxFXS5pbmRleE9mKHIpPj0wPy0xOjEsaT10eXBlb2Ygbj09XCJmdW5jdGlvblwiP24oT2JqZWN0LmFzc2lnbih7fSxlLHtwbGFjZW1lbnQ6dH0pKTpuLGE9aVswXSxzPWlbMV07cmV0dXJuIGE9YXx8MCxzPShzfHwwKSpvLFtQLFddLmluZGV4T2Yocik+PTA/e3g6cyx5OmF9Ont4OmEseTpzfX1mdW5jdGlvbiB0bih0KXt2YXIgZT10LnN0YXRlLG49dC5vcHRpb25zLHI9dC5uYW1lLG89bi5vZmZzZXQsaT1vPT09dm9pZCAwP1swLDBdOm8sYT1FZS5yZWR1Y2UoZnVuY3Rpb24odSxtKXtyZXR1cm4gdVttXT1lbihtLGUucmVjdHMsaSksdX0se30pLHM9YVtlLnBsYWNlbWVudF0sZj1zLngsYz1zLnk7ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMhPW51bGwmJihlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy54Kz1mLGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnkrPWMpLGUubW9kaWZpZXJzRGF0YVtyXT1hfXZhciB3dD17bmFtZTpcIm9mZnNldFwiLGVuYWJsZWQ6ITAscGhhc2U6XCJtYWluXCIscmVxdWlyZXM6W1wicG9wcGVyT2Zmc2V0c1wiXSxmbjp0bn07ZnVuY3Rpb24gbm4odCl7dmFyIGU9dC5zdGF0ZSxuPXQubmFtZTtlLm1vZGlmaWVyc0RhdGFbbl09bXQoe3JlZmVyZW5jZTplLnJlY3RzLnJlZmVyZW5jZSxlbGVtZW50OmUucmVjdHMucG9wcGVyLHN0cmF0ZWd5OlwiYWJzb2x1dGVcIixwbGFjZW1lbnQ6ZS5wbGFjZW1lbnR9KX12YXIgSGU9e25hbWU6XCJwb3BwZXJPZmZzZXRzXCIsZW5hYmxlZDohMCxwaGFzZTpcInJlYWRcIixmbjpubixkYXRhOnt9fTtmdW5jdGlvbiBybih0KXtyZXR1cm4gdD09PVwieFwiP1wieVwiOlwieFwifWZ1bmN0aW9uIG9uKHQpe3ZhciBlPXQuc3RhdGUsbj10Lm9wdGlvbnMscj10Lm5hbWUsbz1uLm1haW5BeGlzLGk9bz09PXZvaWQgMD8hMDpvLGE9bi5hbHRBeGlzLHM9YT09PXZvaWQgMD8hMTphLGY9bi5ib3VuZGFyeSxjPW4ucm9vdEJvdW5kYXJ5LHU9bi5hbHRCb3VuZGFyeSxtPW4ucGFkZGluZyx2PW4udGV0aGVyLGw9dj09PXZvaWQgMD8hMDp2LGg9bi50ZXRoZXJPZmZzZXQscD1oPT09dm9pZCAwPzA6aCxnPW5lKGUse2JvdW5kYXJ5OmYscm9vdEJvdW5kYXJ5OmMscGFkZGluZzptLGFsdEJvdW5kYXJ5OnV9KSx4PXEoZS5wbGFjZW1lbnQpLHk9dGUoZS5wbGFjZW1lbnQpLCQ9IXksZD1MZSh4KSxiPXJuKGQpLHc9ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsTz1lLnJlY3RzLnJlZmVyZW5jZSxqPWUucmVjdHMucG9wcGVyLEE9dHlwZW9mIHA9PVwiZnVuY3Rpb25cIj9wKE9iamVjdC5hc3NpZ24oe30sZS5yZWN0cyx7cGxhY2VtZW50OmUucGxhY2VtZW50fSkpOnAsaz10eXBlb2YgQT09XCJudW1iZXJcIj97bWFpbkF4aXM6QSxhbHRBeGlzOkF9Ok9iamVjdC5hc3NpZ24oe21haW5BeGlzOjAsYWx0QXhpczowfSxBKSxEPWUubW9kaWZpZXJzRGF0YS5vZmZzZXQ/ZS5tb2RpZmllcnNEYXRhLm9mZnNldFtlLnBsYWNlbWVudF06bnVsbCxTPXt4OjAseTowfTtpZih3KXtpZihpKXt2YXIgTCxyZT1kPT09XCJ5XCI/RTpQLG9lPWQ9PT1cInlcIj9SOlcsTT1kPT09XCJ5XCI/XCJoZWlnaHRcIjpcIndpZHRoXCIsVD13W2RdLHBlPVQrZ1tyZV0sXz1ULWdbb2VdLHVlPWw/LWpbTV0vMjowLHhlPXk9PT1VP09bTV06altNXSxpZT15PT09VT8taltNXTotT1tNXSxsZT1lLmVsZW1lbnRzLmFycm93LHo9bCYmbGU/a2UobGUpOnt3aWR0aDowLGhlaWdodDowfSxWPWUubW9kaWZpZXJzRGF0YVtcImFycm93I3BlcnNpc3RlbnRcIl0/ZS5tb2RpZmllcnNEYXRhW1wiYXJyb3cjcGVyc2lzdGVudFwiXS5wYWRkaW5nOnN0KCksZGU9VltyZV0sYWU9VltvZV0sWT1mZSgwLE9bTV0seltNXSksanQ9JD9PW01dLzItdWUtWS1kZS1rLm1haW5BeGlzOnhlLVktZGUtay5tYWluQXhpcyxEdD0kPy1PW01dLzIrdWUrWSthZStrLm1haW5BeGlzOmllK1krYWUray5tYWluQXhpcyxPZT1lLmVsZW1lbnRzLmFycm93JiZzZShlLmVsZW1lbnRzLmFycm93KSxFdD1PZT9kPT09XCJ5XCI/T2UuY2xpZW50VG9wfHwwOk9lLmNsaWVudExlZnR8fDA6MCxDZT0oTD1EPT1udWxsP3ZvaWQgMDpEW2RdKSE9bnVsbD9MOjAsUHQ9VCtqdC1DZS1FdCxBdD1UK0R0LUNlLHFlPWZlKGw/dmUocGUsUHQpOnBlLFQsbD9YKF8sQXQpOl8pO3dbZF09cWUsU1tkXT1xZS1UfWlmKHMpe3ZhciBWZSxrdD1kPT09XCJ4XCI/RTpQLEx0PWQ9PT1cInhcIj9SOlcsRj13W2JdLGhlPWI9PT1cInlcIj9cImhlaWdodFwiOlwid2lkdGhcIixOZT1GK2dba3RdLEllPUYtZ1tMdF0sJGU9W0UsUF0uaW5kZXhPZih4KSE9PS0xLF9lPShWZT1EPT1udWxsP3ZvaWQgMDpEW2JdKSE9bnVsbD9WZTowLHplPSRlP05lOkYtT1toZV0taltoZV0tX2Uray5hbHRBeGlzLEZlPSRlP0YrT1toZV0raltoZV0tX2Utay5hbHRBeGlzOkllLFVlPWwmJiRlP1N0KHplLEYsRmUpOmZlKGw/emU6TmUsRixsP0ZlOkllKTt3W2JdPVVlLFNbYl09VWUtRn1lLm1vZGlmaWVyc0RhdGFbcl09U319dmFyIHh0PXtuYW1lOlwicHJldmVudE92ZXJmbG93XCIsZW5hYmxlZDohMCxwaGFzZTpcIm1haW5cIixmbjpvbixyZXF1aXJlc0lmRXhpc3RzOltcIm9mZnNldFwiXX07ZnVuY3Rpb24gYW4odCl7cmV0dXJue3Njcm9sbExlZnQ6dC5zY3JvbGxMZWZ0LHNjcm9sbFRvcDp0LnNjcm9sbFRvcH19ZnVuY3Rpb24gc24odCl7cmV0dXJuIHQ9PT1IKHQpfHwhQih0KT9XZSh0KTphbih0KX1mdW5jdGlvbiBmbih0KXt2YXIgZT10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG49WihlLndpZHRoKS90Lm9mZnNldFdpZHRofHwxLHI9WihlLmhlaWdodCkvdC5vZmZzZXRIZWlnaHR8fDE7cmV0dXJuIG4hPT0xfHxyIT09MX1mdW5jdGlvbiBjbih0LGUsbil7bj09PXZvaWQgMCYmKG49ITEpO3ZhciByPUIoZSksbz1CKGUpJiZmbihlKSxpPUkoZSksYT1lZSh0LG8pLHM9e3Njcm9sbExlZnQ6MCxzY3JvbGxUb3A6MH0sZj17eDowLHk6MH07cmV0dXJuKHJ8fCFyJiYhbikmJigoQyhlKSE9PVwiYm9keVwifHxTZShpKSkmJihzPXNuKGUpKSxCKGUpPyhmPWVlKGUsITApLGYueCs9ZS5jbGllbnRMZWZ0LGYueSs9ZS5jbGllbnRUb3ApOmkmJihmLng9QmUoaSkpKSx7eDphLmxlZnQrcy5zY3JvbGxMZWZ0LWYueCx5OmEudG9wK3Muc2Nyb2xsVG9wLWYueSx3aWR0aDphLndpZHRoLGhlaWdodDphLmhlaWdodH19ZnVuY3Rpb24gcG4odCl7dmFyIGU9bmV3IE1hcCxuPW5ldyBTZXQscj1bXTt0LmZvckVhY2goZnVuY3Rpb24oaSl7ZS5zZXQoaS5uYW1lLGkpfSk7ZnVuY3Rpb24gbyhpKXtuLmFkZChpLm5hbWUpO3ZhciBhPVtdLmNvbmNhdChpLnJlcXVpcmVzfHxbXSxpLnJlcXVpcmVzSWZFeGlzdHN8fFtdKTthLmZvckVhY2goZnVuY3Rpb24ocyl7aWYoIW4uaGFzKHMpKXt2YXIgZj1lLmdldChzKTtmJiZvKGYpfX0pLHIucHVzaChpKX1yZXR1cm4gdC5mb3JFYWNoKGZ1bmN0aW9uKGkpe24uaGFzKGkubmFtZSl8fG8oaSl9KSxyfWZ1bmN0aW9uIHVuKHQpe3ZhciBlPXBuKHQpO3JldHVybiBvdC5yZWR1Y2UoZnVuY3Rpb24obixyKXtyZXR1cm4gbi5jb25jYXQoZS5maWx0ZXIoZnVuY3Rpb24obyl7cmV0dXJuIG8ucGhhc2U9PT1yfSkpfSxbXSl9ZnVuY3Rpb24gbG4odCl7dmFyIGU7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGV8fChlPW5ldyBQcm9taXNlKGZ1bmN0aW9uKG4pe1Byb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKXtlPXZvaWQgMCxuKHQoKSl9KX0pKSxlfX1mdW5jdGlvbiBkbih0KXt2YXIgZT10LnJlZHVjZShmdW5jdGlvbihuLHIpe3ZhciBvPW5bci5uYW1lXTtyZXR1cm4gbltyLm5hbWVdPW8/T2JqZWN0LmFzc2lnbih7fSxvLHIse29wdGlvbnM6T2JqZWN0LmFzc2lnbih7fSxvLm9wdGlvbnMsci5vcHRpb25zKSxkYXRhOk9iamVjdC5hc3NpZ24oe30sby5kYXRhLHIuZGF0YSl9KTpyLG59LHt9KTtyZXR1cm4gT2JqZWN0LmtleXMoZSkubWFwKGZ1bmN0aW9uKG4pe3JldHVybiBlW25dfSl9dmFyIE90PXtwbGFjZW1lbnQ6XCJib3R0b21cIixtb2RpZmllcnM6W10sc3RyYXRlZ3k6XCJhYnNvbHV0ZVwifTtmdW5jdGlvbiAkdCgpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGU9bmV3IEFycmF5KHQpLG49MDtuPHQ7bisrKWVbbl09YXJndW1lbnRzW25dO3JldHVybiFlLnNvbWUoZnVuY3Rpb24ocil7cmV0dXJuIShyJiZ0eXBlb2Ygci5nZXRCb3VuZGluZ0NsaWVudFJlY3Q9PVwiZnVuY3Rpb25cIil9KX1mdW5jdGlvbiB3ZSh0KXt0PT09dm9pZCAwJiYodD17fSk7dmFyIGU9dCxuPWUuZGVmYXVsdE1vZGlmaWVycyxyPW49PT12b2lkIDA/W106bixvPWUuZGVmYXVsdE9wdGlvbnMsaT1vPT09dm9pZCAwP090Om87cmV0dXJuIGZ1bmN0aW9uKGEscyxmKXtmPT09dm9pZCAwJiYoZj1pKTt2YXIgYz17cGxhY2VtZW50OlwiYm90dG9tXCIsb3JkZXJlZE1vZGlmaWVyczpbXSxvcHRpb25zOk9iamVjdC5hc3NpZ24oe30sT3QsaSksbW9kaWZpZXJzRGF0YTp7fSxlbGVtZW50czp7cmVmZXJlbmNlOmEscG9wcGVyOnN9LGF0dHJpYnV0ZXM6e30sc3R5bGVzOnt9fSx1PVtdLG09ITEsdj17c3RhdGU6YyxzZXRPcHRpb25zOmZ1bmN0aW9uKHApe3ZhciBnPXR5cGVvZiBwPT1cImZ1bmN0aW9uXCI/cChjLm9wdGlvbnMpOnA7aCgpLGMub3B0aW9ucz1PYmplY3QuYXNzaWduKHt9LGksYy5vcHRpb25zLGcpLGMuc2Nyb2xsUGFyZW50cz17cmVmZXJlbmNlOlEoYSk/Y2UoYSk6YS5jb250ZXh0RWxlbWVudD9jZShhLmNvbnRleHRFbGVtZW50KTpbXSxwb3BwZXI6Y2Uocyl9O3ZhciB4PXVuKGRuKFtdLmNvbmNhdChyLGMub3B0aW9ucy5tb2RpZmllcnMpKSk7cmV0dXJuIGMub3JkZXJlZE1vZGlmaWVycz14LmZpbHRlcihmdW5jdGlvbih5KXtyZXR1cm4geS5lbmFibGVkfSksbCgpLHYudXBkYXRlKCl9LGZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7aWYoIW0pe3ZhciBwPWMuZWxlbWVudHMsZz1wLnJlZmVyZW5jZSx4PXAucG9wcGVyO2lmKCR0KGcseCkpe2MucmVjdHM9e3JlZmVyZW5jZTpjbihnLHNlKHgpLGMub3B0aW9ucy5zdHJhdGVneT09PVwiZml4ZWRcIikscG9wcGVyOmtlKHgpfSxjLnJlc2V0PSExLGMucGxhY2VtZW50PWMub3B0aW9ucy5wbGFjZW1lbnQsYy5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24oail7cmV0dXJuIGMubW9kaWZpZXJzRGF0YVtqLm5hbWVdPU9iamVjdC5hc3NpZ24oe30sai5kYXRhKX0pO2Zvcih2YXIgeT0wO3k8Yy5vcmRlcmVkTW9kaWZpZXJzLmxlbmd0aDt5Kyspe2lmKGMucmVzZXQ9PT0hMCl7Yy5yZXNldD0hMSx5PS0xO2NvbnRpbnVlfXZhciAkPWMub3JkZXJlZE1vZGlmaWVyc1t5XSxkPSQuZm4sYj0kLm9wdGlvbnMsdz1iPT09dm9pZCAwP3t9OmIsTz0kLm5hbWU7dHlwZW9mIGQ9PVwiZnVuY3Rpb25cIiYmKGM9ZCh7c3RhdGU6YyxvcHRpb25zOncsbmFtZTpPLGluc3RhbmNlOnZ9KXx8Yyl9fX19LHVwZGF0ZTpsbihmdW5jdGlvbigpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihwKXt2LmZvcmNlVXBkYXRlKCkscChjKX0pfSksZGVzdHJveTpmdW5jdGlvbigpe2goKSxtPSEwfX07aWYoISR0KGEscykpcmV0dXJuIHY7di5zZXRPcHRpb25zKGYpLnRoZW4oZnVuY3Rpb24ocCl7IW0mJmYub25GaXJzdFVwZGF0ZSYmZi5vbkZpcnN0VXBkYXRlKHApfSk7ZnVuY3Rpb24gbCgpe2Mub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uKHApe3ZhciBnPXAubmFtZSx4PXAub3B0aW9ucyx5PXg9PT12b2lkIDA/e306eCwkPXAuZWZmZWN0O2lmKHR5cGVvZiAkPT1cImZ1bmN0aW9uXCIpe3ZhciBkPSQoe3N0YXRlOmMsbmFtZTpnLGluc3RhbmNlOnYsb3B0aW9uczp5fSksYj1mdW5jdGlvbigpe307dS5wdXNoKGR8fGIpfX0pfWZ1bmN0aW9uIGgoKXt1LmZvckVhY2goZnVuY3Rpb24ocCl7cmV0dXJuIHAoKX0pLHU9W119cmV0dXJuIHZ9fXZhciBobj13ZSgpLG1uPVtSZSxIZSxNZSxBZV0sdm49d2Uoe2RlZmF1bHRNb2RpZmllcnM6bW59KSxnbj1bUmUsSGUsTWUsQWUsd3QsdnQseHQscHQsYnRdLHluPXdlKHtkZWZhdWx0TW9kaWZpZXJzOmdufSk7ZXhwb3J0e2V0IGFzIGFmdGVyTWFpbixLZSBhcyBhZnRlclJlYWQscnQgYXMgYWZ0ZXJXcml0ZSxBZSBhcyBhcHBseVN0eWxlcyxwdCBhcyBhcnJvdyxtZSBhcyBhdXRvLEcgYXMgYmFzZVBsYWNlbWVudHMsUWUgYXMgYmVmb3JlTWFpbixHZSBhcyBiZWZvcmVSZWFkLHR0IGFzIGJlZm9yZVdyaXRlLFIgYXMgYm90dG9tLFhlIGFzIGNsaXBwaW5nUGFyZW50cyxNZSBhcyBjb21wdXRlU3R5bGVzLHluIGFzIGNyZWF0ZVBvcHBlcixobiBhcyBjcmVhdGVQb3BwZXJCYXNlLHZuIGFzIGNyZWF0ZVBvcHBlckxpdGUsbmUgYXMgZGV0ZWN0T3ZlcmZsb3csSiBhcyBlbmQsUmUgYXMgZXZlbnRMaXN0ZW5lcnMsdnQgYXMgZmxpcCxidCBhcyBoaWRlLFAgYXMgbGVmdCxaZSBhcyBtYWluLG90IGFzIG1vZGlmaWVyUGhhc2VzLHd0IGFzIG9mZnNldCxFZSBhcyBwbGFjZW1lbnRzLEsgYXMgcG9wcGVyLHdlIGFzIHBvcHBlckdlbmVyYXRvcixIZSBhcyBwb3BwZXJPZmZzZXRzLHh0IGFzIHByZXZlbnRPdmVyZmxvdyxKZSBhcyByZWFkLFllIGFzIHJlZmVyZW5jZSxXIGFzIHJpZ2h0LFUgYXMgc3RhcnQsRSBhcyB0b3AsRGUgYXMgdmFyaWF0aW9uUGxhY2VtZW50cyxqZSBhcyB2aWV3cG9ydCxudCBhcyB3cml0ZX07XG4iLCJpbXBvcnQgeyBjb21wdXRlZCwgdW5yZWYsIHNoYWxsb3dSZWYsIHJlZiwgd2F0Y2gsIG9uQmVmb3JlVW5tb3VudCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjcmVhdGVQb3BwZXIgfSBmcm9tICdAcG9wcGVyanMvY29yZSc7XG5pbXBvcnQgeyBmcm9tUGFpcnMgfSBmcm9tICdsb2Rhc2gtdW5pZmllZCc7XG5cbmNvbnN0IHVzZVBvcHBlciA9IChyZWZlcmVuY2VFbGVtZW50UmVmLCBwb3BwZXJFbGVtZW50UmVmLCBvcHRzID0ge30pID0+IHtcbiAgY29uc3Qgc3RhdGVVcGRhdGVyID0ge1xuICAgIG5hbWU6IFwidXBkYXRlU3RhdGVcIixcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIHBoYXNlOiBcIndyaXRlXCIsXG4gICAgZm46ICh7IHN0YXRlIH0pID0+IHtcbiAgICAgIGNvbnN0IGRlcml2ZWRTdGF0ZSA9IGRlcml2ZVN0YXRlKHN0YXRlKTtcbiAgICAgIE9iamVjdC5hc3NpZ24oc3RhdGVzLnZhbHVlLCBkZXJpdmVkU3RhdGUpO1xuICAgIH0sXG4gICAgcmVxdWlyZXM6IFtcImNvbXB1dGVTdHlsZXNcIl1cbiAgfTtcbiAgY29uc3Qgb3B0aW9ucyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCB7IG9uRmlyc3RVcGRhdGUsIHBsYWNlbWVudCwgc3RyYXRlZ3ksIG1vZGlmaWVycyB9ID0gdW5yZWYob3B0cyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uRmlyc3RVcGRhdGUsXG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCB8fCBcImJvdHRvbVwiLFxuICAgICAgc3RyYXRlZ3k6IHN0cmF0ZWd5IHx8IFwiYWJzb2x1dGVcIixcbiAgICAgIG1vZGlmaWVyczogW1xuICAgICAgICAuLi5tb2RpZmllcnMgfHwgW10sXG4gICAgICAgIHN0YXRlVXBkYXRlcixcbiAgICAgICAgeyBuYW1lOiBcImFwcGx5U3R5bGVzXCIsIGVuYWJsZWQ6IGZhbHNlIH1cbiAgICAgIF1cbiAgICB9O1xuICB9KTtcbiAgY29uc3QgaW5zdGFuY2VSZWYgPSBzaGFsbG93UmVmKCk7XG4gIGNvbnN0IHN0YXRlcyA9IHJlZih7XG4gICAgc3R5bGVzOiB7XG4gICAgICBwb3BwZXI6IHtcbiAgICAgICAgcG9zaXRpb246IHVucmVmKG9wdGlvbnMpLnN0cmF0ZWd5LFxuICAgICAgICBsZWZ0OiBcIjBcIixcbiAgICAgICAgdG9wOiBcIjBcIlxuICAgICAgfSxcbiAgICAgIGFycm93OiB7XG4gICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIGF0dHJpYnV0ZXM6IHt9XG4gIH0pO1xuICBjb25zdCBkZXN0cm95ID0gKCkgPT4ge1xuICAgIGlmICghaW5zdGFuY2VSZWYudmFsdWUpXG4gICAgICByZXR1cm47XG4gICAgaW5zdGFuY2VSZWYudmFsdWUuZGVzdHJveSgpO1xuICAgIGluc3RhbmNlUmVmLnZhbHVlID0gdm9pZCAwO1xuICB9O1xuICB3YXRjaChvcHRpb25zLCAobmV3T3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IGluc3RhbmNlID0gdW5yZWYoaW5zdGFuY2VSZWYpO1xuICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgaW5zdGFuY2Uuc2V0T3B0aW9ucyhuZXdPcHRpb25zKTtcbiAgICB9XG4gIH0sIHtcbiAgICBkZWVwOiB0cnVlXG4gIH0pO1xuICB3YXRjaChbcmVmZXJlbmNlRWxlbWVudFJlZiwgcG9wcGVyRWxlbWVudFJlZl0sIChbcmVmZXJlbmNlRWxlbWVudCwgcG9wcGVyRWxlbWVudF0pID0+IHtcbiAgICBkZXN0cm95KCk7XG4gICAgaWYgKCFyZWZlcmVuY2VFbGVtZW50IHx8ICFwb3BwZXJFbGVtZW50KVxuICAgICAgcmV0dXJuO1xuICAgIGluc3RhbmNlUmVmLnZhbHVlID0gY3JlYXRlUG9wcGVyKHJlZmVyZW5jZUVsZW1lbnQsIHBvcHBlckVsZW1lbnQsIHVucmVmKG9wdGlvbnMpKTtcbiAgfSk7XG4gIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgZGVzdHJveSgpO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBzdGF0ZTogY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgdmFyIF9hO1xuICAgICAgcmV0dXJuIHsgLi4uKChfYSA9IHVucmVmKGluc3RhbmNlUmVmKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnN0YXRlKSB8fCB7fSB9O1xuICAgIH0pLFxuICAgIHN0eWxlczogY29tcHV0ZWQoKCkgPT4gdW5yZWYoc3RhdGVzKS5zdHlsZXMpLFxuICAgIGF0dHJpYnV0ZXM6IGNvbXB1dGVkKCgpID0+IHVucmVmKHN0YXRlcykuYXR0cmlidXRlcyksXG4gICAgdXBkYXRlOiAoKSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICByZXR1cm4gKF9hID0gdW5yZWYoaW5zdGFuY2VSZWYpKSA9PSBudWxsID8gdm9pZCAwIDogX2EudXBkYXRlKCk7XG4gICAgfSxcbiAgICBmb3JjZVVwZGF0ZTogKCkgPT4ge1xuICAgICAgdmFyIF9hO1xuICAgICAgcmV0dXJuIChfYSA9IHVucmVmKGluc3RhbmNlUmVmKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmZvcmNlVXBkYXRlKCk7XG4gICAgfSxcbiAgICBpbnN0YW5jZVJlZjogY29tcHV0ZWQoKCkgPT4gdW5yZWYoaW5zdGFuY2VSZWYpKVxuICB9O1xufTtcbmZ1bmN0aW9uIGRlcml2ZVN0YXRlKHN0YXRlKSB7XG4gIGNvbnN0IGVsZW1lbnRzID0gT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpO1xuICBjb25zdCBzdHlsZXMgPSBmcm9tUGFpcnMoZWxlbWVudHMubWFwKChlbGVtZW50KSA9PiBbZWxlbWVudCwgc3RhdGUuc3R5bGVzW2VsZW1lbnRdIHx8IHt9XSkpO1xuICBjb25zdCBhdHRyaWJ1dGVzID0gZnJvbVBhaXJzKGVsZW1lbnRzLm1hcCgoZWxlbWVudCkgPT4gW2VsZW1lbnQsIHN0YXRlLmF0dHJpYnV0ZXNbZWxlbWVudF1dKSk7XG4gIHJldHVybiB7XG4gICAgc3R5bGVzLFxuICAgIGF0dHJpYnV0ZXNcbiAgfTtcbn1cblxuZXhwb3J0IHsgdXNlUG9wcGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iLCJpbXBvcnQgeyB0cnlPblNjb3BlRGlzcG9zZSB9IGZyb20gJ0B2dWV1c2UvY29yZSc7XG5cbmZ1bmN0aW9uIHVzZVRpbWVvdXQoKSB7XG4gIGxldCB0aW1lb3V0SGFuZGxlO1xuICBjb25zdCByZWdpc3RlclRpbWVvdXQgPSAoZm4sIGRlbGF5KSA9PiB7XG4gICAgY2FuY2VsVGltZW91dCgpO1xuICAgIHRpbWVvdXRIYW5kbGUgPSB3aW5kb3cuc2V0VGltZW91dChmbiwgZGVsYXkpO1xuICB9O1xuICBjb25zdCBjYW5jZWxUaW1lb3V0ID0gKCkgPT4gd2luZG93LmNsZWFyVGltZW91dCh0aW1lb3V0SGFuZGxlKTtcbiAgdHJ5T25TY29wZURpc3Bvc2UoKCkgPT4gY2FuY2VsVGltZW91dCgpKTtcbiAgcmV0dXJuIHtcbiAgICByZWdpc3RlclRpbWVvdXQsXG4gICAgY2FuY2VsVGltZW91dFxuICB9O1xufVxuXG5leHBvcnQgeyB1c2VUaW1lb3V0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iLCJpbXBvcnQgeyBvbk1vdW50ZWQsIG9uQmVmb3JlVW5tb3VudCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBpc0NsaWVudCB9IGZyb20gJ0B2dWV1c2UvY29yZSc7XG5pbXBvcnQgJy4uLy4uL2NvbnN0YW50cy9pbmRleC5tanMnO1xuaW1wb3J0IHsgRVZFTlRfQ09ERSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9hcmlhLm1qcyc7XG5cbmxldCByZWdpc3RlcmVkRXNjYXBlSGFuZGxlcnMgPSBbXTtcbmNvbnN0IGNhY2hlZEhhbmRsZXIgPSAoZSkgPT4ge1xuICBjb25zdCBldmVudCA9IGU7XG4gIGlmIChldmVudC5rZXkgPT09IEVWRU5UX0NPREUuZXNjKSB7XG4gICAgcmVnaXN0ZXJlZEVzY2FwZUhhbmRsZXJzLmZvckVhY2goKHJlZ2lzdGVyZWRIYW5kbGVyKSA9PiByZWdpc3RlcmVkSGFuZGxlcihldmVudCkpO1xuICB9XG59O1xuY29uc3QgdXNlRXNjYXBlS2V5ZG93biA9IChoYW5kbGVyKSA9PiB7XG4gIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgaWYgKHJlZ2lzdGVyZWRFc2NhcGVIYW5kbGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGNhY2hlZEhhbmRsZXIpO1xuICAgIH1cbiAgICBpZiAoaXNDbGllbnQpXG4gICAgICByZWdpc3RlcmVkRXNjYXBlSGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgfSk7XG4gIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgcmVnaXN0ZXJlZEVzY2FwZUhhbmRsZXJzID0gcmVnaXN0ZXJlZEVzY2FwZUhhbmRsZXJzLmZpbHRlcigocmVnaXN0ZXJlZEhhbmRsZXIpID0+IHJlZ2lzdGVyZWRIYW5kbGVyICE9PSBoYW5kbGVyKTtcbiAgICBpZiAocmVnaXN0ZXJlZEVzY2FwZUhhbmRsZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgaWYgKGlzQ2xpZW50KVxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBjYWNoZWRIYW5kbGVyKTtcbiAgICB9XG4gIH0pO1xufTtcblxuZXhwb3J0IHsgdXNlRXNjYXBlS2V5ZG93biB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIiwiaW1wb3J0IHsgY29tcHV0ZWQsIG9uQmVmb3JlTW91bnQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgaXNDbGllbnQgfSBmcm9tICdAdnVldXNlL2NvcmUnO1xuaW1wb3J0IHsgdXNlR2V0RGVyaXZlZE5hbWVzcGFjZSB9IGZyb20gJy4uL3VzZS1uYW1lc3BhY2UvaW5kZXgubWpzJztcbmltcG9ydCB7IHVzZUlkSW5qZWN0aW9uIH0gZnJvbSAnLi4vdXNlLWlkL2luZGV4Lm1qcyc7XG5cbmxldCBjYWNoZWRDb250YWluZXI7XG5jb25zdCB1c2VQb3BwZXJDb250YWluZXJJZCA9ICgpID0+IHtcbiAgY29uc3QgbmFtZXNwYWNlID0gdXNlR2V0RGVyaXZlZE5hbWVzcGFjZSgpO1xuICBjb25zdCBpZEluamVjdGlvbiA9IHVzZUlkSW5qZWN0aW9uKCk7XG4gIGNvbnN0IGlkID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBgJHtuYW1lc3BhY2UudmFsdWV9LXBvcHBlci1jb250YWluZXItJHtpZEluamVjdGlvbi5wcmVmaXh9YDtcbiAgfSk7XG4gIGNvbnN0IHNlbGVjdG9yID0gY29tcHV0ZWQoKCkgPT4gYCMke2lkLnZhbHVlfWApO1xuICByZXR1cm4ge1xuICAgIGlkLFxuICAgIHNlbGVjdG9yXG4gIH07XG59O1xuY29uc3QgY3JlYXRlQ29udGFpbmVyID0gKGlkKSA9PiB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnRhaW5lci5pZCA9IGlkO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gIHJldHVybiBjb250YWluZXI7XG59O1xuY29uc3QgdXNlUG9wcGVyQ29udGFpbmVyID0gKCkgPT4ge1xuICBjb25zdCB7IGlkLCBzZWxlY3RvciB9ID0gdXNlUG9wcGVyQ29udGFpbmVySWQoKTtcbiAgb25CZWZvcmVNb3VudCgoKSA9PiB7XG4gICAgaWYgKCFpc0NsaWVudClcbiAgICAgIHJldHVybjtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwidGVzdFwiIHx8ICFjYWNoZWRDb250YWluZXIgJiYgIWRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcihzZWxlY3Rvci52YWx1ZSkpIHtcbiAgICAgIGNhY2hlZENvbnRhaW5lciA9IGNyZWF0ZUNvbnRhaW5lcihpZC52YWx1ZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBpZCxcbiAgICBzZWxlY3RvclxuICB9O1xufTtcblxuZXhwb3J0IHsgdXNlUG9wcGVyQ29udGFpbmVyLCB1c2VQb3BwZXJDb250YWluZXJJZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIiwiaW1wb3J0IHsgdW5yZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0ICcuLi8uLi91dGlscy9pbmRleC5tanMnO1xuaW1wb3J0IHsgdXNlVGltZW91dCB9IGZyb20gJy4uL3VzZS10aW1lb3V0L2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBidWlsZFByb3BzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdnVlL3Byb3BzL3J1bnRpbWUubWpzJztcbmltcG9ydCB7IGlzTnVtYmVyIH0gZnJvbSAnQHZ1ZXVzZS9jb3JlJztcblxuY29uc3QgdXNlRGVsYXllZFRvZ2dsZVByb3BzID0gYnVpbGRQcm9wcyh7XG4gIHNob3dBZnRlcjoge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZWZhdWx0OiAwXG4gIH0sXG4gIGhpZGVBZnRlcjoge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZWZhdWx0OiAyMDBcbiAgfSxcbiAgYXV0b0Nsb3NlOiB7XG4gICAgdHlwZTogTnVtYmVyLFxuICAgIGRlZmF1bHQ6IDBcbiAgfVxufSk7XG5jb25zdCB1c2VEZWxheWVkVG9nZ2xlID0gKHtcbiAgc2hvd0FmdGVyLFxuICBoaWRlQWZ0ZXIsXG4gIGF1dG9DbG9zZSxcbiAgb3BlbixcbiAgY2xvc2Vcbn0pID0+IHtcbiAgY29uc3QgeyByZWdpc3RlclRpbWVvdXQgfSA9IHVzZVRpbWVvdXQoKTtcbiAgY29uc3Qge1xuICAgIHJlZ2lzdGVyVGltZW91dDogcmVnaXN0ZXJUaW1lb3V0Rm9yQXV0b0Nsb3NlLFxuICAgIGNhbmNlbFRpbWVvdXQ6IGNhbmNlbFRpbWVvdXRGb3JBdXRvQ2xvc2VcbiAgfSA9IHVzZVRpbWVvdXQoKTtcbiAgY29uc3Qgb25PcGVuID0gKGV2ZW50KSA9PiB7XG4gICAgcmVnaXN0ZXJUaW1lb3V0KCgpID0+IHtcbiAgICAgIG9wZW4oZXZlbnQpO1xuICAgICAgY29uc3QgX2F1dG9DbG9zZSA9IHVucmVmKGF1dG9DbG9zZSk7XG4gICAgICBpZiAoaXNOdW1iZXIoX2F1dG9DbG9zZSkgJiYgX2F1dG9DbG9zZSA+IDApIHtcbiAgICAgICAgcmVnaXN0ZXJUaW1lb3V0Rm9yQXV0b0Nsb3NlKCgpID0+IHtcbiAgICAgICAgICBjbG9zZShldmVudCk7XG4gICAgICAgIH0sIF9hdXRvQ2xvc2UpO1xuICAgICAgfVxuICAgIH0sIHVucmVmKHNob3dBZnRlcikpO1xuICB9O1xuICBjb25zdCBvbkNsb3NlID0gKGV2ZW50KSA9PiB7XG4gICAgY2FuY2VsVGltZW91dEZvckF1dG9DbG9zZSgpO1xuICAgIHJlZ2lzdGVyVGltZW91dCgoKSA9PiB7XG4gICAgICBjbG9zZShldmVudCk7XG4gICAgfSwgdW5yZWYoaGlkZUFmdGVyKSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgb25PcGVuLFxuICAgIG9uQ2xvc2VcbiAgfTtcbn07XG5cbmV4cG9ydCB7IHVzZURlbGF5ZWRUb2dnbGUsIHVzZURlbGF5ZWRUb2dnbGVQcm9wcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIiwiaW1wb3J0IHsgcHJvdmlkZSB9IGZyb20gJ3Z1ZSc7XG5cbmNvbnN0IEZPUldBUkRfUkVGX0lOSkVDVElPTl9LRVkgPSBTeW1ib2woXCJlbEZvcndhcmRSZWZcIik7XG5jb25zdCB1c2VGb3J3YXJkUmVmID0gKGZvcndhcmRSZWYpID0+IHtcbiAgY29uc3Qgc2V0Rm9yd2FyZFJlZiA9IChlbCkgPT4ge1xuICAgIGZvcndhcmRSZWYudmFsdWUgPSBlbDtcbiAgfTtcbiAgcHJvdmlkZShGT1JXQVJEX1JFRl9JTkpFQ1RJT05fS0VZLCB7XG4gICAgc2V0Rm9yd2FyZFJlZlxuICB9KTtcbn07XG5jb25zdCB1c2VGb3J3YXJkUmVmRGlyZWN0aXZlID0gKHNldEZvcndhcmRSZWYpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBtb3VudGVkKGVsKSB7XG4gICAgICBzZXRGb3J3YXJkUmVmKGVsKTtcbiAgICB9LFxuICAgIHVwZGF0ZWQoZWwpIHtcbiAgICAgIHNldEZvcndhcmRSZWYoZWwpO1xuICAgIH0sXG4gICAgdW5tb3VudGVkKCkge1xuICAgICAgc2V0Rm9yd2FyZFJlZihudWxsKTtcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnQgeyBGT1JXQVJEX1JFRl9JTkpFQ1RJT05fS0VZLCB1c2VGb3J3YXJkUmVmLCB1c2VGb3J3YXJkUmVmRGlyZWN0aXZlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iLCJjb25zdCBQT1BQRVJfSU5KRUNUSU9OX0tFWSA9IFN5bWJvbChcInBvcHBlclwiKTtcbmNvbnN0IFBPUFBFUl9DT05URU5UX0lOSkVDVElPTl9LRVkgPSBTeW1ib2woXCJwb3BwZXJDb250ZW50XCIpO1xuXG5leHBvcnQgeyBQT1BQRVJfQ09OVEVOVF9JTkpFQ1RJT05fS0VZLCBQT1BQRVJfSU5KRUNUSU9OX0tFWSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCB7IGJ1aWxkUHJvcHMgfSBmcm9tICcuLi8uLi8uLi91dGlscy92dWUvcHJvcHMvcnVudGltZS5tanMnO1xuXG5jb25zdCBlZmZlY3RzID0gW1wibGlnaHRcIiwgXCJkYXJrXCJdO1xuY29uc3QgdHJpZ2dlcnMgPSBbXCJjbGlja1wiLCBcImNvbnRleHRtZW51XCIsIFwiaG92ZXJcIiwgXCJmb2N1c1wiXTtcbmNvbnN0IEVmZmVjdCA9IHtcbiAgTElHSFQ6IFwibGlnaHRcIixcbiAgREFSSzogXCJkYXJrXCJcbn07XG5jb25zdCByb2xlVHlwZXMgPSBbXG4gIFwiZGlhbG9nXCIsXG4gIFwiZ3JpZFwiLFxuICBcImdyb3VwXCIsXG4gIFwibGlzdGJveFwiLFxuICBcIm1lbnVcIixcbiAgXCJuYXZpZ2F0aW9uXCIsXG4gIFwidG9vbHRpcFwiLFxuICBcInRyZWVcIlxuXTtcbmNvbnN0IHBvcHBlclByb3BzID0gYnVpbGRQcm9wcyh7XG4gIHJvbGU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgdmFsdWVzOiByb2xlVHlwZXMsXG4gICAgZGVmYXVsdDogXCJ0b29sdGlwXCJcbiAgfVxufSk7XG5jb25zdCB1c2VQb3BwZXJQcm9wcyA9IHBvcHBlclByb3BzO1xuXG5leHBvcnQgeyBFZmZlY3QsIHBvcHBlclByb3BzLCByb2xlVHlwZXMsIHVzZVBvcHBlclByb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3BwZXIubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCByZWYsIGNvbXB1dGVkLCBwcm92aWRlLCByZW5kZXJTbG90IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IFBPUFBFUl9JTkpFQ1RJT05fS0VZIH0gZnJvbSAnLi9jb25zdGFudHMubWpzJztcbmltcG9ydCB7IHBvcHBlclByb3BzIH0gZnJvbSAnLi9wb3BwZXIubWpzJztcbmltcG9ydCBfZXhwb3J0X3NmYyBmcm9tICcuLi8uLi8uLi9fdmlydHVhbC9wbHVnaW4tdnVlX2V4cG9ydC1oZWxwZXIubWpzJztcblxuY29uc3QgX19kZWZhdWx0X18gPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkVsUG9wcGVyXCIsXG4gIGluaGVyaXRBdHRyczogZmFsc2Vcbn0pO1xuY29uc3QgX3NmY19tYWluID0gLyogQF9fUFVSRV9fICovIGRlZmluZUNvbXBvbmVudCh7XG4gIC4uLl9fZGVmYXVsdF9fLFxuICBwcm9wczogcG9wcGVyUHJvcHMsXG4gIHNldHVwKF9fcHJvcHMsIHsgZXhwb3NlIH0pIHtcbiAgICBjb25zdCBwcm9wcyA9IF9fcHJvcHM7XG4gICAgY29uc3QgdHJpZ2dlclJlZiA9IHJlZigpO1xuICAgIGNvbnN0IHBvcHBlckluc3RhbmNlUmVmID0gcmVmKCk7XG4gICAgY29uc3QgY29udGVudFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IHJlZmVyZW5jZVJlZiA9IHJlZigpO1xuICAgIGNvbnN0IHJvbGUgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5yb2xlKTtcbiAgICBjb25zdCBwb3BwZXJQcm92aWRlcyA9IHtcbiAgICAgIHRyaWdnZXJSZWYsXG4gICAgICBwb3BwZXJJbnN0YW5jZVJlZixcbiAgICAgIGNvbnRlbnRSZWYsXG4gICAgICByZWZlcmVuY2VSZWYsXG4gICAgICByb2xlXG4gICAgfTtcbiAgICBleHBvc2UocG9wcGVyUHJvdmlkZXMpO1xuICAgIHByb3ZpZGUoUE9QUEVSX0lOSkVDVElPTl9LRVksIHBvcHBlclByb3ZpZGVzKTtcbiAgICByZXR1cm4gKF9jdHgsIF9jYWNoZSkgPT4ge1xuICAgICAgcmV0dXJuIHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwiZGVmYXVsdFwiKTtcbiAgICB9O1xuICB9XG59KTtcbnZhciBQb3BwZXIgPSAvKiBAX19QVVJFX18gKi8gX2V4cG9ydF9zZmMoX3NmY19tYWluLCBbW1wiX19maWxlXCIsIFwiL2hvbWUvcnVubmVyL3dvcmsvZWxlbWVudC1wbHVzL2VsZW1lbnQtcGx1cy9wYWNrYWdlcy9jb21wb25lbnRzL3BvcHBlci9zcmMvcG9wcGVyLnZ1ZVwiXV0pO1xuXG5leHBvcnQgeyBQb3BwZXIgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9wcGVyMi5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBidWlsZFByb3BzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdnVlL3Byb3BzL3J1bnRpbWUubWpzJztcblxuY29uc3QgcG9wcGVyQXJyb3dQcm9wcyA9IGJ1aWxkUHJvcHMoe1xuICBhcnJvd09mZnNldDoge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZWZhdWx0OiA1XG4gIH1cbn0pO1xuY29uc3QgdXNlUG9wcGVyQXJyb3dQcm9wcyA9IHBvcHBlckFycm93UHJvcHM7XG5cbmV4cG9ydCB7IHBvcHBlckFycm93UHJvcHMsIHVzZVBvcHBlckFycm93UHJvcHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFycm93Lm1qcy5tYXBcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaW5qZWN0LCB3YXRjaCwgb25CZWZvcmVVbm1vdW50LCBvcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jaywgbm9ybWFsaXplQ2xhc3MsIHVucmVmLCBub3JtYWxpemVTdHlsZSB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgJy4uLy4uLy4uL2hvb2tzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBQT1BQRVJfQ09OVEVOVF9JTkpFQ1RJT05fS0VZIH0gZnJvbSAnLi9jb25zdGFudHMubWpzJztcbmltcG9ydCB7IHBvcHBlckFycm93UHJvcHMgfSBmcm9tICcuL2Fycm93Lm1qcyc7XG5pbXBvcnQgX2V4cG9ydF9zZmMgZnJvbSAnLi4vLi4vLi4vX3ZpcnR1YWwvcGx1Z2luLXZ1ZV9leHBvcnQtaGVscGVyLm1qcyc7XG5pbXBvcnQgeyB1c2VOYW1lc3BhY2UgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2UtbmFtZXNwYWNlL2luZGV4Lm1qcyc7XG5cbmNvbnN0IF9fZGVmYXVsdF9fID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJFbFBvcHBlckFycm93XCIsXG4gIGluaGVyaXRBdHRyczogZmFsc2Vcbn0pO1xuY29uc3QgX3NmY19tYWluID0gLyogQF9fUFVSRV9fICovIGRlZmluZUNvbXBvbmVudCh7XG4gIC4uLl9fZGVmYXVsdF9fLFxuICBwcm9wczogcG9wcGVyQXJyb3dQcm9wcyxcbiAgc2V0dXAoX19wcm9wcywgeyBleHBvc2UgfSkge1xuICAgIGNvbnN0IHByb3BzID0gX19wcm9wcztcbiAgICBjb25zdCBucyA9IHVzZU5hbWVzcGFjZShcInBvcHBlclwiKTtcbiAgICBjb25zdCB7IGFycm93T2Zmc2V0LCBhcnJvd1JlZiwgYXJyb3dTdHlsZSB9ID0gaW5qZWN0KFBPUFBFUl9DT05URU5UX0lOSkVDVElPTl9LRVksIHZvaWQgMCk7XG4gICAgd2F0Y2goKCkgPT4gcHJvcHMuYXJyb3dPZmZzZXQsICh2YWwpID0+IHtcbiAgICAgIGFycm93T2Zmc2V0LnZhbHVlID0gdmFsO1xuICAgIH0pO1xuICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgICBhcnJvd1JlZi52YWx1ZSA9IHZvaWQgMDtcbiAgICB9KTtcbiAgICBleHBvc2Uoe1xuICAgICAgYXJyb3dSZWZcbiAgICB9KTtcbiAgICByZXR1cm4gKF9jdHgsIF9jYWNoZSkgPT4ge1xuICAgICAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJzcGFuXCIsIHtcbiAgICAgICAgcmVmX2tleTogXCJhcnJvd1JlZlwiLFxuICAgICAgICByZWY6IGFycm93UmVmLFxuICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYobnMpLmUoXCJhcnJvd1wiKSksXG4gICAgICAgIHN0eWxlOiBub3JtYWxpemVTdHlsZSh1bnJlZihhcnJvd1N0eWxlKSksXG4gICAgICAgIFwiZGF0YS1wb3BwZXItYXJyb3dcIjogXCJcIlxuICAgICAgfSwgbnVsbCwgNik7XG4gICAgfTtcbiAgfVxufSk7XG52YXIgRWxQb3BwZXJBcnJvdyA9IC8qIEBfX1BVUkVfXyAqLyBfZXhwb3J0X3NmYyhfc2ZjX21haW4sIFtbXCJfX2ZpbGVcIiwgXCIvaG9tZS9ydW5uZXIvd29yay9lbGVtZW50LXBsdXMvZWxlbWVudC1wbHVzL3BhY2thZ2VzL2NvbXBvbmVudHMvcG9wcGVyL3NyYy9hcnJvdy52dWVcIl1dKTtcblxuZXhwb3J0IHsgRWxQb3BwZXJBcnJvdyBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJvdzIubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBpbmplY3QsIHdpdGhEaXJlY3RpdmVzLCBjbG9uZVZOb2RlLCBGcmFnbWVudCwgY3JlYXRlVk5vZGUsIFRleHQsIENvbW1lbnQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgTk9PUCwgaXNPYmplY3QgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5pbXBvcnQgJy4uLy4uLy4uL2hvb2tzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBGT1JXQVJEX1JFRl9JTkpFQ1RJT05fS0VZLCB1c2VGb3J3YXJkUmVmRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLWZvcndhcmQtcmVmL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBkZWJ1Z1dhcm4gfSBmcm9tICcuLi8uLi8uLi91dGlscy9lcnJvci5tanMnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleC5tanMnO1xuXG5jb25zdCBOQU1FID0gXCJFbE9ubHlDaGlsZFwiO1xuY29uc3QgT25seUNoaWxkID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogTkFNRSxcbiAgc2V0dXAoXywge1xuICAgIHNsb3RzLFxuICAgIGF0dHJzXG4gIH0pIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgZm9yd2FyZFJlZkluamVjdGlvbiA9IGluamVjdChGT1JXQVJEX1JFRl9JTkpFQ1RJT05fS0VZKTtcbiAgICBjb25zdCBmb3J3YXJkUmVmRGlyZWN0aXZlID0gdXNlRm9yd2FyZFJlZkRpcmVjdGl2ZSgoX2EgPSBmb3J3YXJkUmVmSW5qZWN0aW9uID09IG51bGwgPyB2b2lkIDAgOiBmb3J3YXJkUmVmSW5qZWN0aW9uLnNldEZvcndhcmRSZWYpICE9IG51bGwgPyBfYSA6IE5PT1ApO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB2YXIgX2EyO1xuICAgICAgY29uc3QgZGVmYXVsdFNsb3QgPSAoX2EyID0gc2xvdHMuZGVmYXVsdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5jYWxsKHNsb3RzLCBhdHRycyk7XG4gICAgICBpZiAoIWRlZmF1bHRTbG90KVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGlmIChkZWZhdWx0U2xvdC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGRlYnVnV2FybihOQU1FLCBcInJlcXVpcmVzIGV4YWN0IG9ubHkgb25lIHZhbGlkIGNoaWxkLlwiKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBjb25zdCBmaXJzdExlZ2l0Tm9kZSA9IGZpbmRGaXJzdExlZ2l0Q2hpbGQoZGVmYXVsdFNsb3QpO1xuICAgICAgaWYgKCFmaXJzdExlZ2l0Tm9kZSkge1xuICAgICAgICBkZWJ1Z1dhcm4oTkFNRSwgXCJubyB2YWxpZCBjaGlsZCBub2RlIGZvdW5kXCIpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3aXRoRGlyZWN0aXZlcyhjbG9uZVZOb2RlKGZpcnN0TGVnaXROb2RlLCBhdHRycyksIFtbZm9yd2FyZFJlZkRpcmVjdGl2ZV1dKTtcbiAgICB9O1xuICB9XG59KTtcbmZ1bmN0aW9uIGZpbmRGaXJzdExlZ2l0Q2hpbGQobm9kZSkge1xuICBpZiAoIW5vZGUpXG4gICAgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGNoaWxkcmVuID0gbm9kZTtcbiAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgIGlmIChpc09iamVjdChjaGlsZCkpIHtcbiAgICAgIHN3aXRjaCAoY2hpbGQudHlwZSkge1xuICAgICAgICBjYXNlIENvbW1lbnQ6XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgVGV4dDpcbiAgICAgICAgY2FzZSBcInN2Z1wiOlxuICAgICAgICAgIHJldHVybiB3cmFwVGV4dENvbnRlbnQoY2hpbGQpO1xuICAgICAgICBjYXNlIEZyYWdtZW50OlxuICAgICAgICAgIHJldHVybiBmaW5kRmlyc3RMZWdpdENoaWxkKGNoaWxkLmNoaWxkcmVuKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB3cmFwVGV4dENvbnRlbnQoY2hpbGQpO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gd3JhcFRleHRDb250ZW50KHMpIHtcbiAgY29uc3QgbnMgPSB1c2VOYW1lc3BhY2UoXCJvbmx5LWNoaWxkXCIpO1xuICByZXR1cm4gY3JlYXRlVk5vZGUoXCJzcGFuXCIsIHtcbiAgICBcImNsYXNzXCI6IG5zLmUoXCJjb250ZW50XCIpXG4gIH0sIFtzXSk7XG59XG5cbmV4cG9ydCB7IE9ubHlDaGlsZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b25seS1jaGlsZC5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBidWlsZFByb3BzLCBkZWZpbmVQcm9wVHlwZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3Z1ZS9wcm9wcy9ydW50aW1lLm1qcyc7XG5cbmNvbnN0IHBvcHBlclRyaWdnZXJQcm9wcyA9IGJ1aWxkUHJvcHMoe1xuICB2aXJ0dWFsUmVmOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoT2JqZWN0KVxuICB9LFxuICB2aXJ0dWFsVHJpZ2dlcmluZzogQm9vbGVhbixcbiAgb25Nb3VzZWVudGVyOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoRnVuY3Rpb24pXG4gIH0sXG4gIG9uTW91c2VsZWF2ZToge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKEZ1bmN0aW9uKVxuICB9LFxuICBvbkNsaWNrOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoRnVuY3Rpb24pXG4gIH0sXG4gIG9uS2V5ZG93bjoge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKEZ1bmN0aW9uKVxuICB9LFxuICBvbkZvY3VzOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoRnVuY3Rpb24pXG4gIH0sXG4gIG9uQmx1cjoge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKEZ1bmN0aW9uKVxuICB9LFxuICBvbkNvbnRleHRtZW51OiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoRnVuY3Rpb24pXG4gIH0sXG4gIGlkOiBTdHJpbmcsXG4gIG9wZW46IEJvb2xlYW5cbn0pO1xuY29uc3QgdXNlUG9wcGVyVHJpZ2dlclByb3BzID0gcG9wcGVyVHJpZ2dlclByb3BzO1xuXG5leHBvcnQgeyBwb3BwZXJUcmlnZ2VyUHJvcHMsIHVzZVBvcHBlclRyaWdnZXJQcm9wcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJpZ2dlci5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGluamVjdCwgY29tcHV0ZWQsIG9uTW91bnRlZCwgd2F0Y2gsIG9uQmVmb3JlVW5tb3VudCwgb3BlbkJsb2NrLCBjcmVhdGVCbG9jaywgdW5yZWYsIG1lcmdlUHJvcHMsIHdpdGhDdHgsIHJlbmRlclNsb3QsIGNyZWF0ZUNvbW1lbnRWTm9kZSB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBpc05pbCB9IGZyb20gJ2xvZGFzaC11bmlmaWVkJztcbmltcG9ydCB7IHVucmVmRWxlbWVudCB9IGZyb20gJ0B2dWV1c2UvY29yZSc7XG5pbXBvcnQgJy4uLy4uL3Nsb3QvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCB7IFBPUFBFUl9JTkpFQ1RJT05fS0VZIH0gZnJvbSAnLi9jb25zdGFudHMubWpzJztcbmltcG9ydCB7IHBvcHBlclRyaWdnZXJQcm9wcyB9IGZyb20gJy4vdHJpZ2dlci5tanMnO1xuaW1wb3J0IF9leHBvcnRfc2ZjIGZyb20gJy4uLy4uLy4uL192aXJ0dWFsL3BsdWdpbi12dWVfZXhwb3J0LWhlbHBlci5tanMnO1xuaW1wb3J0IHsgdXNlRm9yd2FyZFJlZiB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1mb3J3YXJkLXJlZi9pbmRleC5tanMnO1xuaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdHlwZXMubWpzJztcbmltcG9ydCB7IE9ubHlDaGlsZCB9IGZyb20gJy4uLy4uL3Nsb3Qvc3JjL29ubHktY2hpbGQubWpzJztcblxuY29uc3QgX19kZWZhdWx0X18gPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkVsUG9wcGVyVHJpZ2dlclwiLFxuICBpbmhlcml0QXR0cnM6IGZhbHNlXG59KTtcbmNvbnN0IF9zZmNfbWFpbiA9IC8qIEBfX1BVUkVfXyAqLyBkZWZpbmVDb21wb25lbnQoe1xuICAuLi5fX2RlZmF1bHRfXyxcbiAgcHJvcHM6IHBvcHBlclRyaWdnZXJQcm9wcyxcbiAgc2V0dXAoX19wcm9wcywgeyBleHBvc2UgfSkge1xuICAgIGNvbnN0IHByb3BzID0gX19wcm9wcztcbiAgICBjb25zdCB7IHJvbGUsIHRyaWdnZXJSZWYgfSA9IGluamVjdChQT1BQRVJfSU5KRUNUSU9OX0tFWSwgdm9pZCAwKTtcbiAgICB1c2VGb3J3YXJkUmVmKHRyaWdnZXJSZWYpO1xuICAgIGNvbnN0IGFyaWFDb250cm9scyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBhcmlhSGFzcG9wdXAudmFsdWUgPyBwcm9wcy5pZCA6IHZvaWQgMDtcbiAgICB9KTtcbiAgICBjb25zdCBhcmlhRGVzY3JpYmVkYnkgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAocm9sZSAmJiByb2xlLnZhbHVlID09PSBcInRvb2x0aXBcIikge1xuICAgICAgICByZXR1cm4gcHJvcHMub3BlbiAmJiBwcm9wcy5pZCA/IHByb3BzLmlkIDogdm9pZCAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9KTtcbiAgICBjb25zdCBhcmlhSGFzcG9wdXAgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAocm9sZSAmJiByb2xlLnZhbHVlICE9PSBcInRvb2x0aXBcIikge1xuICAgICAgICByZXR1cm4gcm9sZS52YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfSk7XG4gICAgY29uc3QgYXJpYUV4cGFuZGVkID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIGFyaWFIYXNwb3B1cC52YWx1ZSA/IGAke3Byb3BzLm9wZW59YCA6IHZvaWQgMDtcbiAgICB9KTtcbiAgICBsZXQgdmlydHVhbFRyaWdnZXJBcmlhU3RvcFdhdGNoID0gdm9pZCAwO1xuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICB3YXRjaCgoKSA9PiBwcm9wcy52aXJ0dWFsUmVmLCAodmlydHVhbEVsKSA9PiB7XG4gICAgICAgIGlmICh2aXJ0dWFsRWwpIHtcbiAgICAgICAgICB0cmlnZ2VyUmVmLnZhbHVlID0gdW5yZWZFbGVtZW50KHZpcnR1YWxFbCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgaW1tZWRpYXRlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHdhdGNoKHRyaWdnZXJSZWYsIChlbCwgcHJldkVsKSA9PiB7XG4gICAgICAgIHZpcnR1YWxUcmlnZ2VyQXJpYVN0b3BXYXRjaCA9PSBudWxsID8gdm9pZCAwIDogdmlydHVhbFRyaWdnZXJBcmlhU3RvcFdhdGNoKCk7XG4gICAgICAgIHZpcnR1YWxUcmlnZ2VyQXJpYVN0b3BXYXRjaCA9IHZvaWQgMDtcbiAgICAgICAgaWYgKGlzRWxlbWVudChlbCkpIHtcbiAgICAgICAgICA7XG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJvbk1vdXNlZW50ZXJcIixcbiAgICAgICAgICAgIFwib25Nb3VzZWxlYXZlXCIsXG4gICAgICAgICAgICBcIm9uQ2xpY2tcIixcbiAgICAgICAgICAgIFwib25LZXlkb3duXCIsXG4gICAgICAgICAgICBcIm9uRm9jdXNcIixcbiAgICAgICAgICAgIFwib25CbHVyXCIsXG4gICAgICAgICAgICBcIm9uQ29udGV4dG1lbnVcIlxuICAgICAgICAgIF0uZm9yRWFjaCgoZXZlbnROYW1lKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gcHJvcHNbZXZlbnROYW1lXTtcbiAgICAgICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUuc2xpY2UoMikudG9Mb3dlckNhc2UoKSwgaGFuZGxlcik7XG4gICAgICAgICAgICAgIChfYSA9IHByZXZFbCA9PSBudWxsID8gdm9pZCAwIDogcHJldkVsLnJlbW92ZUV2ZW50TGlzdGVuZXIpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKHByZXZFbCwgZXZlbnROYW1lLnNsaWNlKDIpLnRvTG93ZXJDYXNlKCksIGhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZpcnR1YWxUcmlnZ2VyQXJpYVN0b3BXYXRjaCA9IHdhdGNoKFthcmlhQ29udHJvbHMsIGFyaWFEZXNjcmliZWRieSwgYXJpYUhhc3BvcHVwLCBhcmlhRXhwYW5kZWRdLCAod2F0Y2hlcykgPT4ge1xuICAgICAgICAgICAgO1xuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICBcImFyaWEtY29udHJvbHNcIixcbiAgICAgICAgICAgICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCIsXG4gICAgICAgICAgICAgIFwiYXJpYS1oYXNwb3B1cFwiLFxuICAgICAgICAgICAgICBcImFyaWEtZXhwYW5kZWRcIlxuICAgICAgICAgICAgXS5mb3JFYWNoKChrZXksIGlkeCkgPT4ge1xuICAgICAgICAgICAgICBpc05pbCh3YXRjaGVzW2lkeF0pID8gZWwucmVtb3ZlQXR0cmlidXRlKGtleSkgOiBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB3YXRjaGVzW2lkeF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgeyBpbW1lZGlhdGU6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRWxlbWVudChwcmV2RWwpKSB7XG4gICAgICAgICAgO1xuICAgICAgICAgIFtcbiAgICAgICAgICAgIFwiYXJpYS1jb250cm9sc1wiLFxuICAgICAgICAgICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCIsXG4gICAgICAgICAgICBcImFyaWEtaGFzcG9wdXBcIixcbiAgICAgICAgICAgIFwiYXJpYS1leHBhbmRlZFwiXG4gICAgICAgICAgXS5mb3JFYWNoKChrZXkpID0+IHByZXZFbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgaW1tZWRpYXRlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgdmlydHVhbFRyaWdnZXJBcmlhU3RvcFdhdGNoID09IG51bGwgPyB2b2lkIDAgOiB2aXJ0dWFsVHJpZ2dlckFyaWFTdG9wV2F0Y2goKTtcbiAgICAgIHZpcnR1YWxUcmlnZ2VyQXJpYVN0b3BXYXRjaCA9IHZvaWQgMDtcbiAgICB9KTtcbiAgICBleHBvc2Uoe1xuICAgICAgdHJpZ2dlclJlZlxuICAgIH0pO1xuICAgIHJldHVybiAoX2N0eCwgX2NhY2hlKSA9PiB7XG4gICAgICByZXR1cm4gIV9jdHgudmlydHVhbFRyaWdnZXJpbmcgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKHVucmVmKE9ubHlDaGlsZCksIG1lcmdlUHJvcHMoeyBrZXk6IDAgfSwgX2N0eC4kYXR0cnMsIHtcbiAgICAgICAgXCJhcmlhLWNvbnRyb2xzXCI6IHVucmVmKGFyaWFDb250cm9scyksXG4gICAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiB1bnJlZihhcmlhRGVzY3JpYmVkYnkpLFxuICAgICAgICBcImFyaWEtZXhwYW5kZWRcIjogdW5yZWYoYXJpYUV4cGFuZGVkKSxcbiAgICAgICAgXCJhcmlhLWhhc3BvcHVwXCI6IHVucmVmKGFyaWFIYXNwb3B1cClcbiAgICAgIH0pLCB7XG4gICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgIHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwiZGVmYXVsdFwiKVxuICAgICAgICBdKSxcbiAgICAgICAgXzogM1xuICAgICAgfSwgMTYsIFtcImFyaWEtY29udHJvbHNcIiwgXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIFwiYXJpYS1leHBhbmRlZFwiLCBcImFyaWEtaGFzcG9wdXBcIl0pKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSk7XG4gICAgfTtcbiAgfVxufSk7XG52YXIgRWxQb3BwZXJUcmlnZ2VyID0gLyogQF9fUFVSRV9fICovIF9leHBvcnRfc2ZjKF9zZmNfbWFpbiwgW1tcIl9fZmlsZVwiLCBcIi9ob21lL3J1bm5lci93b3JrL2VsZW1lbnQtcGx1cy9lbGVtZW50LXBsdXMvcGFja2FnZXMvY29tcG9uZW50cy9wb3BwZXIvc3JjL3RyaWdnZXIudnVlXCJdXSk7XG5cbmV4cG9ydCB7IEVsUG9wcGVyVHJpZ2dlciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmlnZ2VyMi5tanMubWFwXG4iLCJjb25zdCBGT0NVU19BRlRFUl9UUkFQUEVEID0gXCJmb2N1cy10cmFwLmZvY3VzLWFmdGVyLXRyYXBwZWRcIjtcbmNvbnN0IEZPQ1VTX0FGVEVSX1JFTEVBU0VEID0gXCJmb2N1cy10cmFwLmZvY3VzLWFmdGVyLXJlbGVhc2VkXCI7XG5jb25zdCBGT0NVU09VVF9QUkVWRU5URUQgPSBcImZvY3VzLXRyYXAuZm9jdXNvdXQtcHJldmVudGVkXCI7XG5jb25zdCBGT0NVU19BRlRFUl9UUkFQUEVEX09QVFMgPSB7XG4gIGNhbmNlbGFibGU6IHRydWUsXG4gIGJ1YmJsZXM6IGZhbHNlXG59O1xuY29uc3QgRk9DVVNPVVRfUFJFVkVOVEVEX09QVFMgPSB7XG4gIGNhbmNlbGFibGU6IHRydWUsXG4gIGJ1YmJsZXM6IGZhbHNlXG59O1xuY29uc3QgT05fVFJBUF9GT0NVU19FVlQgPSBcImZvY3VzQWZ0ZXJUcmFwcGVkXCI7XG5jb25zdCBPTl9SRUxFQVNFX0ZPQ1VTX0VWVCA9IFwiZm9jdXNBZnRlclJlbGVhc2VkXCI7XG5jb25zdCBGT0NVU19UUkFQX0lOSkVDVElPTl9LRVkgPSBTeW1ib2woXCJlbEZvY3VzVHJhcFwiKTtcblxuZXhwb3J0IHsgRk9DVVNPVVRfUFJFVkVOVEVELCBGT0NVU09VVF9QUkVWRU5URURfT1BUUywgRk9DVVNfQUZURVJfUkVMRUFTRUQsIEZPQ1VTX0FGVEVSX1RSQVBQRUQsIEZPQ1VTX0FGVEVSX1RSQVBQRURfT1BUUywgRk9DVVNfVFJBUF9JTkpFQ1RJT05fS0VZLCBPTl9SRUxFQVNFX0ZPQ1VTX0VWVCwgT05fVFJBUF9GT0NVU19FVlQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRva2Vucy5tanMubWFwXG4iLCJpbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVVbm1vdW50IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IEZPQ1VTT1VUX1BSRVZFTlRFRCwgRk9DVVNPVVRfUFJFVkVOVEVEX09QVFMgfSBmcm9tICcuL3Rva2Vucy5tanMnO1xuXG5jb25zdCBmb2N1c1JlYXNvbiA9IHJlZigpO1xuY29uc3QgbGFzdFVzZXJGb2N1c1RpbWVzdGFtcCA9IHJlZigwKTtcbmNvbnN0IGxhc3RBdXRvbWF0ZWRGb2N1c1RpbWVzdGFtcCA9IHJlZigwKTtcbmxldCBmb2N1c1JlYXNvblVzZXJDb3VudCA9IDA7XG5jb25zdCBvYnRhaW5BbGxGb2N1c2FibGVFbGVtZW50cyA9IChlbGVtZW50KSA9PiB7XG4gIGNvbnN0IG5vZGVzID0gW107XG4gIGNvbnN0IHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoZWxlbWVudCwgTm9kZUZpbHRlci5TSE9XX0VMRU1FTlQsIHtcbiAgICBhY2NlcHROb2RlOiAobm9kZSkgPT4ge1xuICAgICAgY29uc3QgaXNIaWRkZW5JbnB1dCA9IG5vZGUudGFnTmFtZSA9PT0gXCJJTlBVVFwiICYmIG5vZGUudHlwZSA9PT0gXCJoaWRkZW5cIjtcbiAgICAgIGlmIChub2RlLmRpc2FibGVkIHx8IG5vZGUuaGlkZGVuIHx8IGlzSGlkZGVuSW5wdXQpXG4gICAgICAgIHJldHVybiBOb2RlRmlsdGVyLkZJTFRFUl9TS0lQO1xuICAgICAgcmV0dXJuIG5vZGUudGFiSW5kZXggPj0gMCB8fCBub2RlID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID8gTm9kZUZpbHRlci5GSUxURVJfQUNDRVBUIDogTm9kZUZpbHRlci5GSUxURVJfU0tJUDtcbiAgICB9XG4gIH0pO1xuICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpXG4gICAgbm9kZXMucHVzaCh3YWxrZXIuY3VycmVudE5vZGUpO1xuICByZXR1cm4gbm9kZXM7XG59O1xuY29uc3QgZ2V0VmlzaWJsZUVsZW1lbnQgPSAoZWxlbWVudHMsIGNvbnRhaW5lcikgPT4ge1xuICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcbiAgICBpZiAoIWlzSGlkZGVuKGVsZW1lbnQsIGNvbnRhaW5lcikpXG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxufTtcbmNvbnN0IGlzSGlkZGVuID0gKGVsZW1lbnQsIGNvbnRhaW5lcikgPT4ge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwidGVzdFwiKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkudmlzaWJpbGl0eSA9PT0gXCJoaWRkZW5cIilcbiAgICByZXR1cm4gdHJ1ZTtcbiAgd2hpbGUgKGVsZW1lbnQpIHtcbiAgICBpZiAoY29udGFpbmVyICYmIGVsZW1lbnQgPT09IGNvbnRhaW5lcilcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5kaXNwbGF5ID09PSBcIm5vbmVcIilcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcbmNvbnN0IGdldEVkZ2VzID0gKGNvbnRhaW5lcikgPT4ge1xuICBjb25zdCBmb2N1c2FibGUgPSBvYnRhaW5BbGxGb2N1c2FibGVFbGVtZW50cyhjb250YWluZXIpO1xuICBjb25zdCBmaXJzdCA9IGdldFZpc2libGVFbGVtZW50KGZvY3VzYWJsZSwgY29udGFpbmVyKTtcbiAgY29uc3QgbGFzdCA9IGdldFZpc2libGVFbGVtZW50KGZvY3VzYWJsZS5yZXZlcnNlKCksIGNvbnRhaW5lcik7XG4gIHJldHVybiBbZmlyc3QsIGxhc3RdO1xufTtcbmNvbnN0IGlzU2VsZWN0YWJsZSA9IChlbGVtZW50KSA9PiB7XG4gIHJldHVybiBlbGVtZW50IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCAmJiBcInNlbGVjdFwiIGluIGVsZW1lbnQ7XG59O1xuY29uc3QgdHJ5Rm9jdXMgPSAoZWxlbWVudCwgc2hvdWxkU2VsZWN0KSA9PiB7XG4gIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuZm9jdXMpIHtcbiAgICBjb25zdCBwcmV2Rm9jdXNlZEVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGVsZW1lbnQuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pO1xuICAgIGxhc3RBdXRvbWF0ZWRGb2N1c1RpbWVzdGFtcC52YWx1ZSA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICBpZiAoZWxlbWVudCAhPT0gcHJldkZvY3VzZWRFbGVtZW50ICYmIGlzU2VsZWN0YWJsZShlbGVtZW50KSAmJiBzaG91bGRTZWxlY3QpIHtcbiAgICAgIGVsZW1lbnQuc2VsZWN0KCk7XG4gICAgfVxuICB9XG59O1xuZnVuY3Rpb24gcmVtb3ZlRnJvbVN0YWNrKGxpc3QsIGl0ZW0pIHtcbiAgY29uc3QgY29weSA9IFsuLi5saXN0XTtcbiAgY29uc3QgaWR4ID0gbGlzdC5pbmRleE9mKGl0ZW0pO1xuICBpZiAoaWR4ICE9PSAtMSkge1xuICAgIGNvcHkuc3BsaWNlKGlkeCwgMSk7XG4gIH1cbiAgcmV0dXJuIGNvcHk7XG59XG5jb25zdCBjcmVhdGVGb2N1c2FibGVTdGFjayA9ICgpID0+IHtcbiAgbGV0IHN0YWNrID0gW107XG4gIGNvbnN0IHB1c2ggPSAobGF5ZXIpID0+IHtcbiAgICBjb25zdCBjdXJyZW50TGF5ZXIgPSBzdGFja1swXTtcbiAgICBpZiAoY3VycmVudExheWVyICYmIGxheWVyICE9PSBjdXJyZW50TGF5ZXIpIHtcbiAgICAgIGN1cnJlbnRMYXllci5wYXVzZSgpO1xuICAgIH1cbiAgICBzdGFjayA9IHJlbW92ZUZyb21TdGFjayhzdGFjaywgbGF5ZXIpO1xuICAgIHN0YWNrLnVuc2hpZnQobGF5ZXIpO1xuICB9O1xuICBjb25zdCByZW1vdmUgPSAobGF5ZXIpID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHN0YWNrID0gcmVtb3ZlRnJvbVN0YWNrKHN0YWNrLCBsYXllcik7XG4gICAgKF9iID0gKF9hID0gc3RhY2tbMF0pID09IG51bGwgPyB2b2lkIDAgOiBfYS5yZXN1bWUpID09IG51bGwgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBwdXNoLFxuICAgIHJlbW92ZVxuICB9O1xufTtcbmNvbnN0IGZvY3VzRmlyc3REZXNjZW5kYW50ID0gKGVsZW1lbnRzLCBzaG91bGRTZWxlY3QgPSBmYWxzZSkgPT4ge1xuICBjb25zdCBwcmV2Rm9jdXNlZEVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcbiAgICB0cnlGb2N1cyhlbGVtZW50LCBzaG91bGRTZWxlY3QpO1xuICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBwcmV2Rm9jdXNlZEVsZW1lbnQpXG4gICAgICByZXR1cm47XG4gIH1cbn07XG5jb25zdCBmb2N1c2FibGVTdGFjayA9IGNyZWF0ZUZvY3VzYWJsZVN0YWNrKCk7XG5jb25zdCBpc0ZvY3VzQ2F1c2VkQnlVc2VyRXZlbnQgPSAoKSA9PiB7XG4gIHJldHVybiBsYXN0VXNlckZvY3VzVGltZXN0YW1wLnZhbHVlID4gbGFzdEF1dG9tYXRlZEZvY3VzVGltZXN0YW1wLnZhbHVlO1xufTtcbmNvbnN0IG5vdGlmeUZvY3VzUmVhc29uUG9pbnRlciA9ICgpID0+IHtcbiAgZm9jdXNSZWFzb24udmFsdWUgPSBcInBvaW50ZXJcIjtcbiAgbGFzdFVzZXJGb2N1c1RpbWVzdGFtcC52YWx1ZSA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcbn07XG5jb25zdCBub3RpZnlGb2N1c1JlYXNvbktleWRvd24gPSAoKSA9PiB7XG4gIGZvY3VzUmVhc29uLnZhbHVlID0gXCJrZXlib2FyZFwiO1xuICBsYXN0VXNlckZvY3VzVGltZXN0YW1wLnZhbHVlID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpO1xufTtcbmNvbnN0IHVzZUZvY3VzUmVhc29uID0gKCkgPT4ge1xuICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgIGlmIChmb2N1c1JlYXNvblVzZXJDb3VudCA9PT0gMCkge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBub3RpZnlGb2N1c1JlYXNvblBvaW50ZXIpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgbm90aWZ5Rm9jdXNSZWFzb25Qb2ludGVyKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIG5vdGlmeUZvY3VzUmVhc29uS2V5ZG93bik7XG4gICAgfVxuICAgIGZvY3VzUmVhc29uVXNlckNvdW50Kys7XG4gIH0pO1xuICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgIGZvY3VzUmVhc29uVXNlckNvdW50LS07XG4gICAgaWYgKGZvY3VzUmVhc29uVXNlckNvdW50IDw9IDApIHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgbm90aWZ5Rm9jdXNSZWFzb25Qb2ludGVyKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIG5vdGlmeUZvY3VzUmVhc29uUG9pbnRlcik7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBub3RpZnlGb2N1c1JlYXNvbktleWRvd24pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgZm9jdXNSZWFzb24sXG4gICAgbGFzdFVzZXJGb2N1c1RpbWVzdGFtcCxcbiAgICBsYXN0QXV0b21hdGVkRm9jdXNUaW1lc3RhbXBcbiAgfTtcbn07XG5jb25zdCBjcmVhdGVGb2N1c091dFByZXZlbnRlZEV2ZW50ID0gKGRldGFpbCkgPT4ge1xuICByZXR1cm4gbmV3IEN1c3RvbUV2ZW50KEZPQ1VTT1VUX1BSRVZFTlRFRCwge1xuICAgIC4uLkZPQ1VTT1VUX1BSRVZFTlRFRF9PUFRTLFxuICAgIGRldGFpbFxuICB9KTtcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZUZvY3VzT3V0UHJldmVudGVkRXZlbnQsIGZvY3VzRmlyc3REZXNjZW5kYW50LCBmb2N1c2FibGVTdGFjaywgZ2V0RWRnZXMsIGdldFZpc2libGVFbGVtZW50LCBpc0ZvY3VzQ2F1c2VkQnlVc2VyRXZlbnQsIGlzSGlkZGVuLCBvYnRhaW5BbGxGb2N1c2FibGVFbGVtZW50cywgdHJ5Rm9jdXMsIHVzZUZvY3VzUmVhc29uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIHJlZiwgcHJvdmlkZSwgd2F0Y2gsIHVucmVmLCBuZXh0VGljaywgb25Nb3VudGVkLCBvbkJlZm9yZVVubW91bnQsIHJlbmRlclNsb3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgaXNOaWwgfSBmcm9tICdsb2Rhc2gtdW5pZmllZCc7XG5pbXBvcnQgJy4uLy4uLy4uL2NvbnN0YW50cy9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi9ob29rcy9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi91dGlscy9pbmRleC5tanMnO1xuaW1wb3J0IHsgdXNlRm9jdXNSZWFzb24sIGdldEVkZ2VzLCBjcmVhdGVGb2N1c091dFByZXZlbnRlZEV2ZW50LCB0cnlGb2N1cywgZm9jdXNhYmxlU3RhY2ssIGZvY3VzRmlyc3REZXNjZW5kYW50LCBvYnRhaW5BbGxGb2N1c2FibGVFbGVtZW50cywgaXNGb2N1c0NhdXNlZEJ5VXNlckV2ZW50IH0gZnJvbSAnLi91dGlscy5tanMnO1xuaW1wb3J0IHsgT05fVFJBUF9GT0NVU19FVlQsIE9OX1JFTEVBU0VfRk9DVVNfRVZULCBGT0NVU19UUkFQX0lOSkVDVElPTl9LRVksIEZPQ1VTX0FGVEVSX1RSQVBQRUQsIEZPQ1VTX0FGVEVSX1RSQVBQRURfT1BUUywgRk9DVVNfQUZURVJfUkVMRUFTRUQgfSBmcm9tICcuL3Rva2Vucy5tanMnO1xuaW1wb3J0IF9leHBvcnRfc2ZjIGZyb20gJy4uLy4uLy4uL192aXJ0dWFsL3BsdWdpbi12dWVfZXhwb3J0LWhlbHBlci5tanMnO1xuaW1wb3J0IHsgdXNlRXNjYXBlS2V5ZG93biB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1lc2NhcGUta2V5ZG93bi9pbmRleC5tanMnO1xuaW1wb3J0IHsgRVZFTlRfQ09ERSB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cy9hcmlhLm1qcyc7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJ0B2dWUvc2hhcmVkJztcblxuY29uc3QgX3NmY19tYWluID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJFbEZvY3VzVHJhcFwiLFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczoge1xuICAgIGxvb3A6IEJvb2xlYW4sXG4gICAgdHJhcHBlZDogQm9vbGVhbixcbiAgICBmb2N1c1RyYXBFbDogT2JqZWN0LFxuICAgIGZvY3VzU3RhcnRFbDoge1xuICAgICAgdHlwZTogW09iamVjdCwgU3RyaW5nXSxcbiAgICAgIGRlZmF1bHQ6IFwiZmlyc3RcIlxuICAgIH1cbiAgfSxcbiAgZW1pdHM6IFtcbiAgICBPTl9UUkFQX0ZPQ1VTX0VWVCxcbiAgICBPTl9SRUxFQVNFX0ZPQ1VTX0VWVCxcbiAgICBcImZvY3VzaW5cIixcbiAgICBcImZvY3Vzb3V0XCIsXG4gICAgXCJmb2N1c291dC1wcmV2ZW50ZWRcIixcbiAgICBcInJlbGVhc2UtcmVxdWVzdGVkXCJcbiAgXSxcbiAgc2V0dXAocHJvcHMsIHsgZW1pdCB9KSB7XG4gICAgY29uc3QgZm9yd2FyZFJlZiA9IHJlZigpO1xuICAgIGxldCBsYXN0Rm9jdXNCZWZvcmVUcmFwcGVkO1xuICAgIGxldCBsYXN0Rm9jdXNBZnRlclRyYXBwZWQ7XG4gICAgY29uc3QgeyBmb2N1c1JlYXNvbiB9ID0gdXNlRm9jdXNSZWFzb24oKTtcbiAgICB1c2VFc2NhcGVLZXlkb3duKChldmVudCkgPT4ge1xuICAgICAgaWYgKHByb3BzLnRyYXBwZWQgJiYgIWZvY3VzTGF5ZXIucGF1c2VkKSB7XG4gICAgICAgIGVtaXQoXCJyZWxlYXNlLXJlcXVlc3RlZFwiLCBldmVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgZm9jdXNMYXllciA9IHtcbiAgICAgIHBhdXNlZDogZmFsc2UsXG4gICAgICBwYXVzZSgpIHtcbiAgICAgICAgdGhpcy5wYXVzZWQgPSB0cnVlO1xuICAgICAgfSxcbiAgICAgIHJlc3VtZSgpIHtcbiAgICAgICAgdGhpcy5wYXVzZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG9uS2V5ZG93biA9IChlKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLmxvb3AgJiYgIXByb3BzLnRyYXBwZWQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGlmIChmb2N1c0xheWVyLnBhdXNlZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgeyBrZXksIGFsdEtleSwgY3RybEtleSwgbWV0YUtleSwgY3VycmVudFRhcmdldCwgc2hpZnRLZXkgfSA9IGU7XG4gICAgICBjb25zdCB7IGxvb3AgfSA9IHByb3BzO1xuICAgICAgY29uc3QgaXNUYWJiaW5nID0ga2V5ID09PSBFVkVOVF9DT0RFLnRhYiAmJiAhYWx0S2V5ICYmICFjdHJsS2V5ICYmICFtZXRhS2V5O1xuICAgICAgY29uc3QgY3VycmVudEZvY3VzaW5nRWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgICAgaWYgKGlzVGFiYmluZyAmJiBjdXJyZW50Rm9jdXNpbmdFbCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBjdXJyZW50VGFyZ2V0O1xuICAgICAgICBjb25zdCBbZmlyc3QsIGxhc3RdID0gZ2V0RWRnZXMoY29udGFpbmVyKTtcbiAgICAgICAgY29uc3QgaXNUYWJiYWJsZSA9IGZpcnN0ICYmIGxhc3Q7XG4gICAgICAgIGlmICghaXNUYWJiYWJsZSkge1xuICAgICAgICAgIGlmIChjdXJyZW50Rm9jdXNpbmdFbCA9PT0gY29udGFpbmVyKSB7XG4gICAgICAgICAgICBjb25zdCBmb2N1c291dFByZXZlbnRlZEV2ZW50ID0gY3JlYXRlRm9jdXNPdXRQcmV2ZW50ZWRFdmVudCh7XG4gICAgICAgICAgICAgIGZvY3VzUmVhc29uOiBmb2N1c1JlYXNvbi52YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlbWl0KFwiZm9jdXNvdXQtcHJldmVudGVkXCIsIGZvY3Vzb3V0UHJldmVudGVkRXZlbnQpO1xuICAgICAgICAgICAgaWYgKCFmb2N1c291dFByZXZlbnRlZEV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIXNoaWZ0S2V5ICYmIGN1cnJlbnRGb2N1c2luZ0VsID09PSBsYXN0KSB7XG4gICAgICAgICAgICBjb25zdCBmb2N1c291dFByZXZlbnRlZEV2ZW50ID0gY3JlYXRlRm9jdXNPdXRQcmV2ZW50ZWRFdmVudCh7XG4gICAgICAgICAgICAgIGZvY3VzUmVhc29uOiBmb2N1c1JlYXNvbi52YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlbWl0KFwiZm9jdXNvdXQtcHJldmVudGVkXCIsIGZvY3Vzb3V0UHJldmVudGVkRXZlbnQpO1xuICAgICAgICAgICAgaWYgKCFmb2N1c291dFByZXZlbnRlZEV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBpZiAobG9vcClcbiAgICAgICAgICAgICAgICB0cnlGb2N1cyhmaXJzdCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChzaGlmdEtleSAmJiBbZmlyc3QsIGNvbnRhaW5lcl0uaW5jbHVkZXMoY3VycmVudEZvY3VzaW5nRWwpKSB7XG4gICAgICAgICAgICBjb25zdCBmb2N1c291dFByZXZlbnRlZEV2ZW50ID0gY3JlYXRlRm9jdXNPdXRQcmV2ZW50ZWRFdmVudCh7XG4gICAgICAgICAgICAgIGZvY3VzUmVhc29uOiBmb2N1c1JlYXNvbi52YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlbWl0KFwiZm9jdXNvdXQtcHJldmVudGVkXCIsIGZvY3Vzb3V0UHJldmVudGVkRXZlbnQpO1xuICAgICAgICAgICAgaWYgKCFmb2N1c291dFByZXZlbnRlZEV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBpZiAobG9vcClcbiAgICAgICAgICAgICAgICB0cnlGb2N1cyhsYXN0LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHByb3ZpZGUoRk9DVVNfVFJBUF9JTkpFQ1RJT05fS0VZLCB7XG4gICAgICBmb2N1c1RyYXBSZWY6IGZvcndhcmRSZWYsXG4gICAgICBvbktleWRvd25cbiAgICB9KTtcbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5mb2N1c1RyYXBFbCwgKGZvY3VzVHJhcEVsKSA9PiB7XG4gICAgICBpZiAoZm9jdXNUcmFwRWwpIHtcbiAgICAgICAgZm9yd2FyZFJlZi52YWx1ZSA9IGZvY3VzVHJhcEVsO1xuICAgICAgfVxuICAgIH0sIHsgaW1tZWRpYXRlOiB0cnVlIH0pO1xuICAgIHdhdGNoKFtmb3J3YXJkUmVmXSwgKFtmb3J3YXJkUmVmMl0sIFtvbGRGb3J3YXJkUmVmXSkgPT4ge1xuICAgICAgaWYgKGZvcndhcmRSZWYyKSB7XG4gICAgICAgIGZvcndhcmRSZWYyLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIG9uS2V5ZG93bik7XG4gICAgICAgIGZvcndhcmRSZWYyLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c2luXCIsIG9uRm9jdXNJbik7XG4gICAgICAgIGZvcndhcmRSZWYyLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c291dFwiLCBvbkZvY3VzT3V0KTtcbiAgICAgIH1cbiAgICAgIGlmIChvbGRGb3J3YXJkUmVmKSB7XG4gICAgICAgIG9sZEZvcndhcmRSZWYucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgb25LZXlkb3duKTtcbiAgICAgICAgb2xkRm9yd2FyZFJlZi5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCBvbkZvY3VzSW4pO1xuICAgICAgICBvbGRGb3J3YXJkUmVmLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c291dFwiLCBvbkZvY3VzT3V0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCB0cmFwT25Gb2N1cyA9IChlKSA9PiB7XG4gICAgICBlbWl0KE9OX1RSQVBfRk9DVVNfRVZULCBlKTtcbiAgICB9O1xuICAgIGNvbnN0IHJlbGVhc2VPbkZvY3VzID0gKGUpID0+IGVtaXQoT05fUkVMRUFTRV9GT0NVU19FVlQsIGUpO1xuICAgIGNvbnN0IG9uRm9jdXNJbiA9IChlKSA9PiB7XG4gICAgICBjb25zdCB0cmFwQ29udGFpbmVyID0gdW5yZWYoZm9yd2FyZFJlZik7XG4gICAgICBpZiAoIXRyYXBDb250YWluZXIpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgY29uc3QgcmVsYXRlZFRhcmdldCA9IGUucmVsYXRlZFRhcmdldDtcbiAgICAgIGNvbnN0IGlzRm9jdXNlZEluVHJhcCA9IHRhcmdldCAmJiB0cmFwQ29udGFpbmVyLmNvbnRhaW5zKHRhcmdldCk7XG4gICAgICBpZiAoIXByb3BzLnRyYXBwZWQpIHtcbiAgICAgICAgY29uc3QgaXNQcmV2Rm9jdXNlZEluVHJhcCA9IHJlbGF0ZWRUYXJnZXQgJiYgdHJhcENvbnRhaW5lci5jb250YWlucyhyZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgaWYgKCFpc1ByZXZGb2N1c2VkSW5UcmFwKSB7XG4gICAgICAgICAgbGFzdEZvY3VzQmVmb3JlVHJhcHBlZCA9IHJlbGF0ZWRUYXJnZXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0ZvY3VzZWRJblRyYXApXG4gICAgICAgIGVtaXQoXCJmb2N1c2luXCIsIGUpO1xuICAgICAgaWYgKGZvY3VzTGF5ZXIucGF1c2VkKVxuICAgICAgICByZXR1cm47XG4gICAgICBpZiAocHJvcHMudHJhcHBlZCkge1xuICAgICAgICBpZiAoaXNGb2N1c2VkSW5UcmFwKSB7XG4gICAgICAgICAgbGFzdEZvY3VzQWZ0ZXJUcmFwcGVkID0gdGFyZ2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyeUZvY3VzKGxhc3RGb2N1c0FmdGVyVHJhcHBlZCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG9uRm9jdXNPdXQgPSAoZSkgPT4ge1xuICAgICAgY29uc3QgdHJhcENvbnRhaW5lciA9IHVucmVmKGZvcndhcmRSZWYpO1xuICAgICAgaWYgKGZvY3VzTGF5ZXIucGF1c2VkIHx8ICF0cmFwQ29udGFpbmVyKVxuICAgICAgICByZXR1cm47XG4gICAgICBpZiAocHJvcHMudHJhcHBlZCkge1xuICAgICAgICBjb25zdCByZWxhdGVkVGFyZ2V0ID0gZS5yZWxhdGVkVGFyZ2V0O1xuICAgICAgICBpZiAoIWlzTmlsKHJlbGF0ZWRUYXJnZXQpICYmICF0cmFwQ29udGFpbmVyLmNvbnRhaW5zKHJlbGF0ZWRUYXJnZXQpKSB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWZvY3VzTGF5ZXIucGF1c2VkICYmIHByb3BzLnRyYXBwZWQpIHtcbiAgICAgICAgICAgICAgY29uc3QgZm9jdXNvdXRQcmV2ZW50ZWRFdmVudCA9IGNyZWF0ZUZvY3VzT3V0UHJldmVudGVkRXZlbnQoe1xuICAgICAgICAgICAgICAgIGZvY3VzUmVhc29uOiBmb2N1c1JlYXNvbi52YWx1ZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgZW1pdChcImZvY3Vzb3V0LXByZXZlbnRlZFwiLCBmb2N1c291dFByZXZlbnRlZEV2ZW50KTtcbiAgICAgICAgICAgICAgaWYgKCFmb2N1c291dFByZXZlbnRlZEV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICB0cnlGb2N1cyhsYXN0Rm9jdXNBZnRlclRyYXBwZWQsIHRydWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICBjb25zdCBpc0ZvY3VzZWRJblRyYXAgPSB0YXJnZXQgJiYgdHJhcENvbnRhaW5lci5jb250YWlucyh0YXJnZXQpO1xuICAgICAgICBpZiAoIWlzRm9jdXNlZEluVHJhcClcbiAgICAgICAgICBlbWl0KFwiZm9jdXNvdXRcIiwgZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBhc3luYyBmdW5jdGlvbiBzdGFydFRyYXAoKSB7XG4gICAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgICAgY29uc3QgdHJhcENvbnRhaW5lciA9IHVucmVmKGZvcndhcmRSZWYpO1xuICAgICAgaWYgKHRyYXBDb250YWluZXIpIHtcbiAgICAgICAgZm9jdXNhYmxlU3RhY2sucHVzaChmb2N1c0xheWVyKTtcbiAgICAgICAgY29uc3QgcHJldkZvY3VzZWRFbGVtZW50ID0gdHJhcENvbnRhaW5lci5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSA/IGxhc3RGb2N1c0JlZm9yZVRyYXBwZWQgOiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgICAgICBsYXN0Rm9jdXNCZWZvcmVUcmFwcGVkID0gcHJldkZvY3VzZWRFbGVtZW50O1xuICAgICAgICBjb25zdCBpc1ByZXZGb2N1c0NvbnRhaW5lZCA9IHRyYXBDb250YWluZXIuY29udGFpbnMocHJldkZvY3VzZWRFbGVtZW50KTtcbiAgICAgICAgaWYgKCFpc1ByZXZGb2N1c0NvbnRhaW5lZCkge1xuICAgICAgICAgIGNvbnN0IGZvY3VzRXZlbnQgPSBuZXcgRXZlbnQoRk9DVVNfQUZURVJfVFJBUFBFRCwgRk9DVVNfQUZURVJfVFJBUFBFRF9PUFRTKTtcbiAgICAgICAgICB0cmFwQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoRk9DVVNfQUZURVJfVFJBUFBFRCwgdHJhcE9uRm9jdXMpO1xuICAgICAgICAgIHRyYXBDb250YWluZXIuZGlzcGF0Y2hFdmVudChmb2N1c0V2ZW50KTtcbiAgICAgICAgICBpZiAoIWZvY3VzRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICBsZXQgZm9jdXNTdGFydEVsID0gcHJvcHMuZm9jdXNTdGFydEVsO1xuICAgICAgICAgICAgICBpZiAoIWlzU3RyaW5nKGZvY3VzU3RhcnRFbCkpIHtcbiAgICAgICAgICAgICAgICB0cnlGb2N1cyhmb2N1c1N0YXJ0RWwpO1xuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBmb2N1c1N0YXJ0RWwpIHtcbiAgICAgICAgICAgICAgICAgIGZvY3VzU3RhcnRFbCA9IFwiZmlyc3RcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGZvY3VzU3RhcnRFbCA9PT0gXCJmaXJzdFwiKSB7XG4gICAgICAgICAgICAgICAgZm9jdXNGaXJzdERlc2NlbmRhbnQob2J0YWluQWxsRm9jdXNhYmxlRWxlbWVudHModHJhcENvbnRhaW5lciksIHRydWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBwcmV2Rm9jdXNlZEVsZW1lbnQgfHwgZm9jdXNTdGFydEVsID09PSBcImNvbnRhaW5lclwiKSB7XG4gICAgICAgICAgICAgICAgdHJ5Rm9jdXModHJhcENvbnRhaW5lcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzdG9wVHJhcCgpIHtcbiAgICAgIGNvbnN0IHRyYXBDb250YWluZXIgPSB1bnJlZihmb3J3YXJkUmVmKTtcbiAgICAgIGlmICh0cmFwQ29udGFpbmVyKSB7XG4gICAgICAgIHRyYXBDb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihGT0NVU19BRlRFUl9UUkFQUEVELCB0cmFwT25Gb2N1cyk7XG4gICAgICAgIGNvbnN0IHJlbGVhc2VkRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoRk9DVVNfQUZURVJfUkVMRUFTRUQsIHtcbiAgICAgICAgICAuLi5GT0NVU19BRlRFUl9UUkFQUEVEX09QVFMsXG4gICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICBmb2N1c1JlYXNvbjogZm9jdXNSZWFzb24udmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0cmFwQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoRk9DVVNfQUZURVJfUkVMRUFTRUQsIHJlbGVhc2VPbkZvY3VzKTtcbiAgICAgICAgdHJhcENvbnRhaW5lci5kaXNwYXRjaEV2ZW50KHJlbGVhc2VkRXZlbnQpO1xuICAgICAgICBpZiAoIXJlbGVhc2VkRXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAoZm9jdXNSZWFzb24udmFsdWUgPT0gXCJrZXlib2FyZFwiIHx8ICFpc0ZvY3VzQ2F1c2VkQnlVc2VyRXZlbnQoKSB8fCB0cmFwQ29udGFpbmVyLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSkge1xuICAgICAgICAgIHRyeUZvY3VzKGxhc3RGb2N1c0JlZm9yZVRyYXBwZWQgIT0gbnVsbCA/IGxhc3RGb2N1c0JlZm9yZVRyYXBwZWQgOiBkb2N1bWVudC5ib2R5KTtcbiAgICAgICAgfVxuICAgICAgICB0cmFwQ29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoRk9DVVNfQUZURVJfUkVMRUFTRUQsIHRyYXBPbkZvY3VzKTtcbiAgICAgICAgZm9jdXNhYmxlU3RhY2sucmVtb3ZlKGZvY3VzTGF5ZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLnRyYXBwZWQpIHtcbiAgICAgICAgc3RhcnRUcmFwKCk7XG4gICAgICB9XG4gICAgICB3YXRjaCgoKSA9PiBwcm9wcy50cmFwcGVkLCAodHJhcHBlZCkgPT4ge1xuICAgICAgICBpZiAodHJhcHBlZCkge1xuICAgICAgICAgIHN0YXJ0VHJhcCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0b3BUcmFwKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMudHJhcHBlZCkge1xuICAgICAgICBzdG9wVHJhcCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBvbktleWRvd25cbiAgICB9O1xuICB9XG59KTtcbmZ1bmN0aW9uIF9zZmNfcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykge1xuICByZXR1cm4gcmVuZGVyU2xvdChfY3R4LiRzbG90cywgXCJkZWZhdWx0XCIsIHsgaGFuZGxlS2V5ZG93bjogX2N0eC5vbktleWRvd24gfSk7XG59XG52YXIgRWxGb2N1c1RyYXAgPSAvKiBAX19QVVJFX18gKi8gX2V4cG9ydF9zZmMoX3NmY19tYWluLCBbW1wicmVuZGVyXCIsIF9zZmNfcmVuZGVyXSwgW1wiX19maWxlXCIsIFwiL2hvbWUvcnVubmVyL3dvcmsvZWxlbWVudC1wbHVzL2VsZW1lbnQtcGx1cy9wYWNrYWdlcy9jb21wb25lbnRzL2ZvY3VzLXRyYXAvc3JjL2ZvY3VzLXRyYXAudnVlXCJdXSk7XG5cbmV4cG9ydCB7IEVsRm9jdXNUcmFwIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvY3VzLXRyYXAubWpzLm1hcFxuIiwiaW1wb3J0IHsgcGxhY2VtZW50cyB9IGZyb20gJ0Bwb3BwZXJqcy9jb3JlJztcbmltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCB7IGJ1aWxkUHJvcHMsIGRlZmluZVByb3BUeXBlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdnVlL3Byb3BzL3J1bnRpbWUubWpzJztcblxuY29uc3QgUE9TSVRJT05JTkdfU1RSQVRFR0lFUyA9IFtcImZpeGVkXCIsIFwiYWJzb2x1dGVcIl07XG5jb25zdCBwb3BwZXJDb3JlQ29uZmlnUHJvcHMgPSBidWlsZFByb3BzKHtcbiAgYm91bmRhcmllc1BhZGRpbmc6IHtcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgZGVmYXVsdDogMFxuICB9LFxuICBmYWxsYmFja1BsYWNlbWVudHM6IHtcbiAgICB0eXBlOiBkZWZpbmVQcm9wVHlwZShBcnJheSksXG4gICAgZGVmYXVsdDogdm9pZCAwXG4gIH0sXG4gIGdwdUFjY2VsZXJhdGlvbjoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBvZmZzZXQ6IHtcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgZGVmYXVsdDogMTJcbiAgfSxcbiAgcGxhY2VtZW50OiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHZhbHVlczogcGxhY2VtZW50cyxcbiAgICBkZWZhdWx0OiBcImJvdHRvbVwiXG4gIH0sXG4gIHBvcHBlck9wdGlvbnM6IHtcbiAgICB0eXBlOiBkZWZpbmVQcm9wVHlwZShPYmplY3QpLFxuICAgIGRlZmF1bHQ6ICgpID0+ICh7fSlcbiAgfSxcbiAgc3RyYXRlZ3k6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgdmFsdWVzOiBQT1NJVElPTklOR19TVFJBVEVHSUVTLFxuICAgIGRlZmF1bHQ6IFwiYWJzb2x1dGVcIlxuICB9XG59KTtcbmNvbnN0IHBvcHBlckNvbnRlbnRQcm9wcyA9IGJ1aWxkUHJvcHMoe1xuICAuLi5wb3BwZXJDb3JlQ29uZmlnUHJvcHMsXG4gIGlkOiBTdHJpbmcsXG4gIHN0eWxlOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoW1N0cmluZywgQXJyYXksIE9iamVjdF0pXG4gIH0sXG4gIGNsYXNzTmFtZToge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKFtTdHJpbmcsIEFycmF5LCBPYmplY3RdKVxuICB9LFxuICBlZmZlY3Q6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogXCJkYXJrXCJcbiAgfSxcbiAgdmlzaWJsZTogQm9vbGVhbixcbiAgZW50ZXJhYmxlOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIHB1cmU6IEJvb2xlYW4sXG4gIGZvY3VzT25TaG93OiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9LFxuICB0cmFwcGluZzoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSxcbiAgcG9wcGVyQ2xhc3M6IHtcbiAgICB0eXBlOiBkZWZpbmVQcm9wVHlwZShbU3RyaW5nLCBBcnJheSwgT2JqZWN0XSlcbiAgfSxcbiAgcG9wcGVyU3R5bGU6IHtcbiAgICB0eXBlOiBkZWZpbmVQcm9wVHlwZShbU3RyaW5nLCBBcnJheSwgT2JqZWN0XSlcbiAgfSxcbiAgcmVmZXJlbmNlRWw6IHtcbiAgICB0eXBlOiBkZWZpbmVQcm9wVHlwZShPYmplY3QpXG4gIH0sXG4gIHRyaWdnZXJUYXJnZXRFbDoge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKE9iamVjdClcbiAgfSxcbiAgc3RvcFBvcHBlck1vdXNlRXZlbnQ6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgYXJpYUxhYmVsOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IHZvaWQgMFxuICB9LFxuICB2aXJ0dWFsVHJpZ2dlcmluZzogQm9vbGVhbixcbiAgekluZGV4OiBOdW1iZXJcbn0pO1xuY29uc3QgcG9wcGVyQ29udGVudEVtaXRzID0ge1xuICBtb3VzZWVudGVyOiAoZXZ0KSA9PiBldnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50LFxuICBtb3VzZWxlYXZlOiAoZXZ0KSA9PiBldnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50LFxuICBmb2N1czogKCkgPT4gdHJ1ZSxcbiAgYmx1cjogKCkgPT4gdHJ1ZSxcbiAgY2xvc2U6ICgpID0+IHRydWVcbn07XG5jb25zdCB1c2VQb3BwZXJDb3JlQ29uZmlnUHJvcHMgPSBwb3BwZXJDb3JlQ29uZmlnUHJvcHM7XG5jb25zdCB1c2VQb3BwZXJDb250ZW50UHJvcHMgPSBwb3BwZXJDb250ZW50UHJvcHM7XG5jb25zdCB1c2VQb3BwZXJDb250ZW50RW1pdHMgPSBwb3BwZXJDb250ZW50RW1pdHM7XG5cbmV4cG9ydCB7IHBvcHBlckNvbnRlbnRFbWl0cywgcG9wcGVyQ29udGVudFByb3BzLCBwb3BwZXJDb3JlQ29uZmlnUHJvcHMsIHVzZVBvcHBlckNvbnRlbnRFbWl0cywgdXNlUG9wcGVyQ29udGVudFByb3BzLCB1c2VQb3BwZXJDb3JlQ29uZmlnUHJvcHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRlbnQubWpzLm1hcFxuIiwiaW1wb3J0IHsgaXNDbGllbnQsIHVucmVmRWxlbWVudCB9IGZyb20gJ0B2dWV1c2UvY29yZSc7XG5cbmNvbnN0IGJ1aWxkUG9wcGVyT3B0aW9ucyA9IChwcm9wcywgbW9kaWZpZXJzID0gW10pID0+IHtcbiAgY29uc3QgeyBwbGFjZW1lbnQsIHN0cmF0ZWd5LCBwb3BwZXJPcHRpb25zIH0gPSBwcm9wcztcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICBwbGFjZW1lbnQsXG4gICAgc3RyYXRlZ3ksXG4gICAgLi4ucG9wcGVyT3B0aW9ucyxcbiAgICBtb2RpZmllcnM6IFsuLi5nZW5Nb2RpZmllcnMocHJvcHMpLCAuLi5tb2RpZmllcnNdXG4gIH07XG4gIGRlcml2ZUV4dHJhTW9kaWZpZXJzKG9wdGlvbnMsIHBvcHBlck9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IHBvcHBlck9wdGlvbnMubW9kaWZpZXJzKTtcbiAgcmV0dXJuIG9wdGlvbnM7XG59O1xuY29uc3QgdW53cmFwTWVhc3VyYWJsZUVsID0gKCRlbCkgPT4ge1xuICBpZiAoIWlzQ2xpZW50KVxuICAgIHJldHVybjtcbiAgcmV0dXJuIHVucmVmRWxlbWVudCgkZWwpO1xufTtcbmZ1bmN0aW9uIGdlbk1vZGlmaWVycyhvcHRpb25zKSB7XG4gIGNvbnN0IHsgb2Zmc2V0LCBncHVBY2NlbGVyYXRpb24sIGZhbGxiYWNrUGxhY2VtZW50cyB9ID0gb3B0aW9ucztcbiAgcmV0dXJuIFtcbiAgICB7XG4gICAgICBuYW1lOiBcIm9mZnNldFwiLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBvZmZzZXQ6IFswLCBvZmZzZXQgIT0gbnVsbCA/IG9mZnNldCA6IDEyXVxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogXCJwcmV2ZW50T3ZlcmZsb3dcIixcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgIHRvcDogMixcbiAgICAgICAgICBib3R0b206IDIsXG4gICAgICAgICAgbGVmdDogNSxcbiAgICAgICAgICByaWdodDogNVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBcImZsaXBcIixcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgcGFkZGluZzogNSxcbiAgICAgICAgZmFsbGJhY2tQbGFjZW1lbnRzXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBcImNvbXB1dGVTdHlsZXNcIixcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgZ3B1QWNjZWxlcmF0aW9uXG4gICAgICB9XG4gICAgfVxuICBdO1xufVxuZnVuY3Rpb24gZGVyaXZlRXh0cmFNb2RpZmllcnMob3B0aW9ucywgbW9kaWZpZXJzKSB7XG4gIGlmIChtb2RpZmllcnMpIHtcbiAgICBvcHRpb25zLm1vZGlmaWVycyA9IFsuLi5vcHRpb25zLm1vZGlmaWVycywgLi4ubW9kaWZpZXJzICE9IG51bGwgPyBtb2RpZmllcnMgOiBbXV07XG4gIH1cbn1cblxuZXhwb3J0IHsgYnVpbGRQb3BwZXJPcHRpb25zLCB1bndyYXBNZWFzdXJhYmxlRWwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLm1qcy5tYXBcbiIsImltcG9ydCB7IGluamVjdCwgcmVmLCBjb21wdXRlZCwgdW5yZWYsIHdhdGNoLCBvbk1vdW50ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgaXNVbmRlZmluZWQgfSBmcm9tICdsb2Rhc2gtdW5pZmllZCc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL2hvb2tzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBQT1BQRVJfSU5KRUNUSU9OX0tFWSB9IGZyb20gJy4uL2NvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgYnVpbGRQb3BwZXJPcHRpb25zLCB1bndyYXBNZWFzdXJhYmxlRWwgfSBmcm9tICcuLi91dGlscy5tanMnO1xuaW1wb3J0IHsgdXNlUG9wcGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlLXBvcHBlci9pbmRleC5tanMnO1xuXG5jb25zdCBERUZBVUxUX0FSUk9XX09GRlNFVCA9IDA7XG5jb25zdCB1c2VQb3BwZXJDb250ZW50ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcG9wcGVySW5zdGFuY2VSZWYsIGNvbnRlbnRSZWYsIHRyaWdnZXJSZWYsIHJvbGUgfSA9IGluamVjdChQT1BQRVJfSU5KRUNUSU9OX0tFWSwgdm9pZCAwKTtcbiAgY29uc3QgYXJyb3dSZWYgPSByZWYoKTtcbiAgY29uc3QgYXJyb3dPZmZzZXQgPSByZWYoKTtcbiAgY29uc3QgZXZlbnRMaXN0ZW5lck1vZGlmaWVyID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcImV2ZW50TGlzdGVuZXJzXCIsXG4gICAgICBlbmFibGVkOiAhIXByb3BzLnZpc2libGVcbiAgICB9O1xuICB9KTtcbiAgY29uc3QgYXJyb3dNb2RpZmllciA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgYXJyb3dFbCA9IHVucmVmKGFycm93UmVmKTtcbiAgICBjb25zdCBvZmZzZXQgPSAoX2EgPSB1bnJlZihhcnJvd09mZnNldCkpICE9IG51bGwgPyBfYSA6IERFRkFVTFRfQVJST1dfT0ZGU0VUO1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcImFycm93XCIsXG4gICAgICBlbmFibGVkOiAhaXNVbmRlZmluZWQoYXJyb3dFbCksXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGVsZW1lbnQ6IGFycm93RWwsXG4gICAgICAgIHBhZGRpbmc6IG9mZnNldFxuICAgICAgfVxuICAgIH07XG4gIH0pO1xuICBjb25zdCBvcHRpb25zID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBvbkZpcnN0VXBkYXRlOiAoKSA9PiB7XG4gICAgICAgIHVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIC4uLmJ1aWxkUG9wcGVyT3B0aW9ucyhwcm9wcywgW1xuICAgICAgICB1bnJlZihhcnJvd01vZGlmaWVyKSxcbiAgICAgICAgdW5yZWYoZXZlbnRMaXN0ZW5lck1vZGlmaWVyKVxuICAgICAgXSlcbiAgICB9O1xuICB9KTtcbiAgY29uc3QgY29tcHV0ZWRSZWZlcmVuY2UgPSBjb21wdXRlZCgoKSA9PiB1bndyYXBNZWFzdXJhYmxlRWwocHJvcHMucmVmZXJlbmNlRWwpIHx8IHVucmVmKHRyaWdnZXJSZWYpKTtcbiAgY29uc3QgeyBhdHRyaWJ1dGVzLCBzdGF0ZSwgc3R5bGVzLCB1cGRhdGUsIGZvcmNlVXBkYXRlLCBpbnN0YW5jZVJlZiB9ID0gdXNlUG9wcGVyKGNvbXB1dGVkUmVmZXJlbmNlLCBjb250ZW50UmVmLCBvcHRpb25zKTtcbiAgd2F0Y2goaW5zdGFuY2VSZWYsIChpbnN0YW5jZSkgPT4gcG9wcGVySW5zdGFuY2VSZWYudmFsdWUgPSBpbnN0YW5jZSk7XG4gIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgd2F0Y2goKCkgPT4ge1xuICAgICAgdmFyIF9hO1xuICAgICAgcmV0dXJuIChfYSA9IHVucmVmKGNvbXB1dGVkUmVmZXJlbmNlKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH0sICgpID0+IHtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBhdHRyaWJ1dGVzLFxuICAgIGFycm93UmVmLFxuICAgIGNvbnRlbnRSZWYsXG4gICAgaW5zdGFuY2VSZWYsXG4gICAgc3RhdGUsXG4gICAgc3R5bGVzLFxuICAgIHJvbGUsXG4gICAgZm9yY2VVcGRhdGUsXG4gICAgdXBkYXRlXG4gIH07XG59O1xuXG5leHBvcnQgeyB1c2VQb3BwZXJDb250ZW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtY29udGVudC5tanMubWFwXG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzVW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBpbmplY3QsIHJlZiwgcHJvdmlkZSwgb25Nb3VudGVkLCB3YXRjaCwgdW5yZWYsIG9uQmVmb3JlVW5tb3VudCwgb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2ssIG1lcmdlUHJvcHMsIGNyZWF0ZVZOb2RlLCB3aXRoQ3R4LCByZW5kZXJTbG90IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IE5PT1AgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5pbXBvcnQgeyBpc05pbCB9IGZyb20gJ2xvZGFzaC11bmlmaWVkJztcbmltcG9ydCAnLi4vLi4vZm9jdXMtdHJhcC9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi8uLi9mb3JtL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBQT1BQRVJfQ09OVEVOVF9JTkpFQ1RJT05fS0VZIH0gZnJvbSAnLi9jb25zdGFudHMubWpzJztcbmltcG9ydCB7IHBvcHBlckNvbnRlbnRQcm9wcywgcG9wcGVyQ29udGVudEVtaXRzIH0gZnJvbSAnLi9jb250ZW50Lm1qcyc7XG5pbXBvcnQgJy4vY29tcG9zYWJsZXMvaW5kZXgubWpzJztcbmltcG9ydCBfZXhwb3J0X3NmYyBmcm9tICcuLi8uLi8uLi9fdmlydHVhbC9wbHVnaW4tdnVlX2V4cG9ydC1oZWxwZXIubWpzJztcbmltcG9ydCB7IHVzZVBvcHBlckNvbnRlbnRGb2N1c1RyYXAgfSBmcm9tICcuL2NvbXBvc2FibGVzL3VzZS1mb2N1cy10cmFwLm1qcyc7XG5pbXBvcnQgeyB1c2VQb3BwZXJDb250ZW50IH0gZnJvbSAnLi9jb21wb3NhYmxlcy91c2UtY29udGVudC5tanMnO1xuaW1wb3J0IHsgdXNlUG9wcGVyQ29udGVudERPTSB9IGZyb20gJy4vY29tcG9zYWJsZXMvdXNlLWNvbnRlbnQtZG9tLm1qcyc7XG5pbXBvcnQgeyBmb3JtSXRlbUNvbnRleHRLZXkgfSBmcm9tICcuLi8uLi9mb3JtL3NyYy9jb25zdGFudHMubWpzJztcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3R5cGVzLm1qcyc7XG5pbXBvcnQgRWxGb2N1c1RyYXAgZnJvbSAnLi4vLi4vZm9jdXMtdHJhcC9zcmMvZm9jdXMtdHJhcC5tanMnO1xuXG5jb25zdCBfX2RlZmF1bHRfXyA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRWxQb3BwZXJDb250ZW50XCJcbn0pO1xuY29uc3QgX3NmY19tYWluID0gLyogQF9fUFVSRV9fICovIGRlZmluZUNvbXBvbmVudCh7XG4gIC4uLl9fZGVmYXVsdF9fLFxuICBwcm9wczogcG9wcGVyQ29udGVudFByb3BzLFxuICBlbWl0czogcG9wcGVyQ29udGVudEVtaXRzLFxuICBzZXR1cChfX3Byb3BzLCB7IGV4cG9zZSwgZW1pdCB9KSB7XG4gICAgY29uc3QgcHJvcHMgPSBfX3Byb3BzO1xuICAgIGNvbnN0IHtcbiAgICAgIGZvY3VzU3RhcnRSZWYsXG4gICAgICB0cmFwcGVkLFxuICAgICAgb25Gb2N1c0FmdGVyUmVsZWFzZWQsXG4gICAgICBvbkZvY3VzQWZ0ZXJUcmFwcGVkLFxuICAgICAgb25Gb2N1c0luVHJhcCxcbiAgICAgIG9uRm9jdXNvdXRQcmV2ZW50ZWQsXG4gICAgICBvblJlbGVhc2VSZXF1ZXN0ZWRcbiAgICB9ID0gdXNlUG9wcGVyQ29udGVudEZvY3VzVHJhcChwcm9wcywgZW1pdCk7XG4gICAgY29uc3QgeyBhdHRyaWJ1dGVzLCBhcnJvd1JlZiwgY29udGVudFJlZiwgc3R5bGVzLCBpbnN0YW5jZVJlZiwgcm9sZSwgdXBkYXRlIH0gPSB1c2VQb3BwZXJDb250ZW50KHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBhcmlhTW9kYWwsXG4gICAgICBhcnJvd1N0eWxlLFxuICAgICAgY29udGVudEF0dHJzLFxuICAgICAgY29udGVudENsYXNzLFxuICAgICAgY29udGVudFN0eWxlLFxuICAgICAgdXBkYXRlWkluZGV4XG4gICAgfSA9IHVzZVBvcHBlckNvbnRlbnRET00ocHJvcHMsIHtcbiAgICAgIHN0eWxlcyxcbiAgICAgIGF0dHJpYnV0ZXMsXG4gICAgICByb2xlXG4gICAgfSk7XG4gICAgY29uc3QgZm9ybUl0ZW1Db250ZXh0ID0gaW5qZWN0KGZvcm1JdGVtQ29udGV4dEtleSwgdm9pZCAwKTtcbiAgICBjb25zdCBhcnJvd09mZnNldCA9IHJlZigpO1xuICAgIHByb3ZpZGUoUE9QUEVSX0NPTlRFTlRfSU5KRUNUSU9OX0tFWSwge1xuICAgICAgYXJyb3dTdHlsZSxcbiAgICAgIGFycm93UmVmLFxuICAgICAgYXJyb3dPZmZzZXRcbiAgICB9KTtcbiAgICBpZiAoZm9ybUl0ZW1Db250ZXh0ICYmIChmb3JtSXRlbUNvbnRleHQuYWRkSW5wdXRJZCB8fCBmb3JtSXRlbUNvbnRleHQucmVtb3ZlSW5wdXRJZCkpIHtcbiAgICAgIHByb3ZpZGUoZm9ybUl0ZW1Db250ZXh0S2V5LCB7XG4gICAgICAgIC4uLmZvcm1JdGVtQ29udGV4dCxcbiAgICAgICAgYWRkSW5wdXRJZDogTk9PUCxcbiAgICAgICAgcmVtb3ZlSW5wdXRJZDogTk9PUFxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCB0cmlnZ2VyVGFyZ2V0QXJpYVN0b3BXYXRjaCA9IHZvaWQgMDtcbiAgICBjb25zdCB1cGRhdGVQb3BwZXIgPSAoc2hvdWxkVXBkYXRlWkluZGV4ID0gdHJ1ZSkgPT4ge1xuICAgICAgdXBkYXRlKCk7XG4gICAgICBzaG91bGRVcGRhdGVaSW5kZXggJiYgdXBkYXRlWkluZGV4KCk7XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVQb3BwZXJBbGl2ZSA9ICgpID0+IHtcbiAgICAgIHVwZGF0ZVBvcHBlcihmYWxzZSk7XG4gICAgICBpZiAocHJvcHMudmlzaWJsZSAmJiBwcm9wcy5mb2N1c09uU2hvdykge1xuICAgICAgICB0cmFwcGVkLnZhbHVlID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcHMudmlzaWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgdHJhcHBlZC52YWx1ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH07XG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIHdhdGNoKCgpID0+IHByb3BzLnRyaWdnZXJUYXJnZXRFbCwgKHRyaWdnZXJUYXJnZXRFbCwgcHJldlRyaWdnZXJUYXJnZXRFbCkgPT4ge1xuICAgICAgICB0cmlnZ2VyVGFyZ2V0QXJpYVN0b3BXYXRjaCA9PSBudWxsID8gdm9pZCAwIDogdHJpZ2dlclRhcmdldEFyaWFTdG9wV2F0Y2goKTtcbiAgICAgICAgdHJpZ2dlclRhcmdldEFyaWFTdG9wV2F0Y2ggPSB2b2lkIDA7XG4gICAgICAgIGNvbnN0IGVsID0gdW5yZWYodHJpZ2dlclRhcmdldEVsIHx8IGNvbnRlbnRSZWYudmFsdWUpO1xuICAgICAgICBjb25zdCBwcmV2RWwgPSB1bnJlZihwcmV2VHJpZ2dlclRhcmdldEVsIHx8IGNvbnRlbnRSZWYudmFsdWUpO1xuICAgICAgICBpZiAoaXNFbGVtZW50KGVsKSkge1xuICAgICAgICAgIHRyaWdnZXJUYXJnZXRBcmlhU3RvcFdhdGNoID0gd2F0Y2goW3JvbGUsICgpID0+IHByb3BzLmFyaWFMYWJlbCwgYXJpYU1vZGFsLCAoKSA9PiBwcm9wcy5pZF0sICh3YXRjaGVzKSA9PiB7XG4gICAgICAgICAgICA7XG4gICAgICAgICAgICBbXCJyb2xlXCIsIFwiYXJpYS1sYWJlbFwiLCBcImFyaWEtbW9kYWxcIiwgXCJpZFwiXS5mb3JFYWNoKChrZXksIGlkeCkgPT4ge1xuICAgICAgICAgICAgICBpc05pbCh3YXRjaGVzW2lkeF0pID8gZWwucmVtb3ZlQXR0cmlidXRlKGtleSkgOiBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB3YXRjaGVzW2lkeF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgeyBpbW1lZGlhdGU6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXZFbCAhPT0gZWwgJiYgaXNFbGVtZW50KHByZXZFbCkpIHtcbiAgICAgICAgICA7XG4gICAgICAgICAgW1wicm9sZVwiLCBcImFyaWEtbGFiZWxcIiwgXCJhcmlhLW1vZGFsXCIsIFwiaWRcIl0uZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBwcmV2RWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHsgaW1tZWRpYXRlOiB0cnVlIH0pO1xuICAgICAgd2F0Y2goKCkgPT4gcHJvcHMudmlzaWJsZSwgdG9nZ2xlUG9wcGVyQWxpdmUsIHsgaW1tZWRpYXRlOiB0cnVlIH0pO1xuICAgIH0pO1xuICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgICB0cmlnZ2VyVGFyZ2V0QXJpYVN0b3BXYXRjaCA9PSBudWxsID8gdm9pZCAwIDogdHJpZ2dlclRhcmdldEFyaWFTdG9wV2F0Y2goKTtcbiAgICAgIHRyaWdnZXJUYXJnZXRBcmlhU3RvcFdhdGNoID0gdm9pZCAwO1xuICAgIH0pO1xuICAgIGV4cG9zZSh7XG4gICAgICBwb3BwZXJDb250ZW50UmVmOiBjb250ZW50UmVmLFxuICAgICAgcG9wcGVySW5zdGFuY2VSZWY6IGluc3RhbmNlUmVmLFxuICAgICAgdXBkYXRlUG9wcGVyLFxuICAgICAgY29udGVudFN0eWxlXG4gICAgfSk7XG4gICAgcmV0dXJuIChfY3R4LCBfY2FjaGUpID0+IHtcbiAgICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIG1lcmdlUHJvcHMoe1xuICAgICAgICByZWZfa2V5OiBcImNvbnRlbnRSZWZcIixcbiAgICAgICAgcmVmOiBjb250ZW50UmVmXG4gICAgICB9LCB1bnJlZihjb250ZW50QXR0cnMpLCB7XG4gICAgICAgIHN0eWxlOiB1bnJlZihjb250ZW50U3R5bGUpLFxuICAgICAgICBjbGFzczogdW5yZWYoY29udGVudENsYXNzKSxcbiAgICAgICAgdGFiaW5kZXg6IFwiLTFcIixcbiAgICAgICAgb25Nb3VzZWVudGVyOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9IChlKSA9PiBfY3R4LiRlbWl0KFwibW91c2VlbnRlclwiLCBlKSksXG4gICAgICAgIG9uTW91c2VsZWF2ZTogX2NhY2hlWzFdIHx8IChfY2FjaGVbMV0gPSAoZSkgPT4gX2N0eC4kZW1pdChcIm1vdXNlbGVhdmVcIiwgZSkpXG4gICAgICB9KSwgW1xuICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihFbEZvY3VzVHJhcCksIHtcbiAgICAgICAgICB0cmFwcGVkOiB1bnJlZih0cmFwcGVkKSxcbiAgICAgICAgICBcInRyYXAtb24tZm9jdXMtaW5cIjogdHJ1ZSxcbiAgICAgICAgICBcImZvY3VzLXRyYXAtZWxcIjogdW5yZWYoY29udGVudFJlZiksXG4gICAgICAgICAgXCJmb2N1cy1zdGFydC1lbFwiOiB1bnJlZihmb2N1c1N0YXJ0UmVmKSxcbiAgICAgICAgICBvbkZvY3VzQWZ0ZXJUcmFwcGVkOiB1bnJlZihvbkZvY3VzQWZ0ZXJUcmFwcGVkKSxcbiAgICAgICAgICBvbkZvY3VzQWZ0ZXJSZWxlYXNlZDogdW5yZWYob25Gb2N1c0FmdGVyUmVsZWFzZWQpLFxuICAgICAgICAgIG9uRm9jdXNpbjogdW5yZWYob25Gb2N1c0luVHJhcCksXG4gICAgICAgICAgb25Gb2N1c291dFByZXZlbnRlZDogdW5yZWYob25Gb2N1c291dFByZXZlbnRlZCksXG4gICAgICAgICAgb25SZWxlYXNlUmVxdWVzdGVkOiB1bnJlZihvblJlbGVhc2VSZXF1ZXN0ZWQpXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgIHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwiZGVmYXVsdFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF86IDNcbiAgICAgICAgfSwgOCwgW1widHJhcHBlZFwiLCBcImZvY3VzLXRyYXAtZWxcIiwgXCJmb2N1cy1zdGFydC1lbFwiLCBcIm9uRm9jdXNBZnRlclRyYXBwZWRcIiwgXCJvbkZvY3VzQWZ0ZXJSZWxlYXNlZFwiLCBcIm9uRm9jdXNpblwiLCBcIm9uRm9jdXNvdXRQcmV2ZW50ZWRcIiwgXCJvblJlbGVhc2VSZXF1ZXN0ZWRcIl0pXG4gICAgICBdLCAxNik7XG4gICAgfTtcbiAgfVxufSk7XG52YXIgRWxQb3BwZXJDb250ZW50ID0gLyogQF9fUFVSRV9fICovIF9leHBvcnRfc2ZjKF9zZmNfbWFpbiwgW1tcIl9fZmlsZVwiLCBcIi9ob21lL3J1bm5lci93b3JrL2VsZW1lbnQtcGx1cy9lbGVtZW50LXBsdXMvcGFja2FnZXMvY29tcG9uZW50cy9wb3BwZXIvc3JjL2NvbnRlbnQudnVlXCJdXSk7XG5cbmV4cG9ydCB7IEVsUG9wcGVyQ29udGVudCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZW50Mi5tanMubWFwXG4iLCJpbXBvcnQgeyByZWYgfSBmcm9tICd2dWUnO1xuXG5jb25zdCB1c2VQb3BwZXJDb250ZW50Rm9jdXNUcmFwID0gKHByb3BzLCBlbWl0KSA9PiB7XG4gIGNvbnN0IHRyYXBwZWQgPSByZWYoZmFsc2UpO1xuICBjb25zdCBmb2N1c1N0YXJ0UmVmID0gcmVmKCk7XG4gIGNvbnN0IG9uRm9jdXNBZnRlclRyYXBwZWQgPSAoKSA9PiB7XG4gICAgZW1pdChcImZvY3VzXCIpO1xuICB9O1xuICBjb25zdCBvbkZvY3VzQWZ0ZXJSZWxlYXNlZCA9IChldmVudCkgPT4ge1xuICAgIHZhciBfYTtcbiAgICBpZiAoKChfYSA9IGV2ZW50LmRldGFpbCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmZvY3VzUmVhc29uKSAhPT0gXCJwb2ludGVyXCIpIHtcbiAgICAgIGZvY3VzU3RhcnRSZWYudmFsdWUgPSBcImZpcnN0XCI7XG4gICAgICBlbWl0KFwiYmx1clwiKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uRm9jdXNJblRyYXAgPSAoZXZlbnQpID0+IHtcbiAgICBpZiAocHJvcHMudmlzaWJsZSAmJiAhdHJhcHBlZC52YWx1ZSkge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldCkge1xuICAgICAgICBmb2N1c1N0YXJ0UmVmLnZhbHVlID0gZXZlbnQudGFyZ2V0O1xuICAgICAgfVxuICAgICAgdHJhcHBlZC52YWx1ZSA9IHRydWU7XG4gICAgfVxuICB9O1xuICBjb25zdCBvbkZvY3Vzb3V0UHJldmVudGVkID0gKGV2ZW50KSA9PiB7XG4gICAgaWYgKCFwcm9wcy50cmFwcGluZykge1xuICAgICAgaWYgKGV2ZW50LmRldGFpbC5mb2N1c1JlYXNvbiA9PT0gXCJwb2ludGVyXCIpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIHRyYXBwZWQudmFsdWUgPSBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uUmVsZWFzZVJlcXVlc3RlZCA9ICgpID0+IHtcbiAgICB0cmFwcGVkLnZhbHVlID0gZmFsc2U7XG4gICAgZW1pdChcImNsb3NlXCIpO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGZvY3VzU3RhcnRSZWYsXG4gICAgdHJhcHBlZCxcbiAgICBvbkZvY3VzQWZ0ZXJSZWxlYXNlZCxcbiAgICBvbkZvY3VzQWZ0ZXJUcmFwcGVkLFxuICAgIG9uRm9jdXNJblRyYXAsXG4gICAgb25Gb2N1c291dFByZXZlbnRlZCxcbiAgICBvblJlbGVhc2VSZXF1ZXN0ZWRcbiAgfTtcbn07XG5cbmV4cG9ydCB7IHVzZVBvcHBlckNvbnRlbnRGb2N1c1RyYXAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1mb2N1cy10cmFwLm1qcy5tYXBcbiIsImltcG9ydCB7IGNvbXB1dGVkLCB1bnJlZiwgcmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCB7IHVzZVpJbmRleCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZS16LWluZGV4L2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VOYW1lc3BhY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2UtbmFtZXNwYWNlL2luZGV4Lm1qcyc7XG5cbmNvbnN0IHVzZVBvcHBlckNvbnRlbnRET00gPSAocHJvcHMsIHtcbiAgYXR0cmlidXRlcyxcbiAgc3R5bGVzLFxuICByb2xlXG59KSA9PiB7XG4gIGNvbnN0IHsgbmV4dFpJbmRleCB9ID0gdXNlWkluZGV4KCk7XG4gIGNvbnN0IG5zID0gdXNlTmFtZXNwYWNlKFwicG9wcGVyXCIpO1xuICBjb25zdCBjb250ZW50QXR0cnMgPSBjb21wdXRlZCgoKSA9PiB1bnJlZihhdHRyaWJ1dGVzKS5wb3BwZXIpO1xuICBjb25zdCBjb250ZW50WkluZGV4ID0gcmVmKHByb3BzLnpJbmRleCB8fCBuZXh0WkluZGV4KCkpO1xuICBjb25zdCBjb250ZW50Q2xhc3MgPSBjb21wdXRlZCgoKSA9PiBbXG4gICAgbnMuYigpLFxuICAgIG5zLmlzKFwicHVyZVwiLCBwcm9wcy5wdXJlKSxcbiAgICBucy5pcyhwcm9wcy5lZmZlY3QpLFxuICAgIHByb3BzLnBvcHBlckNsYXNzXG4gIF0pO1xuICBjb25zdCBjb250ZW50U3R5bGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHsgekluZGV4OiB1bnJlZihjb250ZW50WkluZGV4KSB9LFxuICAgICAgcHJvcHMucG9wcGVyU3R5bGUgfHwge30sXG4gICAgICB1bnJlZihzdHlsZXMpLnBvcHBlclxuICAgIF07XG4gIH0pO1xuICBjb25zdCBhcmlhTW9kYWwgPSBjb21wdXRlZCgoKSA9PiByb2xlLnZhbHVlID09PSBcImRpYWxvZ1wiID8gXCJmYWxzZVwiIDogdm9pZCAwKTtcbiAgY29uc3QgYXJyb3dTdHlsZSA9IGNvbXB1dGVkKCgpID0+IHVucmVmKHN0eWxlcykuYXJyb3cgfHwge30pO1xuICBjb25zdCB1cGRhdGVaSW5kZXggPSAoKSA9PiB7XG4gICAgY29udGVudFpJbmRleC52YWx1ZSA9IHByb3BzLnpJbmRleCB8fCBuZXh0WkluZGV4KCk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgYXJpYU1vZGFsLFxuICAgIGFycm93U3R5bGUsXG4gICAgY29udGVudEF0dHJzLFxuICAgIGNvbnRlbnRDbGFzcyxcbiAgICBjb250ZW50U3R5bGUsXG4gICAgY29udGVudFpJbmRleCxcbiAgICB1cGRhdGVaSW5kZXhcbiAgfTtcbn07XG5cbmV4cG9ydCB7IHVzZVBvcHBlckNvbnRlbnRET00gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1jb250ZW50LWRvbS5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgUG9wcGVyIGZyb20gJy4vc3JjL3BvcHBlcjIubWpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRWxQb3BwZXJBcnJvdyB9IGZyb20gJy4vc3JjL2Fycm93Mi5tanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBFbFBvcHBlclRyaWdnZXIgfSBmcm9tICcuL3NyYy90cmlnZ2VyMi5tanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBFbFBvcHBlckNvbnRlbnQgfSBmcm9tICcuL3NyYy9jb250ZW50Mi5tanMnO1xuZXhwb3J0IHsgRWZmZWN0LCBwb3BwZXJQcm9wcywgcm9sZVR5cGVzLCB1c2VQb3BwZXJQcm9wcyB9IGZyb20gJy4vc3JjL3BvcHBlci5tanMnO1xuZXhwb3J0IHsgcG9wcGVyVHJpZ2dlclByb3BzLCB1c2VQb3BwZXJUcmlnZ2VyUHJvcHMgfSBmcm9tICcuL3NyYy90cmlnZ2VyLm1qcyc7XG5leHBvcnQgeyBwb3BwZXJDb250ZW50RW1pdHMsIHBvcHBlckNvbnRlbnRQcm9wcywgcG9wcGVyQ29yZUNvbmZpZ1Byb3BzLCB1c2VQb3BwZXJDb250ZW50RW1pdHMsIHVzZVBvcHBlckNvbnRlbnRQcm9wcywgdXNlUG9wcGVyQ29yZUNvbmZpZ1Byb3BzIH0gZnJvbSAnLi9zcmMvY29udGVudC5tanMnO1xuZXhwb3J0IHsgcG9wcGVyQXJyb3dQcm9wcywgdXNlUG9wcGVyQXJyb3dQcm9wcyB9IGZyb20gJy4vc3JjL2Fycm93Lm1qcyc7XG5leHBvcnQgeyBQT1BQRVJfQ09OVEVOVF9JTkpFQ1RJT05fS0VZLCBQT1BQRVJfSU5KRUNUSU9OX0tFWSB9IGZyb20gJy4vc3JjL2NvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgd2l0aEluc3RhbGwgfSBmcm9tICcuLi8uLi91dGlscy92dWUvaW5zdGFsbC5tanMnO1xuXG5jb25zdCBFbFBvcHBlciA9IHdpdGhJbnN0YWxsKFBvcHBlcik7XG5cbmV4cG9ydCB7IEVsUG9wcGVyLCBFbFBvcHBlciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iLCJjb25zdCBUT09MVElQX0lOSkVDVElPTl9LRVkgPSBTeW1ib2woXCJlbFRvb2x0aXBcIik7XG5cbmV4cG9ydCB7IFRPT0xUSVBfSU5KRUNUSU9OX0tFWSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vcG9wcGVyL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL2hvb2tzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBidWlsZFByb3BzLCBkZWZpbmVQcm9wVHlwZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3Z1ZS9wcm9wcy9ydW50aW1lLm1qcyc7XG5pbXBvcnQgeyB1c2VEZWxheWVkVG9nZ2xlUHJvcHMgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2UtZGVsYXllZC10b2dnbGUvaW5kZXgubWpzJztcbmltcG9ydCB7IHBvcHBlckNvbnRlbnRQcm9wcyB9IGZyb20gJy4uLy4uL3BvcHBlci9zcmMvY29udGVudC5tanMnO1xuXG5jb25zdCB1c2VUb29sdGlwQ29udGVudFByb3BzID0gYnVpbGRQcm9wcyh7XG4gIC4uLnVzZURlbGF5ZWRUb2dnbGVQcm9wcyxcbiAgLi4ucG9wcGVyQ29udGVudFByb3BzLFxuICBhcHBlbmRUbzoge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKFtTdHJpbmcsIE9iamVjdF0pXG4gIH0sXG4gIGNvbnRlbnQ6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogXCJcIlxuICB9LFxuICByYXdDb250ZW50OiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9LFxuICBwZXJzaXN0ZW50OiBCb29sZWFuLFxuICBhcmlhTGFiZWw6IFN0cmluZyxcbiAgdmlzaWJsZToge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKEJvb2xlYW4pLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgdHJhbnNpdGlvbjogU3RyaW5nLFxuICB0ZWxlcG9ydGVkOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIGRpc2FibGVkOiBCb29sZWFuXG59KTtcblxuZXhwb3J0IHsgdXNlVG9vbHRpcENvbnRlbnRQcm9wcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGVudC5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uL3BvcHBlci9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi9jb25zdGFudHMvaW5kZXgubWpzJztcbmltcG9ydCB7IGJ1aWxkUHJvcHMsIGRlZmluZVByb3BUeXBlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdnVlL3Byb3BzL3J1bnRpbWUubWpzJztcbmltcG9ydCB7IHBvcHBlclRyaWdnZXJQcm9wcyB9IGZyb20gJy4uLy4uL3BvcHBlci9zcmMvdHJpZ2dlci5tanMnO1xuaW1wb3J0IHsgRVZFTlRfQ09ERSB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cy9hcmlhLm1qcyc7XG5cbmNvbnN0IHVzZVRvb2x0aXBUcmlnZ2VyUHJvcHMgPSBidWlsZFByb3BzKHtcbiAgLi4ucG9wcGVyVHJpZ2dlclByb3BzLFxuICBkaXNhYmxlZDogQm9vbGVhbixcbiAgdHJpZ2dlcjoge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKFtTdHJpbmcsIEFycmF5XSksXG4gICAgZGVmYXVsdDogXCJob3ZlclwiXG4gIH0sXG4gIHRyaWdnZXJLZXlzOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoQXJyYXkpLFxuICAgIGRlZmF1bHQ6ICgpID0+IFtFVkVOVF9DT0RFLmVudGVyLCBFVkVOVF9DT0RFLnNwYWNlXVxuICB9XG59KTtcblxuZXhwb3J0IHsgdXNlVG9vbHRpcFRyaWdnZXJQcm9wcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJpZ2dlci5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL2hvb2tzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uL3BvcHBlci9pbmRleC5tanMnO1xuaW1wb3J0IHsgdXNlVG9vbHRpcENvbnRlbnRQcm9wcyB9IGZyb20gJy4vY29udGVudC5tanMnO1xuaW1wb3J0IHsgdXNlVG9vbHRpcFRyaWdnZXJQcm9wcyB9IGZyb20gJy4vdHJpZ2dlci5tanMnO1xuaW1wb3J0IHsgY3JlYXRlTW9kZWxUb2dnbGVDb21wb3NhYmxlIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLW1vZGVsLXRvZ2dsZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9wcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3Z1ZS9wcm9wcy9ydW50aW1lLm1qcyc7XG5pbXBvcnQgeyBwb3BwZXJQcm9wcyB9IGZyb20gJy4uLy4uL3BvcHBlci9zcmMvcG9wcGVyLm1qcyc7XG5pbXBvcnQgeyBwb3BwZXJBcnJvd1Byb3BzIH0gZnJvbSAnLi4vLi4vcG9wcGVyL3NyYy9hcnJvdy5tanMnO1xuXG5jb25zdCB7XG4gIHVzZU1vZGVsVG9nZ2xlUHJvcHM6IHVzZVRvb2x0aXBNb2RlbFRvZ2dsZVByb3BzLFxuICB1c2VNb2RlbFRvZ2dsZUVtaXRzOiB1c2VUb29sdGlwTW9kZWxUb2dnbGVFbWl0cyxcbiAgdXNlTW9kZWxUb2dnbGU6IHVzZVRvb2x0aXBNb2RlbFRvZ2dsZVxufSA9IGNyZWF0ZU1vZGVsVG9nZ2xlQ29tcG9zYWJsZShcInZpc2libGVcIik7XG5jb25zdCB1c2VUb29sdGlwUHJvcHMgPSBidWlsZFByb3BzKHtcbiAgLi4ucG9wcGVyUHJvcHMsXG4gIC4uLnVzZVRvb2x0aXBNb2RlbFRvZ2dsZVByb3BzLFxuICAuLi51c2VUb29sdGlwQ29udGVudFByb3BzLFxuICAuLi51c2VUb29sdGlwVHJpZ2dlclByb3BzLFxuICAuLi5wb3BwZXJBcnJvd1Byb3BzLFxuICBzaG93QXJyb3c6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfVxufSk7XG5jb25zdCB0b29sdGlwRW1pdHMgPSBbXG4gIC4uLnVzZVRvb2x0aXBNb2RlbFRvZ2dsZUVtaXRzLFxuICBcImJlZm9yZS1zaG93XCIsXG4gIFwiYmVmb3JlLWhpZGVcIixcbiAgXCJzaG93XCIsXG4gIFwiaGlkZVwiLFxuICBcIm9wZW5cIixcbiAgXCJjbG9zZVwiXG5dO1xuXG5leHBvcnQgeyB0b29sdGlwRW1pdHMsIHVzZVRvb2x0aXBNb2RlbFRvZ2dsZSwgdXNlVG9vbHRpcE1vZGVsVG9nZ2xlRW1pdHMsIHVzZVRvb2x0aXBNb2RlbFRvZ2dsZVByb3BzLCB1c2VUb29sdGlwUHJvcHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvb2x0aXAubWpzLm1hcFxuIiwiaW1wb3J0IHsgdW5yZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0ICcuLi8uLi8uLi91dGlscy9pbmRleC5tanMnO1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJ0B2dWUvc2hhcmVkJztcblxuY29uc3QgaXNUcmlnZ2VyVHlwZSA9ICh0cmlnZ2VyLCB0eXBlKSA9PiB7XG4gIGlmIChpc0FycmF5KHRyaWdnZXIpKSB7XG4gICAgcmV0dXJuIHRyaWdnZXIuaW5jbHVkZXModHlwZSk7XG4gIH1cbiAgcmV0dXJuIHRyaWdnZXIgPT09IHR5cGU7XG59O1xuY29uc3Qgd2hlblRyaWdnZXIgPSAodHJpZ2dlciwgdHlwZSwgaGFuZGxlcikgPT4ge1xuICByZXR1cm4gKGUpID0+IHtcbiAgICBpc1RyaWdnZXJUeXBlKHVucmVmKHRyaWdnZXIpLCB0eXBlKSAmJiBoYW5kbGVyKGUpO1xuICB9O1xufTtcblxuZXhwb3J0IHsgaXNUcmlnZ2VyVHlwZSwgd2hlblRyaWdnZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLm1qcy5tYXBcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaW5qZWN0LCByZWYsIHVucmVmLCB0b1JlZiwgb3BlbkJsb2NrLCBjcmVhdGVCbG9jaywgbm9ybWFsaXplQ2xhc3MsIHdpdGhDdHgsIHJlbmRlclNsb3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0ICcuLi8uLi9wb3BwZXIvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCB7IFRPT0xUSVBfSU5KRUNUSU9OX0tFWSB9IGZyb20gJy4vY29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgeyB1c2VUb29sdGlwVHJpZ2dlclByb3BzIH0gZnJvbSAnLi90cmlnZ2VyLm1qcyc7XG5pbXBvcnQgeyB3aGVuVHJpZ2dlciB9IGZyb20gJy4vdXRpbHMubWpzJztcbmltcG9ydCBfZXhwb3J0X3NmYyBmcm9tICcuLi8uLi8uLi9fdmlydHVhbC9wbHVnaW4tdnVlX2V4cG9ydC1oZWxwZXIubWpzJztcbmltcG9ydCB7IHVzZU5hbWVzcGFjZSB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1uYW1lc3BhY2UvaW5kZXgubWpzJztcbmltcG9ydCB7IGNvbXBvc2VFdmVudEhhbmRsZXJzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZG9tL2V2ZW50Lm1qcyc7XG5pbXBvcnQgRWxQb3BwZXJUcmlnZ2VyIGZyb20gJy4uLy4uL3BvcHBlci9zcmMvdHJpZ2dlcjIubWpzJztcblxuY29uc3QgX19kZWZhdWx0X18gPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkVsVG9vbHRpcFRyaWdnZXJcIlxufSk7XG5jb25zdCBfc2ZjX21haW4gPSAvKiBAX19QVVJFX18gKi8gZGVmaW5lQ29tcG9uZW50KHtcbiAgLi4uX19kZWZhdWx0X18sXG4gIHByb3BzOiB1c2VUb29sdGlwVHJpZ2dlclByb3BzLFxuICBzZXR1cChfX3Byb3BzLCB7IGV4cG9zZSB9KSB7XG4gICAgY29uc3QgcHJvcHMgPSBfX3Byb3BzO1xuICAgIGNvbnN0IG5zID0gdXNlTmFtZXNwYWNlKFwidG9vbHRpcFwiKTtcbiAgICBjb25zdCB7IGNvbnRyb2xsZWQsIGlkLCBvcGVuLCBvbk9wZW4sIG9uQ2xvc2UsIG9uVG9nZ2xlIH0gPSBpbmplY3QoVE9PTFRJUF9JTkpFQ1RJT05fS0VZLCB2b2lkIDApO1xuICAgIGNvbnN0IHRyaWdnZXJSZWYgPSByZWYobnVsbCk7XG4gICAgY29uc3Qgc3RvcFdoZW5Db250cm9sbGVkT3JEaXNhYmxlZCA9ICgpID0+IHtcbiAgICAgIGlmICh1bnJlZihjb250cm9sbGVkKSB8fCBwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHRyaWdnZXIgPSB0b1JlZihwcm9wcywgXCJ0cmlnZ2VyXCIpO1xuICAgIGNvbnN0IG9uTW91c2VlbnRlciA9IGNvbXBvc2VFdmVudEhhbmRsZXJzKHN0b3BXaGVuQ29udHJvbGxlZE9yRGlzYWJsZWQsIHdoZW5UcmlnZ2VyKHRyaWdnZXIsIFwiaG92ZXJcIiwgb25PcGVuKSk7XG4gICAgY29uc3Qgb25Nb3VzZWxlYXZlID0gY29tcG9zZUV2ZW50SGFuZGxlcnMoc3RvcFdoZW5Db250cm9sbGVkT3JEaXNhYmxlZCwgd2hlblRyaWdnZXIodHJpZ2dlciwgXCJob3ZlclwiLCBvbkNsb3NlKSk7XG4gICAgY29uc3Qgb25DbGljayA9IGNvbXBvc2VFdmVudEhhbmRsZXJzKHN0b3BXaGVuQ29udHJvbGxlZE9yRGlzYWJsZWQsIHdoZW5UcmlnZ2VyKHRyaWdnZXIsIFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgIGlmIChlLmJ1dHRvbiA9PT0gMCkge1xuICAgICAgICBvblRvZ2dsZShlKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgY29uc3Qgb25Gb2N1cyA9IGNvbXBvc2VFdmVudEhhbmRsZXJzKHN0b3BXaGVuQ29udHJvbGxlZE9yRGlzYWJsZWQsIHdoZW5UcmlnZ2VyKHRyaWdnZXIsIFwiZm9jdXNcIiwgb25PcGVuKSk7XG4gICAgY29uc3Qgb25CbHVyID0gY29tcG9zZUV2ZW50SGFuZGxlcnMoc3RvcFdoZW5Db250cm9sbGVkT3JEaXNhYmxlZCwgd2hlblRyaWdnZXIodHJpZ2dlciwgXCJmb2N1c1wiLCBvbkNsb3NlKSk7XG4gICAgY29uc3Qgb25Db250ZXh0TWVudSA9IGNvbXBvc2VFdmVudEhhbmRsZXJzKHN0b3BXaGVuQ29udHJvbGxlZE9yRGlzYWJsZWQsIHdoZW5UcmlnZ2VyKHRyaWdnZXIsIFwiY29udGV4dG1lbnVcIiwgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG9uVG9nZ2xlKGUpO1xuICAgIH0pKTtcbiAgICBjb25zdCBvbktleWRvd24gPSBjb21wb3NlRXZlbnRIYW5kbGVycyhzdG9wV2hlbkNvbnRyb2xsZWRPckRpc2FibGVkLCAoZSkgPT4ge1xuICAgICAgY29uc3QgeyBjb2RlIH0gPSBlO1xuICAgICAgaWYgKHByb3BzLnRyaWdnZXJLZXlzLmluY2x1ZGVzKGNvZGUpKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgb25Ub2dnbGUoZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZXhwb3NlKHtcbiAgICAgIHRyaWdnZXJSZWZcbiAgICB9KTtcbiAgICByZXR1cm4gKF9jdHgsIF9jYWNoZSkgPT4ge1xuICAgICAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayh1bnJlZihFbFBvcHBlclRyaWdnZXIpLCB7XG4gICAgICAgIGlkOiB1bnJlZihpZCksXG4gICAgICAgIFwidmlydHVhbC1yZWZcIjogX2N0eC52aXJ0dWFsUmVmLFxuICAgICAgICBvcGVuOiB1bnJlZihvcGVuKSxcbiAgICAgICAgXCJ2aXJ0dWFsLXRyaWdnZXJpbmdcIjogX2N0eC52aXJ0dWFsVHJpZ2dlcmluZyxcbiAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKG5zKS5lKFwidHJpZ2dlclwiKSksXG4gICAgICAgIG9uQmx1cjogdW5yZWYob25CbHVyKSxcbiAgICAgICAgb25DbGljazogdW5yZWYob25DbGljayksXG4gICAgICAgIG9uQ29udGV4dG1lbnU6IHVucmVmKG9uQ29udGV4dE1lbnUpLFxuICAgICAgICBvbkZvY3VzOiB1bnJlZihvbkZvY3VzKSxcbiAgICAgICAgb25Nb3VzZWVudGVyOiB1bnJlZihvbk1vdXNlZW50ZXIpLFxuICAgICAgICBvbk1vdXNlbGVhdmU6IHVucmVmKG9uTW91c2VsZWF2ZSksXG4gICAgICAgIG9uS2V5ZG93bjogdW5yZWYob25LZXlkb3duKVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICByZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcImRlZmF1bHRcIilcbiAgICAgICAgXSksXG4gICAgICAgIF86IDNcbiAgICAgIH0sIDgsIFtcImlkXCIsIFwidmlydHVhbC1yZWZcIiwgXCJvcGVuXCIsIFwidmlydHVhbC10cmlnZ2VyaW5nXCIsIFwiY2xhc3NcIiwgXCJvbkJsdXJcIiwgXCJvbkNsaWNrXCIsIFwib25Db250ZXh0bWVudVwiLCBcIm9uRm9jdXNcIiwgXCJvbk1vdXNlZW50ZXJcIiwgXCJvbk1vdXNlbGVhdmVcIiwgXCJvbktleWRvd25cIl0pO1xuICAgIH07XG4gIH1cbn0pO1xudmFyIEVsVG9vbHRpcFRyaWdnZXIgPSAvKiBAX19QVVJFX18gKi8gX2V4cG9ydF9zZmMoX3NmY19tYWluLCBbW1wiX19maWxlXCIsIFwiL2hvbWUvcnVubmVyL3dvcmsvZWxlbWVudC1wbHVzL2VsZW1lbnQtcGx1cy9wYWNrYWdlcy9jb21wb25lbnRzL3Rvb2x0aXAvc3JjL3RyaWdnZXIudnVlXCJdXSk7XG5cbmV4cG9ydCB7IEVsVG9vbHRpcFRyaWdnZXIgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJpZ2dlcjIubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCByZWYsIGluamVjdCwgY29tcHV0ZWQsIG9uQmVmb3JlVW5tb3VudCwgdW5yZWYsIHdhdGNoLCBvcGVuQmxvY2ssIGNyZWF0ZUJsb2NrLCBUZWxlcG9ydCwgY3JlYXRlVk5vZGUsIFRyYW5zaXRpb24sIHdpdGhDdHgsIHdpdGhEaXJlY3RpdmVzLCBtZXJnZVByb3BzLCByZW5kZXJTbG90LCBjcmVhdGVDb21tZW50Vk5vZGUsIHZTaG93IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IG9uQ2xpY2tPdXRzaWRlIH0gZnJvbSAnQHZ1ZXVzZS9jb3JlJztcbmltcG9ydCAnLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vcG9wcGVyL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBUT09MVElQX0lOSkVDVElPTl9LRVkgfSBmcm9tICcuL2NvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgdXNlVG9vbHRpcENvbnRlbnRQcm9wcyB9IGZyb20gJy4vY29udGVudC5tanMnO1xuaW1wb3J0IF9leHBvcnRfc2ZjIGZyb20gJy4uLy4uLy4uL192aXJ0dWFsL3BsdWdpbi12dWVfZXhwb3J0LWhlbHBlci5tanMnO1xuaW1wb3J0IHsgdXNlUG9wcGVyQ29udGFpbmVySWQgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2UtcG9wcGVyLWNvbnRhaW5lci9pbmRleC5tanMnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgY29tcG9zZUV2ZW50SGFuZGxlcnMgfSBmcm9tICcuLi8uLi8uLi91dGlscy9kb20vZXZlbnQubWpzJztcbmltcG9ydCBFbFBvcHBlckNvbnRlbnQgZnJvbSAnLi4vLi4vcG9wcGVyL3NyYy9jb250ZW50Mi5tanMnO1xuXG5jb25zdCBfX2RlZmF1bHRfXyA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRWxUb29sdGlwQ29udGVudFwiLFxuICBpbmhlcml0QXR0cnM6IGZhbHNlXG59KTtcbmNvbnN0IF9zZmNfbWFpbiA9IC8qIEBfX1BVUkVfXyAqLyBkZWZpbmVDb21wb25lbnQoe1xuICAuLi5fX2RlZmF1bHRfXyxcbiAgcHJvcHM6IHVzZVRvb2x0aXBDb250ZW50UHJvcHMsXG4gIHNldHVwKF9fcHJvcHMsIHsgZXhwb3NlIH0pIHtcbiAgICBjb25zdCBwcm9wcyA9IF9fcHJvcHM7XG4gICAgY29uc3QgeyBzZWxlY3RvciB9ID0gdXNlUG9wcGVyQ29udGFpbmVySWQoKTtcbiAgICBjb25zdCBucyA9IHVzZU5hbWVzcGFjZShcInRvb2x0aXBcIik7XG4gICAgY29uc3QgY29udGVudFJlZiA9IHJlZihudWxsKTtcbiAgICBjb25zdCBkZXN0cm95ZWQgPSByZWYoZmFsc2UpO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbnRyb2xsZWQsXG4gICAgICBpZCxcbiAgICAgIG9wZW4sXG4gICAgICB0cmlnZ2VyLFxuICAgICAgb25DbG9zZSxcbiAgICAgIG9uT3BlbixcbiAgICAgIG9uU2hvdyxcbiAgICAgIG9uSGlkZSxcbiAgICAgIG9uQmVmb3JlU2hvdyxcbiAgICAgIG9uQmVmb3JlSGlkZVxuICAgIH0gPSBpbmplY3QoVE9PTFRJUF9JTkpFQ1RJT05fS0VZLCB2b2lkIDApO1xuICAgIGNvbnN0IHRyYW5zaXRpb25DbGFzcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy50cmFuc2l0aW9uIHx8IGAke25zLm5hbWVzcGFjZS52YWx1ZX0tZmFkZS1pbi1saW5lYXJgO1xuICAgIH0pO1xuICAgIGNvbnN0IHBlcnNpc3RlbnRSZWYgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwidGVzdFwiKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BzLnBlcnNpc3RlbnQ7XG4gICAgfSk7XG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgIGRlc3Ryb3llZC52YWx1ZSA9IHRydWU7XG4gICAgfSk7XG4gICAgY29uc3Qgc2hvdWxkUmVuZGVyID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHVucmVmKHBlcnNpc3RlbnRSZWYpID8gdHJ1ZSA6IHVucmVmKG9wZW4pO1xuICAgIH0pO1xuICAgIGNvbnN0IHNob3VsZFNob3cgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMuZGlzYWJsZWQgPyBmYWxzZSA6IHVucmVmKG9wZW4pO1xuICAgIH0pO1xuICAgIGNvbnN0IGFwcGVuZFRvID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLmFwcGVuZFRvIHx8IHNlbGVjdG9yLnZhbHVlO1xuICAgIH0pO1xuICAgIGNvbnN0IGNvbnRlbnRTdHlsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHZhciBfYTtcbiAgICAgIHJldHVybiAoX2EgPSBwcm9wcy5zdHlsZSkgIT0gbnVsbCA/IF9hIDoge307XG4gICAgfSk7XG4gICAgY29uc3QgYXJpYUhpZGRlbiA9IGNvbXB1dGVkKCgpID0+ICF1bnJlZihvcGVuKSk7XG4gICAgY29uc3Qgb25UcmFuc2l0aW9uTGVhdmUgPSAoKSA9PiB7XG4gICAgICBvbkhpZGUoKTtcbiAgICB9O1xuICAgIGNvbnN0IHN0b3BXaGVuQ29udHJvbGxlZCA9ICgpID0+IHtcbiAgICAgIGlmICh1bnJlZihjb250cm9sbGVkKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBjb25zdCBvbkNvbnRlbnRFbnRlciA9IGNvbXBvc2VFdmVudEhhbmRsZXJzKHN0b3BXaGVuQ29udHJvbGxlZCwgKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLmVudGVyYWJsZSAmJiB1bnJlZih0cmlnZ2VyKSA9PT0gXCJob3ZlclwiKSB7XG4gICAgICAgIG9uT3BlbigpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IG9uQ29udGVudExlYXZlID0gY29tcG9zZUV2ZW50SGFuZGxlcnMoc3RvcFdoZW5Db250cm9sbGVkLCAoKSA9PiB7XG4gICAgICBpZiAodW5yZWYodHJpZ2dlcikgPT09IFwiaG92ZXJcIikge1xuICAgICAgICBvbkNsb3NlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3Qgb25CZWZvcmVFbnRlciA9ICgpID0+IHtcbiAgICAgIHZhciBfYSwgX2I7XG4gICAgICAoX2IgPSAoX2EgPSBjb250ZW50UmVmLnZhbHVlKSA9PSBudWxsID8gdm9pZCAwIDogX2EudXBkYXRlUG9wcGVyKSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgICBvbkJlZm9yZVNob3cgPT0gbnVsbCA/IHZvaWQgMCA6IG9uQmVmb3JlU2hvdygpO1xuICAgIH07XG4gICAgY29uc3Qgb25CZWZvcmVMZWF2ZSA9ICgpID0+IHtcbiAgICAgIG9uQmVmb3JlSGlkZSA9PSBudWxsID8gdm9pZCAwIDogb25CZWZvcmVIaWRlKCk7XG4gICAgfTtcbiAgICBjb25zdCBvbkFmdGVyU2hvdyA9ICgpID0+IHtcbiAgICAgIG9uU2hvdygpO1xuICAgICAgc3RvcEhhbmRsZSA9IG9uQ2xpY2tPdXRzaWRlKGNvbXB1dGVkKCgpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gY29udGVudFJlZi52YWx1ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnBvcHBlckNvbnRlbnRSZWY7XG4gICAgICB9KSwgKCkgPT4ge1xuICAgICAgICBpZiAodW5yZWYoY29udHJvbGxlZCkpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCAkdHJpZ2dlciA9IHVucmVmKHRyaWdnZXIpO1xuICAgICAgICBpZiAoJHRyaWdnZXIgIT09IFwiaG92ZXJcIikge1xuICAgICAgICAgIG9uQ2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBvbkJsdXIgPSAoKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLnZpcnR1YWxUcmlnZ2VyaW5nKSB7XG4gICAgICAgIG9uQ2xvc2UoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGxldCBzdG9wSGFuZGxlO1xuICAgIHdhdGNoKCgpID0+IHVucmVmKG9wZW4pLCAodmFsKSA9PiB7XG4gICAgICBpZiAoIXZhbCkge1xuICAgICAgICBzdG9wSGFuZGxlID09IG51bGwgPyB2b2lkIDAgOiBzdG9wSGFuZGxlKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgZmx1c2g6IFwicG9zdFwiXG4gICAgfSk7XG4gICAgd2F0Y2goKCkgPT4gcHJvcHMuY29udGVudCwgKCkgPT4ge1xuICAgICAgdmFyIF9hLCBfYjtcbiAgICAgIChfYiA9IChfYSA9IGNvbnRlbnRSZWYudmFsdWUpID09IG51bGwgPyB2b2lkIDAgOiBfYS51cGRhdGVQb3BwZXIpID09IG51bGwgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKTtcbiAgICB9KTtcbiAgICBleHBvc2Uoe1xuICAgICAgY29udGVudFJlZlxuICAgIH0pO1xuICAgIHJldHVybiAoX2N0eCwgX2NhY2hlKSA9PiB7XG4gICAgICByZXR1cm4gb3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKFRlbGVwb3J0LCB7XG4gICAgICAgIGRpc2FibGVkOiAhX2N0eC50ZWxlcG9ydGVkLFxuICAgICAgICB0bzogdW5yZWYoYXBwZW5kVG8pXG4gICAgICB9LCBbXG4gICAgICAgIGNyZWF0ZVZOb2RlKFRyYW5zaXRpb24sIHtcbiAgICAgICAgICBuYW1lOiB1bnJlZih0cmFuc2l0aW9uQ2xhc3MpLFxuICAgICAgICAgIG9uQWZ0ZXJMZWF2ZTogb25UcmFuc2l0aW9uTGVhdmUsXG4gICAgICAgICAgb25CZWZvcmVFbnRlcixcbiAgICAgICAgICBvbkFmdGVyRW50ZXI6IG9uQWZ0ZXJTaG93LFxuICAgICAgICAgIG9uQmVmb3JlTGVhdmVcbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgdW5yZWYoc2hvdWxkUmVuZGVyKSA/IHdpdGhEaXJlY3RpdmVzKChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2sodW5yZWYoRWxQb3BwZXJDb250ZW50KSwgbWVyZ2VQcm9wcyh7XG4gICAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgICAgaWQ6IHVucmVmKGlkKSxcbiAgICAgICAgICAgICAgcmVmX2tleTogXCJjb250ZW50UmVmXCIsXG4gICAgICAgICAgICAgIHJlZjogY29udGVudFJlZlxuICAgICAgICAgICAgfSwgX2N0eC4kYXR0cnMsIHtcbiAgICAgICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IF9jdHguYXJpYUxhYmVsLFxuICAgICAgICAgICAgICBcImFyaWEtaGlkZGVuXCI6IHVucmVmKGFyaWFIaWRkZW4pLFxuICAgICAgICAgICAgICBcImJvdW5kYXJpZXMtcGFkZGluZ1wiOiBfY3R4LmJvdW5kYXJpZXNQYWRkaW5nLFxuICAgICAgICAgICAgICBcImZhbGxiYWNrLXBsYWNlbWVudHNcIjogX2N0eC5mYWxsYmFja1BsYWNlbWVudHMsXG4gICAgICAgICAgICAgIFwiZ3B1LWFjY2VsZXJhdGlvblwiOiBfY3R4LmdwdUFjY2VsZXJhdGlvbixcbiAgICAgICAgICAgICAgb2Zmc2V0OiBfY3R4Lm9mZnNldCxcbiAgICAgICAgICAgICAgcGxhY2VtZW50OiBfY3R4LnBsYWNlbWVudCxcbiAgICAgICAgICAgICAgXCJwb3BwZXItb3B0aW9uc1wiOiBfY3R4LnBvcHBlck9wdGlvbnMsXG4gICAgICAgICAgICAgIHN0cmF0ZWd5OiBfY3R4LnN0cmF0ZWd5LFxuICAgICAgICAgICAgICBlZmZlY3Q6IF9jdHguZWZmZWN0LFxuICAgICAgICAgICAgICBlbnRlcmFibGU6IF9jdHguZW50ZXJhYmxlLFxuICAgICAgICAgICAgICBwdXJlOiBfY3R4LnB1cmUsXG4gICAgICAgICAgICAgIFwicG9wcGVyLWNsYXNzXCI6IF9jdHgucG9wcGVyQ2xhc3MsXG4gICAgICAgICAgICAgIFwicG9wcGVyLXN0eWxlXCI6IFtfY3R4LnBvcHBlclN0eWxlLCB1bnJlZihjb250ZW50U3R5bGUpXSxcbiAgICAgICAgICAgICAgXCJyZWZlcmVuY2UtZWxcIjogX2N0eC5yZWZlcmVuY2VFbCxcbiAgICAgICAgICAgICAgXCJ0cmlnZ2VyLXRhcmdldC1lbFwiOiBfY3R4LnRyaWdnZXJUYXJnZXRFbCxcbiAgICAgICAgICAgICAgdmlzaWJsZTogdW5yZWYoc2hvdWxkU2hvdyksXG4gICAgICAgICAgICAgIFwiei1pbmRleFwiOiBfY3R4LnpJbmRleCxcbiAgICAgICAgICAgICAgb25Nb3VzZWVudGVyOiB1bnJlZihvbkNvbnRlbnRFbnRlciksXG4gICAgICAgICAgICAgIG9uTW91c2VsZWF2ZTogdW5yZWYob25Db250ZW50TGVhdmUpLFxuICAgICAgICAgICAgICBvbkJsdXIsXG4gICAgICAgICAgICAgIG9uQ2xvc2U6IHVucmVmKG9uQ2xvc2UpXG4gICAgICAgICAgICB9KSwge1xuICAgICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAhZGVzdHJveWVkLnZhbHVlID8gcmVuZGVyU2xvdChfY3R4LiRzbG90cywgXCJkZWZhdWx0XCIsIHsga2V5OiAwIH0pIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXzogM1xuICAgICAgICAgICAgfSwgMTYsIFtcImlkXCIsIFwiYXJpYS1sYWJlbFwiLCBcImFyaWEtaGlkZGVuXCIsIFwiYm91bmRhcmllcy1wYWRkaW5nXCIsIFwiZmFsbGJhY2stcGxhY2VtZW50c1wiLCBcImdwdS1hY2NlbGVyYXRpb25cIiwgXCJvZmZzZXRcIiwgXCJwbGFjZW1lbnRcIiwgXCJwb3BwZXItb3B0aW9uc1wiLCBcInN0cmF0ZWd5XCIsIFwiZWZmZWN0XCIsIFwiZW50ZXJhYmxlXCIsIFwicHVyZVwiLCBcInBvcHBlci1jbGFzc1wiLCBcInBvcHBlci1zdHlsZVwiLCBcInJlZmVyZW5jZS1lbFwiLCBcInRyaWdnZXItdGFyZ2V0LWVsXCIsIFwidmlzaWJsZVwiLCBcInotaW5kZXhcIiwgXCJvbk1vdXNlZW50ZXJcIiwgXCJvbk1vdXNlbGVhdmVcIiwgXCJvbkNsb3NlXCJdKSksIFtcbiAgICAgICAgICAgICAgW3ZTaG93LCB1bnJlZihzaG91bGRTaG93KV1cbiAgICAgICAgICAgIF0pIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF86IDNcbiAgICAgICAgfSwgOCwgW1wibmFtZVwiXSlcbiAgICAgIF0sIDgsIFtcImRpc2FibGVkXCIsIFwidG9cIl0pO1xuICAgIH07XG4gIH1cbn0pO1xudmFyIEVsVG9vbHRpcENvbnRlbnQgPSAvKiBAX19QVVJFX18gKi8gX2V4cG9ydF9zZmMoX3NmY19tYWluLCBbW1wiX19maWxlXCIsIFwiL2hvbWUvcnVubmVyL3dvcmsvZWxlbWVudC1wbHVzL2VsZW1lbnQtcGx1cy9wYWNrYWdlcy9jb21wb25lbnRzL3Rvb2x0aXAvc3JjL2NvbnRlbnQudnVlXCJdXSk7XG5cbmV4cG9ydCB7IEVsVG9vbHRpcENvbnRlbnQgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGVudDIubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCByZWYsIHVucmVmLCB0b1JlZiwgY29tcHV0ZWQsIHByb3ZpZGUsIHJlYWRvbmx5LCB3YXRjaCwgb25EZWFjdGl2YXRlZCwgb3BlbkJsb2NrLCBjcmVhdGVCbG9jaywgd2l0aEN0eCwgY3JlYXRlVk5vZGUsIHJlbmRlclNsb3QsIGNyZWF0ZUNvbW1lbnRWTm9kZSwgY3JlYXRlRWxlbWVudEJsb2NrLCB0b0Rpc3BsYXlTdHJpbmcgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgRWxQb3BwZXIgfSBmcm9tICcuLi8uLi9wb3BwZXIvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCB7IFRPT0xUSVBfSU5KRUNUSU9OX0tFWSB9IGZyb20gJy4vY29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgeyB1c2VUb29sdGlwUHJvcHMsIHRvb2x0aXBFbWl0cywgdXNlVG9vbHRpcE1vZGVsVG9nZ2xlIH0gZnJvbSAnLi90b29sdGlwLm1qcyc7XG5pbXBvcnQgRWxUb29sdGlwVHJpZ2dlciBmcm9tICcuL3RyaWdnZXIyLm1qcyc7XG5pbXBvcnQgRWxUb29sdGlwQ29udGVudCBmcm9tICcuL2NvbnRlbnQyLm1qcyc7XG5pbXBvcnQgX2V4cG9ydF9zZmMgZnJvbSAnLi4vLi4vLi4vX3ZpcnR1YWwvcGx1Z2luLXZ1ZV9leHBvcnQtaGVscGVyLm1qcyc7XG5pbXBvcnQgeyB1c2VQb3BwZXJDb250YWluZXIgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2UtcG9wcGVyLWNvbnRhaW5lci9pbmRleC5tanMnO1xuaW1wb3J0IHsgdXNlSWQgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2UtaWQvaW5kZXgubWpzJztcbmltcG9ydCB7IHVzZURlbGF5ZWRUb2dnbGUgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2UtZGVsYXllZC10b2dnbGUvaW5kZXgubWpzJztcbmltcG9ydCB7IGlzQm9vbGVhbiB9IGZyb20gJ0B2dWV1c2UvY29yZSc7XG5pbXBvcnQgRWxQb3BwZXJBcnJvdyBmcm9tICcuLi8uLi9wb3BwZXIvc3JjL2Fycm93Mi5tanMnO1xuXG5jb25zdCBfaG9pc3RlZF8xID0gW1wiaW5uZXJIVE1MXCJdO1xuY29uc3QgX2hvaXN0ZWRfMiA9IHsga2V5OiAxIH07XG5jb25zdCBfX2RlZmF1bHRfXyA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRWxUb29sdGlwXCJcbn0pO1xuY29uc3QgX3NmY19tYWluID0gLyogQF9fUFVSRV9fICovIGRlZmluZUNvbXBvbmVudCh7XG4gIC4uLl9fZGVmYXVsdF9fLFxuICBwcm9wczogdXNlVG9vbHRpcFByb3BzLFxuICBlbWl0czogdG9vbHRpcEVtaXRzLFxuICBzZXR1cChfX3Byb3BzLCB7IGV4cG9zZSwgZW1pdCB9KSB7XG4gICAgY29uc3QgcHJvcHMgPSBfX3Byb3BzO1xuICAgIHVzZVBvcHBlckNvbnRhaW5lcigpO1xuICAgIGNvbnN0IGlkID0gdXNlSWQoKTtcbiAgICBjb25zdCBwb3BwZXJSZWYgPSByZWYoKTtcbiAgICBjb25zdCBjb250ZW50UmVmID0gcmVmKCk7XG4gICAgY29uc3QgdXBkYXRlUG9wcGVyID0gKCkgPT4ge1xuICAgICAgdmFyIF9hO1xuICAgICAgY29uc3QgcG9wcGVyQ29tcG9uZW50ID0gdW5yZWYocG9wcGVyUmVmKTtcbiAgICAgIGlmIChwb3BwZXJDb21wb25lbnQpIHtcbiAgICAgICAgKF9hID0gcG9wcGVyQ29tcG9uZW50LnBvcHBlckluc3RhbmNlUmVmKSA9PSBudWxsID8gdm9pZCAwIDogX2EudXBkYXRlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBvcGVuID0gcmVmKGZhbHNlKTtcbiAgICBjb25zdCB0b2dnbGVSZWFzb24gPSByZWYoKTtcbiAgICBjb25zdCB7IHNob3csIGhpZGUsIGhhc1VwZGF0ZUhhbmRsZXIgfSA9IHVzZVRvb2x0aXBNb2RlbFRvZ2dsZSh7XG4gICAgICBpbmRpY2F0b3I6IG9wZW4sXG4gICAgICB0b2dnbGVSZWFzb25cbiAgICB9KTtcbiAgICBjb25zdCB7IG9uT3Blbiwgb25DbG9zZSB9ID0gdXNlRGVsYXllZFRvZ2dsZSh7XG4gICAgICBzaG93QWZ0ZXI6IHRvUmVmKHByb3BzLCBcInNob3dBZnRlclwiKSxcbiAgICAgIGhpZGVBZnRlcjogdG9SZWYocHJvcHMsIFwiaGlkZUFmdGVyXCIpLFxuICAgICAgYXV0b0Nsb3NlOiB0b1JlZihwcm9wcywgXCJhdXRvQ2xvc2VcIiksXG4gICAgICBvcGVuOiBzaG93LFxuICAgICAgY2xvc2U6IGhpZGVcbiAgICB9KTtcbiAgICBjb25zdCBjb250cm9sbGVkID0gY29tcHV0ZWQoKCkgPT4gaXNCb29sZWFuKHByb3BzLnZpc2libGUpICYmICFoYXNVcGRhdGVIYW5kbGVyLnZhbHVlKTtcbiAgICBwcm92aWRlKFRPT0xUSVBfSU5KRUNUSU9OX0tFWSwge1xuICAgICAgY29udHJvbGxlZCxcbiAgICAgIGlkLFxuICAgICAgb3BlbjogcmVhZG9ubHkob3BlbiksXG4gICAgICB0cmlnZ2VyOiB0b1JlZihwcm9wcywgXCJ0cmlnZ2VyXCIpLFxuICAgICAgb25PcGVuOiAoZXZlbnQpID0+IHtcbiAgICAgICAgb25PcGVuKGV2ZW50KTtcbiAgICAgIH0sXG4gICAgICBvbkNsb3NlOiAoZXZlbnQpID0+IHtcbiAgICAgICAgb25DbG9zZShldmVudCk7XG4gICAgICB9LFxuICAgICAgb25Ub2dnbGU6IChldmVudCkgPT4ge1xuICAgICAgICBpZiAodW5yZWYob3BlbikpIHtcbiAgICAgICAgICBvbkNsb3NlKGV2ZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbk9wZW4oZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25TaG93OiAoKSA9PiB7XG4gICAgICAgIGVtaXQoXCJzaG93XCIsIHRvZ2dsZVJlYXNvbi52YWx1ZSk7XG4gICAgICB9LFxuICAgICAgb25IaWRlOiAoKSA9PiB7XG4gICAgICAgIGVtaXQoXCJoaWRlXCIsIHRvZ2dsZVJlYXNvbi52YWx1ZSk7XG4gICAgICB9LFxuICAgICAgb25CZWZvcmVTaG93OiAoKSA9PiB7XG4gICAgICAgIGVtaXQoXCJiZWZvcmUtc2hvd1wiLCB0b2dnbGVSZWFzb24udmFsdWUpO1xuICAgICAgfSxcbiAgICAgIG9uQmVmb3JlSGlkZTogKCkgPT4ge1xuICAgICAgICBlbWl0KFwiYmVmb3JlLWhpZGVcIiwgdG9nZ2xlUmVhc29uLnZhbHVlKTtcbiAgICAgIH0sXG4gICAgICB1cGRhdGVQb3BwZXJcbiAgICB9KTtcbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5kaXNhYmxlZCwgKGRpc2FibGVkKSA9PiB7XG4gICAgICBpZiAoZGlzYWJsZWQgJiYgb3Blbi52YWx1ZSkge1xuICAgICAgICBvcGVuLnZhbHVlID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgaXNGb2N1c0luc2lkZUNvbnRlbnQgPSAoKSA9PiB7XG4gICAgICB2YXIgX2EsIF9iO1xuICAgICAgY29uc3QgcG9wcGVyQ29udGVudCA9IChfYiA9IChfYSA9IGNvbnRlbnRSZWYudmFsdWUpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jb250ZW50UmVmKSA9PSBudWxsID8gdm9pZCAwIDogX2IucG9wcGVyQ29udGVudFJlZjtcbiAgICAgIHJldHVybiBwb3BwZXJDb250ZW50ICYmIHBvcHBlckNvbnRlbnQuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG4gICAgfTtcbiAgICBvbkRlYWN0aXZhdGVkKCgpID0+IG9wZW4udmFsdWUgJiYgaGlkZSgpKTtcbiAgICBleHBvc2Uoe1xuICAgICAgcG9wcGVyUmVmLFxuICAgICAgY29udGVudFJlZixcbiAgICAgIGlzRm9jdXNJbnNpZGVDb250ZW50LFxuICAgICAgdXBkYXRlUG9wcGVyLFxuICAgICAgb25PcGVuLFxuICAgICAgb25DbG9zZSxcbiAgICAgIGhpZGVcbiAgICB9KTtcbiAgICByZXR1cm4gKF9jdHgsIF9jYWNoZSkgPT4ge1xuICAgICAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayh1bnJlZihFbFBvcHBlciksIHtcbiAgICAgICAgcmVmX2tleTogXCJwb3BwZXJSZWZcIixcbiAgICAgICAgcmVmOiBwb3BwZXJSZWYsXG4gICAgICAgIHJvbGU6IF9jdHgucm9sZVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICBjcmVhdGVWTm9kZShFbFRvb2x0aXBUcmlnZ2VyLCB7XG4gICAgICAgICAgICBkaXNhYmxlZDogX2N0eC5kaXNhYmxlZCxcbiAgICAgICAgICAgIHRyaWdnZXI6IF9jdHgudHJpZ2dlcixcbiAgICAgICAgICAgIFwidHJpZ2dlci1rZXlzXCI6IF9jdHgudHJpZ2dlcktleXMsXG4gICAgICAgICAgICBcInZpcnR1YWwtcmVmXCI6IF9jdHgudmlydHVhbFJlZixcbiAgICAgICAgICAgIFwidmlydHVhbC10cmlnZ2VyaW5nXCI6IF9jdHgudmlydHVhbFRyaWdnZXJpbmdcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgX2N0eC4kc2xvdHMuZGVmYXVsdCA/IHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwiZGVmYXVsdFwiLCB7IGtleTogMCB9KSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXzogM1xuICAgICAgICAgIH0sIDgsIFtcImRpc2FibGVkXCIsIFwidHJpZ2dlclwiLCBcInRyaWdnZXIta2V5c1wiLCBcInZpcnR1YWwtcmVmXCIsIFwidmlydHVhbC10cmlnZ2VyaW5nXCJdKSxcbiAgICAgICAgICBjcmVhdGVWTm9kZShFbFRvb2x0aXBDb250ZW50LCB7XG4gICAgICAgICAgICByZWZfa2V5OiBcImNvbnRlbnRSZWZcIixcbiAgICAgICAgICAgIHJlZjogY29udGVudFJlZixcbiAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiBfY3R4LmFyaWFMYWJlbCxcbiAgICAgICAgICAgIFwiYm91bmRhcmllcy1wYWRkaW5nXCI6IF9jdHguYm91bmRhcmllc1BhZGRpbmcsXG4gICAgICAgICAgICBjb250ZW50OiBfY3R4LmNvbnRlbnQsXG4gICAgICAgICAgICBkaXNhYmxlZDogX2N0eC5kaXNhYmxlZCxcbiAgICAgICAgICAgIGVmZmVjdDogX2N0eC5lZmZlY3QsXG4gICAgICAgICAgICBlbnRlcmFibGU6IF9jdHguZW50ZXJhYmxlLFxuICAgICAgICAgICAgXCJmYWxsYmFjay1wbGFjZW1lbnRzXCI6IF9jdHguZmFsbGJhY2tQbGFjZW1lbnRzLFxuICAgICAgICAgICAgXCJoaWRlLWFmdGVyXCI6IF9jdHguaGlkZUFmdGVyLFxuICAgICAgICAgICAgXCJncHUtYWNjZWxlcmF0aW9uXCI6IF9jdHguZ3B1QWNjZWxlcmF0aW9uLFxuICAgICAgICAgICAgb2Zmc2V0OiBfY3R4Lm9mZnNldCxcbiAgICAgICAgICAgIHBlcnNpc3RlbnQ6IF9jdHgucGVyc2lzdGVudCxcbiAgICAgICAgICAgIFwicG9wcGVyLWNsYXNzXCI6IF9jdHgucG9wcGVyQ2xhc3MsXG4gICAgICAgICAgICBcInBvcHBlci1zdHlsZVwiOiBfY3R4LnBvcHBlclN0eWxlLFxuICAgICAgICAgICAgcGxhY2VtZW50OiBfY3R4LnBsYWNlbWVudCxcbiAgICAgICAgICAgIFwicG9wcGVyLW9wdGlvbnNcIjogX2N0eC5wb3BwZXJPcHRpb25zLFxuICAgICAgICAgICAgcHVyZTogX2N0eC5wdXJlLFxuICAgICAgICAgICAgXCJyYXctY29udGVudFwiOiBfY3R4LnJhd0NvbnRlbnQsXG4gICAgICAgICAgICBcInJlZmVyZW5jZS1lbFwiOiBfY3R4LnJlZmVyZW5jZUVsLFxuICAgICAgICAgICAgXCJ0cmlnZ2VyLXRhcmdldC1lbFwiOiBfY3R4LnRyaWdnZXJUYXJnZXRFbCxcbiAgICAgICAgICAgIFwic2hvdy1hZnRlclwiOiBfY3R4LnNob3dBZnRlcixcbiAgICAgICAgICAgIHN0cmF0ZWd5OiBfY3R4LnN0cmF0ZWd5LFxuICAgICAgICAgICAgdGVsZXBvcnRlZDogX2N0eC50ZWxlcG9ydGVkLFxuICAgICAgICAgICAgdHJhbnNpdGlvbjogX2N0eC50cmFuc2l0aW9uLFxuICAgICAgICAgICAgXCJ2aXJ0dWFsLXRyaWdnZXJpbmdcIjogX2N0eC52aXJ0dWFsVHJpZ2dlcmluZyxcbiAgICAgICAgICAgIFwiei1pbmRleFwiOiBfY3R4LnpJbmRleCxcbiAgICAgICAgICAgIFwiYXBwZW5kLXRvXCI6IF9jdHguYXBwZW5kVG9cbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgcmVuZGVyU2xvdChfY3R4LiRzbG90cywgXCJjb250ZW50XCIsIHt9LCAoKSA9PiBbXG4gICAgICAgICAgICAgICAgX2N0eC5yYXdDb250ZW50ID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgICAgICAgIGlubmVySFRNTDogX2N0eC5jb250ZW50XG4gICAgICAgICAgICAgICAgfSwgbnVsbCwgOCwgX2hvaXN0ZWRfMSkpIDogKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJzcGFuXCIsIF9ob2lzdGVkXzIsIHRvRGlzcGxheVN0cmluZyhfY3R4LmNvbnRlbnQpLCAxKSlcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIF9jdHguc2hvd0Fycm93ID8gKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayh1bnJlZihFbFBvcHBlckFycm93KSwge1xuICAgICAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgICAgICBcImFycm93LW9mZnNldFwiOiBfY3R4LmFycm93T2Zmc2V0XG4gICAgICAgICAgICAgIH0sIG51bGwsIDgsIFtcImFycm93LW9mZnNldFwiXSkpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfOiAzXG4gICAgICAgICAgfSwgOCwgW1wiYXJpYS1sYWJlbFwiLCBcImJvdW5kYXJpZXMtcGFkZGluZ1wiLCBcImNvbnRlbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVmZmVjdFwiLCBcImVudGVyYWJsZVwiLCBcImZhbGxiYWNrLXBsYWNlbWVudHNcIiwgXCJoaWRlLWFmdGVyXCIsIFwiZ3B1LWFjY2VsZXJhdGlvblwiLCBcIm9mZnNldFwiLCBcInBlcnNpc3RlbnRcIiwgXCJwb3BwZXItY2xhc3NcIiwgXCJwb3BwZXItc3R5bGVcIiwgXCJwbGFjZW1lbnRcIiwgXCJwb3BwZXItb3B0aW9uc1wiLCBcInB1cmVcIiwgXCJyYXctY29udGVudFwiLCBcInJlZmVyZW5jZS1lbFwiLCBcInRyaWdnZXItdGFyZ2V0LWVsXCIsIFwic2hvdy1hZnRlclwiLCBcInN0cmF0ZWd5XCIsIFwidGVsZXBvcnRlZFwiLCBcInRyYW5zaXRpb25cIiwgXCJ2aXJ0dWFsLXRyaWdnZXJpbmdcIiwgXCJ6LWluZGV4XCIsIFwiYXBwZW5kLXRvXCJdKVxuICAgICAgICBdKSxcbiAgICAgICAgXzogM1xuICAgICAgfSwgOCwgW1wicm9sZVwiXSk7XG4gICAgfTtcbiAgfVxufSk7XG52YXIgVG9vbHRpcCA9IC8qIEBfX1BVUkVfXyAqLyBfZXhwb3J0X3NmYyhfc2ZjX21haW4sIFtbXCJfX2ZpbGVcIiwgXCIvaG9tZS9ydW5uZXIvd29yay9lbGVtZW50LXBsdXMvZWxlbWVudC1wbHVzL3BhY2thZ2VzL2NvbXBvbmVudHMvdG9vbHRpcC9zcmMvdG9vbHRpcC52dWVcIl1dKTtcblxuZXhwb3J0IHsgVG9vbHRpcCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b29sdGlwMi5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuL3NyYy90b29sdGlwMi5tanMnO1xuZXhwb3J0IHsgdG9vbHRpcEVtaXRzLCB1c2VUb29sdGlwTW9kZWxUb2dnbGUsIHVzZVRvb2x0aXBNb2RlbFRvZ2dsZUVtaXRzLCB1c2VUb29sdGlwTW9kZWxUb2dnbGVQcm9wcywgdXNlVG9vbHRpcFByb3BzIH0gZnJvbSAnLi9zcmMvdG9vbHRpcC5tanMnO1xuZXhwb3J0IHsgdXNlVG9vbHRpcFRyaWdnZXJQcm9wcyB9IGZyb20gJy4vc3JjL3RyaWdnZXIubWpzJztcbmV4cG9ydCB7IHVzZVRvb2x0aXBDb250ZW50UHJvcHMgfSBmcm9tICcuL3NyYy9jb250ZW50Lm1qcyc7XG5leHBvcnQgeyBUT09MVElQX0lOSkVDVElPTl9LRVkgfSBmcm9tICcuL3NyYy9jb25zdGFudHMubWpzJztcbmltcG9ydCB7IHdpdGhJbnN0YWxsIH0gZnJvbSAnLi4vLi4vdXRpbHMvdnVlL2luc3RhbGwubWpzJztcblxuY29uc3QgRWxUb29sdGlwID0gd2l0aEluc3RhbGwoVG9vbHRpcCk7XG5cbmV4cG9ydCB7IEVsVG9vbHRpcCwgRWxUb29sdGlwIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJjb21wb3NlRXZlbnRIYW5kbGVycyIsInRoZWlyc0hhbmRsZXIiLCJvdXJzSGFuZGxlciIsImNoZWNrRm9yRGVmYXVsdFByZXZlbnRlZCIsImV2ZW50Iiwic2hvdWxkUHJldmVudCIsIndoZW5Nb3VzZSIsImhhbmRsZXIiLCJlIiwicG9pbnRlclR5cGUiLCJpc05pbCIsInZhbHVlIiwiX3Byb3AiLCJidWlsZFByb3AiLCJ0eXBlIiwiZGVmaW5lUHJvcFR5cGUiLCJCb29sZWFuIiwiZGVmYXVsdCIsIl9ldmVudCIsIkZ1bmN0aW9uIiwiY3JlYXRlTW9kZWxUb2dnbGVDb21wb3NhYmxlIiwibmFtZSIsInVwZGF0ZUV2ZW50S2V5IiwidXBkYXRlRXZlbnRLZXlSYXciLCJ1c2VNb2RlbFRvZ2dsZSIsImluZGljYXRvciIsInRvZ2dsZVJlYXNvbiIsInNob3VsZEhpZGVXaGVuUm91dGVDaGFuZ2VzIiwic2hvdWxkUHJvY2VlZCIsIm9uU2hvdyIsIm9uSGlkZSIsImluc3RhbmNlIiwiZ2V0Q3VycmVudEluc3RhbmNlIiwiZW1pdCIsInByb3BzIiwiaGFzVXBkYXRlSGFuZGxlciIsImNvbXB1dGVkIiwiaXNGdW5jdGlvbiIsImlzTW9kZWxCaW5kaW5nQWJzZW50IiwiZG9TaG93IiwiZG9IaWRlIiwic2hvdyIsImRpc2FibGVkIiwic2hvdWxkRW1pdCIsImlzQ2xpZW50IiwiaGlkZSIsIm9uQ2hhbmdlIiwidmFsIiwiaXNCb29sZWFuIiwid2F0Y2giLCJhcHBDb250ZXh0IiwiY29uZmlnIiwiZ2xvYmFsUHJvcGVydGllcyIsIiRyb3V0ZSIsInByb3h5Iiwib25Nb3VudGVkIiwidG9nZ2xlIiwidXNlTW9kZWxUb2dnbGVQcm9wcyIsInVzZU1vZGVsVG9nZ2xlRW1pdHMiLCJFIiwiUiIsIlciLCJQIiwibWUiLCJHIiwiVSIsIkoiLCJYZSIsImplIiwiSyIsIlllIiwiRGUiLCJyZWR1Y2UiLCJ0IiwiY29uY2F0IiwiRWUiLCJvdCIsIkMiLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwiSCIsIndpbmRvdyIsInRvU3RyaW5nIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiUSIsIkVsZW1lbnQiLCJCIiwiSFRNTEVsZW1lbnQiLCJQZSIsIlNoYWRvd1Jvb3QiLCJBZSIsImVuYWJsZWQiLCJwaGFzZSIsImZuIiwic3RhdGUiLCJPYmplY3QiLCJrZXlzIiwiZWxlbWVudHMiLCJmb3JFYWNoIiwibiIsInIiLCJzdHlsZXMiLCJvIiwiYXR0cmlidXRlcyIsImkiLCJhc3NpZ24iLCJzdHlsZSIsImEiLCJzIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiZWZmZWN0IiwicG9wcGVyIiwicG9zaXRpb24iLCJvcHRpb25zIiwic3RyYXRlZ3kiLCJsZWZ0IiwidG9wIiwibWFyZ2luIiwiYXJyb3ciLCJyZWZlcmVuY2UiLCJoYXNPd25Qcm9wZXJ0eSIsImYiLCJjIiwicmVxdWlyZXMiLCJxIiwic3BsaXQiLCJYIiwiTWF0aCIsIm1heCIsInZlIiwibWluIiwiWiIsInJvdW5kIiwiZWUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXRXaWR0aCIsIndpZHRoIiwiaGVpZ2h0IiwicmlnaHQiLCJib3R0b20iLCJ4IiwieSIsImtlIiwiYWJzIiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsIml0IiwiZ2V0Um9vdE5vZGUiLCJjb250YWlucyIsImlzU2FtZU5vZGUiLCJwYXJlbnROb2RlIiwiaG9zdCIsIk4iLCJnZXRDb21wdXRlZFN0eWxlIiwiV3QiLCJpbmRleE9mIiwiSSIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiZ2UiLCJhc3NpZ25lZFNsb3QiLCJhdCIsIm9mZnNldFBhcmVudCIsInNlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidHJhbnNmb3JtIiwicGVyc3BlY3RpdmUiLCJjb250YWluIiwid2lsbENoYW5nZSIsImZpbHRlciIsIkJ0IiwiTGUiLCJmZSIsImZ0IiwiY3QiLCJwdCIsIm1vZGlmaWVyc0RhdGEiLCJwb3BwZXJPZmZzZXRzIiwicGxhY2VtZW50IiwidSIsIm0iLCJyZWN0cyIsIlR0IiwicGFkZGluZyIsInYiLCJsIiwiaCIsInAiLCJnIiwiY2xpZW50SGVpZ2h0IiwiY2xpZW50V2lkdGgiLCIkIiwiZCIsImIiLCJ3IiwiTyIsImoiLCJjZW50ZXJPZmZzZXQiLCJlbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInJlcXVpcmVzSWZFeGlzdHMiLCJ0ZSIsInF0IiwidXQiLCJwb3BwZXJSZWN0IiwidmFyaWF0aW9uIiwib2Zmc2V0cyIsImdwdUFjY2VsZXJhdGlvbiIsImFkYXB0aXZlIiwicm91bmRPZmZzZXRzIiwiaXNGaXhlZCIsInZpc3VhbFZpZXdwb3J0IiwiTCIsIkQiLCJTIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIlZ0IiwiTWUiLCJkYXRhIiwieWUiLCJwYXNzaXZlIiwiUmUiLCJzY3JvbGwiLCJyZXNpemUiLCJzY3JvbGxQYXJlbnRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInVwZGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfdCIsImJlIiwicmVwbGFjZSIsInp0Iiwic3RhcnQiLCJlbmQiLCJsdCIsIldlIiwic2Nyb2xsTGVmdCIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsVG9wIiwicGFnZVlPZmZzZXQiLCJCZSIsIlNlIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJ0ZXN0IiwiZHQiLCJib2R5IiwiY2UiLCJUZSIsImh0IiwiRnQiLCJjbGllbnRUb3AiLCJjbGllbnRMZWZ0IiwiWHQiLCJzY3JvbGxXaWR0aCIsInNjcm9sbEhlaWdodCIsImRpcmVjdGlvbiIsIlV0IiwiR3QiLCJZdCIsIm10IiwibmUiLCJib3VuZGFyeSIsInJvb3RCb3VuZGFyeSIsImVsZW1lbnRDb250ZXh0IiwiYWx0Qm91bmRhcnkiLCJjb250ZXh0RWxlbWVudCIsIkEiLCJvZmZzZXQiLCJrIiwidnQiLCJfc2tpcCIsIm1haW5BeGlzIiwiYWx0QXhpcyIsImZhbGxiYWNrUGxhY2VtZW50cyIsImZsaXBWYXJpYXRpb25zIiwiYWxsb3dlZEF1dG9QbGFjZW1lbnRzIiwiS3QiLCJ6IiwiViIsImxlbmd0aCIsInNvcnQiLCJKdCIsIk1hcCIsInJlIiwib2UiLCJNIiwiVCIsInBlIiwiXyIsInB1c2giLCJldmVyeSIsInNldCIsInhlIiwiZmluZCIsImRlIiwiYWUiLCJnZXQiLCJzbGljZSIsIlkiLCJpZSIsInJlc2V0IiwiZ3QiLCJ5dCIsInNvbWUiLCJidCIsInByZXZlbnRPdmVyZmxvdyIsInJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyIsInBvcHBlckVzY2FwZU9mZnNldHMiLCJpc1JlZmVyZW5jZUhpZGRlbiIsImhhc1BvcHBlckVzY2FwZWQiLCJ3dCIsImVuIiwiSGUiLCJ4dCIsInRldGhlciIsInRldGhlck9mZnNldCIsInJuIiwidWUiLCJsZSIsImp0IiwiRHQiLCJPZSIsIkV0IiwiQ2UiLCJBdCIsInFlIiwiVmUiLCJrdCIsIkx0IiwiRiIsImhlIiwiTmUiLCJJZSIsIiRlIiwiX2UiLCJ6ZSIsIkZlIiwiVWUiLCJTdCIsImNuIiwiYW4iLCJzbiIsInBuIiwiU2V0IiwiYWRkIiwiaGFzIiwibG4iLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJPdCIsIm1vZGlmaWVycyIsIiR0IiwiYXJndW1lbnRzIiwiQXJyYXkiLCJ3ZSIsImRlZmF1bHRNb2RpZmllcnMiLCJkZWZhdWx0T3B0aW9ucyIsIm9yZGVyZWRNb2RpZmllcnMiLCJzZXRPcHRpb25zIiwidW4iLCJtYXAiLCJkbiIsImZvcmNlVXBkYXRlIiwiZGVzdHJveSIsIm9uRmlyc3RVcGRhdGUiLCJ5biIsInVzZVBvcHBlciIsInJlZmVyZW5jZUVsZW1lbnRSZWYiLCJwb3BwZXJFbGVtZW50UmVmIiwib3B0cyIsInN0YXRlVXBkYXRlciIsImRlcml2ZWRTdGF0ZSIsImZyb21QYWlycyIsImRlcml2ZVN0YXRlIiwic3RhdGVzIiwidW5yZWYiLCJpbnN0YW5jZVJlZiIsInNoYWxsb3dSZWYiLCJyZWYiLCJuZXdPcHRpb25zIiwiZGVlcCIsInJlZmVyZW5jZUVsZW1lbnQiLCJwb3BwZXJFbGVtZW50IiwiY3JlYXRlUG9wcGVyIiwib25CZWZvcmVVbm1vdW50IiwiX2EiLCJ1c2VUaW1lb3V0IiwidGltZW91dEhhbmRsZSIsImNhbmNlbFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJ0cnlPblNjb3BlRGlzcG9zZSIsInJlZ2lzdGVyVGltZW91dCIsImRlbGF5Iiwic2V0VGltZW91dCIsInJlZ2lzdGVyZWRFc2NhcGVIYW5kbGVycyIsImNhY2hlZEhhbmRsZXIiLCJrZXkiLCJFVkVOVF9DT0RFIiwiZXNjIiwicmVnaXN0ZXJlZEhhbmRsZXIiLCJjYWNoZWRDb250YWluZXIiLCJ1c2VQb3BwZXJDb250YWluZXJJZCIsIm5hbWVzcGFjZSIsInVzZUdldERlcml2ZWROYW1lc3BhY2UiLCJpZEluamVjdGlvbiIsInVzZUlkSW5qZWN0aW9uIiwiaWQiLCJwcmVmaXgiLCJzZWxlY3RvciIsInVzZVBvcHBlckNvbnRhaW5lciIsIm9uQmVmb3JlTW91bnQiLCJjb250YWluZXIiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVDb250YWluZXIiLCJ1c2VEZWxheWVkVG9nZ2xlUHJvcHMiLCJidWlsZFByb3BzIiwic2hvd0FmdGVyIiwiTnVtYmVyIiwiaGlkZUFmdGVyIiwiYXV0b0Nsb3NlIiwidXNlRGVsYXllZFRvZ2dsZSIsIm9wZW4iLCJjbG9zZSIsInJlZ2lzdGVyVGltZW91dEZvckF1dG9DbG9zZSIsImNhbmNlbFRpbWVvdXRGb3JBdXRvQ2xvc2UiLCJvbk9wZW4iLCJfYXV0b0Nsb3NlIiwiaXNOdW1iZXIiLCJvbkNsb3NlIiwiRk9SV0FSRF9SRUZfSU5KRUNUSU9OX0tFWSIsIlN5bWJvbCIsIlBPUFBFUl9JTkpFQ1RJT05fS0VZIiwiUE9QUEVSX0NPTlRFTlRfSU5KRUNUSU9OX0tFWSIsInBvcHBlclByb3BzIiwicm9sZSIsIlN0cmluZyIsInZhbHVlcyIsIl9fZGVmYXVsdF9fIiwiZGVmaW5lQ29tcG9uZW50IiwiaW5oZXJpdEF0dHJzIiwiUG9wcGVyIiwic2V0dXAiLCJfX3Byb3BzIiwiZXhwb3NlIiwicG9wcGVyUHJvdmlkZXMiLCJ0cmlnZ2VyUmVmIiwicG9wcGVySW5zdGFuY2VSZWYiLCJjb250ZW50UmVmIiwicmVmZXJlbmNlUmVmIiwicHJvdmlkZSIsIl9jdHgiLCJfY2FjaGUiLCJyZW5kZXJTbG90IiwiJHNsb3RzIiwicG9wcGVyQXJyb3dQcm9wcyIsImFycm93T2Zmc2V0IiwiRWxQb3BwZXJBcnJvdyIsIm5zIiwidXNlTmFtZXNwYWNlIiwiYXJyb3dSZWYiLCJhcnJvd1N0eWxlIiwiaW5qZWN0Iiwib3BlbkJsb2NrIiwiY3JlYXRlRWxlbWVudEJsb2NrIiwicmVmX2tleSIsImNsYXNzIiwibm9ybWFsaXplQ2xhc3MiLCJub3JtYWxpemVTdHlsZSIsIk9ubHlDaGlsZCIsInNsb3RzIiwiYXR0cnMiLCJmb3J3YXJkUmVmSW5qZWN0aW9uIiwiZm9yd2FyZFJlZkRpcmVjdGl2ZSIsInNldEZvcndhcmRSZWYiLCJOT09QIiwibW91bnRlZCIsImVsIiwidXBkYXRlZCIsInVubW91bnRlZCIsIl9hMiIsImRlZmF1bHRTbG90IiwiY2FsbCIsImZpcnN0TGVnaXROb2RlIiwiZmluZEZpcnN0TGVnaXRDaGlsZCIsIndpdGhEaXJlY3RpdmVzIiwiY2xvbmVWTm9kZSIsIm5vZGUiLCJjaGlsZHJlbiIsImNoaWxkIiwiaXNPYmplY3QiLCJDb21tZW50IiwiVGV4dCIsIndyYXBUZXh0Q29udGVudCIsIkZyYWdtZW50IiwiY3JlYXRlVk5vZGUiLCJwb3BwZXJUcmlnZ2VyUHJvcHMiLCJ2aXJ0dWFsUmVmIiwidmlydHVhbFRyaWdnZXJpbmciLCJvbk1vdXNlZW50ZXIiLCJvbk1vdXNlbGVhdmUiLCJvbkNsaWNrIiwib25LZXlkb3duIiwib25Gb2N1cyIsIm9uQmx1ciIsIm9uQ29udGV4dG1lbnUiLCJFbFBvcHBlclRyaWdnZXIiLCJmb3J3YXJkUmVmIiwiYXJpYUNvbnRyb2xzIiwiYXJpYUhhc3BvcHVwIiwiYXJpYURlc2NyaWJlZGJ5IiwiYXJpYUV4cGFuZGVkIiwidmlydHVhbFRyaWdnZXJBcmlhU3RvcFdhdGNoIiwidmlydHVhbEVsIiwidW5yZWZFbGVtZW50IiwiaW1tZWRpYXRlIiwicHJldkVsIiwiaXNFbGVtZW50IiwiZXZlbnROYW1lIiwid2F0Y2hlcyIsImlkeCIsImNyZWF0ZUNvbW1lbnRWTm9kZSIsImNyZWF0ZUJsb2NrIiwibWVyZ2VQcm9wcyIsIiRhdHRycyIsIndpdGhDdHgiLCJGT0NVU19BRlRFUl9UUkFQUEVEIiwiRk9DVVNfQUZURVJfUkVMRUFTRUQiLCJGT0NVU19BRlRFUl9UUkFQUEVEX09QVFMiLCJjYW5jZWxhYmxlIiwiYnViYmxlcyIsIkZPQ1VTT1VUX1BSRVZFTlRFRF9PUFRTIiwiT05fVFJBUF9GT0NVU19FVlQiLCJPTl9SRUxFQVNFX0ZPQ1VTX0VWVCIsIkZPQ1VTX1RSQVBfSU5KRUNUSU9OX0tFWSIsImZvY3VzUmVhc29uIiwibGFzdFVzZXJGb2N1c1RpbWVzdGFtcCIsImxhc3RBdXRvbWF0ZWRGb2N1c1RpbWVzdGFtcCIsImZvY3VzUmVhc29uVXNlckNvdW50Iiwib2J0YWluQWxsRm9jdXNhYmxlRWxlbWVudHMiLCJub2RlcyIsIndhbGtlciIsImNyZWF0ZVRyZWVXYWxrZXIiLCJOb2RlRmlsdGVyIiwiU0hPV19FTEVNRU5UIiwiYWNjZXB0Tm9kZSIsImlzSGlkZGVuSW5wdXQiLCJ0YWdOYW1lIiwiaGlkZGVuIiwiRklMVEVSX1NLSVAiLCJ0YWJJbmRleCIsImFjdGl2ZUVsZW1lbnQiLCJGSUxURVJfQUNDRVBUIiwibmV4dE5vZGUiLCJjdXJyZW50Tm9kZSIsImdldFZpc2libGVFbGVtZW50IiwiaXNIaWRkZW4iLCJ2aXNpYmlsaXR5IiwiZGlzcGxheSIsInBhcmVudEVsZW1lbnQiLCJ0cnlGb2N1cyIsInNob3VsZFNlbGVjdCIsImZvY3VzIiwicHJldkZvY3VzZWRFbGVtZW50IiwicHJldmVudFNjcm9sbCIsInBlcmZvcm1hbmNlIiwibm93IiwiSFRNTElucHV0RWxlbWVudCIsImlzU2VsZWN0YWJsZSIsInNlbGVjdCIsInJlbW92ZUZyb21TdGFjayIsImxpc3QiLCJpdGVtIiwiY29weSIsInNwbGljZSIsImZvY3VzYWJsZVN0YWNrIiwic3RhY2siLCJsYXllciIsImN1cnJlbnRMYXllciIsInBhdXNlIiwidW5zaGlmdCIsInJlbW92ZSIsIl9iIiwicmVzdW1lIiwiY3JlYXRlRm9jdXNhYmxlU3RhY2siLCJub3RpZnlGb2N1c1JlYXNvblBvaW50ZXIiLCJub3RpZnlGb2N1c1JlYXNvbktleWRvd24iLCJjcmVhdGVGb2N1c091dFByZXZlbnRlZEV2ZW50IiwiZGV0YWlsIiwiQ3VzdG9tRXZlbnQiLCJFbEZvY3VzVHJhcCIsIl9leHBvcnRfc2ZjIiwibG9vcCIsInRyYXBwZWQiLCJmb2N1c1RyYXBFbCIsImZvY3VzU3RhcnRFbCIsImVtaXRzIiwibGFzdEZvY3VzQmVmb3JlVHJhcHBlZCIsImxhc3RGb2N1c0FmdGVyVHJhcHBlZCIsImZvY3VzTGF5ZXIiLCJwYXVzZWQiLCJ0aGlzIiwiYWx0S2V5IiwiY3RybEtleSIsIm1ldGFLZXkiLCJjdXJyZW50VGFyZ2V0Iiwic2hpZnRLZXkiLCJpc1RhYmJpbmciLCJ0YWIiLCJjdXJyZW50Rm9jdXNpbmdFbCIsImZpcnN0IiwibGFzdCIsImZvY3VzYWJsZSIsInJldmVyc2UiLCJnZXRFZGdlcyIsImluY2x1ZGVzIiwiZm9jdXNvdXRQcmV2ZW50ZWRFdmVudCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJwcmV2ZW50RGVmYXVsdCIsImZvY3VzVHJhcFJlZiIsImZvcndhcmRSZWYyIiwib2xkRm9yd2FyZFJlZiIsIm9uRm9jdXNJbiIsIm9uRm9jdXNPdXQiLCJ0cmFwT25Gb2N1cyIsInJlbGVhc2VPbkZvY3VzIiwidHJhcENvbnRhaW5lciIsInRhcmdldCIsInJlbGF0ZWRUYXJnZXQiLCJpc0ZvY3VzZWRJblRyYXAiLCJhc3luYyIsInN0YXJ0VHJhcCIsIm5leHRUaWNrIiwiZm9jdXNFdmVudCIsIkV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImlzU3RyaW5nIiwiZm9jdXNGaXJzdERlc2NlbmRhbnQiLCJzdG9wVHJhcCIsInJlbGVhc2VkRXZlbnQiLCIkcHJvcHMiLCIkc2V0dXAiLCIkZGF0YSIsIiRvcHRpb25zIiwiaGFuZGxlS2V5ZG93biIsInBvcHBlckNvcmVDb25maWdQcm9wcyIsImJvdW5kYXJpZXNQYWRkaW5nIiwicGxhY2VtZW50cyIsInBvcHBlck9wdGlvbnMiLCJwb3BwZXJDb250ZW50UHJvcHMiLCJjbGFzc05hbWUiLCJ2aXNpYmxlIiwiZW50ZXJhYmxlIiwicHVyZSIsImZvY3VzT25TaG93IiwidHJhcHBpbmciLCJwb3BwZXJDbGFzcyIsInBvcHBlclN0eWxlIiwicmVmZXJlbmNlRWwiLCJ0cmlnZ2VyVGFyZ2V0RWwiLCJzdG9wUG9wcGVyTW91c2VFdmVudCIsImFyaWFMYWJlbCIsInpJbmRleCIsInBvcHBlckNvbnRlbnRFbWl0cyIsIm1vdXNlZW50ZXIiLCJldnQiLCJNb3VzZUV2ZW50IiwibW91c2VsZWF2ZSIsImJsdXIiLCJidWlsZFBvcHBlck9wdGlvbnMiLCJnZW5Nb2RpZmllcnMiLCJkZXJpdmVFeHRyYU1vZGlmaWVycyIsInVzZVBvcHBlckNvbnRlbnQiLCJldmVudExpc3RlbmVyTW9kaWZpZXIiLCJhcnJvd01vZGlmaWVyIiwiYXJyb3dFbCIsImNvbXB1dGVkUmVmZXJlbmNlIiwiJGVsIiwidW53cmFwTWVhc3VyYWJsZUVsIiwiRWxQb3BwZXJDb250ZW50IiwiZm9jdXNTdGFydFJlZiIsIm9uRm9jdXNBZnRlclJlbGVhc2VkIiwib25Gb2N1c0FmdGVyVHJhcHBlZCIsIm9uRm9jdXNJblRyYXAiLCJvbkZvY3Vzb3V0UHJldmVudGVkIiwib25SZWxlYXNlUmVxdWVzdGVkIiwidXNlUG9wcGVyQ29udGVudEZvY3VzVHJhcCIsImFyaWFNb2RhbCIsImNvbnRlbnRBdHRycyIsImNvbnRlbnRDbGFzcyIsImNvbnRlbnRTdHlsZSIsInVwZGF0ZVpJbmRleCIsIm5leHRaSW5kZXgiLCJ1c2VaSW5kZXgiLCJjb250ZW50WkluZGV4IiwiaXMiLCJ1c2VQb3BwZXJDb250ZW50RE9NIiwiZm9ybUl0ZW1Db250ZXh0IiwiZm9ybUl0ZW1Db250ZXh0S2V5IiwidHJpZ2dlclRhcmdldEFyaWFTdG9wV2F0Y2giLCJhZGRJbnB1dElkIiwicmVtb3ZlSW5wdXRJZCIsInVwZGF0ZVBvcHBlciIsInNob3VsZFVwZGF0ZVpJbmRleCIsInRvZ2dsZVBvcHBlckFsaXZlIiwicHJldlRyaWdnZXJUYXJnZXRFbCIsInBvcHBlckNvbnRlbnRSZWYiLCJ0YWJpbmRleCIsIiRlbWl0Iiwib25Gb2N1c2luIiwiRWxQb3BwZXIiLCJ3aXRoSW5zdGFsbCIsIlRPT0xUSVBfSU5KRUNUSU9OX0tFWSIsInVzZVRvb2x0aXBDb250ZW50UHJvcHMiLCJhcHBlbmRUbyIsImNvbnRlbnQiLCJyYXdDb250ZW50IiwicGVyc2lzdGVudCIsInRyYW5zaXRpb24iLCJ0ZWxlcG9ydGVkIiwidXNlVG9vbHRpcFRyaWdnZXJQcm9wcyIsInRyaWdnZXIiLCJ0cmlnZ2VyS2V5cyIsImVudGVyIiwic3BhY2UiLCJ1c2VUb29sdGlwTW9kZWxUb2dnbGVQcm9wcyIsInVzZVRvb2x0aXBNb2RlbFRvZ2dsZUVtaXRzIiwidXNlVG9vbHRpcE1vZGVsVG9nZ2xlIiwidXNlVG9vbHRpcFByb3BzIiwic2hvd0Fycm93IiwidG9vbHRpcEVtaXRzIiwid2hlblRyaWdnZXIiLCJpc0FycmF5IiwiaXNUcmlnZ2VyVHlwZSIsIkVsVG9vbHRpcFRyaWdnZXIiLCJjb250cm9sbGVkIiwib25Ub2dnbGUiLCJzdG9wV2hlbkNvbnRyb2xsZWRPckRpc2FibGVkIiwidG9SZWYiLCJidXR0b24iLCJvbkNvbnRleHRNZW51IiwiY29kZSIsIkVsVG9vbHRpcENvbnRlbnQiLCJkZXN0cm95ZWQiLCJvbkJlZm9yZVNob3ciLCJvbkJlZm9yZUhpZGUiLCJ0cmFuc2l0aW9uQ2xhc3MiLCJwZXJzaXN0ZW50UmVmIiwic2hvdWxkUmVuZGVyIiwic2hvdWxkU2hvdyIsImFyaWFIaWRkZW4iLCJvblRyYW5zaXRpb25MZWF2ZSIsInN0b3BXaGVuQ29udHJvbGxlZCIsIm9uQ29udGVudEVudGVyIiwib25Db250ZW50TGVhdmUiLCJvbkJlZm9yZUVudGVyIiwib25CZWZvcmVMZWF2ZSIsIm9uQWZ0ZXJTaG93Iiwic3RvcEhhbmRsZSIsIm9uQ2xpY2tPdXRzaWRlIiwiZmx1c2giLCJUZWxlcG9ydCIsInRvIiwiVHJhbnNpdGlvbiIsIm9uQWZ0ZXJMZWF2ZSIsIm9uQWZ0ZXJFbnRlciIsInZTaG93IiwiX2hvaXN0ZWRfMSIsIl9ob2lzdGVkXzIiLCJFbFRvb2x0aXAiLCJ1c2VJZCIsInBvcHBlclJlZiIsInBvcHBlckNvbXBvbmVudCIsInJlYWRvbmx5Iiwib25EZWFjdGl2YXRlZCIsImlzRm9jdXNJbnNpZGVDb250ZW50IiwicG9wcGVyQ29udGVudCIsImlubmVySFRNTCIsInRvRGlzcGxheVN0cmluZyJdLCJtYXBwaW5ncyI6ImloQkFBSyxNQUFDQSxHQUF1QixDQUFDQyxFQUFlQyxHQUFlQyw0QkFBMkIsR0FBUyxLQUN6RUMsSUFDbkIsTUFBTUMsRUFBaUMsTUFBakJKLE9BQXdCLEVBQVNBLEVBQWNHLEdBQ2pFLElBQTZCLElBQTdCRCxJQUF1Q0UsRUFDekMsT0FBc0IsTUFBZkgsT0FBc0IsRUFBU0EsRUFBWUUsRUFDbkQsRUFJQ0UsR0FBYUMsR0FDVEMsR0FBd0IsVUFBbEJBLEVBQUVDLFlBQTBCRixFQUFRQyxRQUFLLEVDVXpELFNBQVNFLEdBQU1DLEdBQ2IsT0FBZ0IsTUFBVEEsQ0FDVCxDQ2hCQSxNQUFNQyxHQUFRQyxFQUFVLENBQ3RCQyxLQUFNQyxFQUFlQyxTQUNyQkMsUUFBUyxPQUVMQyxHQUFTTCxFQUFVLENBQ3ZCQyxLQUFNQyxFQUFlSSxZQUVqQkMsR0FBK0JDLElBQ25DLE1BQU1DLEVBQWlCLFVBQVVELElBQzNCRSxFQUFvQixZQUFZRixJQTJHL0IsTUFBQSxDQUNMRyxlQXRHc0IsRUFDdEJDLFlBQ0FDLGVBQ0FDLDZCQUNBQyxnQkFDQUMsU0FDQUMsYUFFQSxN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QyxFQUFtQixPQUFRLENBQ3pEcEUsSUFBSyxFQUNMNlgsVUFBV3RVLEVBQUt3USxTQUNmLEtBQU0sRUFBR29ELE1BQWdCaFQsSUFBYUMsRUFBbUIsT0FBUWdULEdBQVlVLEdBQWdCdlUsRUFBS3dRLFNBQVUsT0FFakh4USxFQUFLc1IsV0FBYTFRLElBQWEyRCxFQUFZbkosRUFBTWtGLElBQWdCLENBQy9EN0QsSUFBSyxFQUNMLGVBQWdCdUQsRUFBS0ssYUFDcEIsS0FBTSxFQUFHLENBQUMsa0JBQW9CaUUsRUFBbUIsUUFBUSxNQUU5RDFPLEVBQUcsR0FDRixFQUFHLENBQUMsYUFBYyxxQkFBc0IsVUFBVyxXQUFZLFNBQVUsWUFBYSxzQkFBdUIsYUFBYyxtQkFBb0IsU0FBVSxhQUFjLGVBQWdCLGVBQWdCLFlBQWEsaUJBQWtCLE9BQVEsY0FBZSxlQUFnQixvQkFBcUIsYUFBYyxXQUFZLGFBQWMsYUFBYyxxQkFBc0IsVUFBVyxpQkFFOVhBLEVBQUcsR0FDRixFQUFHLENBQUMsU0FFVixJQUVrRCxDQUFDLENBQUMsU0FBVSIsInhfZ29vZ2xlX2lnbm9yZUxpc3QiOlswLDEsMiwzLDQsNSw2LDcsOCw5LDEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5LDIwLDIxLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDI5LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3XX0=
