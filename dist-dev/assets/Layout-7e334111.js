import{W as e,r as t,ad as l,E as a,av as o,cX as n,d as r,S as s,x as i,o as u,h as d,w as c,a as p,c as v,Z as m,n as h,_ as f,aa as g,g as b,$ as x,cY as w,G as y,i as C,ac as k,ag as V,K as _,aF as M,az as I,L as T,aI as $,aA as S,b3 as P,e as L,a5 as B,t as j,aL as z,a0 as A,R as E,au as R,A as O,a8 as H,ai as U,a9 as F,ab as D,ae as N,cK as q,cL as W,by as G,aH as K,a2 as Z,q as X,X as Y,al as J,I as Q,b1 as ee,F as te,cU as le,M as ae,aw as oe,b6 as ne,cZ as re,bb as se,Y as ie,aC as ue,B as de,j as ce,ah as pe,C as ve,b as me,k as he,c_ as fe,aq as ge,p as be,l as xe,bu as we,c$ as ye,d0 as Ce,ay as ke,bK as Ve,d1 as _e,d2 as Me,u as Ie,m as Te,aG as $e,bL as Se,ap as Pe,d3 as Le,d4 as Be,d5 as je,bJ as ze,d6 as Ae,d7 as Ee,d8 as Re,d9 as Oe,T as He,ao as Ue}from"./index-ec301f65.js";import{E as Fe}from"./el-overlay-b3bea032.js";import{E as De}from"./el-divider-fce3fc69.js";import{u as Ne,T as qe,E as We}from"./el-button-2b7f8e7c.js";import{T as Ge,E as Ke,a as Ze,b as Xe,_ as Ye}from"./LocaleDropdown.vue_vue_type_script_setup_true_lang-ba9112e4.js";import{_ as Je}from"./_plugin-vue_export-helper-1b428a4d.js";import{E as Qe}from"./el-switch-b64fd925.js";import{b as et,c as tt,u as lt}from"./use-dialog-3d9bc7ce.js";import{e as at,E as ot,i as nt}from"./el-popper-12ece89c.js";import{a as rt,f as st,b as it}from"./tree-b59d36bb.js";import{t as ut}from"./aria-ecee1d93.js";import{_ as dt}from"./index-8477ac27.js";import{f as ct}from"./vnode-044e379a.js";import{_ as pt}from"./logo-c7b5f71f.js";import{_ as vt}from"./avatar-e2ca6afc.js";import{E as mt}from"./el-message-box-2d68dedb.js";import"./el-input-4221e35d.js";import{c as ht}from"./index-673ee7bf.js";import"./scroll-62cdab63.js";import"./use-form-item-f00b3d1a.js";import"./constants-4fd7b236.js";import"./use-form-common-props-12176987.js";import"./useIcon-d2f39163.js";import"./refs-e3109932.js";import"./validator-bd939a12.js";import"./event-5568c9d8.js";const ft={visibilityHeight:{type:Number,default:200},target:{type:String,default:""},right:{type:Number,default:40},bottom:{type:Number,default:40}},gt={click:e=>e instanceof MouseEvent},bt="ElBacktop",xt=r({name:bt});const wt=V(k(r({...xt,props:ft,emits:gt,setup(r,{emit:k}){const V=r,_=s("backtop"),{handleClick:M,visible:I}=((r,s,i)=>{const u=e(),d=e(),c=t(!1),p=n((()=>{u.value&&(c.value=u.value.scrollTop>=r.visibilityHeight)}),300,!0);return l(d,"scroll",p),a((()=>{var e;d.value=document,u.value=document.documentElement,r.target&&(u.value=null!=(e=document.querySelector(r.target))?e:void 0,u.value||o(i,`target does not exist: ${r.target}`),d.value=u.value)})),{visible:c,handleClick:e=>{var t;null==(t=u.value)||t.scrollTo({top:0,behavior:"smooth"}),s("click",e)}}})(V,k,bt),T=i((()=>({right:`${V.right}px`,bottom:`${V.bottom}px`})));return(e,t)=>(u(),d(C,{name:`${p(_).namespace.value}-fade-in`},{default:c((()=>[p(I)?(u(),v("div",{key:0,style:m(p(T)),class:h(p(_).b()),onClick:t[0]||(t[0]=f(((...e)=>p(M)&&p(M)(...e)),["stop"]))},[g(e.$slots,"default",{},(()=>[b(p(x),{class:h(p(_).e("icon"))},{default:c((()=>[b(p(w))])),_:1},8,["class"])]))],6)):y("v-if",!0)])),_:3},8,["name"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/backtop/src/backtop.vue"]])),yt=Symbol("breadcrumbKey"),Ct=_({separator:{type:String,default:"/"},separatorIcon:{type:M}}),kt=r({name:"ElBreadcrumb"});var Vt=k(r({...kt,props:Ct,setup(e){const l=e,o=s("breadcrumb"),n=t();return I(yt,l),a((()=>{const e=n.value.querySelectorAll(`.${o.e("item")}`);e.length&&e[e.length-1].setAttribute("aria-current","page")})),(e,t)=>(u(),v("div",{ref_key:"breadcrumb",ref:n,class:h(p(o).b()),"aria-label":"Breadcrumb",role:"navigation"},[g(e.$slots,"default")],2))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/breadcrumb/src/breadcrumb.vue"]]);const _t=_({to:{type:T([String,Object]),default:""},replace:{type:Boolean,default:!1}}),Mt=r({name:"ElBreadcrumbItem"});var It=k(r({...Mt,props:_t,setup(e){const l=e,a=$(),o=S(yt,void 0),n=s("breadcrumb"),{separator:r,separatorIcon:i}=P(o),m=a.appContext.config.globalProperties.$router,f=t(),b=()=>{l.to&&m&&(l.replace?m.replace(l.to):m.push(l.to))};return(e,t)=>(u(),v("span",{class:h(p(n).e("item"))},[L("span",{ref_key:"link",ref:f,class:h([p(n).e("inner"),p(n).is("link",!!e.to)]),role:"link",onClick:b},[g(e.$slots,"default")],2),p(i)?(u(),d(p(x),{key:0,class:h(p(n).e("separator"))},{default:c((()=>[(u(),d(B(p(i))))])),_:1},8,["class"])):(u(),v("span",{key:1,class:h(p(n).e("separator")),role:"presentation"},j(p(r)),3))],2))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/breadcrumb/src/breadcrumb-item.vue"]]);const Tt=V(Vt,{BreadcrumbItem:It}),$t=z(It),St=_({...et,direction:{type:String,default:"rtl",values:["ltr","rtl","ttb","btt"]},size:{type:[String,Number],default:"30%"},withHeader:{type:Boolean,default:!0},modalFade:{type:Boolean,default:!0}}),Pt=r({name:"ElDrawer",components:{ElOverlay:Fe,ElFocusTrap:at,ElIcon:x,Close:A},inheritAttrs:!1,props:St,emits:tt,setup(e,{slots:l}){Ne({scope:"el-drawer",from:"the title slot",replacement:"the header slot",version:"3.0.0",ref:"https://element-plus.org/en-US/component/drawer.html#slots"},i((()=>!!l.title))),Ne({scope:"el-drawer",from:"custom-class",replacement:"class",version:"2.3.0",ref:"https://element-plus.org/en-US/component/drawer.html#attributes",type:"Attribute"},i((()=>!!e.customClass)));const a=t(),o=t(),n=s("drawer"),{t:r}=E(),u=i((()=>"rtl"===e.direction||"ltr"===e.direction)),d=i((()=>R(e.size)));return{...lt(e,a),drawerRef:a,focusStartRef:o,isHorizontal:u,drawerSize:d,ns:n,t:r}}}),Lt=["aria-label","aria-labelledby","aria-describedby"],Bt=["id"],jt=["aria-label"],zt=["id"];const At=V(k(Pt,[["render",function(e,t,l,a,o,n){const r=O("close"),s=O("el-icon"),i=O("el-focus-trap"),p=O("el-overlay");return u(),d(D,{to:"body",disabled:!e.appendToBody},[b(C,{name:e.ns.b("fade"),onAfterEnter:e.afterEnter,onAfterLeave:e.afterLeave,onBeforeLeave:e.beforeLeave,persisted:""},{default:c((()=>[H(b(p,{mask:e.modal,"overlay-class":e.modalClass,"z-index":e.zIndex,onClick:e.onModalClick},{default:c((()=>[b(i,{loop:"",trapped:e.visible,"focus-trap-el":e.drawerRef,"focus-start-el":e.focusStartRef,onReleaseRequested:e.onCloseRequested},{default:c((()=>[L("div",U({ref:"drawerRef","aria-modal":"true","aria-label":e.title||void 0,"aria-labelledby":e.title?void 0:e.titleId,"aria-describedby":e.bodyId},e.$attrs,{class:[e.ns.b(),e.direction,e.visible&&"open",e.customClass],style:e.isHorizontal?"width: "+e.drawerSize:"height: "+e.drawerSize,role:"dialog",onClick:t[1]||(t[1]=f((()=>{}),["stop"]))}),[L("span",{ref:"focusStartRef",class:h(e.ns.e("sr-focus")),tabindex:"-1"},null,2),e.withHeader?(u(),v("header",{key:0,class:h(e.ns.e("header"))},[e.$slots.title?g(e.$slots,"title",{key:1},(()=>[y(" DEPRECATED SLOT ")])):g(e.$slots,"header",{key:0,close:e.handleClose,titleId:e.titleId,titleClass:e.ns.e("title")},(()=>[e.$slots.title?y("v-if",!0):(u(),v("span",{key:0,id:e.titleId,role:"heading",class:h(e.ns.e("title"))},j(e.title),11,Bt))])),e.showClose?(u(),v("button",{key:2,"aria-label":e.t("el.drawer.close"),class:h(e.ns.e("close-btn")),type:"button",onClick:t[0]||(t[0]=(...t)=>e.handleClose&&e.handleClose(...t))},[b(s,{class:h(e.ns.e("close"))},{default:c((()=>[b(r)])),_:1},8,["class"])],10,jt)):y("v-if",!0)],2)):y("v-if",!0),e.rendered?(u(),v("div",{key:1,id:e.bodyId,class:h(e.ns.e("body"))},[g(e.$slots,"default")],10,zt)):y("v-if",!0),e.$slots.footer?(u(),v("div",{key:2,class:h(e.ns.e("footer"))},[g(e.$slots,"footer")],2)):y("v-if",!0)],16,Lt)])),_:3},8,["trapped","focus-trap-el","focus-start-el","onReleaseRequested"])])),_:3},8,["mask","overlay-class","z-index","onClick"]),[[F,e.visible]])])),_:3},8,["name","onAfterEnter","onAfterLeave","onBeforeLeave"])],8,["disabled"])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/drawer/src/drawer.vue"]]));var Et=k(r({name:"ElMenuCollapseTransition",setup(){const e=s("menu");return{listeners:{onBeforeEnter:e=>e.style.opacity="0.2",onEnter(t,l){q(t,`${e.namespace.value}-opacity-transition`),t.style.opacity="1",l()},onAfterEnter(t){W(t,`${e.namespace.value}-opacity-transition`),t.style.opacity=""},onBeforeLeave(t){t.dataset||(t.dataset={}),G(t,e.m("collapse"))?(W(t,e.m("collapse")),t.dataset.oldOverflow=t.style.overflow,t.dataset.scrollWidth=t.clientWidth.toString(),q(t,e.m("collapse"))):(q(t,e.m("collapse")),t.dataset.oldOverflow=t.style.overflow,t.dataset.scrollWidth=t.clientWidth.toString(),W(t,e.m("collapse"))),t.style.width=`${t.scrollWidth}px`,t.style.overflow="hidden"},onLeave(e){q(e,"horizontal-collapse-transition"),e.style.width=`${e.dataset.scrollWidth}px`}}}}}),[["render",function(e,t,l,a,o,n){return u(),d(C,U({mode:"out-in"},e.listeners),{default:c((()=>[g(e.$slots,"default")])),_:3},16)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-collapse-transition.vue"]]);function Rt(e,t){const l=i((()=>{let l=e.parent;const a=[t.value];for(;"ElMenu"!==l.type.name;)l.props.index&&a.unshift(l.props.index),l=l.parent;return a}));return{parentMenu:i((()=>{let t=e.parent;for(;t&&!["ElMenu","ElSubMenu"].includes(t.type.name);)t=t.parent;return t})),indexPath:l}}function Ot(e){return i((()=>{const t=e.backgroundColor;return t?new qe(t).shade(20).toString():""}))}const Ht=(e,t)=>{const l=s("menu");return i((()=>l.cssVarBlock({"text-color":e.textColor||"","hover-text-color":e.textColor||"","bg-color":e.backgroundColor||"","hover-bg-color":Ot(e).value||"","active-color":e.activeTextColor||"",level:`${t}`})))},Ut=_({index:{type:String,required:!0},showTimeout:{type:Number,default:300},hideTimeout:{type:Number,default:300},popperClass:String,disabled:Boolean,popperAppendToBody:{type:Boolean,default:void 0},teleported:{type:Boolean,default:void 0},popperOffset:{type:Number,default:6},expandCloseIcon:{type:M},expandOpenIcon:{type:M},collapseCloseIcon:{type:M},collapseOpenIcon:{type:M}}),Ft="ElSubMenu";var Dt=r({name:Ft,props:Ut,setup(e,{slots:l,expose:n}){Ne({from:"popper-append-to-body",replacement:"teleported",scope:Ft,version:"2.3.0",ref:"https://element-plus.org/en-US/component/menu.html#submenu-attributes"},i((()=>void 0!==e.popperAppendToBody)));const r=$(),{indexPath:u,parentMenu:d}=Rt(r,i((()=>e.index))),c=s("menu"),p=s("sub-menu"),v=S("rootMenu");v||o(Ft,"can not inject root menu");const m=S(`subMenu:${d.value.uid}`);m||o(Ft,"can not inject sub menu");const h=t({}),f=t({});let g;const b=t(!1),w=t(),y=t(null),C=i((()=>"horizontal"===A.value&&V.value?"bottom-start":"right-start")),k=i((()=>"horizontal"===A.value&&V.value||"vertical"===A.value&&!v.props.collapse?e.expandCloseIcon&&e.expandOpenIcon?P.value?e.expandOpenIcon:e.expandCloseIcon:K:e.collapseCloseIcon&&e.collapseOpenIcon?P.value?e.collapseOpenIcon:e.collapseCloseIcon:Z)),V=i((()=>0===m.level)),_=i((()=>{var t;const l=null!=(t=e.teleported)?t:e.popperAppendToBody;return void 0===l?V.value:l})),M=i((()=>v.props.collapse?`${c.namespace.value}-zoom-in-left`:`${c.namespace.value}-zoom-in-top`)),T=i((()=>"horizontal"===A.value&&V.value?["bottom-start","bottom-end","top-start","top-end","right-start","left-start"]:["right-start","left-start","bottom-start","bottom-end","top-start","top-end"])),P=i((()=>v.openedMenus.includes(e.index))),L=i((()=>{let e=!1;return Object.values(h.value).forEach((t=>{t.active&&(e=!0)})),Object.values(f.value).forEach((t=>{t.active&&(e=!0)})),e})),B=i((()=>v.props.backgroundColor||"")),j=i((()=>v.props.activeTextColor||"")),z=i((()=>v.props.textColor||"")),A=i((()=>v.props.mode)),E=X({index:e.index,indexPath:u,active:L}),R=i((()=>"horizontal"!==A.value?{color:z.value}:{borderBottomColor:L.value?v.props.activeTextColor?j.value:"":"transparent",color:L.value?j.value:z.value})),O=e=>{var t,l,a;e||null==(a=null==(l=null==(t=y.value)?void 0:t.popperRef)?void 0:l.popperInstanceRef)||a.destroy()},U=()=>{"hover"===v.props.menuTrigger&&"horizontal"===v.props.mode||v.props.collapse&&"vertical"===v.props.mode||e.disabled||v.handleSubMenuClick({index:e.index,indexPath:u.value,active:L.value})},D=(t,l=e.showTimeout)=>{var a;"focus"!==t.type&&("click"===v.props.menuTrigger&&"horizontal"===v.props.mode||!v.props.collapse&&"vertical"===v.props.mode||e.disabled||(m.mouseInChild.value=!0,null==g||g(),({stop:g}=le((()=>{v.openMenu(e.index,u.value)}),l)),_.value&&(null==(a=d.value.vnode.el)||a.dispatchEvent(new MouseEvent("mouseenter")))))},N=(t=!1)=>{var l,a;"click"===v.props.menuTrigger&&"horizontal"===v.props.mode||!v.props.collapse&&"vertical"===v.props.mode||(null==g||g(),m.mouseInChild.value=!1,({stop:g}=le((()=>!b.value&&v.closeMenu(e.index,u.value)),e.hideTimeout)),_.value&&t&&"ElSubMenu"===(null==(l=r.parent)?void 0:l.type.name)&&(null==(a=m.handleMouseleave)||a.call(m,!0)))};Y((()=>v.props.collapse),(e=>O(Boolean(e))));{const e=e=>{f.value[e.index]=e},t=e=>{delete f.value[e.index]};I(`subMenu:${r.uid}`,{addSubMenu:e,removeSubMenu:t,handleMouseleave:N,mouseInChild:b,level:m.level+1})}return n({opened:P}),a((()=>{v.addSubMenu(E),m.addSubMenu(E)})),J((()=>{m.removeSubMenu(E),v.removeSubMenu(E)})),()=>{var t;const a=[null==(t=l.title)?void 0:t.call(l),Q(x,{class:p.e("icon-arrow"),style:{transform:P.value?e.expandCloseIcon&&e.expandOpenIcon||e.collapseCloseIcon&&e.collapseOpenIcon&&v.props.collapse?"none":"rotateZ(180deg)":"none"}},{default:()=>ee(k.value)?Q(r.appContext.components[k.value]):Q(k.value)})],o=Ht(v.props,m.level+1),n=v.isMenuPopup?Q(ot,{ref:y,visible:P.value,effect:"light",pure:!0,offset:e.popperOffset,showArrow:!1,persistent:!0,popperClass:e.popperClass,placement:C.value,teleported:_.value,fallbackPlacements:T.value,transition:M.value,gpuAcceleration:!1},{content:()=>{var t;return Q("div",{class:[c.m(A.value),c.m("popup-container"),e.popperClass],onMouseenter:e=>D(e,100),onMouseleave:()=>N(!0),onFocus:e=>D(e,100)},[Q("ul",{class:[c.b(),c.m("popup"),c.m(`popup-${C.value}`)],style:o.value},[null==(t=l.default)?void 0:t.call(l)])])},default:()=>Q("div",{class:p.e("title"),style:[R.value,{backgroundColor:B.value}],onClick:U},a)}):Q(te,{},[Q("div",{class:p.e("title"),style:[R.value,{backgroundColor:B.value}],ref:w,onClick:U},a),Q(dt,{},{default:()=>{var e;return H(Q("ul",{role:"menu",class:[c.b(),c.m("inline")],style:o.value},[null==(e=l.default)?void 0:e.call(l)]),[[F,P.value]])}})]);return Q("li",{class:[p.b(),p.is("active",L.value),p.is("opened",P.value),p.is("disabled",e.disabled)],role:"menuitem",ariaHaspopup:!0,ariaExpanded:P.value,onMouseenter:D,onMouseleave:()=>N(!0),onFocus:D},[n])}}});const Nt=_({mode:{type:String,values:["horizontal","vertical"],default:"vertical"},defaultActive:{type:String,default:""},defaultOpeneds:{type:T(Array),default:()=>ae([])},uniqueOpened:Boolean,router:Boolean,menuTrigger:{type:String,values:["hover","click"],default:"hover"},collapse:Boolean,backgroundColor:String,textColor:String,activeTextColor:String,collapseTransition:{type:Boolean,default:!0},ellipsis:{type:Boolean,default:!0},popperEffect:{type:String,values:["dark","light"],default:"dark"}}),qt=e=>Array.isArray(e)&&e.every((e=>ee(e)));var Wt=r({name:"ElMenu",props:Nt,emits:{close:(e,t)=>ee(e)&&qt(t),open:(e,t)=>ee(e)&&qt(t),select:(e,t,l,a)=>ee(e)&&qt(t)&&se(l)&&(void 0===a||a instanceof Promise)},setup(e,{emit:l,slots:o,expose:n}){const r=$(),u=r.appContext.config.globalProperties.$router,d=t(),c=s("menu"),p=s("sub-menu"),v=t(-1),m=t(e.defaultOpeneds&&!e.collapse?e.defaultOpeneds.slice(0):[]),h=t(e.defaultActive),f=t({}),g=t({}),b=i((()=>"horizontal"===e.mode||"vertical"===e.mode&&e.collapse)),w=(t,a)=>{m.value.includes(t)||(e.uniqueOpened&&(m.value=m.value.filter((e=>a.includes(e)))),m.value.push(t),l("open",t,a))},y=e=>{const t=m.value.indexOf(e);-1!==t&&m.value.splice(t,1)},C=(e,t)=>{y(e),l("close",e,t)},k=({index:e,indexPath:t})=>{m.value.includes(e)?C(e,t):w(e,t)},V=t=>{("horizontal"===e.mode||e.collapse)&&(m.value=[]);const{index:a,indexPath:o}=t;if(!nt(a)&&!nt(o))if(e.router&&u){const e=t.route||a,n=u.push(e).then((e=>(e||(h.value=a),e)));l("select",a,o,{index:a,indexPath:o,route:e},n)}else h.value=a,l("select",a,o,{index:a,indexPath:o})};let _=!0;const M=()=>{const e=()=>{v.value=-1,ie((()=>{v.value=(()=>{var e,t;if(!d.value)return-1;const l=Array.from(null!=(t=null==(e=d.value)?void 0:e.childNodes)?t:[]).filter((e=>"#text"!==e.nodeName||e.nodeValue)),a=Number.parseInt(getComputedStyle(d.value).paddingLeft,10),o=Number.parseInt(getComputedStyle(d.value).paddingRight,10),n=d.value.clientWidth-a-o;let r=0,s=0;return l.forEach(((e,t)=>{r+=e.offsetWidth||0,r<=n-64&&(s=t+1)})),s===l.length?-1:s})()}))};_?e():((e,t=33.34)=>{let l;return()=>{l&&clearTimeout(l),l=setTimeout((()=>{e()}),t)}})(e)(),_=!1};let T;Y((()=>e.defaultActive),(t=>{f.value[t]||(h.value=""),(t=>{const l=f.value,a=l[t]||h.value&&l[h.value]||l[e.defaultActive];h.value=a?a.index:t})(t)})),Y((()=>e.collapse),(e=>{e&&(m.value=[])})),Y(f.value,(()=>{const t=h.value&&f.value[h.value];if(!t||"horizontal"===e.mode||e.collapse)return;t.indexPath.forEach((e=>{const t=g.value[e];t&&w(e,t.indexPath)}))})),oe((()=>{"horizontal"===e.mode&&e.ellipsis?T=ne(d,M).stop:null==T||T()}));{const l=e=>{g.value[e.index]=e},a=e=>{delete g.value[e.index]},o=e=>{f.value[e.index]=e},n=e=>{delete f.value[e.index]};I("rootMenu",X({props:e,openedMenus:m,items:f,subMenus:g,activeIndex:h,isMenuPopup:b,addMenuItem:o,removeMenuItem:n,addSubMenu:l,removeSubMenu:a,openMenu:w,closeMenu:C,handleMenuItemClick:V,handleSubMenuClick:k})),I(`subMenu:${r.uid}`,{addSubMenu:l,removeSubMenu:a,mouseInChild:t(!1),level:0})}a((()=>{"horizontal"===e.mode&&new class{constructor(e,t){this.domNode=e,this.init(t)}init(e){const t=this.domNode.childNodes;Array.from(t).forEach((t=>{1===t.nodeType&&new class{constructor(e,t){this.domNode=e,this.submenu=null,this.submenu=null,this.init(t)}init(e){this.domNode.setAttribute("tabindex","0");const t=this.domNode.querySelector(`.${e}-menu`);t&&(this.submenu=new class{constructor(e,t){this.parent=e,this.domNode=t,this.subIndex=0,this.subIndex=0,this.init()}init(){this.subMenuItems=this.domNode.querySelectorAll("li"),this.addListeners()}gotoSubIndex(e){e===this.subMenuItems.length?e=0:e<0&&(e=this.subMenuItems.length-1),this.subMenuItems[e].focus(),this.subIndex=e}addListeners(){const e=this.parent.domNode;Array.prototype.forEach.call(this.subMenuItems,(t=>{t.addEventListener("keydown",(t=>{let l=!1;switch(t.code){case N.down:this.gotoSubIndex(this.subIndex+1),l=!0;break;case N.up:this.gotoSubIndex(this.subIndex-1),l=!0;break;case N.tab:ut(e,"mouseleave");break;case N.enter:case N.space:l=!0,t.currentTarget.click()}return l&&(t.preventDefault(),t.stopPropagation()),!1}))}))}}(this,t)),this.addListeners()}addListeners(){this.domNode.addEventListener("keydown",(e=>{let t=!1;switch(e.code){case N.down:ut(e.currentTarget,"mouseenter"),this.submenu&&this.submenu.gotoSubIndex(0),t=!0;break;case N.up:ut(e.currentTarget,"mouseenter"),this.submenu&&this.submenu.gotoSubIndex(this.submenu.subMenuItems.length-1),t=!0;break;case N.tab:ut(e.currentTarget,"mouseleave");break;case N.enter:case N.space:t=!0,e.currentTarget.click()}t&&e.preventDefault()}))}}(t,e)}))}}(r.vnode.el,c.namespace.value)}));n({open:e=>{const{indexPath:t}=g.value[e];t.forEach((e=>w(e,t)))},close:y,handleResize:M});return()=>{var t,l;let a=null!=(l=null==(t=o.default)?void 0:t.call(o))?l:[];const n=[];if("horizontal"===e.mode&&d.value){const t=ct(a),l=-1===v.value?t:t.slice(0,v.value),o=-1===v.value?[]:t.slice(v.value);(null==o?void 0:o.length)&&e.ellipsis&&(a=l,n.push(Q(Dt,{index:"sub-menu-more",class:p.e("hide-arrow")},{title:()=>Q(x,{class:p.e("icon-more")},{default:()=>Q(re)}),default:()=>o})))}const r=Ht(e,0),s=Q("ul",{key:String(e.collapse),role:"menubar",ref:d,style:r.value,class:{[c.b()]:!0,[c.m(e.mode)]:!0,[c.m("collapse")]:e.collapse}},[...a,...n]);return e.collapseTransition&&"vertical"===e.mode?Q(Et,(()=>s)):s}}});const Gt=_({index:{type:T([String,null]),default:null},route:{type:T([String,Object])},disabled:Boolean}),Kt="ElMenuItem";var Zt=k(r({name:Kt,components:{ElTooltip:ot},props:Gt,emits:{click:e=>ee(e.index)&&Array.isArray(e.indexPath)},setup(e,{emit:t}){const l=$(),n=S("rootMenu"),r=s("menu"),u=s("menu-item");n||o(Kt,"can not inject root menu");const{parentMenu:d,indexPath:c}=Rt(l,ue(e,"index")),p=S(`subMenu:${d.value.uid}`);p||o(Kt,"can not inject sub menu");const v=i((()=>e.index===n.activeIndex)),m=X({index:e.index,indexPath:c,active:v});return a((()=>{p.addSubMenu(m),n.addMenuItem(m)})),J((()=>{p.removeSubMenu(m),n.removeMenuItem(m)})),{parentMenu:d,rootMenu:n,active:v,nsMenu:r,nsMenuItem:u,handleClick:()=>{e.disabled||(n.handleMenuItemClick({index:e.index,indexPath:c.value,route:e.route}),t("click",m))}}}}),[["render",function(e,t,l,a,o,n){const r=O("el-tooltip");return u(),v("li",{class:h([e.nsMenuItem.b(),e.nsMenuItem.is("active",e.active),e.nsMenuItem.is("disabled",e.disabled)]),role:"menuitem",tabindex:"-1",onClick:t[0]||(t[0]=(...t)=>e.handleClick&&e.handleClick(...t))},["ElMenu"===e.parentMenu.type.name&&e.rootMenu.props.collapse&&e.$slots.title?(u(),d(r,{key:0,effect:e.rootMenu.props.popperEffect,placement:"right","fallback-placements":["left"],persistent:""},{content:c((()=>[g(e.$slots,"title")])),default:c((()=>[L("div",{class:h(e.nsMenu.be("tooltip","trigger"))},[g(e.$slots,"default")],2)])),_:3},8,["effect"])):(u(),v(te,{key:1},[g(e.$slots,"default"),g(e.$slots,"title")],64))],2)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-item.vue"]]);var Xt=k(r({name:"ElMenuItemGroup",props:{title:String},setup:()=>({ns:s("menu-item-group")})}),[["render",function(e,t,l,a,o,n){return u(),v("li",{class:h(e.ns.b())},[L("div",{class:h(e.ns.e("title"))},[e.$slots.title?g(e.$slots,"title",{key:1}):(u(),v(te,{key:0},[de(j(e.title),1)],64))],2),L("ul",null,[g(e.$slots,"default")])],2)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-item-group.vue"]]);const Yt=V(Wt,{MenuItem:Zt,MenuItemGroup:Xt,SubMenu:Dt}),Jt=z(Zt);z(Xt);const Qt=z(Dt),el=r({__name:"Backtop",setup(e){const{getPrefixCls:t,variables:l}=ce(),a=t("backtop");return(e,t)=>(u(),d(p(wt),{class:h(`${p(a)}-backtop`),target:`.${p(l).namespace}-layout-content-scrollbar .${p(l).elNamespace}-scrollbar__wrap`},null,8,["class","target"]))}}),tl=e=>/^#([0-9a-fA-F]{3}|[0-9a-fA-f]{6})$/.test(e),ll=(e,t)=>{let l=e.toLowerCase();if(tl(e)){if(4===l.length){let e="#";for(let t=1;t<4;t+=1)e+=l.slice(t,t+1).concat(l.slice(t,t+1));l=e}const e=[];for(let t=1;t<7;t+=2)e.push(parseInt("0x"+l.slice(t,t+2)));return t?"RGBA("+e.join(",")+","+t+")":"RGB("+e.join(",")+")"}return l},al=e=>{if(!tl(e))return;const[t,l,a]=ll(e).replace(/(?:\(|\)|rgb|RGB)*/g,"").split(",").map((e=>Number(e)));return.299*t+.578*l+.114*a<192},ol=(e,t)=>(e=e.indexOf("#")>=0?e.substring(1,e.length):e,t=Math.trunc(255*t/100),`#${nl(e.substring(0,2),t)}${nl(e.substring(2,4),t)}${nl(e.substring(4,6),t)}`),nl=(e,t)=>{const l=parseInt(e,16)+t,a=l>255?255:l;return a.toString(16).length>1?a.toString(16):`0${a.toString(16)}`},rl=["onClick"],sl=Je(r({__name:"ColorRadioPicker",props:{schema:{type:Array,default:()=>[]},modelValue:pe.string.def("")},emits:["update:modelValue","change"],setup(e,{emit:l}){const a=e,{getPrefixCls:o}=ce(),n=o("color-radio-picker"),r=t(a.modelValue);return Y((()=>a.modelValue),(e=>{e!==p(r)&&(r.value=e)})),Y((()=>r.value),(e=>{l("update:modelValue",e),l("change",e)})),(t,l)=>{const a=O("Icon");return u(),v("div",{class:h([p(n),"flex flex-wrap space-x-14px"])},[(u(!0),v(te,null,ve(e.schema,((e,t)=>(u(),v("span",{key:`radio-${t}`,class:h(["w-20px h-20px cursor-pointer rounded-2px border-solid border-gray-300 border-2px text-center leading-20px mb-5px",{"is-active":r.value===e}]),style:m({background:e}),onClick:t=>r.value=e},[r.value===e?(u(),d(a,{key:0,color:"#fff",icon:"ep:check",size:16})):y("",!0)],14,rl)))),128))],2)}}}),[["__scopeId","data-v-7faf7f27"]]),il={class:"flex justify-between items-center"},ul={class:"text-14px"},dl={class:"flex justify-between items-center"},cl={class:"text-14px"},pl={class:"flex justify-between items-center"},vl={class:"text-14px"},ml={class:"flex justify-between items-center"},hl={class:"text-14px"},fl={class:"flex justify-between items-center"},gl={class:"text-14px"},bl={class:"flex justify-between items-center"},xl={class:"text-14px"},wl={class:"flex justify-between items-center"},yl={class:"text-14px"},Cl={class:"flex justify-between items-center"},kl={class:"text-14px"},Vl={class:"flex justify-between items-center"},_l={class:"text-14px"},Ml={class:"flex justify-between items-center"},Il={class:"text-14px"},Tl={class:"flex justify-between items-center"},$l={class:"text-14px"},Sl={class:"flex justify-between items-center"},Pl={class:"text-14px"},Ll={class:"flex justify-between items-center"},Bl={class:"text-14px"},jl={class:"flex justify-between items-center"},zl={class:"text-14px"},Al={class:"flex justify-between items-center"},El={class:"text-14px"},Rl=r({__name:"InterfaceDisplay",setup(e){const{getPrefixCls:l}=ce(),a=l("interface-display"),o=me(),{t:n}=he(),r=t(o.getBreadcrumb),s=e=>{o.setBreadcrumb(e)},d=t(o.getBreadcrumbIcon),c=e=>{o.setBreadcrumbIcon(e)},m=t(o.getHamburger),f=e=>{o.setHamburger(e)},g=t(o.getScreenfull),x=e=>{o.setScreenfull(e)},w=t(o.getSize),y=e=>{o.setSize(e)},C=t(o.getLocale),k=e=>{o.setLocale(e)},V=t(o.getTagsView),_=e=>{fe("--tags-view-height",e?"35px":"0px"),o.setTagsView(e)},M=t(o.getTagsViewIcon),I=e=>{o.setTagsViewIcon(e)},T=t(o.getLogo),$=e=>{o.setLogo(e)},S=t(o.getUniqueOpened),P=e=>{o.setUniqueOpened(e)},B=t(o.getFixedHeader),z=e=>{o.setFixedHeader(e)},A=t(o.getFooter),E=e=>{o.setFooter(e)},R=t(o.getGreyMode),O=e=>{o.setGreyMode(e)},H=t(o.getDynamicRouter),U=e=>{ge.info(n("setting.reExperienced")),o.setDynamicRouter(e)},F=t(o.getFixedMenu),D=e=>{o.setFixedMenu(e)},N=i((()=>o.getLayout));return Y((()=>N.value),(e=>{"top"===e&&o.setCollapse(!1)})),(e,t)=>(u(),v("div",{class:h(p(a))},[L("div",il,[L("span",ul,j(p(n)("setting.breadcrumb")),1),b(p(Qe),{modelValue:r.value,"onUpdate:modelValue":t[0]||(t[0]=e=>r.value=e),onChange:s},null,8,["modelValue"])]),L("div",dl,[L("span",cl,j(p(n)("setting.breadcrumbIcon")),1),b(p(Qe),{modelValue:d.value,"onUpdate:modelValue":t[1]||(t[1]=e=>d.value=e),onChange:c},null,8,["modelValue"])]),L("div",pl,[L("span",vl,j(p(n)("setting.hamburgerIcon")),1),b(p(Qe),{modelValue:m.value,"onUpdate:modelValue":t[2]||(t[2]=e=>m.value=e),onChange:f},null,8,["modelValue"])]),L("div",ml,[L("span",hl,j(p(n)("setting.screenfullIcon")),1),b(p(Qe),{modelValue:g.value,"onUpdate:modelValue":t[3]||(t[3]=e=>g.value=e),onChange:x},null,8,["modelValue"])]),L("div",fl,[L("span",gl,j(p(n)("setting.sizeIcon")),1),b(p(Qe),{modelValue:w.value,"onUpdate:modelValue":t[4]||(t[4]=e=>w.value=e),onChange:y},null,8,["modelValue"])]),L("div",bl,[L("span",xl,j(p(n)("setting.localeIcon")),1),b(p(Qe),{modelValue:C.value,"onUpdate:modelValue":t[5]||(t[5]=e=>C.value=e),onChange:k},null,8,["modelValue"])]),L("div",wl,[L("span",yl,j(p(n)("setting.tagsView")),1),b(p(Qe),{modelValue:V.value,"onUpdate:modelValue":t[6]||(t[6]=e=>V.value=e),onChange:_},null,8,["modelValue"])]),L("div",Cl,[L("span",kl,j(p(n)("setting.tagsViewIcon")),1),b(p(Qe),{modelValue:M.value,"onUpdate:modelValue":t[7]||(t[7]=e=>M.value=e),onChange:I},null,8,["modelValue"])]),L("div",Vl,[L("span",_l,j(p(n)("setting.logo")),1),b(p(Qe),{modelValue:T.value,"onUpdate:modelValue":t[8]||(t[8]=e=>T.value=e),onChange:$},null,8,["modelValue"])]),L("div",Ml,[L("span",Il,j(p(n)("setting.uniqueOpened")),1),b(p(Qe),{modelValue:S.value,"onUpdate:modelValue":t[9]||(t[9]=e=>S.value=e),onChange:P},null,8,["modelValue"])]),L("div",Tl,[L("span",$l,j(p(n)("setting.fixedHeader")),1),b(p(Qe),{modelValue:B.value,"onUpdate:modelValue":t[10]||(t[10]=e=>B.value=e),onChange:z},null,8,["modelValue"])]),L("div",Sl,[L("span",Pl,j(p(n)("setting.footer")),1),b(p(Qe),{modelValue:A.value,"onUpdate:modelValue":t[11]||(t[11]=e=>A.value=e),onChange:E},null,8,["modelValue"])]),L("div",Ll,[L("span",Bl,j(p(n)("setting.greyMode")),1),b(p(Qe),{modelValue:R.value,"onUpdate:modelValue":t[12]||(t[12]=e=>R.value=e),onChange:O},null,8,["modelValue"])]),L("div",jl,[L("span",zl,j(p(n)("setting.dynamicRouter")),1),b(p(Qe),{modelValue:H.value,"onUpdate:modelValue":t[13]||(t[13]=e=>H.value=e),onChange:U},null,8,["modelValue"])]),L("div",Al,[L("span",El,j(p(n)("setting.fixedMenu")),1),b(p(Qe),{modelValue:F.value,"onUpdate:modelValue":t[14]||(t[14]=e=>F.value=e),onChange:D},null,8,["modelValue"])])],2))}}),Ol=[(e=>(be("data-v-3afc02d5"),e=e(),xe(),e))((()=>L("div",{class:"absolute h-full w-[33%] top-0 left-[10%] bg-gray-200"},null,-1)))],Hl=Je(r({__name:"LayoutRadioPicker",setup(e){const{getPrefixCls:t}=ce(),l=t("layout-radio-picker"),a=me(),o=i((()=>a.getLayout));return(e,t)=>(u(),v("div",{class:h([p(l),"flex flex-wrap space-x-14px"])},[L("div",{class:h([`${p(l)}__classic`,"relative w-56px h-48px cursor-pointer bg-gray-300",{"is-acitve":"classic"===p(o)}]),onClick:t[0]||(t[0]=e=>p(a).setLayout("classic"))},null,2),L("div",{class:h([`${p(l)}__top-left`,"relative w-56px h-48px cursor-pointer bg-gray-300",{"is-acitve":"topLeft"===p(o)}]),onClick:t[1]||(t[1]=e=>p(a).setLayout("topLeft"))},null,2),L("div",{class:h([`${p(l)}__top`,"relative w-56px h-48px cursor-pointer bg-gray-300",{"is-acitve":"top"===p(o)}]),onClick:t[2]||(t[2]=e=>p(a).setLayout("top"))},null,2),L("div",{class:h([`${p(l)}__cut-menu`,"relative w-56px h-48px cursor-pointer bg-gray-300",{"is-acitve":"cutMenu"===p(o)}]),onClick:t[3]||(t[3]=e=>p(a).setLayout("cutMenu"))},Ol,2)],2))}}),[["__scopeId","data-v-3afc02d5"]]),Ul={class:"text-16px font-700"},Fl={class:"text-center"},Dl={class:"mt-5px"},Nl=Je(r({__name:"Setting",setup(e){const{getPrefixCls:l}=ce(),a=l("setting"),o=me(),{t:n}=he(),r=i((()=>o.getLayout)),s=t(!1),d=t(o.getTheme.elColorPrimary),m=e=>{fe("--el-color-primary",e),o.setTheme({elColorPrimary:e});const t=we("--left-menu-bg-color",document.documentElement);w(ye(p(t)))},f=t(o.getTheme.topHeaderBgColor||""),g=e=>{const t=al(e),l=t?"#fff":"inherit",a=t?ol(e,6):"#f6f6f6",n=t?e:"#eee";fe("--top-header-bg-color",e),fe("--top-header-text-color",l),fe("--top-header-hover-color",a),fe("--top-tool-border-color",n),o.setTheme({topHeaderBgColor:e,topHeaderTextColor:l,topHeaderHoverColor:a,topToolBorderColor:n}),"top"===p(r)&&w(e)},x=t(o.getTheme.leftMenuBgColor||""),w=e=>{const t=we("--el-color-primary",document.documentElement),l=al(e),a={leftMenuBorderColor:l?"inherit":"#eee",leftMenuBgColor:e,leftMenuBgLightColor:l?ol(e,6):e,leftMenuBgActiveColor:l?"var(--el-color-primary)":ll(p(t),.1),leftMenuCollapseBgActiveColor:l?"var(--el-color-primary)":ll(p(t),.1),leftMenuTextColor:l?"#bfcbd9":"#333",leftMenuTextActiveColor:l?"#fff":"var(--el-color-primary)",logoTitleTextColor:l?"#fff":"inherit",logoBorderColor:l?e:"#eee"};o.setTheme(a),o.setCssVarTheme()};"top"!==r.value||o.getIsDark||(f.value="#fff",g("#fff")),Y((()=>r.value),(e=>{"top"!==e||o.getIsDark?w(p(x)):(f.value="#fff",g("#fff"))}));const C=async()=>{const{copy:e,copied:t,isSupported:l}=Ce({source:`\n      // 面包屑\n      breadcrumb: ${o.getBreadcrumb},\n      // 面包屑图标\n      breadcrumbIcon: ${o.getBreadcrumbIcon},\n      // 折叠图标\n      hamburger: ${o.getHamburger},\n      // 全屏图标\n      screenfull: ${o.getScreenfull},\n      // 尺寸图标\n      size: ${o.getSize},\n      // 多语言图标\n      locale: ${o.getLocale},\n      // 标签页\n      tagsView: ${o.getTagsView},\n      // 标签页图标\n      getTagsViewIcon: ${o.getTagsViewIcon},\n      // logo\n      logo: ${o.getLogo},\n      // 菜单手风琴\n      uniqueOpened: ${o.getUniqueOpened},\n      // 固定header\n      fixedHeader: ${o.getFixedHeader},\n      // 页脚\n      footer: ${o.getFooter},\n      // 灰色模式\n      greyMode: ${o.getGreyMode},\n      // layout布局\n      layout: '${o.getLayout}',\n      // 暗黑模式\n      isDark: ${o.getIsDark},\n      // 组件尺寸\n      currentSize: '${o.getCurrentSize}',\n      // 主题相关\n      theme: {\n        // 主题色\n        elColorPrimary: '${o.getTheme.elColorPrimary}',\n        // 左侧菜单边框颜色\n        leftMenuBorderColor: '${o.getTheme.leftMenuBorderColor}',\n        // 左侧菜单背景颜色\n        leftMenuBgColor: '${o.getTheme.leftMenuBgColor}',\n        // 左侧菜单浅色背景颜色\n        leftMenuBgLightColor: '${o.getTheme.leftMenuBgLightColor}',\n        // 左侧菜单选中背景颜色\n        leftMenuBgActiveColor: '${o.getTheme.leftMenuBgActiveColor}',\n        // 左侧菜单收起选中背景颜色\n        leftMenuCollapseBgActiveColor: '${o.getTheme.leftMenuCollapseBgActiveColor}',\n        // 左侧菜单字体颜色\n        leftMenuTextColor: '${o.getTheme.leftMenuTextColor}',\n        // 左侧菜单选中字体颜色\n        leftMenuTextActiveColor: '${o.getTheme.leftMenuTextActiveColor}',\n        // logo字体颜色\n        logoTitleTextColor: '${o.getTheme.logoTitleTextColor}',\n        // logo边框颜色\n        logoBorderColor: '${o.getTheme.logoBorderColor}',\n        // 头部背景颜色\n        topHeaderBgColor: '${o.getTheme.topHeaderBgColor}',\n        // 头部字体颜色\n        topHeaderTextColor: '${o.getTheme.topHeaderTextColor}',\n        // 头部悬停颜色\n        topHeaderHoverColor: '${o.getTheme.topHeaderHoverColor}',\n        // 头部边框颜色\n        topToolBorderColor: '${o.getTheme.topToolBorderColor}'\n      }\n    `});l?(await e(),p(t)&&ge.success(n("setting.copySuccess"))):ge.error(n("setting.copyFailed"))},k=()=>{const{wsCache:e}=ke();e.delete("layout"),e.delete("theme"),e.delete("isDark"),window.location.reload()};return(e,t)=>{const l=O("Icon");return u(),v(te,null,[L("div",{class:h([p(a),"fixed top-[45%] right-0 w-40px h-40px text-center leading-40px bg-[var(--el-color-primary)] cursor-pointer"]),onClick:t[0]||(t[0]=e=>s.value=!0)},[b(l,{icon:"ant-design:setting-outlined",color:"#fff"})],2),b(p(At),{modelValue:s.value,"onUpdate:modelValue":t[4]||(t[4]=e=>s.value=e),direction:"rtl",size:"350px","z-index":4e3},{header:c((()=>[L("span",Ul,j(p(n)("setting.projectSetting")),1)])),default:c((()=>[L("div",Fl,[b(p(De),null,{default:c((()=>[de(j(p(n)("setting.theme")),1)])),_:1}),b(p(Ge)),b(p(De),null,{default:c((()=>[de(j(p(n)("setting.layout")),1)])),_:1}),b(Hl),b(p(De),null,{default:c((()=>[de(j(p(n)("setting.systemTheme")),1)])),_:1}),b(sl,{modelValue:d.value,"onUpdate:modelValue":t[1]||(t[1]=e=>d.value=e),schema:["#409eff","#009688","#536dfe","#ff5c93","#ee4f12","#0096c7","#9c27b0","#ff9800"],onChange:m},null,8,["modelValue"]),b(p(De),null,{default:c((()=>[de(j(p(n)("setting.headerTheme")),1)])),_:1}),b(sl,{modelValue:f.value,"onUpdate:modelValue":t[2]||(t[2]=e=>f.value=e),schema:["#fff","#151515","#5172dc","#e74c3c","#24292e","#394664","#009688","#383f45"],onChange:g},null,8,["modelValue"]),"top"!==p(r)?(u(),v(te,{key:0},[b(p(De),null,{default:c((()=>[de(j(p(n)("setting.menuTheme")),1)])),_:1}),b(sl,{modelValue:x.value,"onUpdate:modelValue":t[3]||(t[3]=e=>x.value=e),schema:["#fff","#001529","#212121","#273352","#191b24","#383f45","#001628","#344058"],onChange:w},null,8,["modelValue"])],64)):y("",!0)]),b(p(De),null,{default:c((()=>[de(j(p(n)("setting.interfaceDisplay")),1)])),_:1}),b(Rl),b(p(De)),L("div",null,[b(p(We),{type:"primary",class:"w-full",onClick:C},{default:c((()=>[de(j(p(n)("setting.copy")),1)])),_:1})]),L("div",Dl,[b(p(We),{type:"danger",class:"w-full",onClick:k},{default:c((()=>[de(j(p(n)("setting.clearAndReset")),1)])),_:1})])])),_:1},8,["modelValue"])],64)}}}),[["__scopeId","data-v-a9b9be2b"]]),ql=(e,t)=>(rt(e,(e=>e.path===t))||[]).map((e=>e.path)),Wl=e=>{const l=(a,o="/")=>a.map((a=>{const n=a.meta??{};if(!n.hidden){const{oneShowingChild:r,onlyOneChild:s}=((e=[],l)=>{const a=t(),o=e.filter((e=>!(e.meta??{}).hidden&&(a.value=e,!0)));return 1===o.length?{oneShowingChild:!0,onlyOneChild:p(a)}:o.length?{oneShowingChild:!1,onlyOneChild:p(a)}:(a.value={...l,path:"",noShowingChildren:!0},{oneShowingChild:!0,onlyOneChild:p(a)})})(a.children,a),i=_e(a.path)?a.path:Me(o,a.path),{renderMenuTitle:u}={renderMenuTitle:e=>{const{t:t}=he(),{title:l="Please set title",icon:a}=e;return a?b(te,null,[b(Ve,{icon:e.icon},null),b("span",{class:"v-menu__title"},[t(l)])]):b("span",{class:"v-menu__title"},[t(l)])}};if(!r||(null==s?void 0:s.children)&&!(null==s?void 0:s.noShowingChildren)||(null==n?void 0:n.alwaysShow)){const{getPrefixCls:t}=ce(),o=t("menu-popper");return b(Qt,{index:i,popperClass:"vertical"===e?`${o}--vertical`:`${o}--horizontal`},{title:()=>u(n),default:()=>l(a.children,i)})}return b(Jt,{index:s?Me(i,s.path):i},{default:()=>u(s?null==s?void 0:s.meta:n)})}}));return{renderMenuItem:l}};const{getPrefixCls:Gl}=ce(),Kl=Gl("menu"),Zl=Je(r({name:"Menu",props:{menuSelect:{type:Function,default:void 0}},setup(e){const t=me(),l=i((()=>t.getLayout)),{push:a,currentRoute:o}=Ie(),n=Te(),r=i((()=>["classic","topLeft","cutMenu"].includes(p(l))?"vertical":"horizontal")),s=i((()=>"cutMenu"===p(l)?n.getMenuTabRouters:n.getRouters)),u=i((()=>t.getCollapse)),d=i((()=>t.getUniqueOpened)),c=i((()=>{const{meta:e,path:t}=p(o);return e.activeMenu?e.activeMenu:t})),v=t=>{e.menuSelect&&e.menuSelect(t),_e(t)?window.open(t):a(t)},m=()=>{if("top"===p(l))return h();{let t;return b($e,null,"function"==typeof(e=t=h())||"[object Object]"===Object.prototype.toString.call(e)&&!Se(e)?t:{default:()=>[t]})}var e},h=()=>b(Yt,{defaultActive:p(c),mode:p(r),collapse:"top"!==p(l)&&"cutMenu"!==p(l)&&p(u),uniqueOpened:"top"!==p(l)&&p(d),backgroundColor:"var(--left-menu-bg-color)",textColor:"var(--left-menu-text-color)",activeTextColor:"var(--left-menu-text-active-color)",onSelect:v},{default:()=>{const{renderMenuItem:e}=Wl(p(r));return e(p(s))}});return()=>b("div",{id:Kl,class:[`${Kl} ${Kl}__${p(r)}`,"h-[100%] overflow-hidden flex-col bg-[var(--left-menu-bg-color)]",{"w-[var(--left-menu-min-width)]":p(u)&&"cutMenu"!==p(l),"w-[var(--left-menu-max-width)]":!p(u)&&"cutMenu"!==p(l)}]},[m()])}}),[["__scopeId","data-v-39a3ba98"]]),Xl=X({}),Yl=(e,t)=>{const l=[];for(const a of e){let e=null;const o=a.meta??{};if(!o.hidden||o.canTo){const o=ql(t,a.path),n=_e(a.path)?a.path:o.join("/");e=Pe(a),e.path=n,a.children&&e&&(e.children=Yl(a.children,t)),e&&l.push(e),o.length&&Reflect.has(Xl,o[0])&&Xl[o[0]].push(n)}}return l},{getPrefixCls:Jl,variables:Ql}=ce(),ea=Jl("tab-menu"),ta=Je(r({name:"TabMenu",setup(){const{push:e,currentRoute:l}=Ie(),{t:o}=he(),n=me(),r=i((()=>n.getCollapse)),s=i((()=>n.getFixedMenu)),u=Te(),d=i((()=>u.getRouters)),c=i((()=>p(d).filter((e=>{var t;return!(null==(t=null==e?void 0:e.meta)?void 0:t.hidden)})))),v=()=>{n.setCollapse(!p(r))};a((()=>{var e;if(p(s)){const t=`/${p(l).path.split("/")[1]}`,a=null==(e=p(c).find((e=>{var l,a,o;return((null==(l=e.meta)?void 0:l.alwaysShow)||(null==(a=null==e?void 0:e.children)?void 0:a.length)&&(null==(o=null==e?void 0:e.children)?void 0:o.length)>1)&&e.path===t})))?void 0:e.children;f.value=t,a&&u.setMenuTabRouters(Pe(a).map((e=>(e.path=Me(p(f),e.path),e))))}})),Y((()=>d.value),(e=>{(e=>{for(const t of e){const e=t.meta??{};(null==e?void 0:e.hidden)||(Xl[t.path]=[])}})(e),Yl(e,e)}),{immediate:!0,deep:!0});const m=t(!0);Y((()=>r.value),(e=>{e?m.value=!e:setTimeout((()=>{m.value=!e}),200)}));const h=t(!!p(s)),f=t(""),g=e=>{const{path:t}=p(l);return!!Xl[e].includes(t)},x=()=>{p(h)&&!p(s)&&(h.value=!1)};return()=>b("div",{id:`${Ql.namespace}-menu`,class:[ea,"relative bg-[var(--left-menu-bg-color)] top-1px z-3000",{"w-[var(--tab-menu-max-width)]":!p(r),"w-[var(--tab-menu-min-width)]":p(r)}],onMouseleave:x},[b($e,{class:"!h-[calc(100%-var(--tab-menu-collapse-height)-1px)]"},{default:()=>[b("div",null,{default:()=>p(c).map((t=>{var l,a,n,r,i,d;const c=(null==(l=t.meta)?void 0:l.alwaysShow)||(null==(a=null==t?void 0:t.children)?void 0:a.length)&&(null==(n=null==t?void 0:t.children)?void 0:n.length)>1?t:{...(null==t?void 0:t.children)&&(null==t?void 0:t.children[0]),path:Me(t.path,null==(r=(null==t?void 0:t.children)&&(null==t?void 0:t.children[0]))?void 0:r.path)};return b("div",{class:[`${ea}__item`,"text-center text-12px relative py-12px cursor-pointer",{"is-active":g(t.path)}],onClick:()=>{(t=>{if(_e(t.path))return void window.open(t.path);const l=t.children?t.path:t.path.split("/")[0],a=p(f);f.value=t.children?t.path:t.path.split("/")[0],t.children?(l!==a&&p(h)||(h.value=!!p(s)||!p(h)),p(h)&&u.setMenuTabRouters(Pe(t.children).map((e=>(e.path=Me(p(f),e.path),e))))):(e(t.path),u.setMenuTabRouters([]),h.value=!1)})(c)}},[b("div",null,[b(Ve,{icon:null==(i=null==c?void 0:c.meta)?void 0:i.icon},null)]),p(m)?b("p",{class:"break-words mt-5px px-2px"},[o(null==(d=c.meta)?void 0:d.title)]):void 0])}))})]}),b("div",{class:[`${ea}--collapse`,"text-center h-[var(--tab-menu-collapse-height)] leading-[var(--tab-menu-collapse-height)] cursor-pointer"],onClick:v},[b(Ve,{icon:p(r)?"ep:d-arrow-right":"ep:d-arrow-left"},null)]),b(Zl,{class:["!absolute top-0 border-left-1 border-solid border-[var(--left-menu-bg-light-color)]",{"!left-[var(--tab-menu-min-width)]":p(r),"!left-[var(--tab-menu-max-width)]":!p(r),"!w-[calc(var(--left-menu-max-width)+1px)]":p(h)||p(s),"!w-0":!p(h)&&!p(s)}],style:"transition: width var(--transition-time-02), left var(--transition-time-02);"},null)])}}),[["__scopeId","data-v-52c20aaa"]]),la=Le("tagsView",{state:()=>({visitedViews:[],cachedViews:new Set}),getters:{getVisitedViews(){return this.visitedViews},getCachedViews(){return Array.from(this.cachedViews)}},actions:{addView(e){this.addVisitedView(e),this.addCachedView()},addVisitedView(e){var t,l;this.visitedViews.some((t=>t.path===e.path))||(null==(t=e.meta)?void 0:t.noTagsView)||this.visitedViews.push(Object.assign({},e,{title:(null==(l=e.meta)?void 0:l.title)||"no-name"}))},addCachedView(){var e;const t=new Set;for(const l of this.visitedViews){const a=Be(l);if(!!(null==(e=a.meta)?void 0:e.noCache))continue;const o=a.name;t.add(o)}Array.from(this.cachedViews).sort().toString()!==Array.from(t).sort().toString()&&(this.cachedViews=t)},delView(e){this.delVisitedView(e),this.addCachedView()},delVisitedView(e){for(const[t,l]of this.visitedViews.entries())if(l.path===e.path){this.visitedViews.splice(t,1);break}},delCachedView(){const e=je.currentRoute.value,t=ze(this.getCachedViews,(t=>t===e.name));t>-1&&this.cachedViews.delete(this.getCachedViews[t])},delAllViews(){this.delAllVisitedViews(),this.addCachedView()},delAllVisitedViews(){this.visitedViews=[]},delOthersViews(e){this.delOthersVisitedViews(e),this.addCachedView()},delOthersVisitedViews(e){this.visitedViews=this.visitedViews.filter((t=>{var l;return(null==(l=null==t?void 0:t.meta)?void 0:l.affix)||t.path===e.path}))},delLeftViews(e){const t=ze(this.visitedViews,(t=>t.path===e.path));t>-1&&(this.visitedViews=this.visitedViews.filter(((l,a)=>{var o;return(null==(o=null==l?void 0:l.meta)?void 0:o.affix)||l.path===e.path||a>t})),this.addCachedView())},delRightViews(e){const t=ze(this.visitedViews,(t=>t.path===e.path));t>-1&&(this.visitedViews=this.visitedViews.filter(((l,a)=>{var o;return(null==(o=null==l?void 0:l.meta)?void 0:o.affix)||l.path===e.path||a<t})),this.addCachedView())},updateVisitedView(e){for(let t of this.visitedViews)if(t.path===e.path){t=Object.assign(t,e);break}}}}),aa=(e,t="")=>{let l=[];return e.forEach((e=>{const a=e.meta,o=Me(t,e.path);if((null==a?void 0:a.affix)&&l.push({...e,path:o,fullPath:o}),e.children){const t=aa(e.children,o);t.length>=1&&(l=[...l,...t])}})),l},oa=r({__name:"ContextMenu",props:{schema:{type:Array,default:()=>[]},trigger:{type:String,default:"contextmenu"},tagItem:{type:Object,default:()=>({})}},emits:["visibleChange"],setup(e,{expose:l,emit:a}){const o=e,{getPrefixCls:n}=ce(),r=n("context-menu"),{t:s}=he(),i=e=>{e.command&&e.command(e)},m=e=>{a("visibleChange",e,o.tagItem)},f=t();return l({elDropdownMenuRef:f,tagItem:o.tagItem}),(t,l)=>{const a=O("Icon");return u(),d(p(Xe),{ref_key:"elDropdownMenuRef",ref:f,class:h(p(r)),trigger:e.trigger,placement:"bottom-start",onCommand:i,onVisibleChange:m,"popper-class":"v-context-menu-popper"},{dropdown:c((()=>[b(p(Ke),null,{default:c((()=>[(u(!0),v(te,null,ve(e.schema,((e,t)=>(u(),d(p(Ze),{key:`dropdown${t}`,divided:e.divided,disabled:e.disabled,command:e},{default:c((()=>[b(a,{icon:e.icon},null,8,["icon"]),de(" "+j(p(s)(e.label)),1)])),_:2},1032,["divided","disabled","command"])))),128))])),_:1})])),default:c((()=>[g(t.$slots,"default")])),_:3},8,["class","trigger"])}}});function na({el:e,position:l="scrollLeft",to:a,duration:o=500,callback:n}){const r=t(!1),s=e[l],i=a-s,u=20;let d=0;function c(){if(!p(r))return;d+=u;const t=(a=d,v=s,m=i,(a/=o/2)<1?m/2*a*a+v:-m/2*(--a*(a-2)-1)+v);var a,v,m;((e,t,l)=>{e[t]=l})(e,l,t),d<o&&p(r)?requestAnimationFrame(c):n&&n()}return{start:function(){r.value=!0,c()},stop:function(){r.value=!1}}}const ra=["id"],sa={class:"overflow-hidden flex-1"},ia={class:"flex h-full"},ua=["onClick"],da=Je(r({__name:"TagsView",setup(e){const{getPrefixCls:l}=ce(),o=l("tags-view"),{t:n}=he(),{currentRoute:r,push:s,replace:m}=Ie(),g=Te(),x=i((()=>g.getRouters)),w=la(),C=i((()=>w.getVisitedViews)),k=t([]),V=me(),_=i((()=>V.getTagsViewIcon)),M=t(),I=()=>{const{name:e}=p(r);return e&&(M.value=p(r),w.addView(p(r))),!1},T=e=>{var t;(null==(t=null==e?void 0:e.meta)?void 0:t.affix)||(w.delView(e),H(e)&&A())},$=()=>{w.delAllViews(),A()},S=()=>{w.delOthersViews(p(M))},P=async e=>{if(!e)return;w.delCachedView();const{path:t,query:l}=e;await ie(),m({path:"/redirect"+t,query:l})},B=()=>{w.delLeftViews(p(M))},z=()=>{w.delRightViews(p(M))},A=()=>{const e=w.getVisitedViews.slice(-1)[0];if(e)s(e);else{if(p(r).path===g.getAddRouters[0].path||p(r).path===g.getAddRouters[0].redirect)return void I();s(g.getAddRouters[0].path)}},E=Ae(),R=e=>{var t;const l=null==(t=p(D))?void 0:t.wrapRef;let a=null,n=null;const r=p(E);if(r.length>0&&(a=r[0],n=r[r.length-1]),(null==a?void 0:a.to).fullPath===e.fullPath){const{start:e}=na({el:l,position:"scrollLeft",to:0,duration:500});e()}else if((null==n?void 0:n.to).fullPath===e.fullPath){const{start:e}=na({el:l,position:"scrollLeft",to:l.scrollWidth-l.offsetWidth,duration:500});e()}else{const t=r.findIndex((t=>(null==t?void 0:t.to).fullPath===e.fullPath)),a=document.getElementsByClassName(`${o}__item`),n=a[t-1],s=a[t+1],i=s.offsetLeft+s.offsetWidth+4,u=n.offsetLeft-4;if(i>p(N)+l.offsetWidth){const{start:e}=na({el:l,position:"scrollLeft",to:i-l.offsetWidth,duration:500});e()}else if(u<p(N)){const{start:e}=na({el:l,position:"scrollLeft",to:u,duration:500});e()}}},H=e=>e.path===p(r).path,U=Ae(),F=(e,t)=>{if(e)for(const l of p(U)){const e=l.elDropdownMenuRef;t.fullPath!==l.tagItem.fullPath&&(null==e||e.handleClose())}},D=t(),N=t(0),q=({scrollLeft:e})=>{N.value=e},W=e=>{var t;const l=null==(t=p(D))?void 0:t.wrapRef,{start:a}=na({el:l,position:"scrollLeft",to:p(N)+e,duration:500});a()};return a((()=>{(()=>{k.value=aa(p(x));for(const e of p(k))e.name&&w.addVisitedView(e)})(),I()})),Y((()=>r.value),(()=>{I(),(async()=>{await ie();for(const e of p(C))if(e.fullPath===p(r).path){R(e),e.fullPath!==p(r).fullPath&&w.updateVisitedView(p(r));break}})()})),(e,t)=>{var l,a,r,s,i,m;const g=O("Icon"),x=O("router-link");return u(),v("div",{id:p(o),class:h([p(o),"flex w-full relative bg-[#fff] dark:bg-[var(--el-bg-color)]"])},[L("span",{class:h([`${p(o)}__tool`,"w-[var(--tags-view-height)] h-[var(--tags-view-height)] text-center leading-[var(--tags-view-height)] cursor-pointer"]),onClick:t[0]||(t[0]=e=>W(-200))},[b(g,{icon:"ep:d-arrow-left",color:p(V).getIsDark?"var(--el-text-color-regular)":"#333"},null,8,["color"])],2),L("div",sa,[b(p($e),{ref_key:"scrollbarRef",ref:D,class:"h-full",onScroll:q},{default:c((()=>[L("div",ia,[(u(!0),v(te,null,ve(p(C),(e=>{var t,l,a,r,s,i,v,m,w;return u(),d(p(oa),{ref_for:!0,ref:p(U).set,schema:[{icon:"ant-design:sync-outlined",label:p(n)("common.reload"),disabled:(null==(t=M.value)?void 0:t.fullPath)!==e.fullPath,command:()=>{P(e)}},{icon:"ant-design:close-outlined",label:p(n)("common.closeTab"),disabled:!!(null==(l=p(C))?void 0:l.length)&&(null==(a=M.value)?void 0:a.meta.affix),command:()=>{T(e)}},{divided:!0,icon:"ant-design:vertical-right-outlined",label:p(n)("common.closeTheLeftTab"),disabled:!!(null==(r=p(C))?void 0:r.length)&&(e.fullPath===p(C)[0].fullPath||(null==(s=M.value)?void 0:s.fullPath)!==e.fullPath),command:()=>{B()}},{icon:"ant-design:vertical-left-outlined",label:p(n)("common.closeTheRightTab"),disabled:!!(null==(i=p(C))?void 0:i.length)&&(e.fullPath===p(C)[p(C).length-1].fullPath||(null==(v=M.value)?void 0:v.fullPath)!==e.fullPath),command:()=>{z()}},{divided:!0,icon:"ant-design:tag-outlined",label:p(n)("common.closeOther"),disabled:(null==(m=M.value)?void 0:m.fullPath)!==e.fullPath,command:()=>{S()}},{icon:"ant-design:line-outlined",label:p(n)("common.closeAll"),command:()=>{$()}}],key:e.fullPath,"tag-item":e,class:h([`${p(o)}__item`,(null==(w=null==e?void 0:e.meta)?void 0:w.affix)?`${p(o)}__item--affix`:"",{"is-active":H(e)}]),onVisibleChange:F},{default:c((()=>[L("div",null,[b(x,{ref_for:!0,ref:p(E).set,to:{...e},custom:""},{default:c((({navigate:t})=>{var l,a,r,s,i;return[L("div",{onClick:t,class:"h-full flex justify-center items-center whitespace-nowrap pl-15px"},[(null==e?void 0:e.matched)&&(null==e?void 0:e.matched[1])&&(null==(a=null==(l=null==e?void 0:e.matched[1])?void 0:l.meta)?void 0:a.icon)&&p(_)?(u(),d(g,{key:0,icon:null==(s=null==(r=null==e?void 0:e.matched[1])?void 0:r.meta)?void 0:s.icon,size:12,class:"mr-5px"},null,8,["icon"])):y("",!0),de(" "+j(p(n)(null==(i=null==e?void 0:e.meta)?void 0:i.title))+" ",1),b(g,{class:h(`${p(o)}__item--close`),color:"#333",icon:"ant-design:close-outlined",size:12,onClick:f((t=>T(e)),["prevent","stop"])},null,8,["class","onClick"])],8,ua)]})),_:2},1032,["to"])])])),_:2},1032,["schema","tag-item","class"])})),128))])])),_:1},512)]),L("span",{class:h([`${p(o)}__tool`,"w-[var(--tags-view-height)] h-[var(--tags-view-height)] text-center leading-[var(--tags-view-height)] cursor-pointer"]),onClick:t[1]||(t[1]=e=>W(200))},[b(g,{icon:"ep:d-arrow-right",color:p(V).getIsDark?"var(--el-text-color-regular)":"#333"},null,8,["color"])],2),L("span",{class:h([`${p(o)}__tool`,"w-[var(--tags-view-height)] h-[var(--tags-view-height)] text-center leading-[var(--tags-view-height)] cursor-pointer"]),onClick:t[2]||(t[2]=e=>P(M.value))},[b(g,{icon:"ant-design:reload-outlined",color:p(V).getIsDark?"var(--el-text-color-regular)":"#333"},null,8,["color"])],2),b(p(oa),{trigger:"click",schema:[{icon:"ant-design:sync-outlined",label:p(n)("common.reload"),command:()=>{P(M.value)}},{icon:"ant-design:close-outlined",label:p(n)("common.closeTab"),disabled:!!(null==(l=p(C))?void 0:l.length)&&(null==(a=M.value)?void 0:a.meta.affix),command:()=>{T(M.value)}},{divided:!0,icon:"ant-design:vertical-right-outlined",label:p(n)("common.closeTheLeftTab"),disabled:!!(null==(r=p(C))?void 0:r.length)&&(null==(s=M.value)?void 0:s.fullPath)===p(C)[0].fullPath,command:()=>{B()}},{icon:"ant-design:vertical-left-outlined",label:p(n)("common.closeTheRightTab"),disabled:!!(null==(i=p(C))?void 0:i.length)&&(null==(m=M.value)?void 0:m.fullPath)===p(C)[p(C).length-1].fullPath,command:()=>{z()}},{divided:!0,icon:"ant-design:tag-outlined",label:p(n)("common.closeOther"),command:()=>{S()}},{icon:"ant-design:line-outlined",label:p(n)("common.closeAll"),command:()=>{$()}}]},{default:c((()=>[L("span",{class:h([`${p(o)}__tool`,"w-[var(--tags-view-height)] h-[var(--tags-view-height)] text-center leading-[var(--tags-view-height)] cursor-pointer block"])},[b(g,{icon:"ant-design:setting-outlined",color:p(V).getIsDark?"var(--el-text-color-regular)":"#333"},null,8,["color"])],2)])),_:1},8,["schema"])],10,ra)}}}),[["__scopeId","data-v-d748d0cf"]]),ca=L("img",{src:pt,class:"w-[calc(var(--logo-height)-10px)] h-[calc(var(--logo-height)-10px)]"},null,-1),pa=r({__name:"Logo",setup(e){const{getPrefixCls:l}=ce(),o=l("logo"),n=me(),r=t(!0),s=i((()=>n.getTitle)),d=i((()=>n.getLayout)),m=i((()=>n.getCollapse));return a((()=>{p(m)&&(r.value=!1)})),Y((()=>m.value),(e=>{"topLeft"!==p(d)&&"cutMenu"!==p(d)?e?r.value=!e:setTimeout((()=>{r.value=!e}),400):r.value=!0})),Y((()=>d.value),(e=>{"top"===e||"cutMenu"===e?r.value=!0:p(m)?r.value=!1:r.value=!0})),(e,t)=>{const l=O("router-link");return u(),v("div",null,[b(l,{class:h([p(o),"classic"!==p(d)?`${p(o)}__Top`:"","flex !h-[var(--logo-height)] items-center cursor-pointer pl-8px relative","dark:bg-[var(--el-bg-color)]"]),to:"/"},{default:c((()=>[ca,r.value?(u(),v("div",{key:0,class:h(["ml-10px text-16px font-700",{"text-[var(--logo-title-text-color)]":"classic"===p(d),"text-[var(--top-header-text-color)]":"topLeft"===p(d)||"top"===p(d)||"cutMenu"===p(d)}])},j(p(s)),3)):y("",!0)])),_:1},8,["class"])])}}}),va=r({__name:"Footer",setup(e){const{getPrefixCls:t}=ce(),l=t("footer"),a=me(),o=i((()=>a.getTitle));return(e,t)=>(u(),v("div",{class:h([p(l),"text-center text-[var(--el-text-color-placeholder)] bg-[var(--app-content-bg-color)] h-[var(--app-footer-height)] leading-[var(--app-footer-height)] dark:bg-[var(--el-bg-color)]"])}," Copyright ©2021-present "+j(p(o)),3))}}),ma=r({__name:"AppView",setup(e){const t=me(),l=i((()=>t.getLayout)),a=i((()=>t.getFixedHeader)),o=i((()=>t.getFooter)),n=la(),r=i((()=>n.getCachedViews));return(e,t)=>{const n=O("router-view");return u(),v(te,null,[L("section",{class:h(["p-[var(--app-content-padding)] w-[100%] bg-[var(--app-content-bg-color)] dark:bg-[var(--el-bg-color)]",{"!min-h-[calc(100%-var(--app-footer-height))]":(p(a)&&("classic"===p(l)||"topLeft"===p(l))||"top"===p(l))&&p(o),"!min-h-[calc(100%-var(--tags-view-height)-var(--top-tool-height)-var(--app-footer-height))]":!p(a)&&"classic"===p(l)&&p(o),"!min-h-[calc(100%-var(--tags-view-height)-var(--app-footer-height))]":!p(a)&&("topLeft"===p(l)||"top"===p(l))&&p(o),"!min-h-[calc(100%-var(--top-tool-height))]":p(a)&&"cutMenu"===p(l)&&p(o),"!min-h-[calc(100%-var(--top-tool-height)-var(--tags-view-height))]":!p(a)&&"cutMenu"===p(l)&&p(o)}])},[b(n,null,{default:c((({Component:e,route:t})=>[(u(),d(Ee,{include:p(r)},[(u(),d(B(e),{key:t.fullPath}))],1032,["include"]))])),_:1})],2),p(o)?(u(),d(p(va),{key:0})):y("",!0)],64)}}}),ha=r({__name:"Collapse",props:{color:pe.string.def("")},setup(e){const{getPrefixCls:t}=ce(),l=t("collapse"),a=me(),o=i((()=>a.getCollapse)),n=()=>{const e=p(o);a.setCollapse(!e)};return(t,a)=>{const r=O("Icon");return u(),v("div",{class:h(p(l))},[b(r,{size:18,icon:p(o)?"ant-design:menu-unfold-outlined":"ant-design:menu-fold-outlined",color:e.color,class:"cursor-pointer",onClick:n},null,8,["icon","color"])],2)}}}),fa=r({__name:"SizeDropdown",props:{color:pe.string.def("")},setup(e){const{getPrefixCls:t}=ce(),l=t("size-dropdown"),{t:a}=he(),o=me(),n=i((()=>o.sizeMap)),r=e=>{o.setCurrentSize(e)};return(t,o)=>{const s=O("Icon");return u(),d(p(Xe),{class:h(p(l)),trigger:"click",onCommand:r},{dropdown:c((()=>[b(p(Ke),null,{default:c((()=>[(u(!0),v(te,null,ve(p(n),(e=>(u(),d(p(Ze),{key:e,command:e},{default:c((()=>[de(j(p(a)(`size.${e}`)),1)])),_:2},1032,["command"])))),128))])),_:1})])),default:c((()=>[b(s,{size:18,icon:"mdi:format-size",color:e.color,class:"cursor-pointer"},null,8,["color"])])),_:1},8,["class"])}}}),ga=L("div",{class:"flex items-center"},[L("img",{src:vt,alt:"",class:"w-[calc(var(--logo-height)-25px)] rounded-[50%]"}),L("span",{class:"<lg:hidden text-14px pl-[5px] text-[var(--top-header-text-color)]"},"Archer")],-1),ba=r({__name:"UserInfo",setup(e){const t=la(),{getPrefixCls:l}=ce(),a=l("user-info"),{t:o}=he(),{wsCache:n}=ke(),{replace:r}=Ie(),s=()=>{mt.confirm(o("common.loginOutMessage"),o("common.reminder"),{confirmButtonText:o("common.ok"),cancelButtonText:o("common.cancel"),type:"warning"}).then((async()=>{await ht().catch((()=>{}))&&(n.clear(),t.delAllViews(),Re(),r("/login"))})).catch((()=>{}))},i=()=>{window.open("https://element-plus-admin-doc.cn/")};return(e,t)=>(u(),d(p(Xe),{class:h(p(a)),trigger:"click"},{dropdown:c((()=>[b(p(Ke),null,{default:c((()=>[b(p(Ze),null,{default:c((()=>[L("div",{onClick:i},j(p(o)("common.document")),1)])),_:1}),b(p(Ze),{divided:""},{default:c((()=>[L("div",{onClick:s},j(p(o)("common.loginOut")),1)])),_:1})])),_:1})])),default:c((()=>[ga])),_:1},8,["class"]))}}),xa=r({__name:"Screenfull",props:{color:pe.string.def("")},setup(e){const{getPrefixCls:t}=ce(),l=t("screenfull"),{toggle:a,isFullscreen:o}=Oe(),n=()=>{a()};return(t,a)=>(u(),v("div",{class:h(p(l)),onClick:n},[b(p(Ve),{size:18,icon:p(o)?"zmdi:fullscreen-exit":"zmdi:fullscreen",color:e.color},null,8,["icon","color"])],2))}}),wa=(e,t="")=>{var l;const a=[];for(const o of e){const e=null==o?void 0:o.meta;if(e.hidden&&!e.canTo)continue;const n=e.alwaysShow||1!==(null==(l=o.children)?void 0:l.length)?{...o}:{...o.children[0],path:Me(o.path,o.children[0].path)};n.path=Me(t,n.path),n.children&&(n.children=wa(n.children,n.path)),n&&a.push(n)}return a};const{getPrefixCls:ya}=ce(),Ca=ya("breadcrumb"),ka=me(),Va=i((()=>ka.getBreadcrumbIcon)),_a=Je(r({name:"Breadcrumb",setup(){const{currentRoute:e}=Ie(),{t:l}=he(),a=t([]),o=Te(),n=i((()=>{const e=o.getRouters;return wa(e)}));return Y((()=>e.value),(t=>{t.path.startsWith("/redirect/")||(()=>{const t=e.value.matched.slice(-1)[0].path;a.value=st(p(n),(e=>e.path===t))})()}),{immediate:!0}),()=>{let e;return b(Tt,{separator:"/",class:`${Ca} flex items-center h-full ml-[10px]`},{default:()=>{return[b(He,{appear:!0,"enter-active-class":"animate__animated animate__fadeInRight"},(t=e=it(p(a)).map((e=>{const t=!e.redirect||"noredirect"===e.redirect,a=e.meta;return b($t,{to:{path:t?"":e.path},key:e.name},{default:()=>{var t,o;return[(null==a?void 0:a.icon)&&Va.value?b(te,null,[b(Ve,{icon:a.icon,class:"mr-[5px]"},null),de(" "),l(null==(t=null==e?void 0:e.meta)?void 0:t.title)]):l(null==(o=null==e?void 0:e.meta)?void 0:o.title)]}})})),"function"==typeof t||"[object Object]"===Object.prototype.toString.call(t)&&!Se(t)?e:{default:()=>[e]}))];var t}})}}}),[["__scopeId","data-v-c6e338eb"]]),{getPrefixCls:Ma,variables:Ia}=ce(),Ta=Ma("tool-header"),$a=me(),Sa=i((()=>$a.getBreadcrumb)),Pa=i((()=>$a.getHamburger)),La=i((()=>$a.getScreenfull)),Ba=i((()=>$a.getSize)),ja=i((()=>$a.getLayout)),za=i((()=>$a.getLocale)),Aa=Je(r({name:"ToolHeader",setup:()=>()=>b("div",{id:`${Ia.namespace}-tool-header`,class:[Ta,"h-[var(--top-tool-height)] relative px-[var(--top-tool-p-x)] flex items-center justify-between","dark:bg-[var(--el-bg-color)]"]},["top"!==ja.value?b("div",{class:"h-full flex items-center"},[Pa.value&&"cutMenu"!==ja.value?b(ha,{class:"hover-trigger",color:"var(--top-header-text-color)"},null):void 0,Sa.value?b(_a,{class:"<md:hidden"},null):void 0]):void 0,b("div",{class:"h-full flex items-center"},[La.value?b(xa,{class:"hover-trigger",color:"var(--top-header-text-color)"},null):void 0,Ba.value?b(fa,{class:"hover-trigger",color:"var(--top-header-text-color)"},null):void 0,za.value?b(Ye,{class:"hover-trigger",color:"var(--top-header-text-color)"},null):void 0,b(ba,{class:"hover-trigger"},null)])])}),[["__scopeId","data-v-7ac43b9b"]]),{getPrefixCls:Ea}=ce(),Ra=Ea("layout"),Oa=me(),Ha=i((()=>Oa.getPageLoading)),Ua=i((()=>Oa.getTagsView)),Fa=i((()=>Oa.getCollapse)),Da=i((()=>Oa.logo)),Na=i((()=>Oa.getFixedHeader)),qa=i((()=>Oa.getMobile)),Wa=i((()=>Oa.getFixedMenu)),Ga=()=>({renderClassic:()=>b(te,null,[b("div",{class:["absolute top-0 left-0 h-full",{"!fixed z-3000":qa.value}]},[Da.value?b(pa,{class:["bg-[var(--left-menu-bg-color)] border-bottom-1 border-solid border-[var(--logo-border-color)] dark:border-[var(--el-border-color)]",{"!pl-0":qa.value&&Fa.value,"w-[var(--left-menu-min-width)]":Oa.getCollapse,"w-[var(--left-menu-max-width)]":!Oa.getCollapse}],style:"transition: all var(--transition-time-02);"},null):void 0,b(Zl,{class:[{"!h-[calc(100%-var(--logo-height))]":Da.value}]},null)]),b("div",{class:[`${Ra}-content`,"absolute top-0 h-[100%]",{"w-[calc(100%-var(--left-menu-min-width))] left-[var(--left-menu-min-width)]":Fa.value&&!qa.value&&!qa.value,"w-[calc(100%-var(--left-menu-max-width))] left-[var(--left-menu-max-width)]":!Fa.value&&!qa.value&&!qa.value,"fixed !w-full !left-0":qa.value}],style:"transition: all var(--transition-time-02);"},[H(b($e,{class:[`${Ra}-content-scrollbar`,{"!h-[calc(100%-var(--top-tool-height)-var(--tags-view-height))] mt-[calc(var(--top-tool-height)+var(--tags-view-height))]":Na.value}]},{default:()=>[b("div",{class:[{"fixed top-0 left-0 z-10":Na.value,"w-[calc(100%-var(--left-menu-min-width))] left-[var(--left-menu-min-width)]":Fa.value&&Na.value&&!qa.value,"w-[calc(100%-var(--left-menu-max-width))] left-[var(--left-menu-max-width)]":!Fa.value&&Na.value&&!qa.value,"!w-full !left-0":qa.value}],style:"transition: all var(--transition-time-02);"},[b(Aa,{class:"border-bottom-1 border-solid border-[var(--top-tool-border-color)] bg-[var(--top-header-bg-color)] dark:border-[var(--el-border-color)]"},null),Ua.value?b(da,{class:"border-bottom-1 border-top-1 border-solid border-[var(--tags-view-border-color)] dark:border-[var(--el-border-color)]"},null):void 0]),b(ma,null,null)]}),[[Ue("loading"),Ha.value]])])]),renderTopLeft:()=>b(te,null,[b("div",{class:"flex items-center bg-[var(--top-header-bg-color)] border-bottom-1 border-solid border-[var(--top-tool-border-color)] dark:border-[var(--el-border-color)]"},[Da.value?b(pa,{class:"hover-trigger !pr-15px"},null):void 0,b(Aa,{class:"flex-1"},null)]),b("div",{class:"absolute top-[var(--logo-height)+1px] left-0 w-full h-[calc(100%-1px-var(--logo-height))] flex"},[b(Zl,{class:"!h-full"},null),b("div",{class:[`${Ra}-content`,"h-[100%]",{"w-[calc(100%-var(--left-menu-min-width))] left-[var(--left-menu-min-width)]":Fa.value,"w-[calc(100%-var(--left-menu-max-width))] left-[var(--left-menu-max-width)]":!Fa.value}],style:"transition: all var(--transition-time-02);"},[H(b($e,{class:[`${Ra}-content-scrollbar`,{"!h-[calc(100%-var(--tags-view-height))] mt-[calc(var(--tags-view-height))]":Na.value&&Ua.value}]},{default:()=>[Ua.value?b(da,{class:["border-bottom-1 border-top-1 border-solid border-[var(--tags-view-border-color)] dark:border-[var(--el-border-color)]",{"!fixed top-0 left-0 z-10":Na.value,"w-[calc(100%-var(--left-menu-min-width))] left-[var(--left-menu-min-width)] mt-[var(--logo-height)]":Fa.value&&Na.value,"w-[calc(100%-var(--left-menu-max-width))] left-[var(--left-menu-max-width)] mt-[var(--logo-height)]":!Fa.value&&Na.value}],style:"transition: width var(--transition-time-02), left var(--transition-time-02);"},null):void 0,b(ma,null,null)]}),[[Ue("loading"),Ha.value]])])])]),renderTop:()=>b(te,null,[b("div",{class:"flex items-center justify-between bg-[var(--top-header-bg-color)] border-bottom-1 border-solid border-[var(--top-tool-border-color)] dark:border-[var(--el-border-color)]"},[Da.value?b(pa,{class:"hover-trigger"},null):void 0,b(Zl,{class:"flex-1 px-10px h-[var(--top-tool-height)]"},null),b(Aa,null,null)]),b("div",{class:[`${Ra}-content`,"h-full w-full"]},[H(b($e,{class:[`${Ra}-content-scrollbar`,{"mt-[var(--tags-view-height)] !pb-[calc(var(--tags-view-height)+var(--app-footer-height))]":Na.value,"pb-[var(--app-footer-height)]":!Na.value}]},{default:()=>[Ua.value?b(da,{class:["border-bottom-1 border-top-1 border-solid border-[var(--tags-view-border-color)] dark:border-[var(--el-border-color)]",{"!fixed w-full top-[var(--top-tool-height)] left-0":Na.value}],style:"transition: width var(--transition-time-02), left var(--transition-time-02);"},null):void 0,b(ma,null,null)]}),[[Ue("loading"),Ha.value]])])]),renderCutMenu:()=>b(te,null,[b("div",{class:"flex items-center bg-[var(--top-header-bg-color)] border-bottom-1 border-solid border-[var(--top-tool-border-color)] dark:border-[var(--el-border-color)]"},[Da.value?b(pa,{class:"hover-trigger !pr-15px"},null):void 0,b(Aa,{class:"flex-1"},null)]),b("div",{class:"absolute top-[var(--logo-height)] left-0 w-full h-[calc(100%-var(--logo-height))] flex"},[b(ta,null,null),b("div",{class:[`${Ra}-content`,"h-[100%]",{"w-[calc(100%-var(--tab-menu-min-width))] left-[var(--tab-menu-min-width)]":Fa.value&&!Wa.value,"w-[calc(100%-var(--tab-menu-max-width))] left-[var(--tab-menu-max-width)]":!Fa.value&&!Wa.value,"w-[calc(100%-var(--tab-menu-min-width)-var(--left-menu-max-width))] ml-[var(--left-menu-max-width)]":Fa.value&&Wa.value,"w-[calc(100%-var(--tab-menu-max-width)-var(--left-menu-max-width))] ml-[var(--left-menu-max-width)]":!Fa.value&&Wa.value}],style:"transition: all var(--transition-time-02);"},[H(b($e,{class:[`${Ra}-content-scrollbar`,{"!h-[calc(100%-var(--tags-view-height))] mt-[calc(var(--tags-view-height))]":Na.value&&Ua.value}]},{default:()=>[Ua.value?b(da,{class:["border-bottom-1 border-top-1 border-solid border-[var(--tags-view-border-color)] dark:border-[var(--el-border-color)]",{"!fixed top-0 left-0 z-10":Na.value,"w-[calc(100%-var(--tab-menu-min-width))] left-[var(--tab-menu-min-width)] mt-[var(--logo-height)]":Fa.value&&Na.value,"w-[calc(100%-var(--tab-menu-max-width))] left-[var(--tab-menu-max-width)] mt-[var(--logo-height)]":!Fa.value&&Na.value,"!fixed top-0 left-[var(--tab-menu-min-width)+var(--left-menu-max-width)] z-10":Na.value&&Wa.value,"w-[calc(100%-var(--tab-menu-min-width)-var(--left-menu-max-width))] left-[var(--tab-menu-min-width)+var(--left-menu-max-width)] mt-[var(--logo-height)]":Fa.value&&Na.value&&Wa.value,"w-[calc(100%-var(--tab-menu-max-width)-var(--left-menu-max-width))] left-[var(--tab-menu-max-width)+var(--left-menu-max-width)] mt-[var(--logo-height)]":!Fa.value&&Na.value&&Wa.value}],style:"transition: width var(--transition-time-02), left var(--transition-time-02);"},null):void 0,b(ma,null,null)]}),[[Ue("loading"),Ha.value]])])])])}),{getPrefixCls:Ka}=ce(),Za=Ka("layout"),Xa=me(),Ya=i((()=>Xa.getMobile)),Ja=i((()=>Xa.getCollapse)),Qa=i((()=>Xa.getLayout)),eo=()=>{Xa.setCollapse(!0)},to=()=>{switch(p(Qa)){case"classic":const{renderClassic:e}=Ga();return e();case"topLeft":const{renderTopLeft:t}=Ga();return t();case"top":const{renderTop:l}=Ga();return l();case"cutMenu":const{renderCutMenu:a}=Ga();return a()}},lo=Je(r({name:"Layout",setup:()=>()=>b("section",{class:[Za,`${Za}__${Qa.value}`,"w-[100%] h-[100%] relative"]},[Ya.value&&!Ja.value?b("div",{class:"absolute top-0 left-0 w-full h-full opacity-30 z-99 bg-[var(--el-color-black)]",onClick:eo},null):void 0,to(),b(el,null,null),b(Nl,null,null)])}),[["__scopeId","data-v-5dd1aa4e"]]);export{lo as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
