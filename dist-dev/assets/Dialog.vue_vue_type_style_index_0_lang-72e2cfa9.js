import{d as e,R as s,aA as o,x as a,o as l,c as t,e as n,aa as r,n as i,a as c,t as d,g as u,w as f,h as m,a5 as p,$ as g,G as b,Z as v,ac as h,cS as y,b7 as x,S as k,r as C,az as $,a8 as R,ai as _,aK as A,a9 as w,i as F,ab as I,ag as H,ah as j,cq as z,X as E,A as M,bc as S,B as L,aG as D,Y as T}from"./index-ec301f65.js";import{u as q,E as B,b as O}from"./el-overlay-b3bea032.js";import{d as P,a as G,b as K,c as U,u as V}from"./use-dialog-3d9bc7ce.js";import{F as N,e as X}from"./el-popper-12ece89c.js";import{c as Y}from"./refs-e3109932.js";import{u as Z}from"./el-button-2b7f8e7c.js";const J=Symbol("dialogInjectionKey"),Q=["aria-label"],W=["id"],ee=e({name:"ElDialogContent"});var se=h(e({...ee,props:P,emits:G,setup(e){const h=e,{t:x}=s(),{Close:k}=y,{dialogRef:C,headerRef:$,bodyId:R,ns:_,style:A}=o(J),{focusTrapRef:w}=o(N),F=Y(w,C),I=a((()=>h.draggable));return q(C,$,I),(e,s)=>(l(),t("div",{ref:c(F),class:i([c(_).b(),c(_).is("fullscreen",e.fullscreen),c(_).is("draggable",c(I)),c(_).is("align-center",e.alignCenter),{[c(_).m("center")]:e.center},e.customClass]),style:v(c(A)),tabindex:"-1"},[n("header",{ref_key:"headerRef",ref:$,class:i(c(_).e("header"))},[r(e.$slots,"header",{},(()=>[n("span",{role:"heading",class:i(c(_).e("title"))},d(e.title),3)])),e.showClose?(l(),t("button",{key:0,"aria-label":c(x)("el.dialog.close"),class:i(c(_).e("headerbtn")),type:"button",onClick:s[0]||(s[0]=s=>e.$emit("close"))},[u(c(g),{class:i(c(_).e("close"))},{default:f((()=>[(l(),m(p(e.closeIcon||c(k))))])),_:1},8,["class"])],10,Q)):b("v-if",!0)],2),n("div",{id:c(R),class:i(c(_).e("body"))},[r(e.$slots,"default")],10,W),e.$slots.footer?(l(),t("footer",{key:0,class:i(c(_).e("footer"))},[r(e.$slots,"footer")],2)):b("v-if",!0)],6))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog-content.vue"]]);const oe=["aria-label","aria-labelledby","aria-describedby"],ae=e({name:"ElDialog",inheritAttrs:!1});const le=H(h(e({...ae,props:K,emits:U,setup(e,{expose:s}){const o=e,t=x();Z({scope:"el-dialog",from:"the title slot",replacement:"the header slot",version:"3.0.0",ref:"https://element-plus.org/en-US/component/dialog.html#slots"},a((()=>!!t.title))),Z({scope:"el-dialog",from:"custom-class",replacement:"class",version:"2.3.0",ref:"https://element-plus.org/en-US/component/dialog.html#attributes",type:"Attribute"},a((()=>!!o.customClass)));const d=k("dialog"),p=C(),g=C(),h=C(),{visible:y,titleId:H,bodyId:j,style:z,overlayDialogStyle:E,rendered:M,zIndex:S,afterEnter:L,afterLeave:D,beforeLeave:T,handleClose:q,onModalClick:P,onOpenAutoFocus:G,onCloseAutoFocus:K,onCloseRequested:U,onFocusoutPrevented:N}=V(o,p);$(J,{dialogRef:p,headerRef:g,bodyId:j,ns:d,rendered:M,style:z});const Y=O(P),Q=a((()=>o.draggable&&!o.fullscreen));return s({visible:y,dialogContentRef:h}),(e,s)=>(l(),m(I,{to:"body",disabled:!e.appendToBody},[u(F,{name:"dialog-fade",onAfterEnter:c(L),onAfterLeave:c(D),onBeforeLeave:c(T),persisted:""},{default:f((()=>[R(u(c(B),{"custom-mask-event":"",mask:e.modal,"overlay-class":e.modalClass,"z-index":c(S)},{default:f((()=>[n("div",{role:"dialog","aria-modal":"true","aria-label":e.title||void 0,"aria-labelledby":e.title?void 0:c(H),"aria-describedby":c(j),class:i(`${c(d).namespace.value}-overlay-dialog`),style:v(c(E)),onClick:s[0]||(s[0]=(...e)=>c(Y).onClick&&c(Y).onClick(...e)),onMousedown:s[1]||(s[1]=(...e)=>c(Y).onMousedown&&c(Y).onMousedown(...e)),onMouseup:s[2]||(s[2]=(...e)=>c(Y).onMouseup&&c(Y).onMouseup(...e))},[u(c(X),{loop:"",trapped:c(y),"focus-start-el":"container",onFocusAfterTrapped:c(G),onFocusAfterReleased:c(K),onFocusoutPrevented:c(N),onReleaseRequested:c(U)},{default:f((()=>[c(M)?(l(),m(se,_({key:0,ref_key:"dialogContentRef",ref:h},e.$attrs,{"custom-class":e.customClass,center:e.center,"align-center":e.alignCenter,"close-icon":e.closeIcon,draggable:c(Q),fullscreen:e.fullscreen,"show-close":e.showClose,title:e.title,onClose:c(q)}),A({header:f((()=>[e.$slots.title?r(e.$slots,"title",{key:1}):r(e.$slots,"header",{key:0,close:c(q),titleId:c(H),titleClass:c(d).e("title")})])),default:f((()=>[r(e.$slots,"default")])),_:2},[e.$slots.footer?{name:"footer",fn:f((()=>[r(e.$slots,"footer")]))}:void 0]),1040,["custom-class","center","align-center","close-icon","draggable","fullscreen","show-close","title","onClose"])):b("v-if",!0)])),_:3},8,["trapped","onFocusAfterTrapped","onFocusAfterReleased","onFocusoutPrevented","onReleaseRequested"])],46,oe)])),_:3},8,["mask","overlay-class","z-index"]),[[w,c(y)]])])),_:3},8,["onAfterEnter","onAfterLeave","onBeforeLeave"])],8,["disabled"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog.vue"]])),te={class:"flex justify-between"},ne=e({__name:"Dialog",props:{modelValue:j.bool.def(!1),title:j.string.def("Dialog"),fullscreen:j.bool.def(!0),maxHeight:j.oneOfType([String,Number]).def("500px")},setup(e){const s=e,o=x(),t=a((()=>{const e=["fullscreen","title","maxHeight"],o={...S(),...s};for(const s in o)-1!==e.indexOf(s)&&delete o[s];return o})),i=C(!1),p=()=>{i.value=!c(i)},g=C(z(s.maxHeight)?`${s.maxHeight}px`:s.maxHeight);E((()=>i.value),(async e=>{if(await T(),e){const e=document.documentElement.offsetHeight;g.value=e-55-60-(o.footer?63:0)+"px"}else g.value=z(s.maxHeight)?`${s.maxHeight}px`:s.maxHeight}),{immediate:!0});const h=a((()=>(console.log(c(g)),{height:c(g)})));return(s,a)=>{const g=M("Icon");return l(),m(c(le),_(c(t),{fullscreen:i.value,"destroy-on-close":"","lock-scroll":"",draggable:"","close-on-click-modal":!1}),A({header:f((()=>[n("div",te,[r(s.$slots,"title",{},(()=>[L(d(e.title),1)])),e.fullscreen?(l(),m(g,{key:0,class:"mr-18px cursor-pointer is-hover mt-2px z-10",icon:i.value?"zmdi:fullscreen-exit":"zmdi:fullscreen",color:"var(--el-color-info)",onClick:p},null,8,["icon"])):b("",!0)])])),default:f((()=>[u(c(D),{style:v(c(h))},{default:f((()=>[r(s.$slots,"default")])),_:3},8,["style"])])),_:2},[c(o).footer?{name:"footer",fn:f((()=>[r(s.$slots,"footer")])),key:"0"}:void 0]),1040,["fullscreen"])}}});export{ne as _};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
