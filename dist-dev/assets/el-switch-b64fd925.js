import{K as e,aF as a,L as t,ar as i,b1 as l,N as n,d as o,aI as s,S as c,x as r,r as u,au as v,X as d,b2 as p,E as f,o as m,c as b,e as y,a as h,n as g,bf as k,h as x,w as I,a5 as C,$ as S,G as V,t as w,g as T,be as _,Z as B,_ as N,ac as j,Y as E,bt as P,av as K,ag as F}from"./index-ec301f65.js";import{i as U}from"./validator-bd939a12.js";import{U as Y,C as Z,I as z}from"./event-5568c9d8.js";import{u as A,a as G}from"./use-form-item-f00b3d1a.js";import{u as L,a as X}from"./use-form-common-props-12176987.js";import{u as $}from"./el-button-2b7f8e7c.js";const q=e({modelValue:{type:[Boolean,String,Number],default:!1},value:{type:[Boolean,String,Number],default:!1},disabled:{type:Boolean,default:!1},width:{type:[String,Number],default:""},inlinePrompt:{type:Boolean,default:!1},activeIcon:{type:a},inactiveIcon:{type:a},activeText:{type:String,default:""},inactiveText:{type:String,default:""},activeColor:{type:String,default:""},inactiveColor:{type:String,default:""},borderColor:{type:String,default:""},activeValue:{type:[Boolean,String,Number],default:!0},inactiveValue:{type:[Boolean,String,Number],default:!1},name:{type:String,default:""},validateEvent:{type:Boolean,default:!0},id:String,loading:{type:Boolean,default:!1},beforeChange:{type:t(Function)},size:{type:String,validator:U},tabindex:{type:[String,Number]}}),D={[Y]:e=>i(e)||l(e)||n(e),[Z]:e=>i(e)||l(e)||n(e),[z]:e=>i(e)||l(e)||n(e)},H=["onClick"],J=["id","aria-checked","aria-disabled","name","true-value","false-value","disabled","tabindex","onKeydown"],M=["aria-hidden"],O=["aria-hidden"],Q=["aria-hidden"],R="ElSwitch",W=o({name:R});const ee=F(j(o({...W,props:q,emits:D,setup(e,{expose:a,emit:t}){const l=e,n=s(),{formItem:o}=A(),j=L(),F=c("switch");$({from:'"value"',replacement:'"model-value" or "v-model"',scope:R,version:"2.3.0",ref:"https://element-plus.org/en-US/component/switch.html#attributes",type:"Attribute"},r((()=>{var e;return!!(null==(e=n.vnode.props)?void 0:e.value)})));const{inputId:U}=G(l,{formItemContext:o}),q=X(r((()=>l.loading))),D=u(!1!==l.modelValue),W=u(),ee=u(),ae=r((()=>[F.b(),F.m(j.value),F.is("disabled",q.value),F.is("checked",le.value)])),te=r((()=>({width:v(l.width)})));d((()=>l.modelValue),(()=>{D.value=!0})),d((()=>l.value),(()=>{D.value=!1}));const ie=r((()=>D.value?l.modelValue:l.value)),le=r((()=>ie.value===l.activeValue));[l.activeValue,l.inactiveValue].includes(ie.value)||(t(Y,l.inactiveValue),t(Z,l.inactiveValue),t(z,l.inactiveValue)),d(le,(e=>{var a;W.value.checked=e,l.validateEvent&&(null==(a=null==o?void 0:o.validate)||a.call(o,"change").catch((e=>p())))}));const ne=()=>{const e=le.value?l.inactiveValue:l.activeValue;t(Y,e),t(Z,e),t(z,e),E((()=>{W.value.checked=le.value}))},oe=()=>{if(q.value)return;const{beforeChange:e}=l;if(!e)return void ne();const a=e();[P(a),i(a)].includes(!0)||K(R,"beforeChange must return type `Promise<boolean>` or `boolean`"),P(a)?a.then((e=>{e&&ne()})).catch((e=>{})):a&&ne()},se=r((()=>F.cssVarBlock({...l.activeColor?{"on-color":l.activeColor}:null,...l.inactiveColor?{"off-color":l.inactiveColor}:null,...l.borderColor?{"border-color":l.borderColor}:null})));return f((()=>{W.value.checked=le.value})),a({focus:()=>{var e,a;null==(a=null==(e=W.value)?void 0:e.focus)||a.call(e)},checked:le}),(e,a)=>(m(),b("div",{class:g(h(ae)),style:B(h(se)),onClick:N(oe,["prevent"])},[y("input",{id:h(U),ref_key:"input",ref:W,class:g(h(F).e("input")),type:"checkbox",role:"switch","aria-checked":h(le),"aria-disabled":h(q),name:e.name,"true-value":e.activeValue,"false-value":e.inactiveValue,disabled:h(q),tabindex:e.tabindex,onChange:ne,onKeydown:k(oe,["enter"])},null,42,J),e.inlinePrompt||!e.inactiveIcon&&!e.inactiveText?V("v-if",!0):(m(),b("span",{key:0,class:g([h(F).e("label"),h(F).em("label","left"),h(F).is("active",!h(le))])},[e.inactiveIcon?(m(),x(h(S),{key:0},{default:I((()=>[(m(),x(C(e.inactiveIcon)))])),_:1})):V("v-if",!0),!e.inactiveIcon&&e.inactiveText?(m(),b("span",{key:1,"aria-hidden":h(le)},w(e.inactiveText),9,M)):V("v-if",!0)],2)),y("span",{ref_key:"core",ref:ee,class:g(h(F).e("core")),style:B(h(te))},[e.inlinePrompt?(m(),b("div",{key:0,class:g(h(F).e("inner"))},[e.activeIcon||e.inactiveIcon?(m(),x(h(S),{key:0,class:g(h(F).is("icon"))},{default:I((()=>[(m(),x(C(h(le)?e.activeIcon:e.inactiveIcon)))])),_:1},8,["class"])):e.activeText||e.inactiveText?(m(),b("span",{key:1,class:g(h(F).is("text")),"aria-hidden":!h(le)},w(h(le)?e.activeText:e.inactiveText),11,O)):V("v-if",!0)],2)):V("v-if",!0),y("div",{class:g(h(F).e("action"))},[e.loading?(m(),x(h(S),{key:0,class:g(h(F).is("loading"))},{default:I((()=>[T(h(_))])),_:1},8,["class"])):V("v-if",!0)],2)],6),e.inlinePrompt||!e.activeIcon&&!e.activeText?V("v-if",!0):(m(),b("span",{key:1,class:g([h(F).e("label"),h(F).em("label","right"),h(F).is("active",h(le))])},[e.activeIcon?(m(),x(h(S),{key:0},{default:I((()=>[(m(),x(C(e.activeIcon)))])),_:1})):V("v-if",!0),!e.activeIcon&&e.activeText?(m(),b("span",{key:1,"aria-hidden":!h(le)},w(e.activeText),9,Q)):V("v-if",!0)],2))],14,H))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/switch/src/switch.vue"]]));export{ee as E};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
